// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/darsppb/darsp.proto

package darsppb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PartnerAddIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartnerAddIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartnerAddIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartnerAddInMultiError, or
// nil if none found.
func (m *PartnerAddIn) ValidateAll() error {
	return m.validate(true)
}

func (m *PartnerAddIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainName

	// no validation rules for ChainUrl

	// no validation rules for CompanyName

	// no validation rules for LicenseNumber

	// no validation rules for ProvinceName

	// no validation rules for CityName

	// no validation rules for DistrictName

	// no validation rules for BusinessAddress

	// no validation rules for LegalName

	// no validation rules for LegalId

	// no validation rules for ContactName

	// no validation rules for ContactEmail

	// no validation rules for ContactMobile

	// no validation rules for ApplyFormFile

	// no validation rules for ConstitutionFile

	// no validation rules for LicenseNumberFile

	// no validation rules for AccountOpeningPermitFile

	// no validation rules for LegalIdFrontFile

	// no validation rules for LegalIdBackFile

	// no validation rules for IcpFile

	// no validation rules for CcrcFile

	// no validation rules for SoftwareCopyrightFile

	// no validation rules for QualificationFile

	// no validation rules for HighTechFile

	// no validation rules for PartnerId

	// no validation rules for AppNo

	// no validation rules for AliasName

	if len(errors) > 0 {
		return PartnerAddInMultiError(errors)
	}

	return nil
}

// PartnerAddInMultiError is an error wrapping multiple validation errors
// returned by PartnerAddIn.ValidateAll() if the designated constraints aren't met.
type PartnerAddInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartnerAddInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartnerAddInMultiError) AllErrors() []error { return m }

// PartnerAddInValidationError is the validation error returned by
// PartnerAddIn.Validate if the designated constraints aren't met.
type PartnerAddInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartnerAddInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartnerAddInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartnerAddInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartnerAddInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartnerAddInValidationError) ErrorName() string { return "PartnerAddInValidationError" }

// Error satisfies the builtin error interface
func (e PartnerAddInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartnerAddIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartnerAddInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartnerAddInValidationError{}

// Validate checks the field values on PartnerAddOut with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartnerAddOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartnerAddOut with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartnerAddOutMultiError, or
// nil if none found.
func (m *PartnerAddOut) ValidateAll() error {
	return m.validate(true)
}

func (m *PartnerAddOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartnerAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartnerAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartnerAddOutValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartnerAddOutMultiError(errors)
	}

	return nil
}

// PartnerAddOutMultiError is an error wrapping multiple validation errors
// returned by PartnerAddOut.ValidateAll() if the designated constraints
// aren't met.
type PartnerAddOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartnerAddOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartnerAddOutMultiError) AllErrors() []error { return m }

// PartnerAddOutValidationError is the validation error returned by
// PartnerAddOut.Validate if the designated constraints aren't met.
type PartnerAddOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartnerAddOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartnerAddOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartnerAddOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartnerAddOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartnerAddOutValidationError) ErrorName() string { return "PartnerAddOutValidationError" }

// Error satisfies the builtin error interface
func (e PartnerAddOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartnerAddOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartnerAddOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartnerAddOutValidationError{}

// Validate checks the field values on PlatformAddIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlatformAddIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatformAddIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlatformAddInMultiError, or
// nil if none found.
func (m *PlatformAddIn) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatformAddIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishPlatformId

	// no validation rules for PartnerId

	// no validation rules for ChainName

	// no validation rules for ChainUrl

	// no validation rules for AliasName

	// no validation rules for IcpEdiCert

	// no validation rules for CompanyName

	// no validation rules for LicenseNumber

	// no validation rules for BusinessAddress

	// no validation rules for LegalName

	// no validation rules for LegalId

	// no validation rules for ContactName

	// no validation rules for ContactEmail

	// no validation rules for ContactMobile

	// no validation rules for LicenseNumberFile

	// no validation rules for IcpEdiCertFile

	// no validation rules for LegalIdFrontFile

	// no validation rules for AppNo

	// no validation rules for LogoUrl

	// no validation rules for SortId

	if len(errors) > 0 {
		return PlatformAddInMultiError(errors)
	}

	return nil
}

// PlatformAddInMultiError is an error wrapping multiple validation errors
// returned by PlatformAddIn.ValidateAll() if the designated constraints
// aren't met.
type PlatformAddInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformAddInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformAddInMultiError) AllErrors() []error { return m }

// PlatformAddInValidationError is the validation error returned by
// PlatformAddIn.Validate if the designated constraints aren't met.
type PlatformAddInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformAddInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformAddInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformAddInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformAddInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformAddInValidationError) ErrorName() string { return "PlatformAddInValidationError" }

// Error satisfies the builtin error interface
func (e PlatformAddInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformAddIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformAddInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformAddInValidationError{}

// Validate checks the field values on PlatformAddOut with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlatformAddOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatformAddOut with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlatformAddOutMultiError,
// or nil if none found.
func (m *PlatformAddOut) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatformAddOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatformAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatformAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatformAddOutValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlatformAddOutMultiError(errors)
	}

	return nil
}

// PlatformAddOutMultiError is an error wrapping multiple validation errors
// returned by PlatformAddOut.ValidateAll() if the designated constraints
// aren't met.
type PlatformAddOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformAddOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformAddOutMultiError) AllErrors() []error { return m }

// PlatformAddOutValidationError is the validation error returned by
// PlatformAddOut.Validate if the designated constraints aren't met.
type PlatformAddOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformAddOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformAddOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformAddOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformAddOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformAddOutValidationError) ErrorName() string { return "PlatformAddOutValidationError" }

// Error satisfies the builtin error interface
func (e PlatformAddOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformAddOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformAddOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformAddOutValidationError{}

// Validate checks the field values on PublisherAddIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublisherAddIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherAddIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublisherAddInMultiError,
// or nil if none found.
func (m *PublisherAddIn) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherAddIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublisherId

	// no validation rules for PartnerId

	// no validation rules for PlatformId

	// no validation rules for ChainName

	// no validation rules for ChainUrl

	// no validation rules for CompanyName

	// no validation rules for LicenseNumber

	// no validation rules for LicenseNumberFile

	// no validation rules for ProvinceName

	// no validation rules for CityName

	// no validation rules for DistrictName

	// no validation rules for BusinessAddress

	// no validation rules for LegalName

	// no validation rules for LegalId

	// no validation rules for LegalIdFrontFile

	// no validation rules for LegalIdBackFile

	// no validation rules for ContactName

	// no validation rules for ContactMobile

	// no validation rules for ContactTel

	// no validation rules for ContactEmail

	if len(errors) > 0 {
		return PublisherAddInMultiError(errors)
	}

	return nil
}

// PublisherAddInMultiError is an error wrapping multiple validation errors
// returned by PublisherAddIn.ValidateAll() if the designated constraints
// aren't met.
type PublisherAddInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherAddInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherAddInMultiError) AllErrors() []error { return m }

// PublisherAddInValidationError is the validation error returned by
// PublisherAddIn.Validate if the designated constraints aren't met.
type PublisherAddInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherAddInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherAddInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherAddInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherAddInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherAddInValidationError) ErrorName() string { return "PublisherAddInValidationError" }

// Error satisfies the builtin error interface
func (e PublisherAddInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherAddIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherAddInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherAddInValidationError{}

// Validate checks the field values on PublisherAddOut with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublisherAddOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherAddOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherAddOutMultiError, or nil if none found.
func (m *PublisherAddOut) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherAddOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublisherAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublisherAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublisherAddOutValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublisherAddOutMultiError(errors)
	}

	return nil
}

// PublisherAddOutMultiError is an error wrapping multiple validation errors
// returned by PublisherAddOut.ValidateAll() if the designated constraints
// aren't met.
type PublisherAddOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherAddOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherAddOutMultiError) AllErrors() []error { return m }

// PublisherAddOutValidationError is the validation error returned by
// PublisherAddOut.Validate if the designated constraints aren't met.
type PublisherAddOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherAddOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherAddOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherAddOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherAddOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherAddOutValidationError) ErrorName() string { return "PublisherAddOutValidationError" }

// Error satisfies the builtin error interface
func (e PublisherAddOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherAddOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherAddOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherAddOutValidationError{}

// Validate checks the field values on AssetRegistrationAddIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetRegistrationAddIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetRegistrationAddIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetRegistrationAddInMultiError, or nil if none found.
func (m *AssetRegistrationAddIn) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetRegistrationAddIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerId

	// no validation rules for PlatformId

	// no validation rules for PublisherId

	// no validation rules for CopyrightType

	if l := utf8.RuneCountInString(m.GetChainName()); l < 1 || l > 64 {
		err := AssetRegistrationAddInValidationError{
			field:  "ChainName",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ContractAddr

	// no validation rules for AssetType

	if l := utf8.RuneCountInString(m.GetAssetName()); l < 1 || l > 128 {
		err := AssetRegistrationAddInValidationError{
			field:  "AssetName",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreativeName

	// no validation rules for CreativeTime

	// no validation rules for FirstPublishedAt

	// no validation rules for IssuePriceMin

	// no validation rules for IssuePriceMax

	// no validation rules for IssueNum

	// no validation rules for CoverImg

	// no validation rules for AuthorizedFile

	// no validation rules for AuthorFile

	// no validation rules for AssetDetailFile

	// no validation rules for RightsDesc

	// no validation rules for AssetDesc

	if len(errors) > 0 {
		return AssetRegistrationAddInMultiError(errors)
	}

	return nil
}

// AssetRegistrationAddInMultiError is an error wrapping multiple validation
// errors returned by AssetRegistrationAddIn.ValidateAll() if the designated
// constraints aren't met.
type AssetRegistrationAddInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetRegistrationAddInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetRegistrationAddInMultiError) AllErrors() []error { return m }

// AssetRegistrationAddInValidationError is the validation error returned by
// AssetRegistrationAddIn.Validate if the designated constraints aren't met.
type AssetRegistrationAddInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetRegistrationAddInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetRegistrationAddInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetRegistrationAddInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetRegistrationAddInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetRegistrationAddInValidationError) ErrorName() string {
	return "AssetRegistrationAddInValidationError"
}

// Error satisfies the builtin error interface
func (e AssetRegistrationAddInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetRegistrationAddIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetRegistrationAddInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetRegistrationAddInValidationError{}

// Validate checks the field values on AssetRegistrationAddOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetRegistrationAddOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetRegistrationAddOut with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetRegistrationAddOutMultiError, or nil if none found.
func (m *AssetRegistrationAddOut) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetRegistrationAddOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetRegistrationAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetRegistrationAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetRegistrationAddOutValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssetRegistrationAddOutMultiError(errors)
	}

	return nil
}

// AssetRegistrationAddOutMultiError is an error wrapping multiple validation
// errors returned by AssetRegistrationAddOut.ValidateAll() if the designated
// constraints aren't met.
type AssetRegistrationAddOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetRegistrationAddOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetRegistrationAddOutMultiError) AllErrors() []error { return m }

// AssetRegistrationAddOutValidationError is the validation error returned by
// AssetRegistrationAddOut.Validate if the designated constraints aren't met.
type AssetRegistrationAddOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetRegistrationAddOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetRegistrationAddOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetRegistrationAddOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetRegistrationAddOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetRegistrationAddOutValidationError) ErrorName() string {
	return "AssetRegistrationAddOutValidationError"
}

// Error satisfies the builtin error interface
func (e AssetRegistrationAddOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetRegistrationAddOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetRegistrationAddOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetRegistrationAddOutValidationError{}

// Validate checks the field values on AssetReportGroupAddIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetReportGroupAddIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportGroupAddIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportGroupAddInMultiError, or nil if none found.
func (m *AssetReportGroupAddIn) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportGroupAddIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistrationId

	// no validation rules for AssetIconType

	// no validation rules for AssetIcon

	if len(errors) > 0 {
		return AssetReportGroupAddInMultiError(errors)
	}

	return nil
}

// AssetReportGroupAddInMultiError is an error wrapping multiple validation
// errors returned by AssetReportGroupAddIn.ValidateAll() if the designated
// constraints aren't met.
type AssetReportGroupAddInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportGroupAddInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportGroupAddInMultiError) AllErrors() []error { return m }

// AssetReportGroupAddInValidationError is the validation error returned by
// AssetReportGroupAddIn.Validate if the designated constraints aren't met.
type AssetReportGroupAddInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportGroupAddInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportGroupAddInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportGroupAddInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportGroupAddInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportGroupAddInValidationError) ErrorName() string {
	return "AssetReportGroupAddInValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportGroupAddInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportGroupAddIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportGroupAddInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportGroupAddInValidationError{}

// Validate checks the field values on AssetReportGroupAddOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetReportGroupAddOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportGroupAddOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportGroupAddOutMultiError, or nil if none found.
func (m *AssetReportGroupAddOut) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportGroupAddOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetReportGroupAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetReportGroupAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetReportGroupAddOutValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssetReportGroupAddOutMultiError(errors)
	}

	return nil
}

// AssetReportGroupAddOutMultiError is an error wrapping multiple validation
// errors returned by AssetReportGroupAddOut.ValidateAll() if the designated
// constraints aren't met.
type AssetReportGroupAddOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportGroupAddOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportGroupAddOutMultiError) AllErrors() []error { return m }

// AssetReportGroupAddOutValidationError is the validation error returned by
// AssetReportGroupAddOut.Validate if the designated constraints aren't met.
type AssetReportGroupAddOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportGroupAddOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportGroupAddOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportGroupAddOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportGroupAddOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportGroupAddOutValidationError) ErrorName() string {
	return "AssetReportGroupAddOutValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportGroupAddOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportGroupAddOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportGroupAddOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportGroupAddOutValidationError{}

// Validate checks the field values on AssetReportAddIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AssetReportAddIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportAddIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportAddInMultiError, or nil if none found.
func (m *AssetReportAddIn) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportAddIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistrationId

	// no validation rules for AssetRgid

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetReportAddInValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetReportAddInValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetReportAddInValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetReportAddInMultiError(errors)
	}

	return nil
}

// AssetReportAddInMultiError is an error wrapping multiple validation errors
// returned by AssetReportAddIn.ValidateAll() if the designated constraints
// aren't met.
type AssetReportAddInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportAddInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportAddInMultiError) AllErrors() []error { return m }

// AssetReportAddInValidationError is the validation error returned by
// AssetReportAddIn.Validate if the designated constraints aren't met.
type AssetReportAddInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportAddInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportAddInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportAddInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportAddInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportAddInValidationError) ErrorName() string { return "AssetReportAddInValidationError" }

// Error satisfies the builtin error interface
func (e AssetReportAddInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportAddIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportAddInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportAddInValidationError{}

// Validate checks the field values on AssetReportAddData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetReportAddData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportAddData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportAddDataMultiError, or nil if none found.
func (m *AssetReportAddData) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportAddData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserPhone

	// no validation rules for UserName

	// no validation rules for UserIdCard

	// no validation rules for UserAddr

	// no validation rules for AssetNo

	// no validation rules for AssetIcon

	// no validation rules for AssetType

	// no validation rules for IssuePrice

	// no validation rules for MintTime

	// no validation rules for BcbUri

	// no validation rules for ChainUri

	// no validation rules for TokenId

	for idx, item := range m.GetChainList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetReportAddDataValidationError{
						field:  fmt.Sprintf("ChainList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetReportAddDataValidationError{
						field:  fmt.Sprintf("ChainList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetReportAddDataValidationError{
					field:  fmt.Sprintf("ChainList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetReportAddDataMultiError(errors)
	}

	return nil
}

// AssetReportAddDataMultiError is an error wrapping multiple validation errors
// returned by AssetReportAddData.ValidateAll() if the designated constraints
// aren't met.
type AssetReportAddDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportAddDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportAddDataMultiError) AllErrors() []error { return m }

// AssetReportAddDataValidationError is the validation error returned by
// AssetReportAddData.Validate if the designated constraints aren't met.
type AssetReportAddDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportAddDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportAddDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportAddDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportAddDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportAddDataValidationError) ErrorName() string {
	return "AssetReportAddDataValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportAddDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportAddData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportAddDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportAddDataValidationError{}

// Validate checks the field values on AssetReportTransferIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetReportTransferIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportTransferIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportTransferInMultiError, or nil if none found.
func (m *AssetReportTransferIn) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportTransferIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistrationId

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetReportTransferInValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetReportTransferInValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetReportTransferInValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetReportTransferInMultiError(errors)
	}

	return nil
}

// AssetReportTransferInMultiError is an error wrapping multiple validation
// errors returned by AssetReportTransferIn.ValidateAll() if the designated
// constraints aren't met.
type AssetReportTransferInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportTransferInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportTransferInMultiError) AllErrors() []error { return m }

// AssetReportTransferInValidationError is the validation error returned by
// AssetReportTransferIn.Validate if the designated constraints aren't met.
type AssetReportTransferInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportTransferInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportTransferInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportTransferInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportTransferInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportTransferInValidationError) ErrorName() string {
	return "AssetReportTransferInValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportTransferInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportTransferIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportTransferInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportTransferInValidationError{}

// Validate checks the field values on AssetReportTransferData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetReportTransferData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportTransferData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportTransferDataMultiError, or nil if none found.
func (m *AssetReportTransferData) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportTransferData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ToUserPhone

	// no validation rules for ToUserName

	// no validation rules for ToUserIdCard

	// no validation rules for ToUserAddr

	// no validation rules for IssuePrice

	// no validation rules for TransferTime

	// no validation rules for TokenId

	if len(errors) > 0 {
		return AssetReportTransferDataMultiError(errors)
	}

	return nil
}

// AssetReportTransferDataMultiError is an error wrapping multiple validation
// errors returned by AssetReportTransferData.ValidateAll() if the designated
// constraints aren't met.
type AssetReportTransferDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportTransferDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportTransferDataMultiError) AllErrors() []error { return m }

// AssetReportTransferDataValidationError is the validation error returned by
// AssetReportTransferData.Validate if the designated constraints aren't met.
type AssetReportTransferDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportTransferDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportTransferDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportTransferDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportTransferDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportTransferDataValidationError) ErrorName() string {
	return "AssetReportTransferDataValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportTransferDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportTransferData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportTransferDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportTransferDataValidationError{}

// Validate checks the field values on AssetReportTransferOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetReportTransferOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportTransferOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportTransferOutMultiError, or nil if none found.
func (m *AssetReportTransferOut) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportTransferOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetReportTransferOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetReportTransferOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetReportTransferOutValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssetReportTransferOutMultiError(errors)
	}

	return nil
}

// AssetReportTransferOutMultiError is an error wrapping multiple validation
// errors returned by AssetReportTransferOut.ValidateAll() if the designated
// constraints aren't met.
type AssetReportTransferOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportTransferOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportTransferOutMultiError) AllErrors() []error { return m }

// AssetReportTransferOutValidationError is the validation error returned by
// AssetReportTransferOut.Validate if the designated constraints aren't met.
type AssetReportTransferOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportTransferOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportTransferOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportTransferOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportTransferOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportTransferOutValidationError) ErrorName() string {
	return "AssetReportTransferOutValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportTransferOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportTransferOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportTransferOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportTransferOutValidationError{}

// Validate checks the field values on AssetReportChainData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetReportChainData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportChainData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportChainDataMultiError, or nil if none found.
func (m *AssetReportChainData) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportChainData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainType

	// no validation rules for ChainTxId

	// no validation rules for ChainBlockNumber

	// no validation rules for ChainTime

	if len(errors) > 0 {
		return AssetReportChainDataMultiError(errors)
	}

	return nil
}

// AssetReportChainDataMultiError is an error wrapping multiple validation
// errors returned by AssetReportChainData.ValidateAll() if the designated
// constraints aren't met.
type AssetReportChainDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportChainDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportChainDataMultiError) AllErrors() []error { return m }

// AssetReportChainDataValidationError is the validation error returned by
// AssetReportChainData.Validate if the designated constraints aren't met.
type AssetReportChainDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportChainDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportChainDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportChainDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportChainDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportChainDataValidationError) ErrorName() string {
	return "AssetReportChainDataValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportChainDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportChainData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportChainDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportChainDataValidationError{}

// Validate checks the field values on AssetReportAddOut with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AssetReportAddOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportAddOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportAddOutMultiError, or nil if none found.
func (m *AssetReportAddOut) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportAddOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetReportAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetReportAddOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetReportAddOutValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssetReportAddOutMultiError(errors)
	}

	return nil
}

// AssetReportAddOutMultiError is an error wrapping multiple validation errors
// returned by AssetReportAddOut.ValidateAll() if the designated constraints
// aren't met.
type AssetReportAddOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportAddOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportAddOutMultiError) AllErrors() []error { return m }

// AssetReportAddOutValidationError is the validation error returned by
// AssetReportAddOut.Validate if the designated constraints aren't met.
type AssetReportAddOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportAddOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportAddOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportAddOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportAddOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportAddOutValidationError) ErrorName() string {
	return "AssetReportAddOutValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportAddOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportAddOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportAddOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportAddOutValidationError{}

// Validate checks the field values on PartnerAddOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartnerAddOut_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartnerAddOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartnerAddOut_DataMultiError, or nil if none found.
func (m *PartnerAddOut_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *PartnerAddOut_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerId

	if len(errors) > 0 {
		return PartnerAddOut_DataMultiError(errors)
	}

	return nil
}

// PartnerAddOut_DataMultiError is an error wrapping multiple validation errors
// returned by PartnerAddOut_Data.ValidateAll() if the designated constraints
// aren't met.
type PartnerAddOut_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartnerAddOut_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartnerAddOut_DataMultiError) AllErrors() []error { return m }

// PartnerAddOut_DataValidationError is the validation error returned by
// PartnerAddOut_Data.Validate if the designated constraints aren't met.
type PartnerAddOut_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartnerAddOut_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartnerAddOut_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartnerAddOut_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartnerAddOut_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartnerAddOut_DataValidationError) ErrorName() string {
	return "PartnerAddOut_DataValidationError"
}

// Error satisfies the builtin error interface
func (e PartnerAddOut_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartnerAddOut_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartnerAddOut_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartnerAddOut_DataValidationError{}

// Validate checks the field values on PlatformAddOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatformAddOut_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatformAddOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatformAddOut_DataMultiError, or nil if none found.
func (m *PlatformAddOut_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatformAddOut_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishPlatformId

	if len(errors) > 0 {
		return PlatformAddOut_DataMultiError(errors)
	}

	return nil
}

// PlatformAddOut_DataMultiError is an error wrapping multiple validation
// errors returned by PlatformAddOut_Data.ValidateAll() if the designated
// constraints aren't met.
type PlatformAddOut_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformAddOut_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformAddOut_DataMultiError) AllErrors() []error { return m }

// PlatformAddOut_DataValidationError is the validation error returned by
// PlatformAddOut_Data.Validate if the designated constraints aren't met.
type PlatformAddOut_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformAddOut_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformAddOut_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformAddOut_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformAddOut_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformAddOut_DataValidationError) ErrorName() string {
	return "PlatformAddOut_DataValidationError"
}

// Error satisfies the builtin error interface
func (e PlatformAddOut_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformAddOut_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformAddOut_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformAddOut_DataValidationError{}

// Validate checks the field values on PublisherAddOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublisherAddOut_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherAddOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherAddOut_DataMultiError, or nil if none found.
func (m *PublisherAddOut_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherAddOut_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublisherId

	if len(errors) > 0 {
		return PublisherAddOut_DataMultiError(errors)
	}

	return nil
}

// PublisherAddOut_DataMultiError is an error wrapping multiple validation
// errors returned by PublisherAddOut_Data.ValidateAll() if the designated
// constraints aren't met.
type PublisherAddOut_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherAddOut_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherAddOut_DataMultiError) AllErrors() []error { return m }

// PublisherAddOut_DataValidationError is the validation error returned by
// PublisherAddOut_Data.Validate if the designated constraints aren't met.
type PublisherAddOut_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherAddOut_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherAddOut_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherAddOut_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherAddOut_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherAddOut_DataValidationError) ErrorName() string {
	return "PublisherAddOut_DataValidationError"
}

// Error satisfies the builtin error interface
func (e PublisherAddOut_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherAddOut_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherAddOut_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherAddOut_DataValidationError{}

// Validate checks the field values on AssetRegistrationAddOut_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetRegistrationAddOut_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetRegistrationAddOut_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetRegistrationAddOut_DataMultiError, or nil if none found.
func (m *AssetRegistrationAddOut_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetRegistrationAddOut_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AssetRegistrationAddOut_DataMultiError(errors)
	}

	return nil
}

// AssetRegistrationAddOut_DataMultiError is an error wrapping multiple
// validation errors returned by AssetRegistrationAddOut_Data.ValidateAll() if
// the designated constraints aren't met.
type AssetRegistrationAddOut_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetRegistrationAddOut_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetRegistrationAddOut_DataMultiError) AllErrors() []error { return m }

// AssetRegistrationAddOut_DataValidationError is the validation error returned
// by AssetRegistrationAddOut_Data.Validate if the designated constraints
// aren't met.
type AssetRegistrationAddOut_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetRegistrationAddOut_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetRegistrationAddOut_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetRegistrationAddOut_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetRegistrationAddOut_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetRegistrationAddOut_DataValidationError) ErrorName() string {
	return "AssetRegistrationAddOut_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AssetRegistrationAddOut_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetRegistrationAddOut_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetRegistrationAddOut_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetRegistrationAddOut_DataValidationError{}

// Validate checks the field values on AssetReportGroupAddOut_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetReportGroupAddOut_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportGroupAddOut_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportGroupAddOut_DataMultiError, or nil if none found.
func (m *AssetReportGroupAddOut_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportGroupAddOut_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetRgid

	if len(errors) > 0 {
		return AssetReportGroupAddOut_DataMultiError(errors)
	}

	return nil
}

// AssetReportGroupAddOut_DataMultiError is an error wrapping multiple
// validation errors returned by AssetReportGroupAddOut_Data.ValidateAll() if
// the designated constraints aren't met.
type AssetReportGroupAddOut_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportGroupAddOut_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportGroupAddOut_DataMultiError) AllErrors() []error { return m }

// AssetReportGroupAddOut_DataValidationError is the validation error returned
// by AssetReportGroupAddOut_Data.Validate if the designated constraints
// aren't met.
type AssetReportGroupAddOut_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportGroupAddOut_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportGroupAddOut_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportGroupAddOut_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportGroupAddOut_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportGroupAddOut_DataValidationError) ErrorName() string {
	return "AssetReportGroupAddOut_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportGroupAddOut_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportGroupAddOut_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportGroupAddOut_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportGroupAddOut_DataValidationError{}

// Validate checks the field values on AssetReportTransferOut_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetReportTransferOut_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportTransferOut_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportTransferOut_DataMultiError, or nil if none found.
func (m *AssetReportTransferOut_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportTransferOut_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AssetReportTransferOut_DataMultiError(errors)
	}

	return nil
}

// AssetReportTransferOut_DataMultiError is an error wrapping multiple
// validation errors returned by AssetReportTransferOut_Data.ValidateAll() if
// the designated constraints aren't met.
type AssetReportTransferOut_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportTransferOut_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportTransferOut_DataMultiError) AllErrors() []error { return m }

// AssetReportTransferOut_DataValidationError is the validation error returned
// by AssetReportTransferOut_Data.Validate if the designated constraints
// aren't met.
type AssetReportTransferOut_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportTransferOut_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportTransferOut_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportTransferOut_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportTransferOut_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportTransferOut_DataValidationError) ErrorName() string {
	return "AssetReportTransferOut_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportTransferOut_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportTransferOut_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportTransferOut_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportTransferOut_DataValidationError{}

// Validate checks the field values on AssetReportAddOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetReportAddOut_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetReportAddOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetReportAddOut_DataMultiError, or nil if none found.
func (m *AssetReportAddOut_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetReportAddOut_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AssetReportAddOut_DataMultiError(errors)
	}

	return nil
}

// AssetReportAddOut_DataMultiError is an error wrapping multiple validation
// errors returned by AssetReportAddOut_Data.ValidateAll() if the designated
// constraints aren't met.
type AssetReportAddOut_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetReportAddOut_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetReportAddOut_DataMultiError) AllErrors() []error { return m }

// AssetReportAddOut_DataValidationError is the validation error returned by
// AssetReportAddOut_Data.Validate if the designated constraints aren't met.
type AssetReportAddOut_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetReportAddOut_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetReportAddOut_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetReportAddOut_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetReportAddOut_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetReportAddOut_DataValidationError) ErrorName() string {
	return "AssetReportAddOut_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AssetReportAddOut_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetReportAddOut_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetReportAddOut_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetReportAddOut_DataValidationError{}
