// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/darsppb/darsp.proto

package darsppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DarspService_PartnerApply_FullMethodName           = "/daop.pb.darsppb.DarspService/PartnerApply"
	DarspService_PlatformApply_FullMethodName          = "/daop.pb.darsppb.DarspService/PlatformApply"
	DarspService_PublisherApply_FullMethodName         = "/daop.pb.darsppb.DarspService/PublisherApply"
	DarspService_AssetRegistrationApply_FullMethodName = "/daop.pb.darsppb.DarspService/AssetRegistrationApply"
	DarspService_AssetReportGroupAdd_FullMethodName    = "/daop.pb.darsppb.DarspService/AssetReportGroupAdd"
	DarspService_AssetReportAdd_FullMethodName         = "/daop.pb.darsppb.DarspService/AssetReportAdd"
	DarspService_AssetReportTransfer_FullMethodName    = "/daop.pb.darsppb.DarspService/AssetReportTransfer"
)

// DarspServiceClient is the client API for DarspService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DarspServiceClient interface {
	// PartnerApply 申请服务网点
	PartnerApply(ctx context.Context, in *PartnerAddIn, opts ...grpc.CallOption) (*PartnerAddOut, error)
	// PlatformApply 申请发行平台
	PlatformApply(ctx context.Context, in *PlatformAddIn, opts ...grpc.CallOption) (*PlatformAddOut, error)
	// PublisherApply 申请发行商
	PublisherApply(ctx context.Context, in *PublisherAddIn, opts ...grpc.CallOption) (*PublisherAddOut, error)
	// AssetRegistrationApply 数字资产登记申请
	AssetRegistrationApply(ctx context.Context, in *AssetRegistrationAddIn, opts ...grpc.CallOption) (*AssetRegistrationAddOut, error)
	// AssetReportGroupAdd 数字资产数据上报组创建
	AssetReportGroupAdd(ctx context.Context, in *AssetReportGroupAddIn, opts ...grpc.CallOption) (*AssetReportGroupAddOut, error)
	// AssetReportAdd 数字资产数据上报
	AssetReportAdd(ctx context.Context, in *AssetReportAddIn, opts ...grpc.CallOption) (*AssetReportAddOut, error)
	// AssetReportTransfer 数字资产数据交易上报
	AssetReportTransfer(ctx context.Context, in *AssetReportTransferIn, opts ...grpc.CallOption) (*AssetReportTransferOut, error)
}

type darspServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDarspServiceClient(cc grpc.ClientConnInterface) DarspServiceClient {
	return &darspServiceClient{cc}
}

func (c *darspServiceClient) PartnerApply(ctx context.Context, in *PartnerAddIn, opts ...grpc.CallOption) (*PartnerAddOut, error) {
	out := new(PartnerAddOut)
	err := c.cc.Invoke(ctx, DarspService_PartnerApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darspServiceClient) PlatformApply(ctx context.Context, in *PlatformAddIn, opts ...grpc.CallOption) (*PlatformAddOut, error) {
	out := new(PlatformAddOut)
	err := c.cc.Invoke(ctx, DarspService_PlatformApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darspServiceClient) PublisherApply(ctx context.Context, in *PublisherAddIn, opts ...grpc.CallOption) (*PublisherAddOut, error) {
	out := new(PublisherAddOut)
	err := c.cc.Invoke(ctx, DarspService_PublisherApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darspServiceClient) AssetRegistrationApply(ctx context.Context, in *AssetRegistrationAddIn, opts ...grpc.CallOption) (*AssetRegistrationAddOut, error) {
	out := new(AssetRegistrationAddOut)
	err := c.cc.Invoke(ctx, DarspService_AssetRegistrationApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darspServiceClient) AssetReportGroupAdd(ctx context.Context, in *AssetReportGroupAddIn, opts ...grpc.CallOption) (*AssetReportGroupAddOut, error) {
	out := new(AssetReportGroupAddOut)
	err := c.cc.Invoke(ctx, DarspService_AssetReportGroupAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darspServiceClient) AssetReportAdd(ctx context.Context, in *AssetReportAddIn, opts ...grpc.CallOption) (*AssetReportAddOut, error) {
	out := new(AssetReportAddOut)
	err := c.cc.Invoke(ctx, DarspService_AssetReportAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darspServiceClient) AssetReportTransfer(ctx context.Context, in *AssetReportTransferIn, opts ...grpc.CallOption) (*AssetReportTransferOut, error) {
	out := new(AssetReportTransferOut)
	err := c.cc.Invoke(ctx, DarspService_AssetReportTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DarspServiceServer is the server API for DarspService service.
// All implementations should embed UnimplementedDarspServiceServer
// for forward compatibility
type DarspServiceServer interface {
	// PartnerApply 申请服务网点
	PartnerApply(context.Context, *PartnerAddIn) (*PartnerAddOut, error)
	// PlatformApply 申请发行平台
	PlatformApply(context.Context, *PlatformAddIn) (*PlatformAddOut, error)
	// PublisherApply 申请发行商
	PublisherApply(context.Context, *PublisherAddIn) (*PublisherAddOut, error)
	// AssetRegistrationApply 数字资产登记申请
	AssetRegistrationApply(context.Context, *AssetRegistrationAddIn) (*AssetRegistrationAddOut, error)
	// AssetReportGroupAdd 数字资产数据上报组创建
	AssetReportGroupAdd(context.Context, *AssetReportGroupAddIn) (*AssetReportGroupAddOut, error)
	// AssetReportAdd 数字资产数据上报
	AssetReportAdd(context.Context, *AssetReportAddIn) (*AssetReportAddOut, error)
	// AssetReportTransfer 数字资产数据交易上报
	AssetReportTransfer(context.Context, *AssetReportTransferIn) (*AssetReportTransferOut, error)
}

// UnimplementedDarspServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDarspServiceServer struct {
}

func (UnimplementedDarspServiceServer) PartnerApply(context.Context, *PartnerAddIn) (*PartnerAddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartnerApply not implemented")
}
func (UnimplementedDarspServiceServer) PlatformApply(context.Context, *PlatformAddIn) (*PlatformAddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformApply not implemented")
}
func (UnimplementedDarspServiceServer) PublisherApply(context.Context, *PublisherAddIn) (*PublisherAddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublisherApply not implemented")
}
func (UnimplementedDarspServiceServer) AssetRegistrationApply(context.Context, *AssetRegistrationAddIn) (*AssetRegistrationAddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetRegistrationApply not implemented")
}
func (UnimplementedDarspServiceServer) AssetReportGroupAdd(context.Context, *AssetReportGroupAddIn) (*AssetReportGroupAddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetReportGroupAdd not implemented")
}
func (UnimplementedDarspServiceServer) AssetReportAdd(context.Context, *AssetReportAddIn) (*AssetReportAddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetReportAdd not implemented")
}
func (UnimplementedDarspServiceServer) AssetReportTransfer(context.Context, *AssetReportTransferIn) (*AssetReportTransferOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetReportTransfer not implemented")
}

// UnsafeDarspServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DarspServiceServer will
// result in compilation errors.
type UnsafeDarspServiceServer interface {
	mustEmbedUnimplementedDarspServiceServer()
}

func RegisterDarspServiceServer(s grpc.ServiceRegistrar, srv DarspServiceServer) {
	s.RegisterService(&DarspService_ServiceDesc, srv)
}

func _DarspService_PartnerApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerAddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarspServiceServer).PartnerApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DarspService_PartnerApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarspServiceServer).PartnerApply(ctx, req.(*PartnerAddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarspService_PlatformApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformAddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarspServiceServer).PlatformApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DarspService_PlatformApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarspServiceServer).PlatformApply(ctx, req.(*PlatformAddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarspService_PublisherApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherAddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarspServiceServer).PublisherApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DarspService_PublisherApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarspServiceServer).PublisherApply(ctx, req.(*PublisherAddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarspService_AssetRegistrationApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRegistrationAddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarspServiceServer).AssetRegistrationApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DarspService_AssetRegistrationApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarspServiceServer).AssetRegistrationApply(ctx, req.(*AssetRegistrationAddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarspService_AssetReportGroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetReportGroupAddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarspServiceServer).AssetReportGroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DarspService_AssetReportGroupAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarspServiceServer).AssetReportGroupAdd(ctx, req.(*AssetReportGroupAddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarspService_AssetReportAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetReportAddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarspServiceServer).AssetReportAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DarspService_AssetReportAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarspServiceServer).AssetReportAdd(ctx, req.(*AssetReportAddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarspService_AssetReportTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetReportTransferIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarspServiceServer).AssetReportTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DarspService_AssetReportTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarspServiceServer).AssetReportTransfer(ctx, req.(*AssetReportTransferIn))
	}
	return interceptor(ctx, in, info, handler)
}

// DarspService_ServiceDesc is the grpc.ServiceDesc for DarspService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DarspService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daop.pb.darsppb.DarspService",
	HandlerType: (*DarspServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PartnerApply",
			Handler:    _DarspService_PartnerApply_Handler,
		},
		{
			MethodName: "PlatformApply",
			Handler:    _DarspService_PlatformApply_Handler,
		},
		{
			MethodName: "PublisherApply",
			Handler:    _DarspService_PublisherApply_Handler,
		},
		{
			MethodName: "AssetRegistrationApply",
			Handler:    _DarspService_AssetRegistrationApply_Handler,
		},
		{
			MethodName: "AssetReportGroupAdd",
			Handler:    _DarspService_AssetReportGroupAdd_Handler,
		},
		{
			MethodName: "AssetReportAdd",
			Handler:    _DarspService_AssetReportAdd_Handler,
		},
		{
			MethodName: "AssetReportTransfer",
			Handler:    _DarspService_AssetReportTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/darsppb/darsp.proto",
}
