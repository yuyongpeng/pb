// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/darsppb/darsp.proto

package darsppb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/httpbody"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartnerAddIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName                string   `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`                                                   // 链名称
	ChainUrl                 string   `protobuf:"bytes,2,opt,name=chain_url,json=chainUrl,proto3" json:"chain_url,omitempty"`                                                      // 链地址
	CompanyName              string   `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`                                             // 企业名称
	LicenseNumber            string   `protobuf:"bytes,4,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`                                       // 营业执照号
	ProvinceName             string   `protobuf:"bytes,5,opt,name=province_name,json=provinceName,proto3" json:"province_name,omitempty"`                                          // 省份名称
	CityName                 string   `protobuf:"bytes,6,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`                                                      // 市名称
	DistrictName             string   `protobuf:"bytes,7,opt,name=district_name,json=districtName,proto3" json:"district_name,omitempty"`                                          // 地区名称
	BusinessAddress          string   `protobuf:"bytes,8,opt,name=business_address,json=businessAddress,proto3" json:"business_address,omitempty"`                                 // 经营地址(除省市区外的地址)
	LegalName                string   `protobuf:"bytes,9,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`                                                   // 法人姓名
	LegalId                  string   `protobuf:"bytes,10,opt,name=legal_id,json=legalId,proto3" json:"legal_id,omitempty"`                                                        // 法人身份证
	ContactName              string   `protobuf:"bytes,11,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`                                            // 联系人姓名
	ContactEmail             string   `protobuf:"bytes,12,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`                                         // 联系人邮箱
	ContactMobile            string   `protobuf:"bytes,13,opt,name=contact_mobile,json=contactMobile,proto3" json:"contact_mobile,omitempty"`                                      // 联系人手机
	ApplyFormFile            string   `protobuf:"bytes,14,opt,name=apply_form_file,json=applyFormFile,proto3" json:"apply_form_file,omitempty"`                                    // 网点申请表
	ConstitutionFile         string   `protobuf:"bytes,15,opt,name=constitution_file,json=constitutionFile,proto3" json:"constitution_file,omitempty"`                             // 网点申请表
	LicenseNumberFile        string   `protobuf:"bytes,16,opt,name=license_number_file,json=licenseNumberFile,proto3" json:"license_number_file,omitempty"`                        // 营业执照(网址)
	AccountOpeningPermitFile string   `protobuf:"bytes,17,opt,name=account_opening_permit_file,json=accountOpeningPermitFile,proto3" json:"account_opening_permit_file,omitempty"` // 网点申请表
	LegalIdFrontFile         string   `protobuf:"bytes,18,opt,name=legal_id_front_file,json=legalIdFrontFile,proto3" json:"legal_id_front_file,omitempty"`                         // 法人身份证正面图片(网址)
	LegalIdBackFile          string   `protobuf:"bytes,19,opt,name=legal_id_back_file,json=legalIdBackFile,proto3" json:"legal_id_back_file,omitempty"`                            // 法人身份证反面图片(网址)
	IcpFile                  string   `protobuf:"bytes,20,opt,name=icp_file,json=icpFile,proto3" json:"icp_file,omitempty"`                                                        // 网点申请表
	CcrcFile                 string   `protobuf:"bytes,21,opt,name=ccrc_file,json=ccrcFile,proto3" json:"ccrc_file,omitempty"`                                                     // 网点申请表
	SoftwareCopyrightFile    string   `protobuf:"bytes,22,opt,name=software_copyright_file,json=softwareCopyrightFile,proto3" json:"software_copyright_file,omitempty"`            // 网点申请表
	QualificationFile        string   `protobuf:"bytes,23,opt,name=qualification_file,json=qualificationFile,proto3" json:"qualification_file,omitempty"`                          // 网点申请表
	HighTechFile             string   `protobuf:"bytes,24,opt,name=high_tech_file,json=highTechFile,proto3" json:"high_tech_file,omitempty"`                                       // 网点申请表
	CaseFiles                []string `protobuf:"bytes,25,rep,name=case_files,json=caseFiles,proto3" json:"case_files,omitempty"`                                                  // 网点申请表
	ExtraFiles               []string `protobuf:"bytes,26,rep,name=extra_files,json=extraFiles,proto3" json:"extra_files,omitempty"`                                               // 补充材料
	PartnerId                uint32   `protobuf:"varint,28,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`                                                 // 服务网点ID
	AppNo                    string   `protobuf:"bytes,29,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`                                                              // appID
	AuditExtraFiles          []string `protobuf:"bytes,30,rep,name=audit_extra_files,json=auditExtraFiles,proto3" json:"audit_extra_files,omitempty"`                              // 审核补充材料(网址)
	AliasName                string   `protobuf:"bytes,50,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`                                                  // 企业简称
}

func (x *PartnerAddIn) Reset() {
	*x = PartnerAddIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerAddIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerAddIn) ProtoMessage() {}

func (x *PartnerAddIn) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerAddIn.ProtoReflect.Descriptor instead.
func (*PartnerAddIn) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{0}
}

func (x *PartnerAddIn) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *PartnerAddIn) GetChainUrl() string {
	if x != nil {
		return x.ChainUrl
	}
	return ""
}

func (x *PartnerAddIn) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *PartnerAddIn) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *PartnerAddIn) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *PartnerAddIn) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *PartnerAddIn) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *PartnerAddIn) GetBusinessAddress() string {
	if x != nil {
		return x.BusinessAddress
	}
	return ""
}

func (x *PartnerAddIn) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *PartnerAddIn) GetLegalId() string {
	if x != nil {
		return x.LegalId
	}
	return ""
}

func (x *PartnerAddIn) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *PartnerAddIn) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *PartnerAddIn) GetContactMobile() string {
	if x != nil {
		return x.ContactMobile
	}
	return ""
}

func (x *PartnerAddIn) GetApplyFormFile() string {
	if x != nil {
		return x.ApplyFormFile
	}
	return ""
}

func (x *PartnerAddIn) GetConstitutionFile() string {
	if x != nil {
		return x.ConstitutionFile
	}
	return ""
}

func (x *PartnerAddIn) GetLicenseNumberFile() string {
	if x != nil {
		return x.LicenseNumberFile
	}
	return ""
}

func (x *PartnerAddIn) GetAccountOpeningPermitFile() string {
	if x != nil {
		return x.AccountOpeningPermitFile
	}
	return ""
}

func (x *PartnerAddIn) GetLegalIdFrontFile() string {
	if x != nil {
		return x.LegalIdFrontFile
	}
	return ""
}

func (x *PartnerAddIn) GetLegalIdBackFile() string {
	if x != nil {
		return x.LegalIdBackFile
	}
	return ""
}

func (x *PartnerAddIn) GetIcpFile() string {
	if x != nil {
		return x.IcpFile
	}
	return ""
}

func (x *PartnerAddIn) GetCcrcFile() string {
	if x != nil {
		return x.CcrcFile
	}
	return ""
}

func (x *PartnerAddIn) GetSoftwareCopyrightFile() string {
	if x != nil {
		return x.SoftwareCopyrightFile
	}
	return ""
}

func (x *PartnerAddIn) GetQualificationFile() string {
	if x != nil {
		return x.QualificationFile
	}
	return ""
}

func (x *PartnerAddIn) GetHighTechFile() string {
	if x != nil {
		return x.HighTechFile
	}
	return ""
}

func (x *PartnerAddIn) GetCaseFiles() []string {
	if x != nil {
		return x.CaseFiles
	}
	return nil
}

func (x *PartnerAddIn) GetExtraFiles() []string {
	if x != nil {
		return x.ExtraFiles
	}
	return nil
}

func (x *PartnerAddIn) GetPartnerId() uint32 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *PartnerAddIn) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *PartnerAddIn) GetAuditExtraFiles() []string {
	if x != nil {
		return x.AuditExtraFiles
	}
	return nil
}

func (x *PartnerAddIn) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

type PartnerAddOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *PartnerAddOut_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // data数据
}

func (x *PartnerAddOut) Reset() {
	*x = PartnerAddOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerAddOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerAddOut) ProtoMessage() {}

func (x *PartnerAddOut) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerAddOut.ProtoReflect.Descriptor instead.
func (*PartnerAddOut) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{1}
}

func (x *PartnerAddOut) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PartnerAddOut) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PartnerAddOut) GetData() *PartnerAddOut_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlatformAddIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishPlatformId uint32   `protobuf:"varint,1,opt,name=publish_platform_id,json=publishPlatformId,proto3" json:"publish_platform_id,omitempty"` // 发行平台ID
	PartnerId         uint32   `protobuf:"varint,2,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`                           // 网点服务商ID
	ChainName         string   `protobuf:"bytes,3,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`                            // 链名称
	ChainUrl          string   `protobuf:"bytes,4,opt,name=chain_url,json=chainUrl,proto3" json:"chain_url,omitempty"`                               // 链地址
	AliasName         string   `protobuf:"bytes,5,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`                            // 企业简称发行平台名称
	IcpEdiCert        string   `protobuf:"bytes,6,opt,name=icp_edi_cert,json=icpEdiCert,proto3" json:"icp_edi_cert,omitempty"`                       // ICP/EDI证书
	CompanyName       string   `protobuf:"bytes,7,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`                      // 企业名称
	LicenseNumber     string   `protobuf:"bytes,8,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`                // 营业执照号
	BusinessAddress   string   `protobuf:"bytes,9,opt,name=business_address,json=businessAddress,proto3" json:"business_address,omitempty"`          // 经营地址(除省市区外的地址)
	LegalName         string   `protobuf:"bytes,10,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`                           // 法人姓名
	LegalId           string   `protobuf:"bytes,11,opt,name=legal_id,json=legalId,proto3" json:"legal_id,omitempty"`                                 // 法人身份证
	ContactName       string   `protobuf:"bytes,12,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`                     // 联系人姓名
	ContactEmail      string   `protobuf:"bytes,13,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`                  // 联系人邮箱
	ContactMobile     string   `protobuf:"bytes,14,opt,name=contact_mobile,json=contactMobile,proto3" json:"contact_mobile,omitempty"`               // 联系人手机
	LicenseNumberFile string   `protobuf:"bytes,16,opt,name=license_number_file,json=licenseNumberFile,proto3" json:"license_number_file,omitempty"` // 营业执照(网址)
	IcpEdiCertFile    string   `protobuf:"bytes,17,opt,name=icp_edi_cert_file,json=icpEdiCertFile,proto3" json:"icp_edi_cert_file,omitempty"`        // ICP/EDI证书
	LegalIdFrontFile  string   `protobuf:"bytes,18,opt,name=legal_id_front_file,json=legalIdFrontFile,proto3" json:"legal_id_front_file,omitempty"`  // 法人身份证正面图片(网址)
	ExtraFiles        []string `protobuf:"bytes,19,rep,name=extra_files,json=extraFiles,proto3" json:"extra_files,omitempty"`                        // 补充材料JSON数组
	AppNo             string   `protobuf:"bytes,20,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`                                       // app ID
	LogoUrl           string   `protobuf:"bytes,21,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`                                 // 平台logo url
	SortId            uint32   `protobuf:"varint,22,opt,name=sort_id,json=sortId,proto3" json:"sort_id,omitempty"`                                   // 排序字段
	AuditExtraFiles   []string `protobuf:"bytes,30,rep,name=audit_extra_files,json=auditExtraFiles,proto3" json:"audit_extra_files,omitempty"`       // 审核补充材料(网址)
}

func (x *PlatformAddIn) Reset() {
	*x = PlatformAddIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformAddIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformAddIn) ProtoMessage() {}

func (x *PlatformAddIn) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformAddIn.ProtoReflect.Descriptor instead.
func (*PlatformAddIn) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{2}
}

func (x *PlatformAddIn) GetPublishPlatformId() uint32 {
	if x != nil {
		return x.PublishPlatformId
	}
	return 0
}

func (x *PlatformAddIn) GetPartnerId() uint32 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *PlatformAddIn) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *PlatformAddIn) GetChainUrl() string {
	if x != nil {
		return x.ChainUrl
	}
	return ""
}

func (x *PlatformAddIn) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *PlatformAddIn) GetIcpEdiCert() string {
	if x != nil {
		return x.IcpEdiCert
	}
	return ""
}

func (x *PlatformAddIn) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *PlatformAddIn) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *PlatformAddIn) GetBusinessAddress() string {
	if x != nil {
		return x.BusinessAddress
	}
	return ""
}

func (x *PlatformAddIn) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *PlatformAddIn) GetLegalId() string {
	if x != nil {
		return x.LegalId
	}
	return ""
}

func (x *PlatformAddIn) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *PlatformAddIn) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *PlatformAddIn) GetContactMobile() string {
	if x != nil {
		return x.ContactMobile
	}
	return ""
}

func (x *PlatformAddIn) GetLicenseNumberFile() string {
	if x != nil {
		return x.LicenseNumberFile
	}
	return ""
}

func (x *PlatformAddIn) GetIcpEdiCertFile() string {
	if x != nil {
		return x.IcpEdiCertFile
	}
	return ""
}

func (x *PlatformAddIn) GetLegalIdFrontFile() string {
	if x != nil {
		return x.LegalIdFrontFile
	}
	return ""
}

func (x *PlatformAddIn) GetExtraFiles() []string {
	if x != nil {
		return x.ExtraFiles
	}
	return nil
}

func (x *PlatformAddIn) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *PlatformAddIn) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *PlatformAddIn) GetSortId() uint32 {
	if x != nil {
		return x.SortId
	}
	return 0
}

func (x *PlatformAddIn) GetAuditExtraFiles() []string {
	if x != nil {
		return x.AuditExtraFiles
	}
	return nil
}

type PlatformAddOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *PlatformAddOut_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // data信息
}

func (x *PlatformAddOut) Reset() {
	*x = PlatformAddOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformAddOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformAddOut) ProtoMessage() {}

func (x *PlatformAddOut) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformAddOut.ProtoReflect.Descriptor instead.
func (*PlatformAddOut) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{3}
}

func (x *PlatformAddOut) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlatformAddOut) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PlatformAddOut) GetData() *PlatformAddOut_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublisherAddIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublisherId       uint32   `protobuf:"varint,1,opt,name=publisher_id,json=publisherId,proto3" json:"publisher_id,omitempty"`                    // 发行商ID
	PartnerId         uint32   `protobuf:"varint,2,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`                          // 网点服务商ID
	PlatformId        uint32   `protobuf:"varint,3,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`                       // 发行平台ID
	ChainName         string   `protobuf:"bytes,4,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`                           // 链名称
	ChainUrl          string   `protobuf:"bytes,5,opt,name=chain_url,json=chainUrl,proto3" json:"chain_url,omitempty"`                              // 链地址
	CompanyName       string   `protobuf:"bytes,6,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`                     // 企业名称
	LicenseNumber     string   `protobuf:"bytes,8,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`               // 营业执照号
	LicenseNumberFile string   `protobuf:"bytes,9,opt,name=license_number_file,json=licenseNumberFile,proto3" json:"license_number_file,omitempty"` // 营业执照(网址)
	ProvinceName      string   `protobuf:"bytes,10,opt,name=province_name,json=provinceName,proto3" json:"province_name,omitempty"`                 // 省份名称
	CityName          string   `protobuf:"bytes,11,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`                             // 市名称
	DistrictName      string   `protobuf:"bytes,12,opt,name=district_name,json=districtName,proto3" json:"district_name,omitempty"`                 // 地区名称
	BusinessAddress   string   `protobuf:"bytes,16,opt,name=business_address,json=businessAddress,proto3" json:"business_address,omitempty"`        // 经营地址(除省市区外的地址)
	LegalName         string   `protobuf:"bytes,17,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`                          // 法人姓名
	LegalId           string   `protobuf:"bytes,18,opt,name=legal_id,json=legalId,proto3" json:"legal_id,omitempty"`                                // 法人身份证
	LegalIdFrontFile  string   `protobuf:"bytes,19,opt,name=legal_id_front_file,json=legalIdFrontFile,proto3" json:"legal_id_front_file,omitempty"` // 法人身份证正面图片(网址)
	LegalIdBackFile   string   `protobuf:"bytes,20,opt,name=legal_id_back_file,json=legalIdBackFile,proto3" json:"legal_id_back_file,omitempty"`    // 法人身份证反面图片(网址)
	ContactName       string   `protobuf:"bytes,21,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`                    // 联系人姓名
	ContactMobile     string   `protobuf:"bytes,22,opt,name=contact_mobile,json=contactMobile,proto3" json:"contact_mobile,omitempty"`              // 联系人手机
	ContactTel        string   `protobuf:"bytes,23,opt,name=contact_tel,json=contactTel,proto3" json:"contact_tel,omitempty"`                       // 联系人电话
	ContactEmail      string   `protobuf:"bytes,24,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`                 // 联系人邮箱
	ExtraFiles        []string `protobuf:"bytes,25,rep,name=extra_files,json=extraFiles,proto3" json:"extra_files,omitempty"`                       // 补充材料
	AuditExtraFiles   []string `protobuf:"bytes,30,rep,name=audit_extra_files,json=auditExtraFiles,proto3" json:"audit_extra_files,omitempty"`      // 审核补充材料(网址)
}

func (x *PublisherAddIn) Reset() {
	*x = PublisherAddIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherAddIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherAddIn) ProtoMessage() {}

func (x *PublisherAddIn) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherAddIn.ProtoReflect.Descriptor instead.
func (*PublisherAddIn) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{4}
}

func (x *PublisherAddIn) GetPublisherId() uint32 {
	if x != nil {
		return x.PublisherId
	}
	return 0
}

func (x *PublisherAddIn) GetPartnerId() uint32 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *PublisherAddIn) GetPlatformId() uint32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *PublisherAddIn) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *PublisherAddIn) GetChainUrl() string {
	if x != nil {
		return x.ChainUrl
	}
	return ""
}

func (x *PublisherAddIn) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *PublisherAddIn) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *PublisherAddIn) GetLicenseNumberFile() string {
	if x != nil {
		return x.LicenseNumberFile
	}
	return ""
}

func (x *PublisherAddIn) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *PublisherAddIn) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *PublisherAddIn) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *PublisherAddIn) GetBusinessAddress() string {
	if x != nil {
		return x.BusinessAddress
	}
	return ""
}

func (x *PublisherAddIn) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *PublisherAddIn) GetLegalId() string {
	if x != nil {
		return x.LegalId
	}
	return ""
}

func (x *PublisherAddIn) GetLegalIdFrontFile() string {
	if x != nil {
		return x.LegalIdFrontFile
	}
	return ""
}

func (x *PublisherAddIn) GetLegalIdBackFile() string {
	if x != nil {
		return x.LegalIdBackFile
	}
	return ""
}

func (x *PublisherAddIn) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *PublisherAddIn) GetContactMobile() string {
	if x != nil {
		return x.ContactMobile
	}
	return ""
}

func (x *PublisherAddIn) GetContactTel() string {
	if x != nil {
		return x.ContactTel
	}
	return ""
}

func (x *PublisherAddIn) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *PublisherAddIn) GetExtraFiles() []string {
	if x != nil {
		return x.ExtraFiles
	}
	return nil
}

func (x *PublisherAddIn) GetAuditExtraFiles() []string {
	if x != nil {
		return x.AuditExtraFiles
	}
	return nil
}

type PublisherAddOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *PublisherAddOut_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // data数据
}

func (x *PublisherAddOut) Reset() {
	*x = PublisherAddOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherAddOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherAddOut) ProtoMessage() {}

func (x *PublisherAddOut) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherAddOut.ProtoReflect.Descriptor instead.
func (*PublisherAddOut) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{5}
}

func (x *PublisherAddOut) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PublisherAddOut) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PublisherAddOut) GetData() *PublisherAddOut_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AssetRegistrationAddIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerId        uint32   `protobuf:"varint,1,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`                         // 网点服务商id
	PlatformId       uint32   `protobuf:"varint,2,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`                      // 发行平台id
	PublisherId      uint32   `protobuf:"varint,3,opt,name=publisher_id,json=publisherId,proto3" json:"publisher_id,omitempty"`                   // 发行商id
	CopyrightType    uint32   `protobuf:"varint,4,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`             // 版权类型, 0:原创声明;1:授权证明
	ChainName        string   `protobuf:"bytes,5,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`                          // 链名称1-64 字
	ContractAddr     string   `protobuf:"bytes,6,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`                 // 合约地址
	AssetType        uint32   `protobuf:"varint,7,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`                         // 数字资产类型,1数字文创，2数字出版，3数字纪念品，4文博衍生，5数字权益，6数字营销
	AssetName        string   `protobuf:"bytes,8,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`                          // 资产名称1-128字
	CreativeName     string   `protobuf:"bytes,10,opt,name=creative_name,json=creativeName,proto3" json:"creative_name,omitempty"`                // 作者
	CreativeTime     uint32   `protobuf:"varint,11,opt,name=creative_time,json=creativeTime,proto3" json:"creative_time,omitempty"`               // 创作时间
	FirstPublishedAt uint32   `protobuf:"varint,12,opt,name=first_published_at,json=firstPublishedAt,proto3" json:"first_published_at,omitempty"` // 首次发行时间
	IssuePriceMin    uint32   `protobuf:"varint,13,opt,name=issue_price_min,json=issuePriceMin,proto3" json:"issue_price_min,omitempty"`          // 最小发行价格 分
	IssuePriceMax    uint32   `protobuf:"varint,14,opt,name=issue_price_max,json=issuePriceMax,proto3" json:"issue_price_max,omitempty"`          // 最大发行价格 分
	IssueNum         uint32   `protobuf:"varint,15,opt,name=issue_num,json=issueNum,proto3" json:"issue_num,omitempty"`                           // 发行数量
	CoverImg         string   `protobuf:"bytes,16,opt,name=cover_img,json=coverImg,proto3" json:"cover_img,omitempty"`                            // 数字资产封面图(网址)
	AuthorizedFile   string   `protobuf:"bytes,17,opt,name=authorized_file,json=authorizedFile,proto3" json:"authorized_file,omitempty"`          // 授权证明文件(网址)
	AuthorFile       string   `protobuf:"bytes,18,opt,name=author_file,json=authorFile,proto3" json:"author_file,omitempty"`                      // 原创证明文件(网址)
	AssetDetailFile  string   `protobuf:"bytes,19,opt,name=asset_detail_file,json=assetDetailFile,proto3" json:"asset_detail_file,omitempty"`     // 数字资产信息资料(网址)
	RightsDesc       string   `protobuf:"bytes,20,opt,name=rights_desc,json=rightsDesc,proto3" json:"rights_desc,omitempty"`                      // 权益说明
	AssetDesc        string   `protobuf:"bytes,21,opt,name=asset_desc,json=assetDesc,proto3" json:"asset_desc,omitempty"`                         // 数字资产介绍
	ExtraFiles       []string `protobuf:"bytes,30,rep,name=extra_files,json=extraFiles,proto3" json:"extra_files,omitempty"`                      // 补充材料(网址)
}

func (x *AssetRegistrationAddIn) Reset() {
	*x = AssetRegistrationAddIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRegistrationAddIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRegistrationAddIn) ProtoMessage() {}

func (x *AssetRegistrationAddIn) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRegistrationAddIn.ProtoReflect.Descriptor instead.
func (*AssetRegistrationAddIn) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{6}
}

func (x *AssetRegistrationAddIn) GetPartnerId() uint32 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *AssetRegistrationAddIn) GetPlatformId() uint32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *AssetRegistrationAddIn) GetPublisherId() uint32 {
	if x != nil {
		return x.PublisherId
	}
	return 0
}

func (x *AssetRegistrationAddIn) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *AssetRegistrationAddIn) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *AssetRegistrationAddIn) GetContractAddr() string {
	if x != nil {
		return x.ContractAddr
	}
	return ""
}

func (x *AssetRegistrationAddIn) GetAssetType() uint32 {
	if x != nil {
		return x.AssetType
	}
	return 0
}

func (x *AssetRegistrationAddIn) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *AssetRegistrationAddIn) GetCreativeName() string {
	if x != nil {
		return x.CreativeName
	}
	return ""
}

func (x *AssetRegistrationAddIn) GetCreativeTime() uint32 {
	if x != nil {
		return x.CreativeTime
	}
	return 0
}

func (x *AssetRegistrationAddIn) GetFirstPublishedAt() uint32 {
	if x != nil {
		return x.FirstPublishedAt
	}
	return 0
}

func (x *AssetRegistrationAddIn) GetIssuePriceMin() uint32 {
	if x != nil {
		return x.IssuePriceMin
	}
	return 0
}

func (x *AssetRegistrationAddIn) GetIssuePriceMax() uint32 {
	if x != nil {
		return x.IssuePriceMax
	}
	return 0
}

func (x *AssetRegistrationAddIn) GetIssueNum() uint32 {
	if x != nil {
		return x.IssueNum
	}
	return 0
}

func (x *AssetRegistrationAddIn) GetCoverImg() string {
	if x != nil {
		return x.CoverImg
	}
	return ""
}

func (x *AssetRegistrationAddIn) GetAuthorizedFile() string {
	if x != nil {
		return x.AuthorizedFile
	}
	return ""
}

func (x *AssetRegistrationAddIn) GetAuthorFile() string {
	if x != nil {
		return x.AuthorFile
	}
	return ""
}

func (x *AssetRegistrationAddIn) GetAssetDetailFile() string {
	if x != nil {
		return x.AssetDetailFile
	}
	return ""
}

func (x *AssetRegistrationAddIn) GetRightsDesc() string {
	if x != nil {
		return x.RightsDesc
	}
	return ""
}

func (x *AssetRegistrationAddIn) GetAssetDesc() string {
	if x != nil {
		return x.AssetDesc
	}
	return ""
}

func (x *AssetRegistrationAddIn) GetExtraFiles() []string {
	if x != nil {
		return x.ExtraFiles
	}
	return nil
}

type AssetRegistrationAddOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *AssetRegistrationAddOut_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // data数据
}

func (x *AssetRegistrationAddOut) Reset() {
	*x = AssetRegistrationAddOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRegistrationAddOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRegistrationAddOut) ProtoMessage() {}

func (x *AssetRegistrationAddOut) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRegistrationAddOut.ProtoReflect.Descriptor instead.
func (*AssetRegistrationAddOut) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{7}
}

func (x *AssetRegistrationAddOut) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AssetRegistrationAddOut) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AssetRegistrationAddOut) GetData() *AssetRegistrationAddOut_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AssetReportGroupAddIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationId uint32 `protobuf:"varint,1,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"` // 数字资产登记id
	AssetIconType  uint32 `protobuf:"varint,2,opt,name=asset_icon_type,json=assetIconType,proto3" json:"asset_icon_type,omitempty"`  // 发行的数字资产信息是否全部一致0不一致1一致
	AssetIcon      string `protobuf:"bytes,3,opt,name=asset_icon,json=assetIcon,proto3" json:"asset_icon,omitempty"`                 //发行的数字资产信息一致的时候提交数字资产icon(网址)
}

func (x *AssetReportGroupAddIn) Reset() {
	*x = AssetReportGroupAddIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportGroupAddIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportGroupAddIn) ProtoMessage() {}

func (x *AssetReportGroupAddIn) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportGroupAddIn.ProtoReflect.Descriptor instead.
func (*AssetReportGroupAddIn) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{8}
}

func (x *AssetReportGroupAddIn) GetRegistrationId() uint32 {
	if x != nil {
		return x.RegistrationId
	}
	return 0
}

func (x *AssetReportGroupAddIn) GetAssetIconType() uint32 {
	if x != nil {
		return x.AssetIconType
	}
	return 0
}

func (x *AssetReportGroupAddIn) GetAssetIcon() string {
	if x != nil {
		return x.AssetIcon
	}
	return ""
}

type AssetReportGroupAddOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *AssetReportGroupAddOut_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // data数据
}

func (x *AssetReportGroupAddOut) Reset() {
	*x = AssetReportGroupAddOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportGroupAddOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportGroupAddOut) ProtoMessage() {}

func (x *AssetReportGroupAddOut) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportGroupAddOut.ProtoReflect.Descriptor instead.
func (*AssetReportGroupAddOut) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{9}
}

func (x *AssetReportGroupAddOut) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AssetReportGroupAddOut) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AssetReportGroupAddOut) GetData() *AssetReportGroupAddOut_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AssetReportAddIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationId uint32                `protobuf:"varint,1,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"` // 数字资登记id
	AssetRgid      uint32                `protobuf:"varint,2,opt,name=asset_rgid,json=assetRgid,proto3" json:"asset_rgid,omitempty"`                // 数字资产组id
	List           []*AssetReportAddData `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`                                            //数字资产icon(网址)
}

func (x *AssetReportAddIn) Reset() {
	*x = AssetReportAddIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportAddIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportAddIn) ProtoMessage() {}

func (x *AssetReportAddIn) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportAddIn.ProtoReflect.Descriptor instead.
func (*AssetReportAddIn) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{10}
}

func (x *AssetReportAddIn) GetRegistrationId() uint32 {
	if x != nil {
		return x.RegistrationId
	}
	return 0
}

func (x *AssetReportAddIn) GetAssetRgid() uint32 {
	if x != nil {
		return x.AssetRgid
	}
	return 0
}

func (x *AssetReportAddIn) GetList() []*AssetReportAddData {
	if x != nil {
		return x.List
	}
	return nil
}

type AssetReportAddData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPhone  string                  `protobuf:"bytes,1,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`      //用户手机号
	UserName   string                  `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`         //用户名称
	UserIdCard string                  `protobuf:"bytes,3,opt,name=user_id_card,json=userIdCard,proto3" json:"user_id_card,omitempty"` //用户身份证号
	UserAddr   string                  `protobuf:"bytes,4,opt,name=user_addr,json=userAddr,proto3" json:"user_addr,omitempty"`         //用户地址
	AssetNo    string                  `protobuf:"bytes,5,opt,name=asset_no,json=assetNo,proto3" json:"asset_no,omitempty"`            //数字资产编号
	AssetIcon  string                  `protobuf:"bytes,6,opt,name=asset_icon,json=assetIcon,proto3" json:"asset_icon,omitempty"`      //发行的数字资产信息不一致的时候提交数字资产icon(网址)
	AssetType  uint32                  `protobuf:"varint,7,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`     //数字资产类型,1-图片;2-视频;3-3D数字资产
	IssuePrice uint32                  `protobuf:"varint,9,opt,name=issue_price,json=issuePrice,proto3" json:"issue_price,omitempty"`  // 资产价格 分
	MintTime   uint32                  `protobuf:"varint,10,opt,name=mint_time,json=mintTime,proto3" json:"mint_time,omitempty"`       //铸造时间, UNIX时间戳, 单位:秒
	BcbUri     string                  `protobuf:"bytes,11,opt,name=bcb_uri,json=bcbUri,proto3" json:"bcb_uri,omitempty"`              // 区块链浏览器(BCB)的链接，查看链上资产
	ChainUri   string                  `protobuf:"bytes,12,opt,name=chain_uri,json=chainUri,proto3" json:"chain_uri,omitempty"`        // 数字资产URI(网址)
	TokenId    string                  `protobuf:"bytes,13,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`           // 数字资产TokenID
	ChainList  []*AssetReportChainData `protobuf:"bytes,14,rep,name=chain_list,json=chainList,proto3" json:"chain_list,omitempty"`     // 上链类型,0:铸造;1:交易(一手)交易
}

func (x *AssetReportAddData) Reset() {
	*x = AssetReportAddData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportAddData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportAddData) ProtoMessage() {}

func (x *AssetReportAddData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportAddData.ProtoReflect.Descriptor instead.
func (*AssetReportAddData) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{11}
}

func (x *AssetReportAddData) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *AssetReportAddData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AssetReportAddData) GetUserIdCard() string {
	if x != nil {
		return x.UserIdCard
	}
	return ""
}

func (x *AssetReportAddData) GetUserAddr() string {
	if x != nil {
		return x.UserAddr
	}
	return ""
}

func (x *AssetReportAddData) GetAssetNo() string {
	if x != nil {
		return x.AssetNo
	}
	return ""
}

func (x *AssetReportAddData) GetAssetIcon() string {
	if x != nil {
		return x.AssetIcon
	}
	return ""
}

func (x *AssetReportAddData) GetAssetType() uint32 {
	if x != nil {
		return x.AssetType
	}
	return 0
}

func (x *AssetReportAddData) GetIssuePrice() uint32 {
	if x != nil {
		return x.IssuePrice
	}
	return 0
}

func (x *AssetReportAddData) GetMintTime() uint32 {
	if x != nil {
		return x.MintTime
	}
	return 0
}

func (x *AssetReportAddData) GetBcbUri() string {
	if x != nil {
		return x.BcbUri
	}
	return ""
}

func (x *AssetReportAddData) GetChainUri() string {
	if x != nil {
		return x.ChainUri
	}
	return ""
}

func (x *AssetReportAddData) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *AssetReportAddData) GetChainList() []*AssetReportChainData {
	if x != nil {
		return x.ChainList
	}
	return nil
}

type AssetReportTransferIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationId uint32                     `protobuf:"varint,1,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"` // 数字资登记id
	List           []*AssetReportTransferData `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`                                            //数字资产icon(网址)
}

func (x *AssetReportTransferIn) Reset() {
	*x = AssetReportTransferIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportTransferIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportTransferIn) ProtoMessage() {}

func (x *AssetReportTransferIn) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportTransferIn.ProtoReflect.Descriptor instead.
func (*AssetReportTransferIn) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{12}
}

func (x *AssetReportTransferIn) GetRegistrationId() uint32 {
	if x != nil {
		return x.RegistrationId
	}
	return 0
}

func (x *AssetReportTransferIn) GetList() []*AssetReportTransferData {
	if x != nil {
		return x.List
	}
	return nil
}

type AssetReportTransferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToUserPhone  string `protobuf:"bytes,1,opt,name=to_user_phone,json=toUserPhone,proto3" json:"to_user_phone,omitempty"`      //交易用户手机号
	ToUserName   string `protobuf:"bytes,2,opt,name=to_user_name,json=toUserName,proto3" json:"to_user_name,omitempty"`         //交易用户名称
	ToUserIdCard string `protobuf:"bytes,3,opt,name=to_user_id_card,json=toUserIdCard,proto3" json:"to_user_id_card,omitempty"` //交易用户身份证号
	ToUserAddr   string `protobuf:"bytes,4,opt,name=to_user_addr,json=toUserAddr,proto3" json:"to_user_addr,omitempty"`         //交易用户地址
	IssuePrice   uint32 `protobuf:"varint,9,opt,name=issue_price,json=issuePrice,proto3" json:"issue_price,omitempty"`          // 交易资产价格 分
	TransferTime uint32 `protobuf:"varint,10,opt,name=transfer_time,json=transferTime,proto3" json:"transfer_time,omitempty"`   //铸造时间, UNIX时间戳, 单位:秒
	TokenId      string `protobuf:"bytes,13,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`                   // 数字资产TokenID
}

func (x *AssetReportTransferData) Reset() {
	*x = AssetReportTransferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportTransferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportTransferData) ProtoMessage() {}

func (x *AssetReportTransferData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportTransferData.ProtoReflect.Descriptor instead.
func (*AssetReportTransferData) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{13}
}

func (x *AssetReportTransferData) GetToUserPhone() string {
	if x != nil {
		return x.ToUserPhone
	}
	return ""
}

func (x *AssetReportTransferData) GetToUserName() string {
	if x != nil {
		return x.ToUserName
	}
	return ""
}

func (x *AssetReportTransferData) GetToUserIdCard() string {
	if x != nil {
		return x.ToUserIdCard
	}
	return ""
}

func (x *AssetReportTransferData) GetToUserAddr() string {
	if x != nil {
		return x.ToUserAddr
	}
	return ""
}

func (x *AssetReportTransferData) GetIssuePrice() uint32 {
	if x != nil {
		return x.IssuePrice
	}
	return 0
}

func (x *AssetReportTransferData) GetTransferTime() uint32 {
	if x != nil {
		return x.TransferTime
	}
	return 0
}

func (x *AssetReportTransferData) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type AssetReportTransferOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *AssetReportTransferOut_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // data数据
}

func (x *AssetReportTransferOut) Reset() {
	*x = AssetReportTransferOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportTransferOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportTransferOut) ProtoMessage() {}

func (x *AssetReportTransferOut) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportTransferOut.ProtoReflect.Descriptor instead.
func (*AssetReportTransferOut) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{14}
}

func (x *AssetReportTransferOut) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AssetReportTransferOut) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AssetReportTransferOut) GetData() *AssetReportTransferOut_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AssetReportChainData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType        uint32 `protobuf:"varint,8,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`                         // 上链类型,0:铸造;1:交易(一手)交易；2其他
	ChainTxId        string `protobuf:"bytes,9,opt,name=chain_tx_id,json=chainTxId,proto3" json:"chain_tx_id,omitempty"`                        // 上链交易ID
	ChainBlockNumber uint32 `protobuf:"varint,10,opt,name=chain_block_number,json=chainBlockNumber,proto3" json:"chain_block_number,omitempty"` // 上链生成的交易所在区块号
	ChainTime        uint32 `protobuf:"varint,11,opt,name=chain_time,json=chainTime,proto3" json:"chain_time,omitempty"`                        // 上链时间, UNIX时间戳, 单位:秒
}

func (x *AssetReportChainData) Reset() {
	*x = AssetReportChainData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportChainData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportChainData) ProtoMessage() {}

func (x *AssetReportChainData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportChainData.ProtoReflect.Descriptor instead.
func (*AssetReportChainData) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{15}
}

func (x *AssetReportChainData) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *AssetReportChainData) GetChainTxId() string {
	if x != nil {
		return x.ChainTxId
	}
	return ""
}

func (x *AssetReportChainData) GetChainBlockNumber() uint32 {
	if x != nil {
		return x.ChainBlockNumber
	}
	return 0
}

func (x *AssetReportChainData) GetChainTime() uint32 {
	if x != nil {
		return x.ChainTime
	}
	return 0
}

type AssetReportAddOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *AssetReportAddOut_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // data数据
}

func (x *AssetReportAddOut) Reset() {
	*x = AssetReportAddOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportAddOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportAddOut) ProtoMessage() {}

func (x *AssetReportAddOut) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportAddOut.ProtoReflect.Descriptor instead.
func (*AssetReportAddOut) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{16}
}

func (x *AssetReportAddOut) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AssetReportAddOut) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AssetReportAddOut) GetData() *AssetReportAddOut_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type PartnerAddOut_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerId uint32 `protobuf:"varint,1,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"` // 服务网点ID
}

func (x *PartnerAddOut_Data) Reset() {
	*x = PartnerAddOut_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerAddOut_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerAddOut_Data) ProtoMessage() {}

func (x *PartnerAddOut_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerAddOut_Data.ProtoReflect.Descriptor instead.
func (*PartnerAddOut_Data) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PartnerAddOut_Data) GetPartnerId() uint32 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

type PlatformAddOut_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishPlatformId uint32 `protobuf:"varint,1,opt,name=publish_platform_id,json=publishPlatformId,proto3" json:"publish_platform_id,omitempty"` // 服务网点ID
}

func (x *PlatformAddOut_Data) Reset() {
	*x = PlatformAddOut_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformAddOut_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformAddOut_Data) ProtoMessage() {}

func (x *PlatformAddOut_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformAddOut_Data.ProtoReflect.Descriptor instead.
func (*PlatformAddOut_Data) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PlatformAddOut_Data) GetPublishPlatformId() uint32 {
	if x != nil {
		return x.PublishPlatformId
	}
	return 0
}

type PublisherAddOut_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublisherId uint32 `protobuf:"varint,1,opt,name=publisher_id,json=publisherId,proto3" json:"publisher_id,omitempty"` // 发行商ID
}

func (x *PublisherAddOut_Data) Reset() {
	*x = PublisherAddOut_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherAddOut_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherAddOut_Data) ProtoMessage() {}

func (x *PublisherAddOut_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherAddOut_Data.ProtoReflect.Descriptor instead.
func (*PublisherAddOut_Data) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PublisherAddOut_Data) GetPublisherId() uint32 {
	if x != nil {
		return x.PublisherId
	}
	return 0
}

type AssetRegistrationAddOut_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id
}

func (x *AssetRegistrationAddOut_Data) Reset() {
	*x = AssetRegistrationAddOut_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRegistrationAddOut_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRegistrationAddOut_Data) ProtoMessage() {}

func (x *AssetRegistrationAddOut_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRegistrationAddOut_Data.ProtoReflect.Descriptor instead.
func (*AssetRegistrationAddOut_Data) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{7, 0}
}

func (x *AssetRegistrationAddOut_Data) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AssetReportGroupAddOut_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetRgid uint32 `protobuf:"varint,1,opt,name=asset_rgid,json=assetRgid,proto3" json:"asset_rgid,omitempty"` // 组id
}

func (x *AssetReportGroupAddOut_Data) Reset() {
	*x = AssetReportGroupAddOut_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportGroupAddOut_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportGroupAddOut_Data) ProtoMessage() {}

func (x *AssetReportGroupAddOut_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportGroupAddOut_Data.ProtoReflect.Descriptor instead.
func (*AssetReportGroupAddOut_Data) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{9, 0}
}

func (x *AssetReportGroupAddOut_Data) GetAssetRgid() uint32 {
	if x != nil {
		return x.AssetRgid
	}
	return 0
}

type AssetReportTransferOut_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id
}

func (x *AssetReportTransferOut_Data) Reset() {
	*x = AssetReportTransferOut_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportTransferOut_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportTransferOut_Data) ProtoMessage() {}

func (x *AssetReportTransferOut_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportTransferOut_Data.ProtoReflect.Descriptor instead.
func (*AssetReportTransferOut_Data) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{14, 0}
}

func (x *AssetReportTransferOut_Data) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AssetReportAddOut_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id
}

func (x *AssetReportAddOut_Data) Reset() {
	*x = AssetReportAddOut_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_darsppb_darsp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReportAddOut_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReportAddOut_Data) ProtoMessage() {}

func (x *AssetReportAddOut_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_darsppb_darsp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReportAddOut_Data.ProtoReflect.Descriptor instead.
func (*AssetReportAddOut_Data) Descriptor() ([]byte, []int) {
	return file_pb_darsppb_darsp_proto_rawDescGZIP(), []int{16, 0}
}

func (x *AssetReportAddOut_Data) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_pb_darsppb_darsp_proto protoreflect.FileDescriptor

var file_pb_darsppb_darsp_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x72,
	0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x0e, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32,
	0x09, 0xe9, 0x93, 0xbe, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe9,
	0x93, 0xbe, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4,
	0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7,
	0xe7, 0x85, 0xa7, 0xe5, 0x8f, 0xb7, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe7, 0x9c, 0x81, 0xe4, 0xbb, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe5, 0xb8, 0x82, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41,
	0x28, 0x32, 0x26, 0xe7, 0xbb, 0x8f, 0xe8, 0x90, 0xa5, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x28,
	0xe9, 0x99, 0xa4, 0xe7, 0x9c, 0x81, 0xe5, 0xb8, 0x82, 0xe5, 0x8c, 0xba, 0xe5, 0xa4, 0x96, 0xe7,
	0x9a, 0x84, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x29, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90,
	0x8d, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb,
	0xbd, 0xe8, 0xaf, 0x81, 0x52, 0x07, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb,
	0xe4, 0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe4, 0xba, 0xba, 0xe9, 0x82, 0xae,
	0xe7, 0xae, 0xb1, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f,
	0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe4, 0xba, 0xba, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x3c,
	0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe7, 0xbd,
	0x91, 0xe7, 0x82, 0xb9, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe8, 0xa1, 0xa8, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85,
	0xac, 0xe5, 0x8f, 0xb8, 0xe7, 0xab, 0xa0, 0xe7, 0xa8, 0x8b, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x13,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14,
	0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7, 0x85, 0xa7, 0x28, 0xe7, 0xbd, 0x91,
	0xe5, 0x9d, 0x80, 0x29, 0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x32, 0x0f, 0xe5, 0xbc, 0x80, 0xe6, 0x88, 0xb7, 0xe8, 0xae, 0xb8, 0xe5, 0x8f, 0xaf, 0xe8,
	0xaf, 0x81, 0x52, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x13,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23,
	0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe6,
	0xad, 0xa3, 0xe9, 0x9d, 0xa2, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x28, 0xe7, 0xbd, 0x91, 0xe5,
	0x9d, 0x80, 0x29, 0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x49, 0x64, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xba,
	0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0x8d, 0xe9, 0x9d, 0xa2, 0xe5, 0x9b, 0xbe,
	0xe7, 0x89, 0x87, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29, 0x52, 0x0f, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x49, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x08,
	0x69, 0x63, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x92, 0x41, 0x26, 0x32, 0x24, 0xe5, 0xa2, 0x9e, 0xe5, 0x80, 0xbc, 0xe7, 0x94, 0xb5, 0xe4, 0xbf,
	0xa1, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x8f, 0xe8, 0x90, 0xa5, 0xe8, 0xae, 0xb8,
	0xe5, 0x8f, 0xaf, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0x52, 0x07, 0x69, 0x63, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x63, 0x72, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xad,
	0x89, 0xe7, 0xba, 0xa7, 0xe5, 0xa4, 0x87, 0xe6, 0xa1, 0x88, 0x52, 0x08, 0x63, 0x63, 0x72, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe8, 0xbd, 0xaf, 0xe4,
	0xbb, 0xb6, 0xe8, 0x91, 0x97, 0xe4, 0xbd, 0x9c, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae,
	0xb0, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0x52, 0x15, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x52,
	0x0a, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32,
	0x1e, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0xa7, 0xe4, 0xb8, 0x9a, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0x52,
	0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32,
	0x18, 0xe9, 0xab, 0x98, 0xe6, 0x96, 0xb0, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe6, 0x8a, 0x80,
	0xe6, 0x9c, 0xaf, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0x52, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x54,
	0x65, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe6, 0xa1, 0x88, 0xe4, 0xbe, 0x8b, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x52, 0x09,
	0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xa1, 0xa5, 0xe5, 0x85, 0x85, 0xe6, 0x9d, 0x90, 0xe6, 0x96,
	0x99, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0xbd,
	0x91, 0xe7, 0x82, 0xb9, 0x49, 0x44, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x32, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x4e, 0x6f, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe8, 0xa1, 0xa5, 0xe5,
	0x85, 0x85, 0xe6, 0x9d, 0x90, 0xe6, 0x96, 0x99, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29,
	0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbc, 0x81, 0xe4,
	0xb8, 0x9a, 0xe7, 0xae, 0x80, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88,
	0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f,
	0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x12, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x64, 0x61, 0x74, 0x61, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3a, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0xbd, 0x91, 0xe7, 0x82, 0xb9, 0x49, 0x44, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa6, 0x0a, 0x0a, 0x0d, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x12, 0x43, 0x0a, 0x13, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe5,
	0x8f, 0x91, 0xe8, 0xa1, 0x8c, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x49, 0x44, 0x52, 0x11, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe7, 0xbd, 0x91, 0xe7, 0x82,
	0xb9, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x95, 0x86, 0x49, 0x44, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x32, 0x09, 0xe9, 0x93, 0xbe, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0xe9, 0x93, 0xbe, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe4, 0xbc,
	0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0xae, 0x80, 0xe7, 0xa7, 0xb0, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c,
	0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x63, 0x70, 0x5f, 0x65,
	0x64, 0x69, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92,
	0x41, 0x12, 0x32, 0x10, 0x49, 0x43, 0x50, 0x2f, 0x45, 0x44, 0x49, 0xe8, 0xaf, 0x81, 0xe4, 0xb9,
	0xa6, 0xe5, 0x8f, 0xb7, 0x52, 0x0a, 0x69, 0x63, 0x70, 0x45, 0x64, 0x69, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x34, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbc, 0x81,
	0xe4, 0xb8, 0x9a, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7, 0x85,
	0xa7, 0xe5, 0x8f, 0xb7, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x32, 0x26, 0xe7, 0xbb, 0x8f, 0xe8, 0x90, 0xa5, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80,
	0x28, 0xe9, 0x99, 0xa4, 0xe7, 0x9c, 0x81, 0xe5, 0xb8, 0x82, 0xe5, 0x8c, 0xba, 0xe5, 0xa4, 0x96,
	0xe7, 0x9a, 0x84, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x29, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5,
	0x90, 0x8d, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x08, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4,
	0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0x52, 0x07, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe7, 0xb3,
	0xbb, 0xe4, 0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe4, 0xba, 0xba, 0xe9, 0x82,
	0xae, 0xe7, 0xae, 0xb1, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe4, 0xba, 0xba, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x49, 0x0a, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x32, 0x14, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7, 0x85, 0xa7, 0x28,
	0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29, 0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x69, 0x63,
	0x70, 0x5f, 0x65, 0x64, 0x69, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x49, 0x43, 0x50, 0x2f,
	0x45, 0x44, 0x49, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0x52, 0x0e, 0x69, 0x63, 0x70, 0x45, 0x64,
	0x69, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe6, 0xb3, 0x95,
	0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe6, 0xad, 0xa3, 0xe9,
	0x9d, 0xa2, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29,
	0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x49, 0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xa1,
	0xa5, 0xe5, 0x85, 0x85, 0xe6, 0x9d, 0x90, 0xe6, 0x96, 0x99, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x32, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x32, 0x0e, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x6c, 0x6f, 0x67, 0x6f, 0x20, 0x75, 0x72, 0x6c,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe8, 0xa1, 0xa5,
	0xe5, 0x85, 0x85, 0xe6, 0x9d, 0x90, 0xe6, 0x96, 0x99, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80,
	0x29, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41,
	0x64, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88,
	0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f,
	0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x12, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x64, 0x61, 0x74, 0x61, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4b,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe7, 0xbd, 0x91, 0xe7, 0x82, 0xb9, 0x49, 0x44, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0xbd, 0x0a, 0x0a, 0x0e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x12, 0x33,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8f, 0x91, 0xe8, 0xa1,
	0x8c, 0xe5, 0x95, 0x86, 0x49, 0x44, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe7, 0xbd,
	0x91, 0xe7, 0x82, 0xb9, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x95, 0x86, 0x49, 0x44, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c, 0xe5, 0xb9, 0xb3, 0xe5,
	0x8f, 0xb0, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe9, 0x93, 0xbe, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe9, 0x93, 0xbe, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7, 0x85, 0xa7, 0xe5, 0x8f, 0xb7,
	0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x49, 0x0a, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x32, 0x14, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7, 0x85, 0xa7, 0x28,
	0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29, 0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x9c, 0x81, 0xe4, 0xbb, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe5, 0xb8, 0x82, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9c, 0xb0,
	0xe5, 0x8c, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0xe7, 0xbb, 0x8f, 0xe8, 0x90, 0xa5, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0x28, 0xe9, 0x99, 0xa4, 0xe7, 0x9c, 0x81, 0xe5, 0xb8, 0x82, 0xe5, 0x8c,
	0xba, 0xe5, 0xa4, 0x96, 0xe7, 0x9a, 0x84, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x29, 0x52, 0x0f,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x30, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba,
	0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba,
	0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0x52, 0x07, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4,
	0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe6, 0xad, 0xa3, 0xe9, 0x9d, 0xa2, 0xe5, 0x9b, 0xbe, 0xe7, 0x89,
	0x87, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29, 0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x49, 0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe6, 0xb3,
	0x95, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0x8d,
	0xe9, 0x9d, 0xa2, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80,
	0x29, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x49, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8,
	0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe4, 0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb,
	0xe4, 0xba, 0xba, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xb5,
	0xe8, 0xaf, 0x9d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x65, 0x6c, 0x12,
	0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x81, 0x94,
	0xe7, 0xb3, 0xbb, 0xe4, 0xba, 0xba, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xa1, 0xa5, 0xe5, 0x85, 0x85, 0xe6, 0x9d, 0x90, 0xe6,
	0x96, 0x99, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a,
	0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe8, 0xa1, 0xa5, 0xe5, 0x85, 0x85, 0xe6, 0x9d, 0x90, 0xe6,
	0x96, 0x99, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x0f,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x12,
	0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92,
	0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81,
	0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88,
	0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6,
	0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x12, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x64, 0x61, 0x74, 0x61, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8f,
	0x91, 0xe8, 0xa1, 0x8c, 0xe5, 0x95, 0x86, 0x49, 0x44, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd5, 0x0b, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x49,
	0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe7, 0xbd, 0x91, 0xe7,
	0x82, 0xb9, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x95, 0x86, 0x69, 0x64, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x16, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c, 0xe5, 0xb9, 0xb3,
	0xe5, 0x8f, 0xb0, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x0d, 0x32,
	0x0b, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c, 0xe5, 0x95, 0x86, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0e,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x33, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0xe7, 0x89, 0x88, 0xe6, 0x9d,
	0x83, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0x30, 0x3a, 0xe5, 0x8e, 0x9f, 0xe5, 0x88,
	0x9b, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x3b, 0x31, 0x3a, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe8, 0xaf, 0x81, 0xe6, 0x98, 0x8e, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41,
	0x12, 0x32, 0x10, 0xe9, 0x93, 0xbe, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x31, 0x2d, 0x36, 0x34,
	0xe5, 0xad, 0x97, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x7b, 0x92, 0x41, 0x75, 0x32,
	0x73, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x2c, 0x31, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe6, 0x96, 0x87, 0xe5, 0x88,
	0x9b, 0xef, 0xbc, 0x8c, 0x32, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe5, 0x87, 0xba, 0xe7, 0x89,
	0x88, 0xef, 0xbc, 0x8c, 0x33, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe7, 0xba, 0xaa, 0xe5, 0xbf,
	0xb5, 0xe5, 0x93, 0x81, 0xef, 0xbc, 0x8c, 0x34, 0xe6, 0x96, 0x87, 0xe5, 0x8d, 0x9a, 0xe8, 0xa1,
	0x8d, 0xe7, 0x94, 0x9f, 0xef, 0xbc, 0x8c, 0x35, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe6, 0x9d,
	0x83, 0xe7, 0x9b, 0x8a, 0xef, 0xbc, 0x8c, 0x36, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0x90,
	0xa5, 0xe9, 0x94, 0x80, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe8, 0xb5, 0x84,
	0xe4, 0xba, 0xa7, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x31, 0x2d, 0x31, 0x32, 0x38, 0xe5, 0xad,
	0x97, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe4,
	0xbd, 0x9c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe9, 0xa6, 0x96, 0xe6,
	0xac, 0xa1, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe0, 0x41,
	0x02, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c, 0xe4,
	0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0x8f, 0x91,
	0xe8, 0xa1, 0x8c, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x42,
	0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x25, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5,
	0x84, 0xe4, 0xba, 0xa7, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2, 0xe5, 0x9b, 0xbe, 0x28, 0xe7, 0xbd,
	0x91, 0xe5, 0x9d, 0x80, 0x29, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x6d, 0x67, 0x12, 0x4b, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c,
	0x32, 0x1a, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe8, 0xaf, 0x81, 0xe6, 0x98, 0x8e, 0xe6, 0x96,
	0x87, 0xe4, 0xbb, 0xb6, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29, 0xe0, 0x41, 0x02, 0x52,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x43, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe5, 0x8e, 0x9f, 0xe5, 0x88,
	0x9b, 0xe8, 0xaf, 0x81, 0xe6, 0x98, 0x8e, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x28, 0xe7, 0xbd,
	0x91, 0xe5, 0x9d, 0x80, 0x29, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0x92, 0x41, 0x22, 0x32, 0x20, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4,
	0xba, 0xa7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0x28, 0xe7,
	0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe8, 0xaf, 0xb4, 0xe6,
	0x98, 0x8e, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x95, 0xb0, 0xe5,
	0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0xe0, 0x41,
	0x02, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x40, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0xe8, 0xa1,
	0xa5, 0xe5, 0x85, 0x85, 0xe6, 0x9d, 0x90, 0xe6, 0x96, 0x99, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d,
	0x80, 0x29, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x9c,
	0x02, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8,
	0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c,
	0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95,
	0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x55, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61,
	0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x12, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x64, 0x61, 0x74, 0x61, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1f, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0x92, 0x41, 0x04, 0x32, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb9, 0x02,
	0x0a, 0x15, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1c, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84,
	0xe4, 0xba, 0xa7, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x0e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6b,
	0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x3e, 0xe5, 0x8f,
	0x91, 0xe8, 0xa1, 0x8c, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84,
	0xe4, 0xba, 0xa7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xe4, 0xb8, 0x80, 0xe8, 0x87, 0xb4, 0x30, 0xe4, 0xb8, 0x8d, 0xe4,
	0xb8, 0x80, 0xe8, 0x87, 0xb4, 0x31, 0xe4, 0xb8, 0x80, 0xe8, 0x87, 0xb4, 0x52, 0x0d, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4d, 0x92, 0x41, 0x4a, 0x32, 0x48, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c, 0xe7, 0x9a, 0x84, 0xe6,
	0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe4, 0xb8, 0x80, 0xe8, 0x87, 0xb4, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99,
	0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4,
	0xba, 0xa7, 0x69, 0x63, 0x6f, 0x6e, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0xac, 0x02, 0x0a, 0x16, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x4f, 0x75, 0x74, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99,
	0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6,
	0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x54, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x12, 0x92, 0x41, 0x0c,
	0x32, 0x0a, 0x64, 0x61, 0x74, 0x61, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x31, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x32, 0x05, 0xe7, 0xbb, 0x84, 0x69, 0x64, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x67, 0x69, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x12, 0x42, 0x0a,
	0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x95, 0xb0,
	0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x69, 0x64, 0xe0, 0x41,
	0x02, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x67, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x95, 0xb0, 0xe5,
	0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe7, 0xbb, 0x84, 0x69, 0x64, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x67, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x1a,
	0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0xe6, 0x95, 0xb0, 0xe5, 0xad,
	0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xc9, 0x07, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f,
	0xb7, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x31, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f,
	0xb7, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x31, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x95, 0xb0, 0xe5,
	0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x12, 0x6f, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50,
	0x92, 0x41, 0x4d, 0x32, 0x4b, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c, 0xe7, 0x9a, 0x84, 0xe6, 0x95,
	0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe4, 0xb8, 0x8d, 0xe4, 0xb8, 0x80, 0xe8, 0x87, 0xb4, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe5,
	0x80, 0x99, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5,
	0x84, 0xe4, 0xba, 0xa7, 0x69, 0x63, 0x6f, 0x6e, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x3d, 0x92, 0x41, 0x37, 0x32, 0x35, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4,
	0xba, 0xa7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x31, 0x2d, 0xe5, 0x9b, 0xbe, 0xe7, 0x89,
	0x87, 0x3b, 0x32, 0x2d, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0x3b, 0x33, 0x2d, 0x33, 0x44, 0xe6,
	0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18,
	0x92, 0x41, 0x12, 0x32, 0x10, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0,
	0xbc, 0x20, 0xe5, 0x88, 0x86, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe9, 0x93,
	0xb8, 0xe9, 0x80, 0xa0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x55, 0x4e, 0x49, 0x58,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x2c, 0x20, 0xe5, 0x8d, 0x95, 0xe4, 0xbd,
	0x8d, 0x3a, 0xe7, 0xa7, 0x92, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x62, 0x63, 0x62, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x37, 0x32, 0x35, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97,
	0xe9, 0x93, 0xbe, 0xe6, 0xb5, 0x8f, 0xe8, 0xa7, 0x88, 0xe5, 0x99, 0xa8, 0x28, 0x42, 0x43, 0x42,
	0x29, 0xe7, 0x9a, 0x84, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5,
	0xe7, 0x9c, 0x8b, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x62, 0x63, 0x62, 0x55, 0x72, 0x69, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x19, 0x32, 0x17, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7,
	0x55, 0x52, 0x49, 0x28, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0x29, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x32,
	0x13, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x7a, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x34, 0x92, 0x41, 0x2e,
	0x32, 0x2c, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x30,
	0x3a, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0x3b, 0x31, 0x3a, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93,
	0x28, 0xe4, 0xb8, 0x80, 0xe6, 0x89, 0x8b, 0x29, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe0, 0x41,
	0x02, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb5, 0x01, 0x0a,
	0x15, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe7,
	0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0xe6,
	0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xf0, 0x03, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x41, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe4, 0xba,
	0xa4, 0xe6, 0x98, 0x93, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba,
	0xe5, 0x8f, 0xb7, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12,
	0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32,
	0x18, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xba, 0xab,
	0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x6f,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0x92,
	0x41, 0x18, 0x32, 0x16, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7,
	0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x20, 0xe5, 0x88, 0x86, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2f, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x55, 0x4e, 0x49, 0x58, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6,
	0x88, 0xb3, 0x2c, 0x20, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x3a, 0xe7, 0xa7, 0x92, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5,
	0x84, 0xe4, 0xba, 0xa7, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3,
	0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0,
	0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x54, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x12, 0x92, 0x41, 0x0c, 0x32, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x1f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x92, 0x41, 0x04, 0x32, 0x02, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x3c, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x30, 0x3a, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0x3b, 0x31, 0x3a,
	0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x28, 0xe4, 0xb8, 0x80, 0xe6, 0x89, 0x8b, 0x29, 0xe4, 0xba,
	0xa4, 0xe6, 0x98, 0x93, 0x3b, 0x32, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xba, 0xa4, 0xe6,
	0x98, 0x93, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78,
	0x49, 0x64, 0x12, 0x5a, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c,
	0x92, 0x41, 0x26, 0x32, 0x24, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe7, 0x94, 0x9f, 0xe6, 0x88,
	0x90, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8,
	0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe5, 0x8f, 0xb7, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x2f, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x55, 0x4e, 0x49, 0x58, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe6, 0x88, 0xb3, 0x2c, 0x20, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x3a, 0xe7, 0xa7, 0x92,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90,
	0x02, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64,
	0x64, 0x4f, 0x75, 0x74, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99,
	0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6,
	0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x4f, 0x75,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x12, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x1f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x92, 0x41, 0x04, 0x32, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x32, 0xe9, 0x08, 0x0a, 0x0c, 0x44, 0x61, 0x72, 0x73, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61,
	0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72,
	0x73, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4f,
	0x75, 0x74, 0x22, 0x36, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6,
	0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0xbd, 0x91, 0xe7, 0x82, 0xb9, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x64, 0x61, 0x72, 0x73, 0x70, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x1a, 0x1f, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x22, 0x37, 0x92,
	0x41, 0x14, 0x12, 0x12, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c,
	0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22,
	0x15, 0x2f, 0x64, 0x61, 0x72, 0x73, 0x70, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x1a, 0x20, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x22, 0x35, 0x92, 0x41,
	0x11, 0x12, 0x0f, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0x8c, 0xe5,
	0x95, 0x86, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x64, 0x61,
	0x72, 0x73, 0x70, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0xb4, 0x01, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x27,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x1a, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x4f, 0x75,
	0x74, 0x22, 0x47, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5,
	0x84, 0xe4, 0xba, 0xa7, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x64, 0x61, 0x72, 0x73,
	0x70, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0xb6, 0x01, 0x0a, 0x13, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x64, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72,
	0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64,
	0x4f, 0x75, 0x74, 0x22, 0x4e, 0x92, 0x41, 0x23, 0x12, 0x21, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97,
	0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe4, 0xb8, 0x8a, 0xe6,
	0x8a, 0xa5, 0xe7, 0xbb, 0x84, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x64, 0x61, 0x72, 0x73, 0x70, 0x2f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x61, 0x64, 0x64, 0x12, 0x98, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x22, 0x3f, 0x92,
	0x41, 0x1a, 0x12, 0x18, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x64, 0x61, 0x72, 0x73, 0x70, 0x2f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x64, 0x64, 0x12, 0xac,
	0x01, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x1a, 0x27,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x44, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe6, 0x95,
	0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22,
	0x1c, 0x2f, 0x64, 0x61, 0x72, 0x73, 0x70, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x14, 0x5a,
	0x12, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x72, 0x73, 0x70, 0x70, 0x62, 0x3b, 0x64, 0x61, 0x72, 0x73,
	0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_darsppb_darsp_proto_rawDescOnce sync.Once
	file_pb_darsppb_darsp_proto_rawDescData = file_pb_darsppb_darsp_proto_rawDesc
)

func file_pb_darsppb_darsp_proto_rawDescGZIP() []byte {
	file_pb_darsppb_darsp_proto_rawDescOnce.Do(func() {
		file_pb_darsppb_darsp_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_darsppb_darsp_proto_rawDescData)
	})
	return file_pb_darsppb_darsp_proto_rawDescData
}

var file_pb_darsppb_darsp_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_pb_darsppb_darsp_proto_goTypes = []interface{}{
	(*PartnerAddIn)(nil),                 // 0: daop.pb.darsppb.PartnerAddIn
	(*PartnerAddOut)(nil),                // 1: daop.pb.darsppb.PartnerAddOut
	(*PlatformAddIn)(nil),                // 2: daop.pb.darsppb.PlatformAddIn
	(*PlatformAddOut)(nil),               // 3: daop.pb.darsppb.PlatformAddOut
	(*PublisherAddIn)(nil),               // 4: daop.pb.darsppb.PublisherAddIn
	(*PublisherAddOut)(nil),              // 5: daop.pb.darsppb.PublisherAddOut
	(*AssetRegistrationAddIn)(nil),       // 6: daop.pb.darsppb.AssetRegistrationAddIn
	(*AssetRegistrationAddOut)(nil),      // 7: daop.pb.darsppb.AssetRegistrationAddOut
	(*AssetReportGroupAddIn)(nil),        // 8: daop.pb.darsppb.AssetReportGroupAddIn
	(*AssetReportGroupAddOut)(nil),       // 9: daop.pb.darsppb.AssetReportGroupAddOut
	(*AssetReportAddIn)(nil),             // 10: daop.pb.darsppb.AssetReportAddIn
	(*AssetReportAddData)(nil),           // 11: daop.pb.darsppb.AssetReportAddData
	(*AssetReportTransferIn)(nil),        // 12: daop.pb.darsppb.AssetReportTransferIn
	(*AssetReportTransferData)(nil),      // 13: daop.pb.darsppb.AssetReportTransferData
	(*AssetReportTransferOut)(nil),       // 14: daop.pb.darsppb.AssetReportTransferOut
	(*AssetReportChainData)(nil),         // 15: daop.pb.darsppb.AssetReportChainData
	(*AssetReportAddOut)(nil),            // 16: daop.pb.darsppb.AssetReportAddOut
	(*PartnerAddOut_Data)(nil),           // 17: daop.pb.darsppb.PartnerAddOut.Data
	(*PlatformAddOut_Data)(nil),          // 18: daop.pb.darsppb.PlatformAddOut.Data
	(*PublisherAddOut_Data)(nil),         // 19: daop.pb.darsppb.PublisherAddOut.Data
	(*AssetRegistrationAddOut_Data)(nil), // 20: daop.pb.darsppb.AssetRegistrationAddOut.Data
	(*AssetReportGroupAddOut_Data)(nil),  // 21: daop.pb.darsppb.AssetReportGroupAddOut.Data
	(*AssetReportTransferOut_Data)(nil),  // 22: daop.pb.darsppb.AssetReportTransferOut.Data
	(*AssetReportAddOut_Data)(nil),       // 23: daop.pb.darsppb.AssetReportAddOut.Data
}
var file_pb_darsppb_darsp_proto_depIdxs = []int32{
	17, // 0: daop.pb.darsppb.PartnerAddOut.data:type_name -> daop.pb.darsppb.PartnerAddOut.Data
	18, // 1: daop.pb.darsppb.PlatformAddOut.data:type_name -> daop.pb.darsppb.PlatformAddOut.Data
	19, // 2: daop.pb.darsppb.PublisherAddOut.data:type_name -> daop.pb.darsppb.PublisherAddOut.Data
	20, // 3: daop.pb.darsppb.AssetRegistrationAddOut.data:type_name -> daop.pb.darsppb.AssetRegistrationAddOut.Data
	21, // 4: daop.pb.darsppb.AssetReportGroupAddOut.data:type_name -> daop.pb.darsppb.AssetReportGroupAddOut.Data
	11, // 5: daop.pb.darsppb.AssetReportAddIn.list:type_name -> daop.pb.darsppb.AssetReportAddData
	15, // 6: daop.pb.darsppb.AssetReportAddData.chain_list:type_name -> daop.pb.darsppb.AssetReportChainData
	13, // 7: daop.pb.darsppb.AssetReportTransferIn.list:type_name -> daop.pb.darsppb.AssetReportTransferData
	22, // 8: daop.pb.darsppb.AssetReportTransferOut.data:type_name -> daop.pb.darsppb.AssetReportTransferOut.Data
	23, // 9: daop.pb.darsppb.AssetReportAddOut.data:type_name -> daop.pb.darsppb.AssetReportAddOut.Data
	0,  // 10: daop.pb.darsppb.DarspService.PartnerApply:input_type -> daop.pb.darsppb.PartnerAddIn
	2,  // 11: daop.pb.darsppb.DarspService.PlatformApply:input_type -> daop.pb.darsppb.PlatformAddIn
	4,  // 12: daop.pb.darsppb.DarspService.PublisherApply:input_type -> daop.pb.darsppb.PublisherAddIn
	6,  // 13: daop.pb.darsppb.DarspService.AssetRegistrationApply:input_type -> daop.pb.darsppb.AssetRegistrationAddIn
	8,  // 14: daop.pb.darsppb.DarspService.AssetReportGroupAdd:input_type -> daop.pb.darsppb.AssetReportGroupAddIn
	10, // 15: daop.pb.darsppb.DarspService.AssetReportAdd:input_type -> daop.pb.darsppb.AssetReportAddIn
	12, // 16: daop.pb.darsppb.DarspService.AssetReportTransfer:input_type -> daop.pb.darsppb.AssetReportTransferIn
	1,  // 17: daop.pb.darsppb.DarspService.PartnerApply:output_type -> daop.pb.darsppb.PartnerAddOut
	3,  // 18: daop.pb.darsppb.DarspService.PlatformApply:output_type -> daop.pb.darsppb.PlatformAddOut
	5,  // 19: daop.pb.darsppb.DarspService.PublisherApply:output_type -> daop.pb.darsppb.PublisherAddOut
	7,  // 20: daop.pb.darsppb.DarspService.AssetRegistrationApply:output_type -> daop.pb.darsppb.AssetRegistrationAddOut
	9,  // 21: daop.pb.darsppb.DarspService.AssetReportGroupAdd:output_type -> daop.pb.darsppb.AssetReportGroupAddOut
	16, // 22: daop.pb.darsppb.DarspService.AssetReportAdd:output_type -> daop.pb.darsppb.AssetReportAddOut
	14, // 23: daop.pb.darsppb.DarspService.AssetReportTransfer:output_type -> daop.pb.darsppb.AssetReportTransferOut
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_pb_darsppb_darsp_proto_init() }
func file_pb_darsppb_darsp_proto_init() {
	if File_pb_darsppb_darsp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_darsppb_darsp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerAddIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerAddOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformAddIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformAddOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherAddIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherAddOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRegistrationAddIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRegistrationAddOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportGroupAddIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportGroupAddOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportAddIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportAddData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportTransferIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportTransferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportTransferOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportChainData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportAddOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerAddOut_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformAddOut_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherAddOut_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRegistrationAddOut_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportGroupAddOut_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportTransferOut_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_darsppb_darsp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReportAddOut_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_darsppb_darsp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_darsppb_darsp_proto_goTypes,
		DependencyIndexes: file_pb_darsppb_darsp_proto_depIdxs,
		MessageInfos:      file_pb_darsppb_darsp_proto_msgTypes,
	}.Build()
	File_pb_darsppb_darsp_proto = out.File
	file_pb_darsppb_darsp_proto_rawDesc = nil
	file_pb_darsppb_darsp_proto_goTypes = nil
	file_pb_darsppb_darsp_proto_depIdxs = nil
}
