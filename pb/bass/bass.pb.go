// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/bass/bass.proto

package bass

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewTxIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *NewTxIdReq) Reset() {
	*x = NewTxIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTxIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTxIdReq) ProtoMessage() {}

func (x *NewTxIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTxIdReq.ProtoReflect.Descriptor instead.
func (*NewTxIdReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{0}
}

func (x *NewTxIdReq) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type NewTxIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *NewTxIdInfo `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *NewTxIdResp) Reset() {
	*x = NewTxIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTxIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTxIdResp) ProtoMessage() {}

func (x *NewTxIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTxIdResp.ProtoReflect.Descriptor instead.
func (*NewTxIdResp) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{1}
}

func (x *NewTxIdResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NewTxIdResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *NewTxIdResp) GetData() *NewTxIdInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewTxIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"` //操作员账号
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"` //链上合约地址
	TxId            string `protobuf:"bytes,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                                  //交易id
	BlockNumber     uint32 `protobuf:"varint,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`            //上链生成的交易所在区块号
}

func (x *NewTxIdInfo) Reset() {
	*x = NewTxIdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTxIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTxIdInfo) ProtoMessage() {}

func (x *NewTxIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTxIdInfo.ProtoReflect.Descriptor instead.
func (*NewTxIdInfo) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{2}
}

func (x *NewTxIdInfo) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *NewTxIdInfo) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *NewTxIdInfo) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *NewTxIdInfo) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type SubmitProofInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNo                 string `protobuf:"bytes,1,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	ProofContractAddress  string `protobuf:"bytes,2,opt,name=proof_contract_address,json=proofContractAddress,proto3" json:"proof_contract_address,omitempty"`
	CredentialId          uint32 `protobuf:"varint,3,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	ManageContractAddress string `protobuf:"bytes,4,opt,name=manage_contract_address,json=manageContractAddress,proto3" json:"manage_contract_address,omitempty"`
	OwnerAddress          string `protobuf:"bytes,5,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	Chain                 uint32 `protobuf:"varint,6,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *SubmitProofInfo) Reset() {
	*x = SubmitProofInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitProofInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitProofInfo) ProtoMessage() {}

func (x *SubmitProofInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitProofInfo.ProtoReflect.Descriptor instead.
func (*SubmitProofInfo) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitProofInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *SubmitProofInfo) GetProofContractAddress() string {
	if x != nil {
		return x.ProofContractAddress
	}
	return ""
}

func (x *SubmitProofInfo) GetCredentialId() uint32 {
	if x != nil {
		return x.CredentialId
	}
	return 0
}

func (x *SubmitProofInfo) GetManageContractAddress() string {
	if x != nil {
		return x.ManageContractAddress
	}
	return ""
}

func (x *SubmitProofInfo) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *SubmitProofInfo) GetChain() uint32 {
	if x != nil {
		return x.Chain
	}
	return 0
}

type ProofOfDIDDeclareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmitProof *SubmitProofInfo       `protobuf:"bytes,1,opt,name=submit_proof,json=submitProof,proto3" json:"submit_proof,omitempty"`
	Data        *ProofOfDIDDeclareData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProofOfDIDDeclareReq) Reset() {
	*x = ProofOfDIDDeclareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfDIDDeclareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfDIDDeclareReq) ProtoMessage() {}

func (x *ProofOfDIDDeclareReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfDIDDeclareReq.ProtoReflect.Descriptor instead.
func (*ProofOfDIDDeclareReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{4}
}

func (x *ProofOfDIDDeclareReq) GetSubmitProof() *SubmitProofInfo {
	if x != nil {
		return x.SubmitProof
	}
	return nil
}

func (x *ProofOfDIDDeclareReq) GetData() *ProofOfDIDDeclareData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProofOfDIDDeclareData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string                  `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Id      string                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Issuer  string                  `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Proof   string                  `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	Claim   *ProofOfDIDDeclareClaim `protobuf:"bytes,5,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *ProofOfDIDDeclareData) Reset() {
	*x = ProofOfDIDDeclareData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfDIDDeclareData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfDIDDeclareData) ProtoMessage() {}

func (x *ProofOfDIDDeclareData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfDIDDeclareData.ProtoReflect.Descriptor instead.
func (*ProofOfDIDDeclareData) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{5}
}

func (x *ProofOfDIDDeclareData) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ProofOfDIDDeclareData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProofOfDIDDeclareData) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *ProofOfDIDDeclareData) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *ProofOfDIDDeclareData) GetClaim() *ProofOfDIDDeclareClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

type ProofOfDIDDeclareClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidType     string `protobuf:"bytes,1,opt,name=did_type,json=didType,proto3" json:"did_type,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Profile     string `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	DeclareTime string `protobuf:"bytes,4,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Address     string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Extension   string `protobuf:"bytes,6,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ProofOfDIDDeclareClaim) Reset() {
	*x = ProofOfDIDDeclareClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfDIDDeclareClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfDIDDeclareClaim) ProtoMessage() {}

func (x *ProofOfDIDDeclareClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfDIDDeclareClaim.ProtoReflect.Descriptor instead.
func (*ProofOfDIDDeclareClaim) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{6}
}

func (x *ProofOfDIDDeclareClaim) GetDidType() string {
	if x != nil {
		return x.DidType
	}
	return ""
}

func (x *ProofOfDIDDeclareClaim) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProofOfDIDDeclareClaim) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *ProofOfDIDDeclareClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *ProofOfDIDDeclareClaim) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProofOfDIDDeclareClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type CopyrightClaimReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmitProof *SubmitProofInfo    `protobuf:"bytes,1,opt,name=submit_proof,json=submitProof,proto3" json:"submit_proof,omitempty"`
	Data        *CopyrightClaimData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightClaimReq) Reset() {
	*x = CopyrightClaimReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimReq) ProtoMessage() {}

func (x *CopyrightClaimReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimReq.ProtoReflect.Descriptor instead.
func (*CopyrightClaimReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{7}
}

func (x *CopyrightClaimReq) GetSubmitProof() *SubmitProofInfo {
	if x != nil {
		return x.SubmitProof
	}
	return nil
}

func (x *CopyrightClaimReq) GetData() *CopyrightClaimData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightClaimData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string          `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Id      string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Issuer  string          `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Proof   string          `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	Claim   *CopyrightClaim `protobuf:"bytes,5,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *CopyrightClaimData) Reset() {
	*x = CopyrightClaimData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimData) ProtoMessage() {}

func (x *CopyrightClaimData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimData.ProtoReflect.Descriptor instead.
func (*CopyrightClaimData) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{8}
}

func (x *CopyrightClaimData) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *CopyrightClaimData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CopyrightClaimData) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *CopyrightClaimData) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *CopyrightClaimData) GetClaim() *CopyrightClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

type CopyrightClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidCredential     string `protobuf:"bytes,1,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	Hash              string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	ClaimTitle        string `protobuf:"bytes,4,opt,name=claim_title,json=claimTitle,proto3" json:"claim_title,omitempty"`
	AttachUrl         string `protobuf:"bytes,5,opt,name=attach_url,json=attachUrl,proto3" json:"attach_url,omitempty"`
	Creator           string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	CreativeTime      string `protobuf:"bytes,7,opt,name=creative_time,json=creativeTime,proto3" json:"creative_time,omitempty"`
	IsOriginal        uint32 `protobuf:"varint,8,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	CopyrightCategory string `protobuf:"bytes,9,opt,name=copyright_category,json=copyrightCategory,proto3" json:"copyright_category,omitempty"`
	AuthorizedNumber  uint32 `protobuf:"varint,10,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	DeclareTime       string `protobuf:"bytes,11,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension         string `protobuf:"bytes,12,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CopyrightClaim) Reset() {
	*x = CopyrightClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaim) ProtoMessage() {}

func (x *CopyrightClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaim.ProtoReflect.Descriptor instead.
func (*CopyrightClaim) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{9}
}

func (x *CopyrightClaim) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CopyrightClaim) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CopyrightClaim) GetClaimTitle() string {
	if x != nil {
		return x.ClaimTitle
	}
	return ""
}

func (x *CopyrightClaim) GetAttachUrl() string {
	if x != nil {
		return x.AttachUrl
	}
	return ""
}

func (x *CopyrightClaim) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CopyrightClaim) GetCreativeTime() string {
	if x != nil {
		return x.CreativeTime
	}
	return ""
}

func (x *CopyrightClaim) GetIsOriginal() uint32 {
	if x != nil {
		return x.IsOriginal
	}
	return 0
}

func (x *CopyrightClaim) GetCopyrightCategory() string {
	if x != nil {
		return x.CopyrightCategory
	}
	return ""
}

func (x *CopyrightClaim) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *CopyrightClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *CopyrightClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type CopyrightAuthorizationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmitProof *SubmitProofInfo            `protobuf:"bytes,1,opt,name=submit_proof,json=submitProof,proto3" json:"submit_proof,omitempty"`
	Data        *CopyrightAuthorizationData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightAuthorizationReq) Reset() {
	*x = CopyrightAuthorizationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightAuthorizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightAuthorizationReq) ProtoMessage() {}

func (x *CopyrightAuthorizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightAuthorizationReq.ProtoReflect.Descriptor instead.
func (*CopyrightAuthorizationReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{10}
}

func (x *CopyrightAuthorizationReq) GetSubmitProof() *SubmitProofInfo {
	if x != nil {
		return x.SubmitProof
	}
	return nil
}

func (x *CopyrightAuthorizationReq) GetData() *CopyrightAuthorizationData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightAuthorizationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string                       `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Id      string                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Issuer  string                       `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Proof   string                       `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	Claim   *CopyrightAuthorizationClaim `protobuf:"bytes,5,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *CopyrightAuthorizationData) Reset() {
	*x = CopyrightAuthorizationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightAuthorizationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightAuthorizationData) ProtoMessage() {}

func (x *CopyrightAuthorizationData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightAuthorizationData.ProtoReflect.Descriptor instead.
func (*CopyrightAuthorizationData) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{11}
}

func (x *CopyrightAuthorizationData) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *CopyrightAuthorizationData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CopyrightAuthorizationData) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *CopyrightAuthorizationData) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *CopyrightAuthorizationData) GetClaim() *CopyrightAuthorizationClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

type CopyrightAuthorizationClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidCredential         string `protobuf:"bytes,1,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential   string `protobuf:"bytes,2,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCategory string `protobuf:"bytes,4,opt,name=authorization_category,json=authorizationCategory,proto3" json:"authorization_category,omitempty"`
	AuthorizedNumber      uint32 `protobuf:"varint,5,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	DeclareTime           string `protobuf:"bytes,6,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension             string `protobuf:"bytes,7,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CopyrightAuthorizationClaim) Reset() {
	*x = CopyrightAuthorizationClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightAuthorizationClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightAuthorizationClaim) ProtoMessage() {}

func (x *CopyrightAuthorizationClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightAuthorizationClaim.ProtoReflect.Descriptor instead.
func (*CopyrightAuthorizationClaim) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{12}
}

func (x *CopyrightAuthorizationClaim) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CopyrightAuthorizationClaim) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *CopyrightAuthorizationClaim) GetAuthorizationCategory() string {
	if x != nil {
		return x.AuthorizationCategory
	}
	return ""
}

func (x *CopyrightAuthorizationClaim) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *CopyrightAuthorizationClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *CopyrightAuthorizationClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type CollectionCredentialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmitProof *SubmitProofInfo          `protobuf:"bytes,2,opt,name=submit_proof,json=submitProof,proto3" json:"submit_proof,omitempty"`
	Data        *CollectionCredentialData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionCredentialReq) Reset() {
	*x = CollectionCredentialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCredentialReq) ProtoMessage() {}

func (x *CollectionCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCredentialReq.ProtoReflect.Descriptor instead.
func (*CollectionCredentialReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{13}
}

func (x *CollectionCredentialReq) GetSubmitProof() *SubmitProofInfo {
	if x != nil {
		return x.SubmitProof
	}
	return nil
}

func (x *CollectionCredentialReq) GetData() *CollectionCredentialData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionCredentialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string                     `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Id      string                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Issuer  string                     `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Proof   string                     `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	Claim   *CollectionCredentialClaim `protobuf:"bytes,5,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *CollectionCredentialData) Reset() {
	*x = CollectionCredentialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCredentialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCredentialData) ProtoMessage() {}

func (x *CollectionCredentialData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCredentialData.ProtoReflect.Descriptor instead.
func (*CollectionCredentialData) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{14}
}

func (x *CollectionCredentialData) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *CollectionCredentialData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CollectionCredentialData) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *CollectionCredentialData) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *CollectionCredentialData) GetClaim() *CollectionCredentialClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

type CollectionCredentialClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName          string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	ClaimSignAddress        string `protobuf:"bytes,2,opt,name=claim_sign_address,json=claimSignAddress,proto3" json:"claim_sign_address,omitempty"`
	DidCredential           string `protobuf:"bytes,3,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential     string `protobuf:"bytes,4,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCredential string `protobuf:"bytes,5,opt,name=authorization_credential,json=authorizationCredential,proto3" json:"authorization_credential,omitempty"`
	CollectionHash          string `protobuf:"bytes,6,opt,name=collection_hash,json=collectionHash,proto3" json:"collection_hash,omitempty"`
	TokenId                 string `protobuf:"bytes,7,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	From                    string `protobuf:"bytes,8,opt,name=from,proto3" json:"from,omitempty"`
	DeclareTime             string `protobuf:"bytes,9,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension               string `protobuf:"bytes,10,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CollectionCredentialClaim) Reset() {
	*x = CollectionCredentialClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCredentialClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCredentialClaim) ProtoMessage() {}

func (x *CollectionCredentialClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCredentialClaim.ProtoReflect.Descriptor instead.
func (*CollectionCredentialClaim) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{15}
}

func (x *CollectionCredentialClaim) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionCredentialClaim) GetClaimSignAddress() string {
	if x != nil {
		return x.ClaimSignAddress
	}
	return ""
}

func (x *CollectionCredentialClaim) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CollectionCredentialClaim) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *CollectionCredentialClaim) GetAuthorizationCredential() string {
	if x != nil {
		return x.AuthorizationCredential
	}
	return ""
}

func (x *CollectionCredentialClaim) GetCollectionHash() string {
	if x != nil {
		return x.CollectionHash
	}
	return ""
}

func (x *CollectionCredentialClaim) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *CollectionCredentialClaim) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CollectionCredentialClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *CollectionCredentialClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type CollectionTransferCredentialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmitProof *SubmitProofInfo                  `protobuf:"bytes,2,opt,name=submit_proof,json=submitProof,proto3" json:"submit_proof,omitempty"`
	Data        *CollectionTransferCredentialData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionTransferCredentialReq) Reset() {
	*x = CollectionTransferCredentialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTransferCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTransferCredentialReq) ProtoMessage() {}

func (x *CollectionTransferCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTransferCredentialReq.ProtoReflect.Descriptor instead.
func (*CollectionTransferCredentialReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{16}
}

func (x *CollectionTransferCredentialReq) GetSubmitProof() *SubmitProofInfo {
	if x != nil {
		return x.SubmitProof
	}
	return nil
}

func (x *CollectionTransferCredentialReq) GetData() *CollectionTransferCredentialData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionTransferCredentialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string                             `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Id      string                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Issuer  string                             `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Proof   string                             `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	Claim   *CollectionTransferCredentialClaim `protobuf:"bytes,5,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *CollectionTransferCredentialData) Reset() {
	*x = CollectionTransferCredentialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTransferCredentialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTransferCredentialData) ProtoMessage() {}

func (x *CollectionTransferCredentialData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTransferCredentialData.ProtoReflect.Descriptor instead.
func (*CollectionTransferCredentialData) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{17}
}

func (x *CollectionTransferCredentialData) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *CollectionTransferCredentialData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CollectionTransferCredentialData) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *CollectionTransferCredentialData) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *CollectionTransferCredentialData) GetClaim() *CollectionTransferCredentialClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

type CollectionTransferCredentialClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName                string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	ClaimSignAddress              string `protobuf:"bytes,2,opt,name=claim_sign_address,json=claimSignAddress,proto3" json:"claim_sign_address,omitempty"`
	DidCredential                 string `protobuf:"bytes,3,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential           string `protobuf:"bytes,4,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCredential       string `protobuf:"bytes,5,opt,name=authorization_credential,json=authorizationCredential,proto3" json:"authorization_credential,omitempty"`
	CollectionCredential          string `protobuf:"bytes,6,opt,name=collection_credential,json=collectionCredential,proto3" json:"collection_credential,omitempty"`
	PreviousTransactionCredential string `protobuf:"bytes,7,opt,name=previous_transaction_credential,json=previousTransactionCredential,proto3" json:"previous_transaction_credential,omitempty"`
	CollectionHash                string `protobuf:"bytes,8,opt,name=collection_hash,json=collectionHash,proto3" json:"collection_hash,omitempty"`
	TokenId                       string `protobuf:"bytes,9,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	From                          string `protobuf:"bytes,10,opt,name=from,proto3" json:"from,omitempty"`
	To                            string `protobuf:"bytes,11,opt,name=to,proto3" json:"to,omitempty"`
	DeclareTime                   string `protobuf:"bytes,12,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension                     string `protobuf:"bytes,13,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CollectionTransferCredentialClaim) Reset() {
	*x = CollectionTransferCredentialClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTransferCredentialClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTransferCredentialClaim) ProtoMessage() {}

func (x *CollectionTransferCredentialClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTransferCredentialClaim.ProtoReflect.Descriptor instead.
func (*CollectionTransferCredentialClaim) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{18}
}

func (x *CollectionTransferCredentialClaim) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetClaimSignAddress() string {
	if x != nil {
		return x.ClaimSignAddress
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetAuthorizationCredential() string {
	if x != nil {
		return x.AuthorizationCredential
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetCollectionCredential() string {
	if x != nil {
		return x.CollectionCredential
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetPreviousTransactionCredential() string {
	if x != nil {
		return x.PreviousTransactionCredential
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetCollectionHash() string {
	if x != nil {
		return x.CollectionHash
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *CollectionTransferCredentialClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type BatchPostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceIds  []uint32 `protobuf:"varint,1,rep,packed,name=source_ids,json=sourceIds,proto3" json:"source_ids,omitempty"`
	SourceType uint32   `protobuf:"varint,2,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	Address    string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Chain      uint32   `protobuf:"varint,5,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *BatchPostInfo) Reset() {
	*x = BatchPostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPostInfo) ProtoMessage() {}

func (x *BatchPostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPostInfo.ProtoReflect.Descriptor instead.
func (*BatchPostInfo) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{19}
}

func (x *BatchPostInfo) GetSourceIds() []uint32 {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

func (x *BatchPostInfo) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

func (x *BatchPostInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BatchPostInfo) GetChain() uint32 {
	if x != nil {
		return x.Chain
	}
	return 0
}

type BatchPostMintReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchPost *BatchPostInfo     `protobuf:"bytes,1,opt,name=batch_post,json=batchPost,proto3" json:"batch_post,omitempty"`
	Args      []*TxMintBatchArgs `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *BatchPostMintReq) Reset() {
	*x = BatchPostMintReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPostMintReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPostMintReq) ProtoMessage() {}

func (x *BatchPostMintReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPostMintReq.ProtoReflect.Descriptor instead.
func (*BatchPostMintReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{20}
}

func (x *BatchPostMintReq) GetBatchPost() *BatchPostInfo {
	if x != nil {
		return x.BatchPost
	}
	return nil
}

func (x *BatchPostMintReq) GetArgs() []*TxMintBatchArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type CollectionNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId   uint32 `protobuf:"varint,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	SourceType uint32 `protobuf:"varint,2,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"` // 上链数据来源：0:(da_credential)身份存证id;1:collection表id;2:collection_transaction表id,3:collection_checkin,4:声明存证,5:授权存证,6:藏品存证,7:藏品交易存证,8:collection_batch,9:combaintion,10:lock,11:unlock,12: collection_transaction_batch
	AppNo      string `protobuf:"bytes,3,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	NotifyUrl  string `protobuf:"bytes,6,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts string `protobuf:"bytes,7,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
}

func (x *CollectionNotifyReq) Reset() {
	*x = CollectionNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionNotifyReq) ProtoMessage() {}

func (x *CollectionNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionNotifyReq.ProtoReflect.Descriptor instead.
func (*CollectionNotifyReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{21}
}

func (x *CollectionNotifyReq) GetSourceId() uint32 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *CollectionNotifyReq) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

func (x *CollectionNotifyReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *CollectionNotifyReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CollectionNotifyReq) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

type TxMintBatchArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner   string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	TokenId string `protobuf:"bytes,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Uri     string `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	IdType  bool   `protobuf:"varint,6,opt,name=id_type,json=idType,proto3" json:"id_type,omitempty"`
}

func (x *TxMintBatchArgs) Reset() {
	*x = TxMintBatchArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxMintBatchArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxMintBatchArgs) ProtoMessage() {}

func (x *TxMintBatchArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxMintBatchArgs.ProtoReflect.Descriptor instead.
func (*TxMintBatchArgs) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{22}
}

func (x *TxMintBatchArgs) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TxMintBatchArgs) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *TxMintBatchArgs) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *TxMintBatchArgs) GetIdType() bool {
	if x != nil {
		return x.IdType
	}
	return false
}

type BatchPostTransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchPost *BatchPostInfo         `protobuf:"bytes,1,opt,name=batch_post,json=batchPost,proto3" json:"batch_post,omitempty"`
	Args      []*TxTransferBatchArgs `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *BatchPostTransferReq) Reset() {
	*x = BatchPostTransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPostTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPostTransferReq) ProtoMessage() {}

func (x *BatchPostTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPostTransferReq.ProtoReflect.Descriptor instead.
func (*BatchPostTransferReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{23}
}

func (x *BatchPostTransferReq) GetBatchPost() *BatchPostInfo {
	if x != nil {
		return x.BatchPost
	}
	return nil
}

func (x *BatchPostTransferReq) GetArgs() []*TxTransferBatchArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TxTransferBatchArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To      string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Data    string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TxTransferBatchArgs) Reset() {
	*x = TxTransferBatchArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxTransferBatchArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxTransferBatchArgs) ProtoMessage() {}

func (x *TxTransferBatchArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxTransferBatchArgs.ProtoReflect.Descriptor instead.
func (*TxTransferBatchArgs) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{24}
}

func (x *TxTransferBatchArgs) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TxTransferBatchArgs) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TxTransferBatchArgs) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *TxTransferBatchArgs) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type BatchPostUseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchPost *BatchPostInfo `protobuf:"bytes,1,opt,name=batch_post,json=batchPost,proto3" json:"batch_post,omitempty"`
	Args      []string       `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *BatchPostUseReq) Reset() {
	*x = BatchPostUseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPostUseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPostUseReq) ProtoMessage() {}

func (x *BatchPostUseReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPostUseReq.ProtoReflect.Descriptor instead.
func (*BatchPostUseReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{25}
}

func (x *BatchPostUseReq) GetBatchPost() *BatchPostInfo {
	if x != nil {
		return x.BatchPost
	}
	return nil
}

func (x *BatchPostUseReq) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type BatchNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // 请求id
	Tx      *BatchNotifyReq_ChainNotifyTx `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Receipt *BatchNotifyReq_ReceiptInfo   `protobuf:"bytes,3,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Error   *BatchNotifyReq_ErrorInfo     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BatchNotifyReq) Reset() {
	*x = BatchNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNotifyReq) ProtoMessage() {}

func (x *BatchNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNotifyReq.ProtoReflect.Descriptor instead.
func (*BatchNotifyReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{26}
}

func (x *BatchNotifyReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchNotifyReq) GetTx() *BatchNotifyReq_ChainNotifyTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *BatchNotifyReq) GetReceipt() *BatchNotifyReq_ReceiptInfo {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *BatchNotifyReq) GetError() *BatchNotifyReq_ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type ChainNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId         uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`                        //上链表id
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"` //操作员账号
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"` //链上合约地址
	TxId            string `protobuf:"bytes,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                                  //交易id
	BlockNumber     uint32 `protobuf:"varint,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`            //上链生成的交易所在区块号
	ChainStatus     uint32 `protobuf:"varint,6,opt,name=chain_status,json=chainStatus,proto3" json:"chain_status,omitempty"`            //上链状态：1-成功；3-失败
	ChainMsg        string `protobuf:"bytes,7,opt,name=chain_msg,json=chainMsg,proto3" json:"chain_msg,omitempty"`                      //上链失败原因
	Opt             string `protobuf:"bytes,8,opt,name=opt,proto3" json:"opt,omitempty"`                                                //透传参数
}

func (x *ChainNotifyReq) Reset() {
	*x = ChainNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainNotifyReq) ProtoMessage() {}

func (x *ChainNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainNotifyReq.ProtoReflect.Descriptor instead.
func (*ChainNotifyReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{27}
}

func (x *ChainNotifyReq) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ChainNotifyReq) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *ChainNotifyReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ChainNotifyReq) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *ChainNotifyReq) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ChainNotifyReq) GetChainStatus() uint32 {
	if x != nil {
		return x.ChainStatus
	}
	return 0
}

func (x *ChainNotifyReq) GetChainMsg() string {
	if x != nil {
		return x.ChainMsg
	}
	return ""
}

func (x *ChainNotifyReq) GetOpt() string {
	if x != nil {
		return x.Opt
	}
	return ""
}

type BassResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BassResp) Reset() {
	*x = BassResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BassResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BassResp) ProtoMessage() {}

func (x *BassResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BassResp.ProtoReflect.Descriptor instead.
func (*BassResp) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{28}
}

func (x *BassResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BassResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ChainListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainStatus     string `protobuf:"bytes,1,opt,name=chain_status,json=chainStatus,proto3" json:"chain_status,omitempty"`
	ChainTimeStart  uint32 `protobuf:"varint,8,opt,name=chain_time_start,json=chainTimeStart,proto3" json:"chain_time_start,omitempty"`
	ChainTimeEnd    uint32 `protobuf:"varint,9,opt,name=chain_time_end,json=chainTimeEnd,proto3" json:"chain_time_end,omitempty"`
	CreateTimeStart uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd   uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page            uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ChainListReq) Reset() {
	*x = ChainListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainListReq) ProtoMessage() {}

func (x *ChainListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainListReq.ProtoReflect.Descriptor instead.
func (*ChainListReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{29}
}

func (x *ChainListReq) GetChainStatus() string {
	if x != nil {
		return x.ChainStatus
	}
	return ""
}

func (x *ChainListReq) GetChainTimeStart() uint32 {
	if x != nil {
		return x.ChainTimeStart
	}
	return 0
}

func (x *ChainListReq) GetChainTimeEnd() uint32 {
	if x != nil {
		return x.ChainTimeEnd
	}
	return 0
}

func (x *ChainListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *ChainListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *ChainListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ChainListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ChainListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ChainListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ChainListResp) Reset() {
	*x = ChainListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainListResp) ProtoMessage() {}

func (x *ChainListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainListResp.ProtoReflect.Descriptor instead.
func (*ChainListResp) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{30}
}

func (x *ChainListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ChainListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChainListResp) GetData() *ChainListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId        uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	SourceIds      string `protobuf:"bytes,2,opt,name=source_ids,json=sourceIds,proto3" json:"source_ids,omitempty"`
	SourceType     uint32 `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	Address        string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	TokenIds       string `protobuf:"bytes,5,opt,name=token_ids,json=tokenIds,proto3" json:"token_ids,omitempty"`
	TxId           string `protobuf:"bytes,6,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	TxIdTmp        string `protobuf:"bytes,7,opt,name=tx_id_tmp,json=txIdTmp,proto3" json:"tx_id_tmp,omitempty"`
	BlockNumber    uint32 `protobuf:"varint,8,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ChainStatus    uint32 `protobuf:"varint,9,opt,name=chain_status,json=chainStatus,proto3" json:"chain_status,omitempty"`
	TxKafka        string `protobuf:"bytes,10,opt,name=tx_kafka,json=txKafka,proto3" json:"tx_kafka,omitempty"`
	TxPostreq      string `protobuf:"bytes,11,opt,name=tx_postreq,json=txPostreq,proto3" json:"tx_postreq,omitempty"`
	TxPostres      string `protobuf:"bytes,12,opt,name=tx_postres,json=txPostres,proto3" json:"tx_postres,omitempty"`
	TxNotifyReq    string `protobuf:"bytes,13,opt,name=tx_notify_req,json=txNotifyReq,proto3" json:"tx_notify_req,omitempty"`
	ChainFailMsg   string `protobuf:"bytes,14,opt,name=chain_fail_msg,json=chainFailMsg,proto3" json:"chain_fail_msg,omitempty"`
	RetryNum       uint32 `protobuf:"varint,15,opt,name=retry_num,json=retryNum,proto3" json:"retry_num,omitempty"`
	ChainStartTime uint32 `protobuf:"varint,16,opt,name=chain_start_time,json=chainStartTime,proto3" json:"chain_start_time,omitempty"`
	ChainEndTime   uint32 `protobuf:"varint,17,opt,name=chain_end_time,json=chainEndTime,proto3" json:"chain_end_time,omitempty"`
	ChainPort      uint32 `protobuf:"varint,18,opt,name=chain_port,json=chainPort,proto3" json:"chain_port,omitempty"`
	ReqTopic       string `protobuf:"bytes,19,opt,name=req_topic,json=reqTopic,proto3" json:"req_topic,omitempty"`
	ResTopic       string `protobuf:"bytes,20,opt,name=res_topic,json=resTopic,proto3" json:"res_topic,omitempty"`
	CreateTime     uint32 `protobuf:"varint,25,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime     uint32 `protobuf:"varint,26,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
}

func (x *ChainInfo) Reset() {
	*x = ChainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainInfo) ProtoMessage() {}

func (x *ChainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainInfo.ProtoReflect.Descriptor instead.
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{31}
}

func (x *ChainInfo) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ChainInfo) GetSourceIds() string {
	if x != nil {
		return x.SourceIds
	}
	return ""
}

func (x *ChainInfo) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

func (x *ChainInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ChainInfo) GetTokenIds() string {
	if x != nil {
		return x.TokenIds
	}
	return ""
}

func (x *ChainInfo) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *ChainInfo) GetTxIdTmp() string {
	if x != nil {
		return x.TxIdTmp
	}
	return ""
}

func (x *ChainInfo) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ChainInfo) GetChainStatus() uint32 {
	if x != nil {
		return x.ChainStatus
	}
	return 0
}

func (x *ChainInfo) GetTxKafka() string {
	if x != nil {
		return x.TxKafka
	}
	return ""
}

func (x *ChainInfo) GetTxPostreq() string {
	if x != nil {
		return x.TxPostreq
	}
	return ""
}

func (x *ChainInfo) GetTxPostres() string {
	if x != nil {
		return x.TxPostres
	}
	return ""
}

func (x *ChainInfo) GetTxNotifyReq() string {
	if x != nil {
		return x.TxNotifyReq
	}
	return ""
}

func (x *ChainInfo) GetChainFailMsg() string {
	if x != nil {
		return x.ChainFailMsg
	}
	return ""
}

func (x *ChainInfo) GetRetryNum() uint32 {
	if x != nil {
		return x.RetryNum
	}
	return 0
}

func (x *ChainInfo) GetChainStartTime() uint32 {
	if x != nil {
		return x.ChainStartTime
	}
	return 0
}

func (x *ChainInfo) GetChainEndTime() uint32 {
	if x != nil {
		return x.ChainEndTime
	}
	return 0
}

func (x *ChainInfo) GetChainPort() uint32 {
	if x != nil {
		return x.ChainPort
	}
	return 0
}

func (x *ChainInfo) GetReqTopic() string {
	if x != nil {
		return x.ReqTopic
	}
	return ""
}

func (x *ChainInfo) GetResTopic() string {
	if x != nil {
		return x.ResTopic
	}
	return ""
}

func (x *ChainInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ChainInfo) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

type ChainAgainReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainIds string `protobuf:"bytes,1,opt,name=chain_ids,json=chainIds,proto3" json:"chain_ids,omitempty"`
}

func (x *ChainAgainReq) Reset() {
	*x = ChainAgainReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainAgainReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainAgainReq) ProtoMessage() {}

func (x *ChainAgainReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainAgainReq.ProtoReflect.Descriptor instead.
func (*ChainAgainReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{32}
}

func (x *ChainAgainReq) GetChainIds() string {
	if x != nil {
		return x.ChainIds
	}
	return ""
}

type TxCombinationBatchArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`                                   // 所有权人地址
	To          string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`                                       // 受让人地址
	TokenId     string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`              // 藏品tokenId 16进制哈希值
	CheckStatus bool   `protobuf:"varint,4,opt,name=check_status,json=checkStatus,proto3" json:"check_status,omitempty"` // 是否checkin
	Uri         string `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`                                     // 先传空
	IdType      bool   `protobuf:"varint,6,opt,name=id_type,json=idType,proto3" json:"id_type,omitempty"`                // 先传true
}

func (x *TxCombinationBatchArgs) Reset() {
	*x = TxCombinationBatchArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxCombinationBatchArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxCombinationBatchArgs) ProtoMessage() {}

func (x *TxCombinationBatchArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxCombinationBatchArgs.ProtoReflect.Descriptor instead.
func (*TxCombinationBatchArgs) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{33}
}

func (x *TxCombinationBatchArgs) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TxCombinationBatchArgs) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TxCombinationBatchArgs) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *TxCombinationBatchArgs) GetCheckStatus() bool {
	if x != nil {
		return x.CheckStatus
	}
	return false
}

func (x *TxCombinationBatchArgs) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *TxCombinationBatchArgs) GetIdType() bool {
	if x != nil {
		return x.IdType
	}
	return false
}

type CombinationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchPost *BatchPostInfo            `protobuf:"bytes,1,opt,name=batch_post,json=batchPost,proto3" json:"batch_post,omitempty"`
	Args      []*TxCombinationBatchArgs `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *CombinationReq) Reset() {
	*x = CombinationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombinationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinationReq) ProtoMessage() {}

func (x *CombinationReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinationReq.ProtoReflect.Descriptor instead.
func (*CombinationReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{34}
}

func (x *CombinationReq) GetBatchPost() *BatchPostInfo {
	if x != nil {
		return x.BatchPost
	}
	return nil
}

func (x *CombinationReq) GetArgs() []*TxCombinationBatchArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type LockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchPost *BatchPostInfo `protobuf:"bytes,1,opt,name=batch_post,json=batchPost,proto3" json:"batch_post,omitempty"`
	Args      []string       `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *LockReq) Reset() {
	*x = LockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockReq) ProtoMessage() {}

func (x *LockReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockReq.ProtoReflect.Descriptor instead.
func (*LockReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{35}
}

func (x *LockReq) GetBatchPost() *BatchPostInfo {
	if x != nil {
		return x.BatchPost
	}
	return nil
}

func (x *LockReq) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type UnlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchPost *BatchPostInfo `protobuf:"bytes,1,opt,name=batch_post,json=batchPost,proto3" json:"batch_post,omitempty"`
	Args      []string       `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *UnlockReq) Reset() {
	*x = UnlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockReq) ProtoMessage() {}

func (x *UnlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockReq.ProtoReflect.Descriptor instead.
func (*UnlockReq) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{36}
}

func (x *UnlockReq) GetBatchPost() *BatchPostInfo {
	if x != nil {
		return x.BatchPost
	}
	return nil
}

func (x *UnlockReq) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type BatchNotifyReq_ChainNotifyTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain    int32  `protobuf:"varint,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Method   string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Args     string `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
	Account  string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Contract string `protobuf:"bytes,6,opt,name=contract,proto3" json:"contract,omitempty"`
	Opts     string `protobuf:"bytes,7,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (x *BatchNotifyReq_ChainNotifyTx) Reset() {
	*x = BatchNotifyReq_ChainNotifyTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNotifyReq_ChainNotifyTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNotifyReq_ChainNotifyTx) ProtoMessage() {}

func (x *BatchNotifyReq_ChainNotifyTx) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNotifyReq_ChainNotifyTx.ProtoReflect.Descriptor instead.
func (*BatchNotifyReq_ChainNotifyTx) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{26, 0}
}

func (x *BatchNotifyReq_ChainNotifyTx) GetChain() int32 {
	if x != nil {
		return x.Chain
	}
	return 0
}

func (x *BatchNotifyReq_ChainNotifyTx) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BatchNotifyReq_ChainNotifyTx) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *BatchNotifyReq_ChainNotifyTx) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *BatchNotifyReq_ChainNotifyTx) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *BatchNotifyReq_ChainNotifyTx) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *BatchNotifyReq_ChainNotifyTx) GetOpts() string {
	if x != nil {
		return x.Opts
	}
	return ""
}

type BatchNotifyReq_ReceiptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber     uint32 `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`        // 区块号
	TransactionHash string `protobuf:"bytes,2,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"` // 交易id
}

func (x *BatchNotifyReq_ReceiptInfo) Reset() {
	*x = BatchNotifyReq_ReceiptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNotifyReq_ReceiptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNotifyReq_ReceiptInfo) ProtoMessage() {}

func (x *BatchNotifyReq_ReceiptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNotifyReq_ReceiptInfo.ProtoReflect.Descriptor instead.
func (*BatchNotifyReq_ReceiptInfo) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{26, 1}
}

func (x *BatchNotifyReq_ReceiptInfo) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BatchNotifyReq_ReceiptInfo) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type BatchNotifyReq_ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errno       int32  `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Message     string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Code        int32  `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *BatchNotifyReq_ErrorInfo) Reset() {
	*x = BatchNotifyReq_ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNotifyReq_ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNotifyReq_ErrorInfo) ProtoMessage() {}

func (x *BatchNotifyReq_ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNotifyReq_ErrorInfo.ProtoReflect.Descriptor instead.
func (*BatchNotifyReq_ErrorInfo) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{26, 2}
}

func (x *BatchNotifyReq_ErrorInfo) GetErrno() int32 {
	if x != nil {
		return x.Errno
	}
	return 0
}

func (x *BatchNotifyReq_ErrorInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BatchNotifyReq_ErrorInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BatchNotifyReq_ErrorInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchNotifyReq_ErrorInfo) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type ChainListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32       `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*ChainInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ChainListResp_Data) Reset() {
	*x = ChainListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_bass_bass_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainListResp_Data) ProtoMessage() {}

func (x *ChainListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bass_bass_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainListResp_Data.ProtoReflect.Descriptor instead.
func (*ChainListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_bass_bass_proto_rawDescGZIP(), []int{30, 0}
}

func (x *ChainListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ChainListResp_Data) GetData() []*ChainInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pb_bass_bass_proto protoreflect.FileDescriptor

var file_pb_bass_bass_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x62, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x54,
	0x78, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe4, 0xba, 0xa4, 0xe6,
	0x98, 0x93, 0x69, 0x64, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x0b, 0x4e, 0x65,
	0x77, 0x54, 0x78, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x2d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77,
	0x54, 0x78, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9b,
	0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x54, 0x78, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb7, 0x03, 0x0a,
	0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x32, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96,
	0xe5, 0x8f, 0xb7, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x4e, 0x6f, 0x12, 0x56, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x13, 0x32, 0x11, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81,
	0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x17, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba,
	0xa6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2c, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0x92, 0x41, 0x1d, 0x32,
	0x1b, 0xe7, 0xab, 0xaf, 0xe5, 0x8f, 0xa3, 0x20, 0x62, 0x73, 0x6e, 0x3a, 0x35, 0x35, 0x35, 0x35,
	0x20, 0x68, 0x61, 0x73, 0x68, 0x49, 0x69, 0x3a, 0x36, 0x36, 0x36, 0x36, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x4f, 0x66, 0x44, 0x49, 0x44, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x56, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1,
	0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x44, 0x49, 0x44, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0e, 0x92, 0x41, 0x08, 0x32,
	0x06, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xba, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x44, 0x49, 0x44, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x0c, 0x32, 0x0a, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41,
	0x0f, 0x32, 0x0d, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x50, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f,
	0x66, 0x44, 0x49, 0x44, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0xa3, 0xb0,
	0xe6, 0x98, 0x8e, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0xef, 0x02,
	0x0a, 0x16, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x44, 0x49, 0x44, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x64, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe7,
	0xae, 0x80, 0xe4, 0xbb, 0x8b, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3e,
	0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98,
	0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34,
	0x92, 0x41, 0x31, 0x32, 0x2f, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8, 0xa1,
	0x8c, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e,
	0xe6, 0x80, 0xa7, 0x29, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xb1, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x44, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0e, 0x92,
	0x41, 0x08, 0x32, 0x06, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xaf, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x0c, 0x32, 0x0a, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41,
	0x0f, 0x32, 0x0d, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x48, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6,
	0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe0, 0x41, 0x02, 0x52, 0x05,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0xc9, 0x06, 0x0a, 0x0e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x69, 0x64, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad, 0x98,
	0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x64,
	0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x87, 0x01, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70,
	0x32, 0x6e, 0xe7, 0x94, 0xa8, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe6, 0xa0, 0x87, 0xe9, 0xa2,
	0x98, 0xe3, 0x80, 0x81, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0,
	0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe5, 0x92, 0x8c, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x8c, 0x89, 0xe9, 0xa1, 0xba,
	0xe5, 0xba, 0x8f, 0xe6, 0x8b, 0xbc, 0xe6, 0x88, 0x90, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0x89, 0x80, 0xe5, 0x81, 0x9a, 0xe7, 0x9a,
	0x84, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0xe5, 0x93, 0x88, 0xe5, 0xb8, 0x8c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0xa0,
	0x87, 0xe9, 0xa2, 0x98, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x32, 0x1b, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81,
	0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5,
	0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8e,
	0x9f, 0xe5, 0x88, 0x9b, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x90, 0xa6, 0xef, 0xbc, 0x9b, 0x31,
	0x2d, 0xe6, 0x98, 0xaf, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x12, 0x3a, 0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41,
	0x08, 0x32, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0x52, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x9c, 0xa8, 0xe8, 0xaf, 0xa5,
	0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe5, 0x8f, 0xaf, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe8,
	0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x10, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a,
	0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa,
	0xe8, 0xa1, 0x8c, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5,
	0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x29, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x56, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1,
	0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x0e, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0xe7, 0xad, 0xbe,
	0xe5, 0x90, 0x8d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0xad,
	0xbe, 0xe5, 0x90, 0x8d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x55, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42,
	0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0xfa, 0x03, 0x0a,
	0x1b, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x42, 0x0a, 0x0e,
	0x64, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xba, 0xab, 0xe4, 0xbb,
	0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x4e, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf,
	0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x52, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xb1, 0xbb,
	0xe5, 0x88, 0xab, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe5, 0x9c, 0xa8, 0xe8, 0xaf, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe5, 0x8f,
	0xaf, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x80, 0xbb,
	0xe9, 0x87, 0x8f, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0xe6,
	0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x29, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x4a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x0e, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x02, 0x0a, 0x18, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0c, 0x32, 0x0a,
	0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0xe7,
	0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92,
	0x41, 0x14, 0x32, 0x12, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e,
	0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x53, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42,
	0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0xad, 0x07, 0x0a,
	0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x28, 0x32, 0x26, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9,
	0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x53, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x0e, 0x64,
	0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6,
	0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x89,
	0x01, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92,
	0x41, 0x49, 0x32, 0x47, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e,
	0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8,
	0xaf, 0x81, 0x28, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5,
	0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x88, 0x86, 0xe5, 0x8f,
	0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x27, 0x3b, 0x27, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x18, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6d, 0x92, 0x41,
	0x6a, 0x32, 0x68, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe3, 0x80, 0x81, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba,
	0xba, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe5, 0x92, 0x8c, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x8c, 0x89, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0xe6, 0x8b,
	0xbc, 0xe6, 0x88, 0x90, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0xe4, 0xb8, 0xb2, 0xe6, 0x89, 0x80, 0xe5, 0x81, 0x9a, 0xe7, 0x9a, 0x84, 0x4b, 0x65, 0x63, 0x63,
	0x61, 0x6b, 0x32, 0x35, 0x36, 0xe5, 0x93, 0x88, 0xe5, 0xb8, 0x8c, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92,
	0x41, 0x0f, 0x32, 0x0d, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe9,
	0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4, 0xba, 0xba, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x23, 0x32, 0x21,
	0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0x32, 0x30, 0x32,
	0x32, 0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x20, 0x31, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30,
	0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31,
	0x32, 0x2f, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7,
	0x29, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc7, 0x01, 0x0a,
	0x1f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x53, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9f, 0xba, 0xe7,
	0xa1, 0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x02, 0x0a, 0x20, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x0c, 0x32, 0x0a, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x75, 0x75, 0x69, 0x64, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92,
	0x41, 0x0f, 0x32, 0x0d, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5,
	0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x58, 0x0a, 0x05,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x52,
	0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0xa6, 0x09, 0x0a, 0x21, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4a, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x95, 0xb0, 0xe5,
	0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x28, 0x32, 0x26, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x10, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a,
	0x0e, 0x64, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x90, 0x88, 0xe7,
	0xba, 0xa6, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb,
	0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x89, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x56, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad,
	0x98, 0xe8, 0xaf, 0x81, 0x28, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe7, 0x89, 0x88, 0xe6, 0x9d,
	0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x88, 0x86,
	0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x27, 0x3b, 0x27, 0x29, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x18,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf,
	0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x17, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81,
	0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x65, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe4, 0xb8, 0x8a, 0xe6,
	0xac, 0xa1, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x1d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x96, 0x01,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6d, 0x92, 0x41, 0x6a, 0x32, 0x68, 0xe6, 0x95,
	0xb0, 0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xe3, 0x80, 0x81, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe4, 0xba, 0xba, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe5, 0x92, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe6, 0x8c, 0x89, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0xe6, 0x8b, 0xbc, 0xe6, 0x88, 0x90, 0xe4,
	0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0x89,
	0x80, 0xe5, 0x81, 0x9a, 0xe7, 0x9a, 0x84, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36,
	0xe5, 0x93, 0x88, 0xe5, 0xb8, 0x8c, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0xe8,
	0x97, 0x8f, 0xe5, 0x93, 0x81, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x19, 0x32, 0x17, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89,
	0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x33, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92,
	0x41, 0x16, 0x32, 0x14, 0xe5, 0x8f, 0x97, 0xe8, 0xae, 0xa9, 0xe4, 0xba, 0xba, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41,
	0x23, 0x32, 0x21, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28,
	0x32, 0x30, 0x32, 0x32, 0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x20, 0x31, 0x30, 0x3a, 0x30, 0x30,
	0x3a, 0x30, 0x30, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34,
	0x92, 0x41, 0x31, 0x32, 0x2f, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8, 0xa1,
	0x8c, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e,
	0xe6, 0x80, 0xa7, 0x29, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xd3, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe6, 0x9d, 0xa5, 0xe6,
	0xba, 0x90, 0x69, 0x64, 0x20, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0x5b, 0x31, 0x2c, 0x32, 0x5d,
	0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x80, 0x01, 0x92, 0x41, 0x7d, 0x32, 0x7b, 0x31, 0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0x2c, 0x32, 0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0xe8, 0xa1, 0xa8, 0x2c, 0x33, 0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0xe8, 0xa1, 0xa8, 0x2c, 0x34, 0x3a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0xe8,
	0xa1, 0xa8, 0x2c, 0x35, 0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0xe8, 0xa1, 0xa8, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x32, 0x1b, 0xe7, 0xab, 0xaf, 0xe5, 0x8f, 0xa3, 0x20, 0x62, 0x73, 0x6e, 0x3a, 0x35, 0x35,
	0x35, 0x35, 0x20, 0x68, 0x61, 0x73, 0x68, 0x49, 0x69, 0x3a, 0x36, 0x36, 0x36, 0x36, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0xc9, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x5a, 0x0a, 0x0a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1e, 0x92, 0x41, 0x18,
	0x32, 0x16, 0x6d, 0x69, 0x6e, 0x74, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5, 0x9f, 0xba, 0xe6,
	0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4d, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x72, 0x67, 0x73, 0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x6d, 0x69, 0x6e, 0x74, 0xe6, 0x8f,
	0x90, 0xe4, 0xba, 0xa4, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x20, 0x20, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0x9a, 0x31, 0x30, 0x30, 0xe4, 0xb8, 0xaa, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0xb1, 0x04, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x32, 0x08, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x69, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0xb8, 0x02, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x96, 0x02, 0x92, 0x41,
	0x92, 0x02, 0x32, 0x8f, 0x02, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x9a, 0x30, 0x3a, 0x28, 0x64, 0x61, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x29, 0xe8, 0xba, 0xab, 0xe4, 0xbb,
	0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x69, 0x64, 0x3b, 0x31, 0x3a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0x3b, 0x32, 0x3a, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0x2c, 0x33, 0x3a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x2c, 0x34,
	0x3a, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x2c, 0x35, 0x3a,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x2c, 0x36, 0x3a, 0xe8,
	0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x2c, 0x37, 0x3a, 0xe8, 0x97,
	0x8f, 0xe5, 0x93, 0x81, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81,
	0x2c, 0x38, 0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2c, 0x39, 0x3a, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x2c, 0x31, 0x30, 0x3a, 0x6c, 0x6f, 0x63, 0x6b, 0x2c, 0x31, 0x31, 0x3a, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x2c, 0x31, 0x32, 0x3a, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x92, 0x41, 0x07, 0x32, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x4e, 0x6f, 0x12, 0x30, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9b,
	0x9e, 0xe8, 0xb0, 0x83, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x5e, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x6f, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32,
	0x38, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x2c, 0xe4, 0xbc,
	0xa0, 0xe9, 0x80, 0x92, 0xe4, 0xbb, 0x80, 0xe4, 0xb9, 0x88, 0x2c, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0,
	0x83, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe5, 0xb8, 0xa6, 0xe5, 0x9b, 0x9e,
	0xe5, 0x8e, 0xbb, 0xe4, 0xbb, 0x80, 0xe4, 0xb9, 0x88, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4f, 0x70, 0x74, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0f, 0x54, 0x78, 0x4d, 0x69, 0x6e, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6,
	0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x21, 0x32, 0x1f, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x20, 0x31, 0x36, 0xe8, 0xbf, 0x9b, 0xe5, 0x88,
	0xb6, 0xe5, 0x93, 0x88, 0xe5, 0xb8, 0x8c, 0xe5, 0x80, 0xbc, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe5, 0x85, 0x88, 0xe4, 0xbc, 0xa0,
	0xe7, 0xa9, 0xba, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2b, 0x0a, 0x07, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x12, 0x92, 0x41,
	0x0c, 0x32, 0x0a, 0xe5, 0x85, 0x88, 0xe4, 0xbc, 0xa0, 0x74, 0x72, 0x75, 0x65, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x5e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x60, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72,
	0x67, 0x73, 0x42, 0x29, 0x92, 0x41, 0x23, 0x32, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x20, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0x9a, 0x31, 0x30, 0x30, 0xe4, 0xb8, 0xaa, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x54, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0x97, 0xe4, 0xba, 0xba, 0xe0, 0x41,
	0x02, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x21, 0x32, 0x1f, 0xe8, 0x97,
	0x8f, 0xe5, 0x93, 0x81, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x20, 0x31, 0x36, 0xe8, 0xbf,
	0x9b, 0xe5, 0x88, 0xb6, 0xe5, 0x93, 0x88, 0xe5, 0xb8, 0x8c, 0xe5, 0x80, 0xbc, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xbc, 0xa0, 0x30, 0x78, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x59, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x15, 0x75, 0x73,
	0x65, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x75, 0x73, 0x65, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x20, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0x9a, 0x31, 0x30, 0x30, 0xe4,
	0xb8, 0xaa, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xf9, 0x04, 0x0a, 0x0e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x78, 0x52, 0x02, 0x74, 0x78, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x3c,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xb5, 0x01, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6f, 0x70, 0x74, 0x73, 0x1a, 0x59, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x1a,
	0x85, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x5d, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x85, 0xb6,
	0xe4, 0xbb, 0x96, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0xa9, 0x04, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x7e, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x58,
	0x32, 0x56, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc,
	0x9a, 0xe7, 0xa9, 0xba, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xef, 0xbc, 0x9b, 0x30, 0x2d, 0xe5,
	0xbe, 0x85, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2,
	0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9, 0x93,
	0xbe, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xef, 0xbc, 0x9b, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92,
	0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92,
	0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7,
	0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88,
	0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0,
	0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x49,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x0c, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b,
	0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0xe4,
	0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x9d,
	0xa5, 0xe6, 0xba, 0x90, 0x69, 0x64, 0x20, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x80, 0x97,
	0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x8e, 0x01, 0x92, 0x41, 0x8a,
	0x01, 0x32, 0x87, 0x01, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x9a, 0x30, 0x3a, 0x64, 0x61, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0x3b, 0x31, 0x3a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0x3b,
	0x32, 0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0x2c, 0x33, 0x3a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x69, 0x6e, 0xe8, 0xa1, 0xa8, 0x2c, 0x34, 0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xa1, 0xa8, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8,
	0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x32, 0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x20, 0xe5, 0xa4, 0x9a, 0xe4,
	0xb8, 0xaa, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x52, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe4, 0xb8,
	0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x49, 0x44, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6d, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe4, 0xb8, 0x8a, 0xe9,
	0x93, 0xbe, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe4, 0xb8, 0xb4, 0xe6, 0x97, 0xb6, 0x49, 0x44,
	0x52, 0x07, 0x74, 0x78, 0x49, 0x64, 0x54, 0x6d, 0x70, 0x12, 0x4f, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xba, 0xa7, 0xe7,
	0x94, 0x9f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0x9c, 0xa8, 0xe9, 0x93, 0xbe, 0xe4, 0xb8,
	0x8a, 0xe7, 0x9a, 0x84, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe5, 0x8f, 0xb7, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe4, 0xb8, 0x8a, 0xe9, 0x93,
	0xbe, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xef,
	0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b,
	0x33, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x74,
	0x78, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x32, 0x21, 0xe4, 0xbb, 0x8e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe6, 0x8e, 0xa5,
	0xe6, 0x94, 0xb6, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x07, 0x74, 0x78, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x49,
	0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0x62,
	0x61, 0x73, 0x73, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe4,
	0xbc, 0xa0, 0xe9, 0x80, 0x92, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x09,
	0x74, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x0a, 0x74, 0x78, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x2a, 0x32, 0x28, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0x62, 0x61, 0x73, 0x73, 0xe7, 0xb3,
	0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe,
	0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x09, 0x74, 0x78,
	0x50, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0x92, 0x41, 0x2d, 0x32, 0x2b, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0x62, 0x61, 0x73, 0x73, 0xe7,
	0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe7, 0x9a, 0x84, 0xe5, 0xbc,
	0x82, 0xe6, 0xad, 0xa5, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x0b, 0x74, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xb8, 0x8a, 0xe9,
	0x93, 0xbe, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x09,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xb0, 0x9d, 0xe8, 0xaf, 0x95, 0xe4, 0xb8, 0x8a, 0xe9,
	0x93, 0xbe, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4e,
	0x75, 0x6d, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe7,
	0xab, 0xaf, 0xe5, 0x8f, 0xa3, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x6b, 0x61, 0x66, 0x61, 0x6b, 0x61,
	0x20, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x08, 0x72, 0x65, 0x71, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x3a, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x6b, 0x61, 0x66, 0x61, 0x6b, 0x61, 0x20, 0xe4, 0xb8, 0x8a,
	0xe9, 0x93, 0xbe, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf,
	0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x67, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0d, 0x32,
	0x0b, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xbe, 0x02,
	0x0a, 0x16, 0x54, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x27, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe5, 0x8f, 0x97, 0xe8, 0xae,
	0xa9, 0xe4, 0xba, 0xba, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x21, 0x32, 0x1f, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x20, 0x31, 0x36, 0xe8, 0xbf, 0x9b, 0xe5, 0x88, 0xb6,
	0xe5, 0x93, 0x88, 0xe5, 0xb8, 0x8c, 0xe5, 0x80, 0xbc, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x12, 0x92, 0x41, 0x0f,
	0x32, 0x0d, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x52,
	0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0xe5, 0x85, 0x88, 0xe4, 0xbc, 0xa0, 0xe7, 0xa9, 0xba, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x12, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0xe5, 0x85, 0x88, 0xe4, 0xbc, 0xa0, 0x74,
	0x72, 0x75, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd8,
	0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x61, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x25, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x78, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x73, 0x42, 0x29, 0x92, 0x41, 0x23, 0x32, 0x21, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0x20, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0x9a, 0x31, 0x30, 0x30, 0xe4, 0xb8, 0xaa,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x5a, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1e, 0x92, 0x41, 0x18, 0x32, 0x16, 0x6c, 0x6f, 0x63,
	0x6b, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x2d, 0x92, 0x41, 0x27, 0x32, 0x25, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x2c, 0x20, 0xe7,
	0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe4, 0xb8,
	0x80, 0xe4, 0xb8, 0xaa, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x5c, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2d,
	0x92, 0x41, 0x27, 0x32, 0x25, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x2c, 0x20, 0xe7, 0x9b,
	0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe4, 0xb8, 0x80,
	0xe4, 0xb8, 0xaa, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x32, 0x85, 0x11, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x54, 0x78, 0x49,
	0x64, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x77, 0x54, 0x78, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x78,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x92, 0x41, 0x13, 0x12, 0x11, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x69, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x6e,
	0x65, 0x77, 0x2f, 0x74, 0x78, 0x69, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62,
	0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x38, 0x92, 0x41, 0x0f, 0x12, 0x0d, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x20, 0xe5, 0xad, 0x98,
	0xe8, 0xaf, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x62,
	0x61, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xac, 0x01, 0x0a, 0x1c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x45, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe4, 0xba,
	0xa4, 0xe6, 0x98, 0x93, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x9b, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x40, 0x92, 0x41, 0x15, 0x12, 0x13, 0xe7, 0x89, 0x88, 0xe6, 0x9d,
	0x83, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x20, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3b, 0x92, 0x41, 0x15, 0x12, 0x13, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x20, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x44, 0x49,
	0x44, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x44,
	0x49, 0x44, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x3b, 0x92, 0x41, 0x16, 0x12, 0x14, 0xe4, 0xb8, 0xaa, 0xe4, 0xba,
	0xba, 0x2f, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0x20, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x6f, 0x66, 0x64, 0x49, 0x64, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x12, 0x6e, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x1e,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x29, 0x92, 0x41, 0x0c, 0x12, 0x0a, 0xe6, 0x89, 0xb9,
	0xe9, 0x87, 0x8f, 0x6d, 0x69, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a,
	0x22, 0x0f, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x69, 0x6e,
	0x74, 0x12, 0x7e, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x31,
	0x92, 0x41, 0x10, 0x12, 0x0e, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x62,
	0x61, 0x73, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x6a, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x12, 0x1d, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x92, 0x41, 0x0b, 0x12, 0x09, 0xe6, 0x89, 0xb9, 0xe9, 0x87,
	0x8f, 0x75, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f,
	0x62, 0x61, 0x73, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x75, 0x73, 0x65, 0x12, 0x8d, 0x01,
	0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3e, 0x92,
	0x41, 0x1a, 0x12, 0x18, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe,
	0xe5, 0x8f, 0x98, 0xe5, 0x8a, 0xa8, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x78, 0x0a,
	0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x33, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe4,
	0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x72, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x92, 0x41,
	0x0e, 0x12, 0x0c, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x75, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x2f, 0x92, 0x41, 0x11, 0x12, 0x0f, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a,
	0x22, 0x10, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x70, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x67, 0x61, 0x69, 0x6e,
	0x12, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe9, 0x87, 0x8d, 0xe6,
	0x96, 0xb0, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01,
	0x2a, 0x22, 0x11, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x61,
	0x67, 0x61, 0x69, 0x6e, 0x12, 0x77, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x32, 0x92, 0x41, 0x0e, 0x12, 0x0c,
	0xe5, 0x90, 0x88, 0xe6, 0x88, 0x90, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x6c, 0x69, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a,
	0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x2b, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe9, 0x94, 0x81, 0xe5, 0xae,
	0x9a, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a,
	0x22, 0x0f, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x68, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x92, 0x41,
	0x0e, 0x12, 0x0c, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f,
	0x6c, 0x69, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x0e, 0x5a, 0x0c, 0x70,
	0x62, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x3b, 0x62, 0x61, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pb_bass_bass_proto_rawDescOnce sync.Once
	file_pb_bass_bass_proto_rawDescData = file_pb_bass_bass_proto_rawDesc
)

func file_pb_bass_bass_proto_rawDescGZIP() []byte {
	file_pb_bass_bass_proto_rawDescOnce.Do(func() {
		file_pb_bass_bass_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_bass_bass_proto_rawDescData)
	})
	return file_pb_bass_bass_proto_rawDescData
}

var file_pb_bass_bass_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_pb_bass_bass_proto_goTypes = []interface{}{
	(*NewTxIdReq)(nil),                        // 0: daop.bass.v1.NewTxIdReq
	(*NewTxIdResp)(nil),                       // 1: daop.bass.v1.NewTxIdResp
	(*NewTxIdInfo)(nil),                       // 2: daop.bass.v1.NewTxIdInfo
	(*SubmitProofInfo)(nil),                   // 3: daop.bass.v1.SubmitProofInfo
	(*ProofOfDIDDeclareReq)(nil),              // 4: daop.bass.v1.ProofOfDIDDeclareReq
	(*ProofOfDIDDeclareData)(nil),             // 5: daop.bass.v1.ProofOfDIDDeclareData
	(*ProofOfDIDDeclareClaim)(nil),            // 6: daop.bass.v1.ProofOfDIDDeclareClaim
	(*CopyrightClaimReq)(nil),                 // 7: daop.bass.v1.CopyrightClaimReq
	(*CopyrightClaimData)(nil),                // 8: daop.bass.v1.CopyrightClaimData
	(*CopyrightClaim)(nil),                    // 9: daop.bass.v1.CopyrightClaim
	(*CopyrightAuthorizationReq)(nil),         // 10: daop.bass.v1.CopyrightAuthorizationReq
	(*CopyrightAuthorizationData)(nil),        // 11: daop.bass.v1.CopyrightAuthorizationData
	(*CopyrightAuthorizationClaim)(nil),       // 12: daop.bass.v1.CopyrightAuthorizationClaim
	(*CollectionCredentialReq)(nil),           // 13: daop.bass.v1.CollectionCredentialReq
	(*CollectionCredentialData)(nil),          // 14: daop.bass.v1.CollectionCredentialData
	(*CollectionCredentialClaim)(nil),         // 15: daop.bass.v1.CollectionCredentialClaim
	(*CollectionTransferCredentialReq)(nil),   // 16: daop.bass.v1.CollectionTransferCredentialReq
	(*CollectionTransferCredentialData)(nil),  // 17: daop.bass.v1.CollectionTransferCredentialData
	(*CollectionTransferCredentialClaim)(nil), // 18: daop.bass.v1.CollectionTransferCredentialClaim
	(*BatchPostInfo)(nil),                     // 19: daop.bass.v1.BatchPostInfo
	(*BatchPostMintReq)(nil),                  // 20: daop.bass.v1.BatchPostMintReq
	(*CollectionNotifyReq)(nil),               // 21: daop.bass.v1.CollectionNotifyReq
	(*TxMintBatchArgs)(nil),                   // 22: daop.bass.v1.TxMintBatchArgs
	(*BatchPostTransferReq)(nil),              // 23: daop.bass.v1.BatchPostTransferReq
	(*TxTransferBatchArgs)(nil),               // 24: daop.bass.v1.TxTransferBatchArgs
	(*BatchPostUseReq)(nil),                   // 25: daop.bass.v1.BatchPostUseReq
	(*BatchNotifyReq)(nil),                    // 26: daop.bass.v1.BatchNotifyReq
	(*ChainNotifyReq)(nil),                    // 27: daop.bass.v1.ChainNotifyReq
	(*BassResp)(nil),                          // 28: daop.bass.v1.BassResp
	(*ChainListReq)(nil),                      // 29: daop.bass.v1.ChainListReq
	(*ChainListResp)(nil),                     // 30: daop.bass.v1.ChainListResp
	(*ChainInfo)(nil),                         // 31: daop.bass.v1.ChainInfo
	(*ChainAgainReq)(nil),                     // 32: daop.bass.v1.ChainAgainReq
	(*TxCombinationBatchArgs)(nil),            // 33: daop.bass.v1.TxCombinationBatchArgs
	(*CombinationReq)(nil),                    // 34: daop.bass.v1.CombinationReq
	(*LockReq)(nil),                           // 35: daop.bass.v1.LockReq
	(*UnlockReq)(nil),                         // 36: daop.bass.v1.UnlockReq
	(*BatchNotifyReq_ChainNotifyTx)(nil),      // 37: daop.bass.v1.BatchNotifyReq.ChainNotifyTx
	(*BatchNotifyReq_ReceiptInfo)(nil),        // 38: daop.bass.v1.BatchNotifyReq.ReceiptInfo
	(*BatchNotifyReq_ErrorInfo)(nil),          // 39: daop.bass.v1.BatchNotifyReq.ErrorInfo
	(*ChainListResp_Data)(nil),                // 40: daop.bass.v1.ChainListResp.Data
}
var file_pb_bass_bass_proto_depIdxs = []int32{
	2,  // 0: daop.bass.v1.NewTxIdResp.Data:type_name -> daop.bass.v1.NewTxIdInfo
	3,  // 1: daop.bass.v1.ProofOfDIDDeclareReq.submit_proof:type_name -> daop.bass.v1.SubmitProofInfo
	5,  // 2: daop.bass.v1.ProofOfDIDDeclareReq.data:type_name -> daop.bass.v1.ProofOfDIDDeclareData
	6,  // 3: daop.bass.v1.ProofOfDIDDeclareData.claim:type_name -> daop.bass.v1.ProofOfDIDDeclareClaim
	3,  // 4: daop.bass.v1.CopyrightClaimReq.submit_proof:type_name -> daop.bass.v1.SubmitProofInfo
	8,  // 5: daop.bass.v1.CopyrightClaimReq.data:type_name -> daop.bass.v1.CopyrightClaimData
	9,  // 6: daop.bass.v1.CopyrightClaimData.claim:type_name -> daop.bass.v1.CopyrightClaim
	3,  // 7: daop.bass.v1.CopyrightAuthorizationReq.submit_proof:type_name -> daop.bass.v1.SubmitProofInfo
	11, // 8: daop.bass.v1.CopyrightAuthorizationReq.data:type_name -> daop.bass.v1.CopyrightAuthorizationData
	12, // 9: daop.bass.v1.CopyrightAuthorizationData.claim:type_name -> daop.bass.v1.CopyrightAuthorizationClaim
	3,  // 10: daop.bass.v1.CollectionCredentialReq.submit_proof:type_name -> daop.bass.v1.SubmitProofInfo
	14, // 11: daop.bass.v1.CollectionCredentialReq.data:type_name -> daop.bass.v1.CollectionCredentialData
	15, // 12: daop.bass.v1.CollectionCredentialData.claim:type_name -> daop.bass.v1.CollectionCredentialClaim
	3,  // 13: daop.bass.v1.CollectionTransferCredentialReq.submit_proof:type_name -> daop.bass.v1.SubmitProofInfo
	17, // 14: daop.bass.v1.CollectionTransferCredentialReq.data:type_name -> daop.bass.v1.CollectionTransferCredentialData
	18, // 15: daop.bass.v1.CollectionTransferCredentialData.claim:type_name -> daop.bass.v1.CollectionTransferCredentialClaim
	19, // 16: daop.bass.v1.BatchPostMintReq.batch_post:type_name -> daop.bass.v1.BatchPostInfo
	22, // 17: daop.bass.v1.BatchPostMintReq.args:type_name -> daop.bass.v1.TxMintBatchArgs
	19, // 18: daop.bass.v1.BatchPostTransferReq.batch_post:type_name -> daop.bass.v1.BatchPostInfo
	24, // 19: daop.bass.v1.BatchPostTransferReq.args:type_name -> daop.bass.v1.TxTransferBatchArgs
	19, // 20: daop.bass.v1.BatchPostUseReq.batch_post:type_name -> daop.bass.v1.BatchPostInfo
	37, // 21: daop.bass.v1.BatchNotifyReq.tx:type_name -> daop.bass.v1.BatchNotifyReq.ChainNotifyTx
	38, // 22: daop.bass.v1.BatchNotifyReq.receipt:type_name -> daop.bass.v1.BatchNotifyReq.ReceiptInfo
	39, // 23: daop.bass.v1.BatchNotifyReq.error:type_name -> daop.bass.v1.BatchNotifyReq.ErrorInfo
	40, // 24: daop.bass.v1.ChainListResp.data:type_name -> daop.bass.v1.ChainListResp.Data
	19, // 25: daop.bass.v1.CombinationReq.batch_post:type_name -> daop.bass.v1.BatchPostInfo
	33, // 26: daop.bass.v1.CombinationReq.args:type_name -> daop.bass.v1.TxCombinationBatchArgs
	19, // 27: daop.bass.v1.LockReq.batch_post:type_name -> daop.bass.v1.BatchPostInfo
	19, // 28: daop.bass.v1.UnlockReq.batch_post:type_name -> daop.bass.v1.BatchPostInfo
	31, // 29: daop.bass.v1.ChainListResp.Data.data:type_name -> daop.bass.v1.ChainInfo
	0,  // 30: daop.bass.v1.BassService.GetNewTxId:input_type -> daop.bass.v1.NewTxIdReq
	13, // 31: daop.bass.v1.BassService.CollectionCredential:input_type -> daop.bass.v1.CollectionCredentialReq
	16, // 32: daop.bass.v1.BassService.CollectionTransferCredential:input_type -> daop.bass.v1.CollectionTransferCredentialReq
	10, // 33: daop.bass.v1.BassService.CopyrightAuthorization:input_type -> daop.bass.v1.CopyrightAuthorizationReq
	7,  // 34: daop.bass.v1.BassService.CopyrightRegister:input_type -> daop.bass.v1.CopyrightClaimReq
	4,  // 35: daop.bass.v1.BassService.ProofOfDIDDeclare:input_type -> daop.bass.v1.ProofOfDIDDeclareReq
	20, // 36: daop.bass.v1.BassService.BatchMint:input_type -> daop.bass.v1.BatchPostMintReq
	23, // 37: daop.bass.v1.BassService.BatchTransfer:input_type -> daop.bass.v1.BatchPostTransferReq
	25, // 38: daop.bass.v1.BassService.BatchUse:input_type -> daop.bass.v1.BatchPostUseReq
	21, // 39: daop.bass.v1.BassService.CollectionNotify:input_type -> daop.bass.v1.CollectionNotifyReq
	26, // 40: daop.bass.v1.BassService.BatchNotify:input_type -> daop.bass.v1.BatchNotifyReq
	27, // 41: daop.bass.v1.BassService.ChainNotify:input_type -> daop.bass.v1.ChainNotifyReq
	29, // 42: daop.bass.v1.BassService.ChainList:input_type -> daop.bass.v1.ChainListReq
	32, // 43: daop.bass.v1.BassService.ChainAgain:input_type -> daop.bass.v1.ChainAgainReq
	34, // 44: daop.bass.v1.BassService.Combination:input_type -> daop.bass.v1.CombinationReq
	35, // 45: daop.bass.v1.BassService.Lock:input_type -> daop.bass.v1.LockReq
	36, // 46: daop.bass.v1.BassService.Unlock:input_type -> daop.bass.v1.UnlockReq
	1,  // 47: daop.bass.v1.BassService.GetNewTxId:output_type -> daop.bass.v1.NewTxIdResp
	28, // 48: daop.bass.v1.BassService.CollectionCredential:output_type -> daop.bass.v1.BassResp
	28, // 49: daop.bass.v1.BassService.CollectionTransferCredential:output_type -> daop.bass.v1.BassResp
	28, // 50: daop.bass.v1.BassService.CopyrightAuthorization:output_type -> daop.bass.v1.BassResp
	28, // 51: daop.bass.v1.BassService.CopyrightRegister:output_type -> daop.bass.v1.BassResp
	28, // 52: daop.bass.v1.BassService.ProofOfDIDDeclare:output_type -> daop.bass.v1.BassResp
	28, // 53: daop.bass.v1.BassService.BatchMint:output_type -> daop.bass.v1.BassResp
	28, // 54: daop.bass.v1.BassService.BatchTransfer:output_type -> daop.bass.v1.BassResp
	28, // 55: daop.bass.v1.BassService.BatchUse:output_type -> daop.bass.v1.BassResp
	28, // 56: daop.bass.v1.BassService.CollectionNotify:output_type -> daop.bass.v1.BassResp
	28, // 57: daop.bass.v1.BassService.BatchNotify:output_type -> daop.bass.v1.BassResp
	28, // 58: daop.bass.v1.BassService.ChainNotify:output_type -> daop.bass.v1.BassResp
	30, // 59: daop.bass.v1.BassService.ChainList:output_type -> daop.bass.v1.ChainListResp
	28, // 60: daop.bass.v1.BassService.ChainAgain:output_type -> daop.bass.v1.BassResp
	28, // 61: daop.bass.v1.BassService.Combination:output_type -> daop.bass.v1.BassResp
	28, // 62: daop.bass.v1.BassService.Lock:output_type -> daop.bass.v1.BassResp
	28, // 63: daop.bass.v1.BassService.Unlock:output_type -> daop.bass.v1.BassResp
	47, // [47:64] is the sub-list for method output_type
	30, // [30:47] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_pb_bass_bass_proto_init() }
func file_pb_bass_bass_proto_init() {
	if File_pb_bass_bass_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_bass_bass_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTxIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTxIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTxIdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitProofInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfDIDDeclareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfDIDDeclareData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfDIDDeclareClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightAuthorizationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightAuthorizationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightAuthorizationClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCredentialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCredentialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCredentialClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTransferCredentialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTransferCredentialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTransferCredentialClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPostMintReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxMintBatchArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPostTransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxTransferBatchArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPostUseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BassResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainAgainReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxCombinationBatchArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombinationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNotifyReq_ChainNotifyTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNotifyReq_ReceiptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNotifyReq_ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_bass_bass_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_bass_bass_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_bass_bass_proto_goTypes,
		DependencyIndexes: file_pb_bass_bass_proto_depIdxs,
		MessageInfos:      file_pb_bass_bass_proto_msgTypes,
	}.Build()
	File_pb_bass_bass_proto = out.File
	file_pb_bass_bass_proto_rawDesc = nil
	file_pb_bass_bass_proto_goTypes = nil
	file_pb_bass_bass_proto_depIdxs = nil
}
