// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/dscreenpb/dscreen.proto

package dscreenpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ImportKeyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportKeyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportKeyReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImportKeyReqMultiError, or
// nil if none found.
func (m *ImportKeyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportKeyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Phone

	// no validation rules for Address

	if len(errors) > 0 {
		return ImportKeyReqMultiError(errors)
	}

	return nil
}

// ImportKeyReqMultiError is an error wrapping multiple validation errors
// returned by ImportKeyReq.ValidateAll() if the designated constraints aren't met.
type ImportKeyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportKeyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportKeyReqMultiError) AllErrors() []error { return m }

// ImportKeyReqValidationError is the validation error returned by
// ImportKeyReq.Validate if the designated constraints aren't met.
type ImportKeyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportKeyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportKeyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportKeyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportKeyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportKeyReqValidationError) ErrorName() string { return "ImportKeyReqValidationError" }

// Error satisfies the builtin error interface
func (e ImportKeyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportKeyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportKeyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportKeyReqValidationError{}

// Validate checks the field values on ImportKeyResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportKeyResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportKeyResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImportKeyRespMultiError, or
// nil if none found.
func (m *ImportKeyResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportKeyResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ImportKeyRespMultiError(errors)
	}

	return nil
}

// ImportKeyRespMultiError is an error wrapping multiple validation errors
// returned by ImportKeyResp.ValidateAll() if the designated constraints
// aren't met.
type ImportKeyRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportKeyRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportKeyRespMultiError) AllErrors() []error { return m }

// ImportKeyRespValidationError is the validation error returned by
// ImportKeyResp.Validate if the designated constraints aren't met.
type ImportKeyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportKeyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportKeyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportKeyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportKeyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportKeyRespValidationError) ErrorName() string { return "ImportKeyRespValidationError" }

// Error satisfies the builtin error interface
func (e ImportKeyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportKeyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportKeyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportKeyRespValidationError{}

// Validate checks the field values on PlatformsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlatformsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatformsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlatformsReqMultiError, or
// nil if none found.
func (m *PlatformsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatformsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return PlatformsReqMultiError(errors)
	}

	return nil
}

// PlatformsReqMultiError is an error wrapping multiple validation errors
// returned by PlatformsReq.ValidateAll() if the designated constraints aren't met.
type PlatformsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformsReqMultiError) AllErrors() []error { return m }

// PlatformsReqValidationError is the validation error returned by
// PlatformsReq.Validate if the designated constraints aren't met.
type PlatformsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformsReqValidationError) ErrorName() string { return "PlatformsReqValidationError" }

// Error satisfies the builtin error interface
func (e PlatformsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformsReqValidationError{}

// Validate checks the field values on PlatformsResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlatformsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatformsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlatformsRespMultiError, or
// nil if none found.
func (m *PlatformsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatformsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatformsRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatformsRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatformsRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlatformsRespMultiError(errors)
	}

	return nil
}

// PlatformsRespMultiError is an error wrapping multiple validation errors
// returned by PlatformsResp.ValidateAll() if the designated constraints
// aren't met.
type PlatformsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformsRespMultiError) AllErrors() []error { return m }

// PlatformsRespValidationError is the validation error returned by
// PlatformsResp.Validate if the designated constraints aren't met.
type PlatformsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformsRespValidationError) ErrorName() string { return "PlatformsRespValidationError" }

// Error satisfies the builtin error interface
func (e PlatformsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformsRespValidationError{}

// Validate checks the field values on PlatformInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlatformInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatformInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlatformInfoMultiError, or
// nil if none found.
func (m *PlatformInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatformInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ChainId

	// no validation rules for PlatformName

	// no validation rules for ChainName

	if len(errors) > 0 {
		return PlatformInfoMultiError(errors)
	}

	return nil
}

// PlatformInfoMultiError is an error wrapping multiple validation errors
// returned by PlatformInfo.ValidateAll() if the designated constraints aren't met.
type PlatformInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformInfoMultiError) AllErrors() []error { return m }

// PlatformInfoValidationError is the validation error returned by
// PlatformInfo.Validate if the designated constraints aren't met.
type PlatformInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformInfoValidationError) ErrorName() string { return "PlatformInfoValidationError" }

// Error satisfies the builtin error interface
func (e PlatformInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformInfoValidationError{}

// Validate checks the field values on DisplayReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisplayReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisplayReqMultiError, or
// nil if none found.
func (m *DisplayReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainId

	// no validation rules for Token

	// no validation rules for TokenId

	// no validation rules for Address

	// no validation rules for DeviceId

	// no validation rules for ImageUrl

	// no validation rules for MediaUrl

	// no validation rules for Duration

	// no validation rules for Uri

	if len(errors) > 0 {
		return DisplayReqMultiError(errors)
	}

	return nil
}

// DisplayReqMultiError is an error wrapping multiple validation errors
// returned by DisplayReq.ValidateAll() if the designated constraints aren't met.
type DisplayReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayReqMultiError) AllErrors() []error { return m }

// DisplayReqValidationError is the validation error returned by
// DisplayReq.Validate if the designated constraints aren't met.
type DisplayReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayReqValidationError) ErrorName() string { return "DisplayReqValidationError" }

// Error satisfies the builtin error interface
func (e DisplayReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayReqValidationError{}

// Validate checks the field values on DisplayResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisplayResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisplayRespMultiError, or
// nil if none found.
func (m *DisplayResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DisplayRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DisplayRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DisplayRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DisplayRespMultiError(errors)
	}

	return nil
}

// DisplayRespMultiError is an error wrapping multiple validation errors
// returned by DisplayResp.ValidateAll() if the designated constraints aren't met.
type DisplayRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayRespMultiError) AllErrors() []error { return m }

// DisplayRespValidationError is the validation error returned by
// DisplayResp.Validate if the designated constraints aren't met.
type DisplayRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayRespValidationError) ErrorName() string { return "DisplayRespValidationError" }

// Error satisfies the builtin error interface
func (e DisplayRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayRespValidationError{}

// Validate checks the field values on DisplayResInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisplayResInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayResInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisplayResInfoMultiError,
// or nil if none found.
func (m *DisplayResInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayResInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayID

	if len(errors) > 0 {
		return DisplayResInfoMultiError(errors)
	}

	return nil
}

// DisplayResInfoMultiError is an error wrapping multiple validation errors
// returned by DisplayResInfo.ValidateAll() if the designated constraints
// aren't met.
type DisplayResInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayResInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayResInfoMultiError) AllErrors() []error { return m }

// DisplayResInfoValidationError is the validation error returned by
// DisplayResInfo.Validate if the designated constraints aren't met.
type DisplayResInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayResInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayResInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayResInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayResInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayResInfoValidationError) ErrorName() string { return "DisplayResInfoValidationError" }

// Error satisfies the builtin error interface
func (e DisplayResInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayResInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayResInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayResInfoValidationError{}

// Validate checks the field values on QueryProgressReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryProgressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryProgressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryProgressReqMultiError, or nil if none found.
func (m *QueryProgressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryProgressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayID

	if len(errors) > 0 {
		return QueryProgressReqMultiError(errors)
	}

	return nil
}

// QueryProgressReqMultiError is an error wrapping multiple validation errors
// returned by QueryProgressReq.ValidateAll() if the designated constraints
// aren't met.
type QueryProgressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryProgressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryProgressReqMultiError) AllErrors() []error { return m }

// QueryProgressReqValidationError is the validation error returned by
// QueryProgressReq.Validate if the designated constraints aren't met.
type QueryProgressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryProgressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryProgressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryProgressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryProgressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryProgressReqValidationError) ErrorName() string { return "QueryProgressReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryProgressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryProgressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryProgressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryProgressReqValidationError{}

// Validate checks the field values on QueryProgressResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryProgressResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryProgressResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryProgressRespMultiError, or nil if none found.
func (m *QueryProgressResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryProgressResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Progress

	// no validation rules for TxStatus

	if len(errors) > 0 {
		return QueryProgressRespMultiError(errors)
	}

	return nil
}

// QueryProgressRespMultiError is an error wrapping multiple validation errors
// returned by QueryProgressResp.ValidateAll() if the designated constraints
// aren't met.
type QueryProgressRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryProgressRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryProgressRespMultiError) AllErrors() []error { return m }

// QueryProgressRespValidationError is the validation error returned by
// QueryProgressResp.Validate if the designated constraints aren't met.
type QueryProgressRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryProgressRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryProgressRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryProgressRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryProgressRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryProgressRespValidationError) ErrorName() string {
	return "QueryProgressRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryProgressRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryProgressResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryProgressRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryProgressRespValidationError{}

// Validate checks the field values on QueryDisplayLogReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDisplayLogReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDisplayLogReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDisplayLogReqMultiError, or nil if none found.
func (m *QueryDisplayLogReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDisplayLogReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for DateTime

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return QueryDisplayLogReqMultiError(errors)
	}

	return nil
}

// QueryDisplayLogReqMultiError is an error wrapping multiple validation errors
// returned by QueryDisplayLogReq.ValidateAll() if the designated constraints
// aren't met.
type QueryDisplayLogReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDisplayLogReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDisplayLogReqMultiError) AllErrors() []error { return m }

// QueryDisplayLogReqValidationError is the validation error returned by
// QueryDisplayLogReq.Validate if the designated constraints aren't met.
type QueryDisplayLogReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDisplayLogReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDisplayLogReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDisplayLogReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDisplayLogReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDisplayLogReqValidationError) ErrorName() string {
	return "QueryDisplayLogReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDisplayLogReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDisplayLogReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDisplayLogReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDisplayLogReqValidationError{}

// Validate checks the field values on QueryDisplayLogResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDisplayLogResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDisplayLogResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDisplayLogRespMultiError, or nil if none found.
func (m *QueryDisplayLogResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDisplayLogResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryDisplayLogRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryDisplayLogRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryDisplayLogRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryDisplayLogRespMultiError(errors)
	}

	return nil
}

// QueryDisplayLogRespMultiError is an error wrapping multiple validation
// errors returned by QueryDisplayLogResp.ValidateAll() if the designated
// constraints aren't met.
type QueryDisplayLogRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDisplayLogRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDisplayLogRespMultiError) AllErrors() []error { return m }

// QueryDisplayLogRespValidationError is the validation error returned by
// QueryDisplayLogResp.Validate if the designated constraints aren't met.
type QueryDisplayLogRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDisplayLogRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDisplayLogRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDisplayLogRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDisplayLogRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDisplayLogRespValidationError) ErrorName() string {
	return "QueryDisplayLogRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDisplayLogRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDisplayLogResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDisplayLogRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDisplayLogRespValidationError{}

// Validate checks the field values on DisplayLogInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisplayLogInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayLogInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisplayLogInfoMultiError,
// or nil if none found.
func (m *DisplayLogInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayLogInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageUrl

	// no validation rules for MediaUrl

	// no validation rules for BeginTime

	// no validation rules for Duration

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return DisplayLogInfoMultiError(errors)
	}

	return nil
}

// DisplayLogInfoMultiError is an error wrapping multiple validation errors
// returned by DisplayLogInfo.ValidateAll() if the designated constraints
// aren't met.
type DisplayLogInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayLogInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayLogInfoMultiError) AllErrors() []error { return m }

// DisplayLogInfoValidationError is the validation error returned by
// DisplayLogInfo.Validate if the designated constraints aren't met.
type DisplayLogInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayLogInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayLogInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayLogInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayLogInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayLogInfoValidationError) ErrorName() string { return "DisplayLogInfoValidationError" }

// Error satisfies the builtin error interface
func (e DisplayLogInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayLogInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayLogInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayLogInfoValidationError{}

// Validate checks the field values on ApplyEnterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApplyEnterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyEnterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplyEnterReqMultiError, or
// nil if none found.
func (m *ApplyEnterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyEnterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Proposer

	// no validation rules for Phone

	// no validation rules for ApplyReason

	if len(errors) > 0 {
		return ApplyEnterReqMultiError(errors)
	}

	return nil
}

// ApplyEnterReqMultiError is an error wrapping multiple validation errors
// returned by ApplyEnterReq.ValidateAll() if the designated constraints
// aren't met.
type ApplyEnterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyEnterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyEnterReqMultiError) AllErrors() []error { return m }

// ApplyEnterReqValidationError is the validation error returned by
// ApplyEnterReq.Validate if the designated constraints aren't met.
type ApplyEnterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyEnterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyEnterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyEnterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyEnterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyEnterReqValidationError) ErrorName() string { return "ApplyEnterReqValidationError" }

// Error satisfies the builtin error interface
func (e ApplyEnterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyEnterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyEnterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyEnterReqValidationError{}

// Validate checks the field values on ApplyEnterResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApplyEnterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyEnterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplyEnterRespMultiError,
// or nil if none found.
func (m *ApplyEnterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyEnterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ApplyEnterRespMultiError(errors)
	}

	return nil
}

// ApplyEnterRespMultiError is an error wrapping multiple validation errors
// returned by ApplyEnterResp.ValidateAll() if the designated constraints
// aren't met.
type ApplyEnterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyEnterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyEnterRespMultiError) AllErrors() []error { return m }

// ApplyEnterRespValidationError is the validation error returned by
// ApplyEnterResp.Validate if the designated constraints aren't met.
type ApplyEnterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyEnterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyEnterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyEnterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyEnterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyEnterRespValidationError) ErrorName() string { return "ApplyEnterRespValidationError" }

// Error satisfies the builtin error interface
func (e ApplyEnterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyEnterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyEnterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyEnterRespValidationError{}

// Validate checks the field values on DelAppVersionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelAppVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelAppVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelAppVersionReqMultiError, or nil if none found.
func (m *DelAppVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelAppVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DelAppVersionReqMultiError(errors)
	}

	return nil
}

// DelAppVersionReqMultiError is an error wrapping multiple validation errors
// returned by DelAppVersionReq.ValidateAll() if the designated constraints
// aren't met.
type DelAppVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelAppVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelAppVersionReqMultiError) AllErrors() []error { return m }

// DelAppVersionReqValidationError is the validation error returned by
// DelAppVersionReq.Validate if the designated constraints aren't met.
type DelAppVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelAppVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelAppVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelAppVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelAppVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelAppVersionReqValidationError) ErrorName() string { return "DelAppVersionReqValidationError" }

// Error satisfies the builtin error interface
func (e DelAppVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelAppVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelAppVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelAppVersionReqValidationError{}

// Validate checks the field values on DelAppVersionResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelAppVersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelAppVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelAppVersionRespMultiError, or nil if none found.
func (m *DelAppVersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelAppVersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return DelAppVersionRespMultiError(errors)
	}

	return nil
}

// DelAppVersionRespMultiError is an error wrapping multiple validation errors
// returned by DelAppVersionResp.ValidateAll() if the designated constraints
// aren't met.
type DelAppVersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelAppVersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelAppVersionRespMultiError) AllErrors() []error { return m }

// DelAppVersionRespValidationError is the validation error returned by
// DelAppVersionResp.Validate if the designated constraints aren't met.
type DelAppVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelAppVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelAppVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelAppVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelAppVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelAppVersionRespValidationError) ErrorName() string {
	return "DelAppVersionRespValidationError"
}

// Error satisfies the builtin error interface
func (e DelAppVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelAppVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelAppVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelAppVersionRespValidationError{}

// Validate checks the field values on SetAppVersionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetAppVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAppVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAppVersionReqMultiError, or nil if none found.
func (m *SetAppVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAppVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for Version

	// no validation rules for VersionCode

	// no validation rules for Status

	if len(errors) > 0 {
		return SetAppVersionReqMultiError(errors)
	}

	return nil
}

// SetAppVersionReqMultiError is an error wrapping multiple validation errors
// returned by SetAppVersionReq.ValidateAll() if the designated constraints
// aren't met.
type SetAppVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAppVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAppVersionReqMultiError) AllErrors() []error { return m }

// SetAppVersionReqValidationError is the validation error returned by
// SetAppVersionReq.Validate if the designated constraints aren't met.
type SetAppVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAppVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAppVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAppVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAppVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAppVersionReqValidationError) ErrorName() string { return "SetAppVersionReqValidationError" }

// Error satisfies the builtin error interface
func (e SetAppVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAppVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAppVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAppVersionReqValidationError{}

// Validate checks the field values on SetAppVersionResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetAppVersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAppVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAppVersionRespMultiError, or nil if none found.
func (m *SetAppVersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAppVersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return SetAppVersionRespMultiError(errors)
	}

	return nil
}

// SetAppVersionRespMultiError is an error wrapping multiple validation errors
// returned by SetAppVersionResp.ValidateAll() if the designated constraints
// aren't met.
type SetAppVersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAppVersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAppVersionRespMultiError) AllErrors() []error { return m }

// SetAppVersionRespValidationError is the validation error returned by
// SetAppVersionResp.Validate if the designated constraints aren't met.
type SetAppVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAppVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAppVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAppVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAppVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAppVersionRespValidationError) ErrorName() string {
	return "SetAppVersionRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetAppVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAppVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAppVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAppVersionRespValidationError{}

// Validate checks the field values on GetAppVersionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAppVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppVersionReqMultiError, or nil if none found.
func (m *GetAppVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAppVersionReqMultiError(errors)
	}

	return nil
}

// GetAppVersionReqMultiError is an error wrapping multiple validation errors
// returned by GetAppVersionReq.ValidateAll() if the designated constraints
// aren't met.
type GetAppVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppVersionReqMultiError) AllErrors() []error { return m }

// GetAppVersionReqValidationError is the validation error returned by
// GetAppVersionReq.Validate if the designated constraints aren't met.
type GetAppVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppVersionReqValidationError) ErrorName() string { return "GetAppVersionReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAppVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppVersionReqValidationError{}

// Validate checks the field values on GetAppVersionResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAppVersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppVersionRespMultiError, or nil if none found.
func (m *GetAppVersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppVersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppVersionRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppVersionRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppVersionRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppVersionRespMultiError(errors)
	}

	return nil
}

// GetAppVersionRespMultiError is an error wrapping multiple validation errors
// returned by GetAppVersionResp.ValidateAll() if the designated constraints
// aren't met.
type GetAppVersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppVersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppVersionRespMultiError) AllErrors() []error { return m }

// GetAppVersionRespValidationError is the validation error returned by
// GetAppVersionResp.Validate if the designated constraints aren't met.
type GetAppVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppVersionRespValidationError) ErrorName() string {
	return "GetAppVersionRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppVersionRespValidationError{}

// Validate checks the field values on AppVersionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppVersionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppVersionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppVersionInfoMultiError,
// or nil if none found.
func (m *AppVersionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AppVersionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for Version

	// no validation rules for VersionCode

	// no validation rules for Status

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return AppVersionInfoMultiError(errors)
	}

	return nil
}

// AppVersionInfoMultiError is an error wrapping multiple validation errors
// returned by AppVersionInfo.ValidateAll() if the designated constraints
// aren't met.
type AppVersionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppVersionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppVersionInfoMultiError) AllErrors() []error { return m }

// AppVersionInfoValidationError is the validation error returned by
// AppVersionInfo.Validate if the designated constraints aren't met.
type AppVersionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppVersionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppVersionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppVersionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppVersionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppVersionInfoValidationError) ErrorName() string { return "AppVersionInfoValidationError" }

// Error satisfies the builtin error interface
func (e AppVersionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppVersionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppVersionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppVersionInfoValidationError{}

// Validate checks the field values on SetDeviceVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDeviceVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDeviceVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDeviceVersionReqMultiError, or nil if none found.
func (m *SetDeviceVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDeviceVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for VersionCode

	// no validation rules for VersionName

	// no validation rules for Url

	// no validation rules for Description

	// no validation rules for SystemSigned

	// no validation rules for Env

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for Deleted

	if len(errors) > 0 {
		return SetDeviceVersionReqMultiError(errors)
	}

	return nil
}

// SetDeviceVersionReqMultiError is an error wrapping multiple validation
// errors returned by SetDeviceVersionReq.ValidateAll() if the designated
// constraints aren't met.
type SetDeviceVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDeviceVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDeviceVersionReqMultiError) AllErrors() []error { return m }

// SetDeviceVersionReqValidationError is the validation error returned by
// SetDeviceVersionReq.Validate if the designated constraints aren't met.
type SetDeviceVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDeviceVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDeviceVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDeviceVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDeviceVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDeviceVersionReqValidationError) ErrorName() string {
	return "SetDeviceVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetDeviceVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDeviceVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDeviceVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDeviceVersionReqValidationError{}

// Validate checks the field values on SetDeviceVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDeviceVersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDeviceVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDeviceVersionRespMultiError, or nil if none found.
func (m *SetDeviceVersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDeviceVersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return SetDeviceVersionRespMultiError(errors)
	}

	return nil
}

// SetDeviceVersionRespMultiError is an error wrapping multiple validation
// errors returned by SetDeviceVersionResp.ValidateAll() if the designated
// constraints aren't met.
type SetDeviceVersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDeviceVersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDeviceVersionRespMultiError) AllErrors() []error { return m }

// SetDeviceVersionRespValidationError is the validation error returned by
// SetDeviceVersionResp.Validate if the designated constraints aren't met.
type SetDeviceVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDeviceVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDeviceVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDeviceVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDeviceVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDeviceVersionRespValidationError) ErrorName() string {
	return "SetDeviceVersionRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetDeviceVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDeviceVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDeviceVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDeviceVersionRespValidationError{}

// Validate checks the field values on GetDeviceVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceVersionReqMultiError, or nil if none found.
func (m *GetDeviceVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Env

	if len(errors) > 0 {
		return GetDeviceVersionReqMultiError(errors)
	}

	return nil
}

// GetDeviceVersionReqMultiError is an error wrapping multiple validation
// errors returned by GetDeviceVersionReq.ValidateAll() if the designated
// constraints aren't met.
type GetDeviceVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceVersionReqMultiError) AllErrors() []error { return m }

// GetDeviceVersionReqValidationError is the validation error returned by
// GetDeviceVersionReq.Validate if the designated constraints aren't met.
type GetDeviceVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceVersionReqValidationError) ErrorName() string {
	return "GetDeviceVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceVersionReqValidationError{}

// Validate checks the field values on GetDeviceVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceVersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceVersionRespMultiError, or nil if none found.
func (m *GetDeviceVersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceVersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeviceVersionRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeviceVersionRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeviceVersionRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeviceVersionRespMultiError(errors)
	}

	return nil
}

// GetDeviceVersionRespMultiError is an error wrapping multiple validation
// errors returned by GetDeviceVersionResp.ValidateAll() if the designated
// constraints aren't met.
type GetDeviceVersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceVersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceVersionRespMultiError) AllErrors() []error { return m }

// GetDeviceVersionRespValidationError is the validation error returned by
// GetDeviceVersionResp.Validate if the designated constraints aren't met.
type GetDeviceVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceVersionRespValidationError) ErrorName() string {
	return "GetDeviceVersionRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceVersionRespValidationError{}

// Validate checks the field values on DeviceVersionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceVersionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceVersionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceVersionInfoMultiError, or nil if none found.
func (m *DeviceVersionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceVersionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for VersionCode

	// no validation rules for VersionName

	// no validation rules for Url

	// no validation rules for Description

	// no validation rules for SystemSigned

	// no validation rules for Env

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for Deleted

	if len(errors) > 0 {
		return DeviceVersionInfoMultiError(errors)
	}

	return nil
}

// DeviceVersionInfoMultiError is an error wrapping multiple validation errors
// returned by DeviceVersionInfo.ValidateAll() if the designated constraints
// aren't met.
type DeviceVersionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceVersionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceVersionInfoMultiError) AllErrors() []error { return m }

// DeviceVersionInfoValidationError is the validation error returned by
// DeviceVersionInfo.Validate if the designated constraints aren't met.
type DeviceVersionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceVersionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceVersionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceVersionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceVersionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceVersionInfoValidationError) ErrorName() string {
	return "DeviceVersionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceVersionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceVersionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceVersionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceVersionInfoValidationError{}

// Validate checks the field values on GetScreenCastByDeviceIdReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetScreenCastByDeviceIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScreenCastByDeviceIdReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScreenCastByDeviceIdReqMultiError, or nil if none found.
func (m *GetScreenCastByDeviceIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScreenCastByDeviceIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return GetScreenCastByDeviceIdReqMultiError(errors)
	}

	return nil
}

// GetScreenCastByDeviceIdReqMultiError is an error wrapping multiple
// validation errors returned by GetScreenCastByDeviceIdReq.ValidateAll() if
// the designated constraints aren't met.
type GetScreenCastByDeviceIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScreenCastByDeviceIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScreenCastByDeviceIdReqMultiError) AllErrors() []error { return m }

// GetScreenCastByDeviceIdReqValidationError is the validation error returned
// by GetScreenCastByDeviceIdReq.Validate if the designated constraints aren't met.
type GetScreenCastByDeviceIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScreenCastByDeviceIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScreenCastByDeviceIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScreenCastByDeviceIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScreenCastByDeviceIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScreenCastByDeviceIdReqValidationError) ErrorName() string {
	return "GetScreenCastByDeviceIdReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetScreenCastByDeviceIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScreenCastByDeviceIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScreenCastByDeviceIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScreenCastByDeviceIdReqValidationError{}

// Validate checks the field values on GetScreenCastByDeviceIdResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetScreenCastByDeviceIdResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScreenCastByDeviceIdResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScreenCastByDeviceIdRespMultiError, or nil if none found.
func (m *GetScreenCastByDeviceIdResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScreenCastByDeviceIdResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetScreenCastByDeviceIdRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetScreenCastByDeviceIdRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetScreenCastByDeviceIdRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetScreenCastByDeviceIdRespMultiError(errors)
	}

	return nil
}

// GetScreenCastByDeviceIdRespMultiError is an error wrapping multiple
// validation errors returned by GetScreenCastByDeviceIdResp.ValidateAll() if
// the designated constraints aren't met.
type GetScreenCastByDeviceIdRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScreenCastByDeviceIdRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScreenCastByDeviceIdRespMultiError) AllErrors() []error { return m }

// GetScreenCastByDeviceIdRespValidationError is the validation error returned
// by GetScreenCastByDeviceIdResp.Validate if the designated constraints
// aren't met.
type GetScreenCastByDeviceIdRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScreenCastByDeviceIdRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScreenCastByDeviceIdRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScreenCastByDeviceIdRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScreenCastByDeviceIdRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScreenCastByDeviceIdRespValidationError) ErrorName() string {
	return "GetScreenCastByDeviceIdRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetScreenCastByDeviceIdRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScreenCastByDeviceIdResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScreenCastByDeviceIdRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScreenCastByDeviceIdRespValidationError{}

// Validate checks the field values on NFTInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NFTInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NFTInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NFTInfoMultiError, or nil if none found.
func (m *NFTInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NFTInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ChainId

	// no validation rules for Token

	// no validation rules for TokenId

	// no validation rules for Address

	// no validation rules for DeviceId

	// no validation rules for BeginTime

	// no validation rules for EndTime

	// no validation rules for ImageUrl

	// no validation rules for MediaUrl

	if len(errors) > 0 {
		return NFTInfoMultiError(errors)
	}

	return nil
}

// NFTInfoMultiError is an error wrapping multiple validation errors returned
// by NFTInfo.ValidateAll() if the designated constraints aren't met.
type NFTInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NFTInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NFTInfoMultiError) AllErrors() []error { return m }

// NFTInfoValidationError is the validation error returned by NFTInfo.Validate
// if the designated constraints aren't met.
type NFTInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NFTInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NFTInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NFTInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NFTInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NFTInfoValidationError) ErrorName() string { return "NFTInfoValidationError" }

// Error satisfies the builtin error interface
func (e NFTInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNFTInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NFTInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NFTInfoValidationError{}

// Validate checks the field values on BatchNotifyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BatchNotifyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchNotifyReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BatchNotifyReqMultiError,
// or nil if none found.
func (m *BatchNotifyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchNotifyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchNotifyReqValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchNotifyReqValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchNotifyReqValidationError{
				field:  "Tx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceipt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchNotifyReqValidationError{
					field:  "Receipt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchNotifyReqValidationError{
					field:  "Receipt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceipt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchNotifyReqValidationError{
				field:  "Receipt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchNotifyReqValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchNotifyReqValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchNotifyReqValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BatchNotifyReqMultiError(errors)
	}

	return nil
}

// BatchNotifyReqMultiError is an error wrapping multiple validation errors
// returned by BatchNotifyReq.ValidateAll() if the designated constraints
// aren't met.
type BatchNotifyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchNotifyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchNotifyReqMultiError) AllErrors() []error { return m }

// BatchNotifyReqValidationError is the validation error returned by
// BatchNotifyReq.Validate if the designated constraints aren't met.
type BatchNotifyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchNotifyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchNotifyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchNotifyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchNotifyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchNotifyReqValidationError) ErrorName() string { return "BatchNotifyReqValidationError" }

// Error satisfies the builtin error interface
func (e BatchNotifyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchNotifyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchNotifyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchNotifyReqValidationError{}

// Validate checks the field values on BassResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BassResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BassResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BassRespMultiError, or nil
// if none found.
func (m *BassResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BassResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return BassRespMultiError(errors)
	}

	return nil
}

// BassRespMultiError is an error wrapping multiple validation errors returned
// by BassResp.ValidateAll() if the designated constraints aren't met.
type BassRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BassRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BassRespMultiError) AllErrors() []error { return m }

// BassRespValidationError is the validation error returned by
// BassResp.Validate if the designated constraints aren't met.
type BassRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BassRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BassRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BassRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BassRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BassRespValidationError) ErrorName() string { return "BassRespValidationError" }

// Error satisfies the builtin error interface
func (e BassRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBassResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BassRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BassRespValidationError{}

// Validate checks the field values on GetNFTByOwnerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNFTByOwnerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNFTByOwnerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNFTByOwnerReqMultiError, or nil if none found.
func (m *GetNFTByOwnerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNFTByOwnerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Owner

	if len(errors) > 0 {
		return GetNFTByOwnerReqMultiError(errors)
	}

	return nil
}

// GetNFTByOwnerReqMultiError is an error wrapping multiple validation errors
// returned by GetNFTByOwnerReq.ValidateAll() if the designated constraints
// aren't met.
type GetNFTByOwnerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNFTByOwnerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNFTByOwnerReqMultiError) AllErrors() []error { return m }

// GetNFTByOwnerReqValidationError is the validation error returned by
// GetNFTByOwnerReq.Validate if the designated constraints aren't met.
type GetNFTByOwnerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNFTByOwnerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNFTByOwnerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNFTByOwnerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNFTByOwnerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNFTByOwnerReqValidationError) ErrorName() string { return "GetNFTByOwnerReqValidationError" }

// Error satisfies the builtin error interface
func (e GetNFTByOwnerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNFTByOwnerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNFTByOwnerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNFTByOwnerReqValidationError{}

// Validate checks the field values on GetNFTByOwnerResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNFTByOwnerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNFTByOwnerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNFTByOwnerRespMultiError, or nil if none found.
func (m *GetNFTByOwnerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNFTByOwnerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNFTByOwnerRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNFTByOwnerRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNFTByOwnerRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNFTByOwnerRespMultiError(errors)
	}

	return nil
}

// GetNFTByOwnerRespMultiError is an error wrapping multiple validation errors
// returned by GetNFTByOwnerResp.ValidateAll() if the designated constraints
// aren't met.
type GetNFTByOwnerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNFTByOwnerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNFTByOwnerRespMultiError) AllErrors() []error { return m }

// GetNFTByOwnerRespValidationError is the validation error returned by
// GetNFTByOwnerResp.Validate if the designated constraints aren't met.
type GetNFTByOwnerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNFTByOwnerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNFTByOwnerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNFTByOwnerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNFTByOwnerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNFTByOwnerRespValidationError) ErrorName() string {
	return "GetNFTByOwnerRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetNFTByOwnerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNFTByOwnerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNFTByOwnerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNFTByOwnerRespValidationError{}

// Validate checks the field values on MvpNFTInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MvpNFTInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MvpNFTInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MvpNFTInfoMultiError, or
// nil if none found.
func (m *MvpNFTInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MvpNFTInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Token

	// no validation rules for TokenId

	// no validation rules for Count

	// no validation rules for Uri

	// no validation rules for Media

	// no validation rules for MediaOrigin

	// no validation rules for Type

	// no validation rules for Image

	// no validation rules for ImageOrigin

	// no validation rules for Owner

	if len(errors) > 0 {
		return MvpNFTInfoMultiError(errors)
	}

	return nil
}

// MvpNFTInfoMultiError is an error wrapping multiple validation errors
// returned by MvpNFTInfo.ValidateAll() if the designated constraints aren't met.
type MvpNFTInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MvpNFTInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MvpNFTInfoMultiError) AllErrors() []error { return m }

// MvpNFTInfoValidationError is the validation error returned by
// MvpNFTInfo.Validate if the designated constraints aren't met.
type MvpNFTInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MvpNFTInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MvpNFTInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MvpNFTInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MvpNFTInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MvpNFTInfoValidationError) ErrorName() string { return "MvpNFTInfoValidationError" }

// Error satisfies the builtin error interface
func (e MvpNFTInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMvpNFTInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MvpNFTInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MvpNFTInfoValidationError{}

// Validate checks the field values on GetNFTByPhoneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNFTByPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNFTByPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNFTByPhoneReqMultiError, or nil if none found.
func (m *GetNFTByPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNFTByPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Phone

	// no validation rules for PlatformId

	// no validation rules for CurPage

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetNFTByPhoneReqMultiError(errors)
	}

	return nil
}

// GetNFTByPhoneReqMultiError is an error wrapping multiple validation errors
// returned by GetNFTByPhoneReq.ValidateAll() if the designated constraints
// aren't met.
type GetNFTByPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNFTByPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNFTByPhoneReqMultiError) AllErrors() []error { return m }

// GetNFTByPhoneReqValidationError is the validation error returned by
// GetNFTByPhoneReq.Validate if the designated constraints aren't met.
type GetNFTByPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNFTByPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNFTByPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNFTByPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNFTByPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNFTByPhoneReqValidationError) ErrorName() string { return "GetNFTByPhoneReqValidationError" }

// Error satisfies the builtin error interface
func (e GetNFTByPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNFTByPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNFTByPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNFTByPhoneReqValidationError{}

// Validate checks the field values on GetNFTByPhoneResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNFTByPhoneResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNFTByPhoneResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNFTByPhoneRespMultiError, or nil if none found.
func (m *GetNFTByPhoneResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNFTByPhoneResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNFTByPhoneRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNFTByPhoneRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNFTByPhoneRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNFTByPhoneRespMultiError(errors)
	}

	return nil
}

// GetNFTByPhoneRespMultiError is an error wrapping multiple validation errors
// returned by GetNFTByPhoneResp.ValidateAll() if the designated constraints
// aren't met.
type GetNFTByPhoneRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNFTByPhoneRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNFTByPhoneRespMultiError) AllErrors() []error { return m }

// GetNFTByPhoneRespValidationError is the validation error returned by
// GetNFTByPhoneResp.Validate if the designated constraints aren't met.
type GetNFTByPhoneRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNFTByPhoneRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNFTByPhoneRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNFTByPhoneRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNFTByPhoneRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNFTByPhoneRespValidationError) ErrorName() string {
	return "GetNFTByPhoneRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetNFTByPhoneRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNFTByPhoneResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNFTByPhoneRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNFTByPhoneRespValidationError{}

// Validate checks the field values on PlatFormNFTInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlatFormNFTInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatFormNFTInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatFormNFTInfoMultiError, or nil if none found.
func (m *PlatFormNFTInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatFormNFTInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Token

	// no validation rules for TokenId

	// no validation rules for Count

	// no validation rules for Uri

	// no validation rules for Media

	// no validation rules for MediaOrigin

	// no validation rules for Type

	// no validation rules for Image

	// no validation rules for ImageOrigin

	// no validation rules for Owner

	// no validation rules for BeginTime

	// no validation rules for EndTime

	// no validation rules for Duration

	// no validation rules for ResType

	if len(errors) > 0 {
		return PlatFormNFTInfoMultiError(errors)
	}

	return nil
}

// PlatFormNFTInfoMultiError is an error wrapping multiple validation errors
// returned by PlatFormNFTInfo.ValidateAll() if the designated constraints
// aren't met.
type PlatFormNFTInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatFormNFTInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatFormNFTInfoMultiError) AllErrors() []error { return m }

// PlatFormNFTInfoValidationError is the validation error returned by
// PlatFormNFTInfo.Validate if the designated constraints aren't met.
type PlatFormNFTInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatFormNFTInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatFormNFTInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatFormNFTInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatFormNFTInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatFormNFTInfoValidationError) ErrorName() string { return "PlatFormNFTInfoValidationError" }

// Error satisfies the builtin error interface
func (e PlatFormNFTInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatFormNFTInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatFormNFTInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatFormNFTInfoValidationError{}

// Validate checks the field values on PlatformsResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatformsResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatformsResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatformsResp_DataMultiError, or nil if none found.
func (m *PlatformsResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatformsResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlatformsResp_DataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlatformsResp_DataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlatformsResp_DataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlatformsResp_DataMultiError(errors)
	}

	return nil
}

// PlatformsResp_DataMultiError is an error wrapping multiple validation errors
// returned by PlatformsResp_Data.ValidateAll() if the designated constraints
// aren't met.
type PlatformsResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformsResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformsResp_DataMultiError) AllErrors() []error { return m }

// PlatformsResp_DataValidationError is the validation error returned by
// PlatformsResp_Data.Validate if the designated constraints aren't met.
type PlatformsResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformsResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformsResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformsResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformsResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformsResp_DataValidationError) ErrorName() string {
	return "PlatformsResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e PlatformsResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformsResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformsResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformsResp_DataValidationError{}

// Validate checks the field values on BatchNotifyReq_ChainNotifyTx with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchNotifyReq_ChainNotifyTx) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchNotifyReq_ChainNotifyTx with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchNotifyReq_ChainNotifyTxMultiError, or nil if none found.
func (m *BatchNotifyReq_ChainNotifyTx) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchNotifyReq_ChainNotifyTx) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chain

	// no validation rules for Address

	// no validation rules for Method

	// no validation rules for Args

	// no validation rules for Account

	// no validation rules for Contract

	// no validation rules for Opts

	if len(errors) > 0 {
		return BatchNotifyReq_ChainNotifyTxMultiError(errors)
	}

	return nil
}

// BatchNotifyReq_ChainNotifyTxMultiError is an error wrapping multiple
// validation errors returned by BatchNotifyReq_ChainNotifyTx.ValidateAll() if
// the designated constraints aren't met.
type BatchNotifyReq_ChainNotifyTxMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchNotifyReq_ChainNotifyTxMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchNotifyReq_ChainNotifyTxMultiError) AllErrors() []error { return m }

// BatchNotifyReq_ChainNotifyTxValidationError is the validation error returned
// by BatchNotifyReq_ChainNotifyTx.Validate if the designated constraints
// aren't met.
type BatchNotifyReq_ChainNotifyTxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchNotifyReq_ChainNotifyTxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchNotifyReq_ChainNotifyTxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchNotifyReq_ChainNotifyTxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchNotifyReq_ChainNotifyTxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchNotifyReq_ChainNotifyTxValidationError) ErrorName() string {
	return "BatchNotifyReq_ChainNotifyTxValidationError"
}

// Error satisfies the builtin error interface
func (e BatchNotifyReq_ChainNotifyTxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchNotifyReq_ChainNotifyTx.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchNotifyReq_ChainNotifyTxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchNotifyReq_ChainNotifyTxValidationError{}

// Validate checks the field values on BatchNotifyReq_ReceiptInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchNotifyReq_ReceiptInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchNotifyReq_ReceiptInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchNotifyReq_ReceiptInfoMultiError, or nil if none found.
func (m *BatchNotifyReq_ReceiptInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchNotifyReq_ReceiptInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlockNumber

	// no validation rules for TransactionHash

	if len(errors) > 0 {
		return BatchNotifyReq_ReceiptInfoMultiError(errors)
	}

	return nil
}

// BatchNotifyReq_ReceiptInfoMultiError is an error wrapping multiple
// validation errors returned by BatchNotifyReq_ReceiptInfo.ValidateAll() if
// the designated constraints aren't met.
type BatchNotifyReq_ReceiptInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchNotifyReq_ReceiptInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchNotifyReq_ReceiptInfoMultiError) AllErrors() []error { return m }

// BatchNotifyReq_ReceiptInfoValidationError is the validation error returned
// by BatchNotifyReq_ReceiptInfo.Validate if the designated constraints aren't met.
type BatchNotifyReq_ReceiptInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchNotifyReq_ReceiptInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchNotifyReq_ReceiptInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchNotifyReq_ReceiptInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchNotifyReq_ReceiptInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchNotifyReq_ReceiptInfoValidationError) ErrorName() string {
	return "BatchNotifyReq_ReceiptInfoValidationError"
}

// Error satisfies the builtin error interface
func (e BatchNotifyReq_ReceiptInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchNotifyReq_ReceiptInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchNotifyReq_ReceiptInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchNotifyReq_ReceiptInfoValidationError{}

// Validate checks the field values on BatchNotifyReq_ErrorInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchNotifyReq_ErrorInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchNotifyReq_ErrorInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchNotifyReq_ErrorInfoMultiError, or nil if none found.
func (m *BatchNotifyReq_ErrorInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchNotifyReq_ErrorInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Errno

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for Message

	// no validation rules for Code

	if len(errors) > 0 {
		return BatchNotifyReq_ErrorInfoMultiError(errors)
	}

	return nil
}

// BatchNotifyReq_ErrorInfoMultiError is an error wrapping multiple validation
// errors returned by BatchNotifyReq_ErrorInfo.ValidateAll() if the designated
// constraints aren't met.
type BatchNotifyReq_ErrorInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchNotifyReq_ErrorInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchNotifyReq_ErrorInfoMultiError) AllErrors() []error { return m }

// BatchNotifyReq_ErrorInfoValidationError is the validation error returned by
// BatchNotifyReq_ErrorInfo.Validate if the designated constraints aren't met.
type BatchNotifyReq_ErrorInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchNotifyReq_ErrorInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchNotifyReq_ErrorInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchNotifyReq_ErrorInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchNotifyReq_ErrorInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchNotifyReq_ErrorInfoValidationError) ErrorName() string {
	return "BatchNotifyReq_ErrorInfoValidationError"
}

// Error satisfies the builtin error interface
func (e BatchNotifyReq_ErrorInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchNotifyReq_ErrorInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchNotifyReq_ErrorInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchNotifyReq_ErrorInfoValidationError{}

// Validate checks the field values on GetNFTByPhoneResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNFTByPhoneResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNFTByPhoneResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNFTByPhoneResp_DataMultiError, or nil if none found.
func (m *GetNFTByPhoneResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNFTByPhoneResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNFTByPhoneResp_DataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNFTByPhoneResp_DataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNFTByPhoneResp_DataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNFTByPhoneResp_DataMultiError(errors)
	}

	return nil
}

// GetNFTByPhoneResp_DataMultiError is an error wrapping multiple validation
// errors returned by GetNFTByPhoneResp_Data.ValidateAll() if the designated
// constraints aren't met.
type GetNFTByPhoneResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNFTByPhoneResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNFTByPhoneResp_DataMultiError) AllErrors() []error { return m }

// GetNFTByPhoneResp_DataValidationError is the validation error returned by
// GetNFTByPhoneResp_Data.Validate if the designated constraints aren't met.
type GetNFTByPhoneResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNFTByPhoneResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNFTByPhoneResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNFTByPhoneResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNFTByPhoneResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNFTByPhoneResp_DataValidationError) ErrorName() string {
	return "GetNFTByPhoneResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetNFTByPhoneResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNFTByPhoneResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNFTByPhoneResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNFTByPhoneResp_DataValidationError{}
