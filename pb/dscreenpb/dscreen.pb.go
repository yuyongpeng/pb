// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/dscreenpb/dscreen.proto

package dscreenpb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImportKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Phone   string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ImportKeyReq) Reset() {
	*x = ImportKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeyReq) ProtoMessage() {}

func (x *ImportKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeyReq.ProtoReflect.Descriptor instead.
func (*ImportKeyReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{0}
}

func (x *ImportKeyReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ImportKeyReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ImportKeyReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ImportKeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ImportKeyResp) Reset() {
	*x = ImportKeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportKeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeyResp) ProtoMessage() {}

func (x *ImportKeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeyResp.ProtoReflect.Descriptor instead.
func (*ImportKeyResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{1}
}

func (x *ImportKeyResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ImportKeyResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PlatformsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *PlatformsReq) Reset() {
	*x = PlatformsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformsReq) ProtoMessage() {}

func (x *PlatformsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformsReq.ProtoReflect.Descriptor instead.
func (*PlatformsReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{2}
}

func (x *PlatformsReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type PlatformsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *PlatformsResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PlatformsResp) Reset() {
	*x = PlatformsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformsResp) ProtoMessage() {}

func (x *PlatformsResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformsResp.ProtoReflect.Descriptor instead.
func (*PlatformsResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{3}
}

func (x *PlatformsResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlatformsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PlatformsResp) GetData() *PlatformsResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlatformInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChainId      uint32 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PlatformName string `protobuf:"bytes,3,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`
	ChainName    string `protobuf:"bytes,4,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (x *PlatformInfo) Reset() {
	*x = PlatformInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformInfo) ProtoMessage() {}

func (x *PlatformInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformInfo.ProtoReflect.Descriptor instead.
func (*PlatformInfo) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{4}
}

func (x *PlatformInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlatformInfo) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *PlatformInfo) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *PlatformInfo) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

type DisplayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId  uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	TokenId  string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Address  string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	DeviceId string `protobuf:"bytes,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ImageUrl string `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	MediaUrl string `protobuf:"bytes,7,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	Duration uint32 `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Uri      string `protobuf:"bytes,9,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *DisplayReq) Reset() {
	*x = DisplayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayReq) ProtoMessage() {}

func (x *DisplayReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayReq.ProtoReflect.Descriptor instead.
func (*DisplayReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{5}
}

func (x *DisplayReq) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *DisplayReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DisplayReq) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *DisplayReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DisplayReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DisplayReq) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *DisplayReq) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *DisplayReq) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DisplayReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type DisplayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *DisplayResInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DisplayResp) Reset() {
	*x = DisplayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayResp) ProtoMessage() {}

func (x *DisplayResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayResp.ProtoReflect.Descriptor instead.
func (*DisplayResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{6}
}

func (x *DisplayResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DisplayResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DisplayResp) GetData() *DisplayResInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DisplayResInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayID uint32 `protobuf:"varint,1,opt,name=displayID,proto3" json:"displayID,omitempty"`
}

func (x *DisplayResInfo) Reset() {
	*x = DisplayResInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayResInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayResInfo) ProtoMessage() {}

func (x *DisplayResInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayResInfo.ProtoReflect.Descriptor instead.
func (*DisplayResInfo) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{7}
}

func (x *DisplayResInfo) GetDisplayID() uint32 {
	if x != nil {
		return x.DisplayID
	}
	return 0
}

type QueryProgressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayID uint32 `protobuf:"varint,1,opt,name=displayID,proto3" json:"displayID,omitempty"`
}

func (x *QueryProgressReq) Reset() {
	*x = QueryProgressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProgressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProgressReq) ProtoMessage() {}

func (x *QueryProgressReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProgressReq.ProtoReflect.Descriptor instead.
func (*QueryProgressReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{8}
}

func (x *QueryProgressReq) GetDisplayID() uint32 {
	if x != nil {
		return x.DisplayID
	}
	return 0
}

type QueryProgressResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Progress string `protobuf:"bytes,3,opt,name=progress,proto3" json:"progress,omitempty"`
	TxStatus uint32 `protobuf:"varint,4,opt,name=txStatus,proto3" json:"txStatus,omitempty"`
}

func (x *QueryProgressResp) Reset() {
	*x = QueryProgressResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProgressResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProgressResp) ProtoMessage() {}

func (x *QueryProgressResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProgressResp.ProtoReflect.Descriptor instead.
func (*QueryProgressResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{9}
}

func (x *QueryProgressResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryProgressResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryProgressResp) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *QueryProgressResp) GetTxStatus() uint32 {
	if x != nil {
		return x.TxStatus
	}
	return 0
}

type QueryDisplayLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DateTime uint32 `protobuf:"varint,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	DeviceId string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *QueryDisplayLogReq) Reset() {
	*x = QueryDisplayLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDisplayLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDisplayLogReq) ProtoMessage() {}

func (x *QueryDisplayLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDisplayLogReq.ProtoReflect.Descriptor instead.
func (*QueryDisplayLogReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{10}
}

func (x *QueryDisplayLogReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryDisplayLogReq) GetDateTime() uint32 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *QueryDisplayLogReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type QueryDisplayLogResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*DisplayLogInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDisplayLogResp) Reset() {
	*x = QueryDisplayLogResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDisplayLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDisplayLogResp) ProtoMessage() {}

func (x *QueryDisplayLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDisplayLogResp.ProtoReflect.Descriptor instead.
func (*QueryDisplayLogResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{11}
}

func (x *QueryDisplayLogResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryDisplayLogResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryDisplayLogResp) GetData() []*DisplayLogInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DisplayLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl  string `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	MediaUrl  string `protobuf:"bytes,2,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	BeginTime uint32 `protobuf:"varint,3,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	Duration  uint32 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	DeviceId  string `protobuf:"bytes,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *DisplayLogInfo) Reset() {
	*x = DisplayLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayLogInfo) ProtoMessage() {}

func (x *DisplayLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayLogInfo.ProtoReflect.Descriptor instead.
func (*DisplayLogInfo) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{12}
}

func (x *DisplayLogInfo) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *DisplayLogInfo) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *DisplayLogInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *DisplayLogInfo) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DisplayLogInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type ApplyEnterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Proposer    string `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Phone       string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	ApplyReason string `protobuf:"bytes,4,opt,name=apply_reason,json=applyReason,proto3" json:"apply_reason,omitempty"`
}

func (x *ApplyEnterReq) Reset() {
	*x = ApplyEnterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyEnterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyEnterReq) ProtoMessage() {}

func (x *ApplyEnterReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyEnterReq.ProtoReflect.Descriptor instead.
func (*ApplyEnterReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{13}
}

func (x *ApplyEnterReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ApplyEnterReq) GetProposer() string {
	if x != nil {
		return x.Proposer
	}
	return ""
}

func (x *ApplyEnterReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ApplyEnterReq) GetApplyReason() string {
	if x != nil {
		return x.ApplyReason
	}
	return ""
}

type ApplyEnterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ApplyEnterResp) Reset() {
	*x = ApplyEnterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyEnterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyEnterResp) ProtoMessage() {}

func (x *ApplyEnterResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyEnterResp.ProtoReflect.Descriptor instead.
func (*ApplyEnterResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{14}
}

func (x *ApplyEnterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ApplyEnterResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DelAppVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelAppVersionReq) Reset() {
	*x = DelAppVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAppVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAppVersionReq) ProtoMessage() {}

func (x *DelAppVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAppVersionReq.ProtoReflect.Descriptor instead.
func (*DelAppVersionReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{15}
}

func (x *DelAppVersionReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelAppVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DelAppVersionResp) Reset() {
	*x = DelAppVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAppVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAppVersionResp) ProtoMessage() {}

func (x *DelAppVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAppVersionResp.ProtoReflect.Descriptor instead.
func (*DelAppVersionResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{16}
}

func (x *DelAppVersionResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DelAppVersionResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SetAppVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	VersionCode uint32 `protobuf:"varint,4,opt,name=version_code,json=versionCode,proto3" json:"version_code,omitempty"`
	Status      uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetAppVersionReq) Reset() {
	*x = SetAppVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAppVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAppVersionReq) ProtoMessage() {}

func (x *SetAppVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAppVersionReq.ProtoReflect.Descriptor instead.
func (*SetAppVersionReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{17}
}

func (x *SetAppVersionReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetAppVersionReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SetAppVersionReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SetAppVersionReq) GetVersionCode() uint32 {
	if x != nil {
		return x.VersionCode
	}
	return 0
}

func (x *SetAppVersionReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type SetAppVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SetAppVersionResp) Reset() {
	*x = SetAppVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAppVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAppVersionResp) ProtoMessage() {}

func (x *SetAppVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAppVersionResp.ProtoReflect.Descriptor instead.
func (*SetAppVersionResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{18}
}

func (x *SetAppVersionResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetAppVersionResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetAppVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAppVersionReq) Reset() {
	*x = GetAppVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppVersionReq) ProtoMessage() {}

func (x *GetAppVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppVersionReq.ProtoReflect.Descriptor instead.
func (*GetAppVersionReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{19}
}

type GetAppVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*AppVersionInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppVersionResp) Reset() {
	*x = GetAppVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppVersionResp) ProtoMessage() {}

func (x *GetAppVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppVersionResp.ProtoReflect.Descriptor instead.
func (*GetAppVersionResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{20}
}

func (x *GetAppVersionResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAppVersionResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAppVersionResp) GetData() []*AppVersionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type AppVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	VersionCode uint32 `protobuf:"varint,4,opt,name=version_code,json=versionCode,proto3" json:"version_code,omitempty"`
	Status      uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime  uint32 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  uint32 `protobuf:"varint,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *AppVersionInfo) Reset() {
	*x = AppVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionInfo) ProtoMessage() {}

func (x *AppVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionInfo.ProtoReflect.Descriptor instead.
func (*AppVersionInfo) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{21}
}

func (x *AppVersionInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AppVersionInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AppVersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AppVersionInfo) GetVersionCode() uint32 {
	if x != nil {
		return x.VersionCode
	}
	return 0
}

func (x *AppVersionInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AppVersionInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AppVersionInfo) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type SetDeviceVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VersionCode  uint32 `protobuf:"varint,2,opt,name=version_code,json=versionCode,proto3" json:"version_code,omitempty"`
	VersionName  string `protobuf:"bytes,3,opt,name=version_name,json=versionName,proto3" json:"version_name,omitempty"`
	Url          string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	SystemSigned uint32 `protobuf:"varint,6,opt,name=system_signed,json=systemSigned,proto3" json:"system_signed,omitempty"`
	Env          string `protobuf:"bytes,7,opt,name=env,proto3" json:"env,omitempty"`
	CreateTime   uint32 `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   uint32 `protobuf:"varint,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Deleted      uint32 `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *SetDeviceVersionReq) Reset() {
	*x = SetDeviceVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceVersionReq) ProtoMessage() {}

func (x *SetDeviceVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceVersionReq.ProtoReflect.Descriptor instead.
func (*SetDeviceVersionReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{22}
}

func (x *SetDeviceVersionReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetDeviceVersionReq) GetVersionCode() uint32 {
	if x != nil {
		return x.VersionCode
	}
	return 0
}

func (x *SetDeviceVersionReq) GetVersionName() string {
	if x != nil {
		return x.VersionName
	}
	return ""
}

func (x *SetDeviceVersionReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SetDeviceVersionReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetDeviceVersionReq) GetSystemSigned() uint32 {
	if x != nil {
		return x.SystemSigned
	}
	return 0
}

func (x *SetDeviceVersionReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *SetDeviceVersionReq) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SetDeviceVersionReq) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SetDeviceVersionReq) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

type SetDeviceVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SetDeviceVersionResp) Reset() {
	*x = SetDeviceVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceVersionResp) ProtoMessage() {}

func (x *SetDeviceVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceVersionResp.ProtoReflect.Descriptor instead.
func (*SetDeviceVersionResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{23}
}

func (x *SetDeviceVersionResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetDeviceVersionResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetDeviceVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Env string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
}

func (x *GetDeviceVersionReq) Reset() {
	*x = GetDeviceVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceVersionReq) ProtoMessage() {}

func (x *GetDeviceVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceVersionReq.ProtoReflect.Descriptor instead.
func (*GetDeviceVersionReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{24}
}

func (x *GetDeviceVersionReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDeviceVersionReq) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

type GetDeviceVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *DeviceVersionInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDeviceVersionResp) Reset() {
	*x = GetDeviceVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceVersionResp) ProtoMessage() {}

func (x *GetDeviceVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceVersionResp.ProtoReflect.Descriptor instead.
func (*GetDeviceVersionResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{25}
}

func (x *GetDeviceVersionResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDeviceVersionResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetDeviceVersionResp) GetData() *DeviceVersionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeviceVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VersionCode  uint32 `protobuf:"varint,2,opt,name=version_code,json=versionCode,proto3" json:"version_code,omitempty"`
	VersionName  string `protobuf:"bytes,3,opt,name=version_name,json=versionName,proto3" json:"version_name,omitempty"`
	Url          string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	SystemSigned uint32 `protobuf:"varint,6,opt,name=system_signed,json=systemSigned,proto3" json:"system_signed,omitempty"`
	Env          string `protobuf:"bytes,7,opt,name=env,proto3" json:"env,omitempty"`
	CreateTime   uint32 `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   uint32 `protobuf:"varint,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Deleted      uint32 `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *DeviceVersionInfo) Reset() {
	*x = DeviceVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceVersionInfo) ProtoMessage() {}

func (x *DeviceVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceVersionInfo.ProtoReflect.Descriptor instead.
func (*DeviceVersionInfo) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{26}
}

func (x *DeviceVersionInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceVersionInfo) GetVersionCode() uint32 {
	if x != nil {
		return x.VersionCode
	}
	return 0
}

func (x *DeviceVersionInfo) GetVersionName() string {
	if x != nil {
		return x.VersionName
	}
	return ""
}

func (x *DeviceVersionInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DeviceVersionInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceVersionInfo) GetSystemSigned() uint32 {
	if x != nil {
		return x.SystemSigned
	}
	return 0
}

func (x *DeviceVersionInfo) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *DeviceVersionInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DeviceVersionInfo) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *DeviceVersionInfo) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

type GetScreenCastByDeviceIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *GetScreenCastByDeviceIdReq) Reset() {
	*x = GetScreenCastByDeviceIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScreenCastByDeviceIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenCastByDeviceIdReq) ProtoMessage() {}

func (x *GetScreenCastByDeviceIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenCastByDeviceIdReq.ProtoReflect.Descriptor instead.
func (*GetScreenCastByDeviceIdReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{27}
}

func (x *GetScreenCastByDeviceIdReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type GetScreenCastByDeviceIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*NFTInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetScreenCastByDeviceIdResp) Reset() {
	*x = GetScreenCastByDeviceIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScreenCastByDeviceIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenCastByDeviceIdResp) ProtoMessage() {}

func (x *GetScreenCastByDeviceIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenCastByDeviceIdResp.ProtoReflect.Descriptor instead.
func (*GetScreenCastByDeviceIdResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{28}
}

func (x *GetScreenCastByDeviceIdResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetScreenCastByDeviceIdResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetScreenCastByDeviceIdResp) GetData() []*NFTInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type NFTInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChainId   uint32 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	TokenId   string `protobuf:"bytes,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Address   string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	DeviceId  string `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	BeginTime uint64 `protobuf:"varint,7,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime   uint64 `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ImageUrl  string `protobuf:"bytes,9,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	MediaUrl  string `protobuf:"bytes,10,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
}

func (x *NFTInfo) Reset() {
	*x = NFTInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTInfo) ProtoMessage() {}

func (x *NFTInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTInfo.ProtoReflect.Descriptor instead.
func (*NFTInfo) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{29}
}

func (x *NFTInfo) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NFTInfo) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *NFTInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NFTInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *NFTInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NFTInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *NFTInfo) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *NFTInfo) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *NFTInfo) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *NFTInfo) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

type BatchNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //请求id
	Tx      *BatchNotifyReq_ChainNotifyTx `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Receipt *BatchNotifyReq_ReceiptInfo   `protobuf:"bytes,3,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Error   *BatchNotifyReq_ErrorInfo     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BatchNotifyReq) Reset() {
	*x = BatchNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNotifyReq) ProtoMessage() {}

func (x *BatchNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNotifyReq.ProtoReflect.Descriptor instead.
func (*BatchNotifyReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{30}
}

func (x *BatchNotifyReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchNotifyReq) GetTx() *BatchNotifyReq_ChainNotifyTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *BatchNotifyReq) GetReceipt() *BatchNotifyReq_ReceiptInfo {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *BatchNotifyReq) GetError() *BatchNotifyReq_ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

type BassResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BassResp) Reset() {
	*x = BassResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BassResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BassResp) ProtoMessage() {}

func (x *BassResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BassResp.ProtoReflect.Descriptor instead.
func (*BassResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{31}
}

func (x *BassResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BassResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetNFTByOwnerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *GetNFTByOwnerReq) Reset() {
	*x = GetNFTByOwnerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTByOwnerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTByOwnerReq) ProtoMessage() {}

func (x *GetNFTByOwnerReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTByOwnerReq.ProtoReflect.Descriptor instead.
func (*GetNFTByOwnerReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{32}
}

func (x *GetNFTByOwnerReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type GetNFTByOwnerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*MvpNFTInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNFTByOwnerResp) Reset() {
	*x = GetNFTByOwnerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTByOwnerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTByOwnerResp) ProtoMessage() {}

func (x *GetNFTByOwnerResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTByOwnerResp.ProtoReflect.Descriptor instead.
func (*GetNFTByOwnerResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{33}
}

func (x *GetNFTByOwnerResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNFTByOwnerResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetNFTByOwnerResp) GetData() []*MvpNFTInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type MvpNFTInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Token       string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	TokenId     string `protobuf:"bytes,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Count       string `protobuf:"bytes,4,opt,name=count,proto3" json:"count,omitempty"`
	Uri         string `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	Media       string `protobuf:"bytes,6,opt,name=media,proto3" json:"media,omitempty"`
	MediaOrigin string `protobuf:"bytes,7,opt,name=mediaOrigin,proto3" json:"mediaOrigin,omitempty"`
	Type        uint32 `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	Image       string `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	ImageOrigin string `protobuf:"bytes,10,opt,name=imageOrigin,proto3" json:"imageOrigin,omitempty"`
	Owner       string `protobuf:"bytes,11,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *MvpNFTInfo) Reset() {
	*x = MvpNFTInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvpNFTInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvpNFTInfo) ProtoMessage() {}

func (x *MvpNFTInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvpNFTInfo.ProtoReflect.Descriptor instead.
func (*MvpNFTInfo) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{34}
}

func (x *MvpNFTInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MvpNFTInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *MvpNFTInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *MvpNFTInfo) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *MvpNFTInfo) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MvpNFTInfo) GetMedia() string {
	if x != nil {
		return x.Media
	}
	return ""
}

func (x *MvpNFTInfo) GetMediaOrigin() string {
	if x != nil {
		return x.MediaOrigin
	}
	return ""
}

func (x *MvpNFTInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MvpNFTInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *MvpNFTInfo) GetImageOrigin() string {
	if x != nil {
		return x.ImageOrigin
	}
	return ""
}

func (x *MvpNFTInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type GetNFTByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Phone      string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	PlatformId uint32 `protobuf:"varint,3,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	CurPage    uint32 `protobuf:"varint,6,opt,name=cur_page,json=curPage,proto3" json:"cur_page,omitempty"`
	PageSize   uint32 `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetNFTByPhoneReq) Reset() {
	*x = GetNFTByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTByPhoneReq) ProtoMessage() {}

func (x *GetNFTByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTByPhoneReq.ProtoReflect.Descriptor instead.
func (*GetNFTByPhoneReq) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{35}
}

func (x *GetNFTByPhoneReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetNFTByPhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetNFTByPhoneReq) GetPlatformId() uint32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *GetNFTByPhoneReq) GetCurPage() uint32 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

func (x *GetNFTByPhoneReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetNFTByPhoneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetNFTByPhoneResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNFTByPhoneResp) Reset() {
	*x = GetNFTByPhoneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTByPhoneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTByPhoneResp) ProtoMessage() {}

func (x *GetNFTByPhoneResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTByPhoneResp.ProtoReflect.Descriptor instead.
func (*GetNFTByPhoneResp) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{36}
}

func (x *GetNFTByPhoneResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNFTByPhoneResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetNFTByPhoneResp) GetData() *GetNFTByPhoneResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlatFormNFTInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Token       string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	TokenId     string   `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Count       uint32   `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Uri         string   `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	Media       string   `protobuf:"bytes,6,opt,name=media,proto3" json:"media,omitempty"`
	MediaOrigin string   `protobuf:"bytes,7,opt,name=mediaOrigin,proto3" json:"mediaOrigin,omitempty"`
	Type        string   `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Image       string   `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	ImageOrigin string   `protobuf:"bytes,10,opt,name=imageOrigin,proto3" json:"imageOrigin,omitempty"`
	Owner       string   `protobuf:"bytes,11,opt,name=owner,proto3" json:"owner,omitempty"`
	BeginTime   uint32   `protobuf:"varint,12,opt,name=beginTime,proto3" json:"beginTime,omitempty"`
	EndTime     uint32   `protobuf:"varint,13,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Duration    uint32   `protobuf:"varint,14,opt,name=duration,proto3" json:"duration,omitempty"`
	ResType     uint32   `protobuf:"varint,15,opt,name=resType,proto3" json:"resType,omitempty"`
	Ext         []string `protobuf:"bytes,16,rep,name=ext,proto3" json:"ext,omitempty"`
}

func (x *PlatFormNFTInfo) Reset() {
	*x = PlatFormNFTInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatFormNFTInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatFormNFTInfo) ProtoMessage() {}

func (x *PlatFormNFTInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatFormNFTInfo.ProtoReflect.Descriptor instead.
func (*PlatFormNFTInfo) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{37}
}

func (x *PlatFormNFTInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlatFormNFTInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PlatFormNFTInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *PlatFormNFTInfo) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PlatFormNFTInfo) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *PlatFormNFTInfo) GetMedia() string {
	if x != nil {
		return x.Media
	}
	return ""
}

func (x *PlatFormNFTInfo) GetMediaOrigin() string {
	if x != nil {
		return x.MediaOrigin
	}
	return ""
}

func (x *PlatFormNFTInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlatFormNFTInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PlatFormNFTInfo) GetImageOrigin() string {
	if x != nil {
		return x.ImageOrigin
	}
	return ""
}

func (x *PlatFormNFTInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *PlatFormNFTInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PlatFormNFTInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PlatFormNFTInfo) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PlatFormNFTInfo) GetResType() uint32 {
	if x != nil {
		return x.ResType
	}
	return 0
}

func (x *PlatFormNFTInfo) GetExt() []string {
	if x != nil {
		return x.Ext
	}
	return nil
}

type PlatformsResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PlatformInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PlatformsResp_Data) Reset() {
	*x = PlatformsResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformsResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformsResp_Data) ProtoMessage() {}

func (x *PlatformsResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformsResp_Data.ProtoReflect.Descriptor instead.
func (*PlatformsResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PlatformsResp_Data) GetData() []*PlatformInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchNotifyReq_ChainNotifyTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain    int32  `protobuf:"varint,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Method   string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Args     string `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
	Account  string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Contract string `protobuf:"bytes,6,opt,name=contract,proto3" json:"contract,omitempty"`
	Opts     string `protobuf:"bytes,7,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (x *BatchNotifyReq_ChainNotifyTx) Reset() {
	*x = BatchNotifyReq_ChainNotifyTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNotifyReq_ChainNotifyTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNotifyReq_ChainNotifyTx) ProtoMessage() {}

func (x *BatchNotifyReq_ChainNotifyTx) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNotifyReq_ChainNotifyTx.ProtoReflect.Descriptor instead.
func (*BatchNotifyReq_ChainNotifyTx) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{30, 0}
}

func (x *BatchNotifyReq_ChainNotifyTx) GetChain() int32 {
	if x != nil {
		return x.Chain
	}
	return 0
}

func (x *BatchNotifyReq_ChainNotifyTx) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BatchNotifyReq_ChainNotifyTx) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *BatchNotifyReq_ChainNotifyTx) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *BatchNotifyReq_ChainNotifyTx) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *BatchNotifyReq_ChainNotifyTx) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *BatchNotifyReq_ChainNotifyTx) GetOpts() string {
	if x != nil {
		return x.Opts
	}
	return ""
}

type BatchNotifyReq_ReceiptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber     uint32 `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`        //区块号
	TransactionHash string `protobuf:"bytes,2,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"` //交易id
}

func (x *BatchNotifyReq_ReceiptInfo) Reset() {
	*x = BatchNotifyReq_ReceiptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNotifyReq_ReceiptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNotifyReq_ReceiptInfo) ProtoMessage() {}

func (x *BatchNotifyReq_ReceiptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNotifyReq_ReceiptInfo.ProtoReflect.Descriptor instead.
func (*BatchNotifyReq_ReceiptInfo) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{30, 1}
}

func (x *BatchNotifyReq_ReceiptInfo) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BatchNotifyReq_ReceiptInfo) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type BatchNotifyReq_ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errno       int32  `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Message     string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Code        int32  `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *BatchNotifyReq_ErrorInfo) Reset() {
	*x = BatchNotifyReq_ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNotifyReq_ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNotifyReq_ErrorInfo) ProtoMessage() {}

func (x *BatchNotifyReq_ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNotifyReq_ErrorInfo.ProtoReflect.Descriptor instead.
func (*BatchNotifyReq_ErrorInfo) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{30, 2}
}

func (x *BatchNotifyReq_ErrorInfo) GetErrno() int32 {
	if x != nil {
		return x.Errno
	}
	return 0
}

func (x *BatchNotifyReq_ErrorInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BatchNotifyReq_ErrorInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BatchNotifyReq_ErrorInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchNotifyReq_ErrorInfo) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type GetNFTByPhoneResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32             `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*PlatFormNFTInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNFTByPhoneResp_Data) Reset() {
	*x = GetNFTByPhoneResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTByPhoneResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTByPhoneResp_Data) ProtoMessage() {}

func (x *GetNFTByPhoneResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dscreenpb_dscreen_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTByPhoneResp_Data.ProtoReflect.Descriptor instead.
func (*GetNFTByPhoneResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dscreenpb_dscreen_proto_rawDescGZIP(), []int{36, 0}
}

func (x *GetNFTByPhoneResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetNFTByPhoneResp_Data) GetData() []*PlatFormNFTInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pb_dscreenpb_dscreen_proto protoreflect.FileDescriptor

var file_pb_dscreenpb_dscreen_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x62, 0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x64,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64, 0x63,
	0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9,
	0x92, 0xb1, 0xe5, 0x8c, 0x85, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x6f, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a,
	0x9f, 0x31, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x36, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfa, 0x01,
	0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0x92,
	0x41, 0x22, 0x32, 0x20, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31, 0xe6, 0x88, 0x96, 0xe8,
	0x80, 0x85, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xa4,
	0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x62, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4e, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a, 0x0c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xb9,
	0xb3, 0xe5, 0x8f, 0xb0, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x92, 0x41,
	0x07, 0x32, 0x05, 0xe9, 0x93, 0xbe, 0x69, 0x64, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5,
	0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0xe9, 0x93, 0xbe, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x32, 0x05,
	0xe9, 0x93, 0xbe, 0x69, 0x64, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92,
	0x41, 0x07, 0x32, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x28, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69,
	0x64, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe9, 0x92, 0xb1, 0xe5, 0x8c, 0x85, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x69, 0x64, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x6e, 0x66, 0x74,
	0x20, 0x75, 0x72, 0x6c, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2b,
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x20, 0x75, 0x72,
	0x6c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x6a, 0x73,
	0x6f, 0x6e, 0x20, 0x75, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0xa4, 0x01, 0x0a, 0x0b,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20,
	0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85,
	0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x63, 0x6d, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x46, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe5, 0x8f,
	0x91, 0xe5, 0xb8, 0x83, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0x52,
	0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x10, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x34,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe6, 0x8a,
	0x95, 0xe5, 0xb1, 0x8f, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x44, 0x22, 0xe0, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x30,
	0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85, 0xb6,
	0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6,
	0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe8, 0xbf, 0x9b, 0xe5, 0xba, 0xa6, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x32, 0x1b, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0x90, 0x8e, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0,
	0x83, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x08, 0x74,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d,
	0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe7, 0x9a, 0x84, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88,
	0xb3, 0x28, 0x31, 0x36, 0x36, 0x34, 0x36, 0x30, 0x33, 0x34, 0x30, 0x30, 0x29, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20,
	0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85,
	0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x4e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x63, 0x6d, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x02, 0x0a, 0x0e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x4e, 0x46, 0x54, 0x20, 0x75, 0x72, 0x6c, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41,
	0x09, 0x32, 0x07, 0x4e, 0x46, 0x54, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6,
	0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe6, 0x97, 0xb6, 0xe9, 0x95,
	0xbf, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe7, 0x9a, 0x84, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xbe,
	0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe4, 0xba, 0xba, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5,
	0x8f, 0xb7, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe7, 0x90, 0x86, 0xe7,
	0x94, 0xb1, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x70, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31, 0xe6, 0x88,
	0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x3b, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x89,
	0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x02, 0x69, 0x64, 0x22, 0x73,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31,
	0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0xd8, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x92, 0x41, 0x04, 0x32, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0x92, 0x41, 0x0b, 0x32, 0x09, 0x61, 0x70, 0x6b, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0xe5, 0x8f, 0xb7, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x30, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x31,
	0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x73,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31,
	0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0xc6, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0x92, 0x41, 0x22,
	0x32, 0x20, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85,
	0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8,
	0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x51, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x63,
	0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x32, 0x15, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe7, 0x89,
	0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xbe, 0x02, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x07, 0x92, 0x41, 0x04, 0x32, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0x70, 0x61, 0x6b, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x28,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x8f, 0xb7, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f,
	0x92, 0x41, 0x0c, 0x32, 0x0a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41,
	0x10, 0x32, 0x0e, 0x30, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x31, 0xe6, 0x97, 0xa0, 0xe6, 0x95,
	0x88, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xe7, 0x03, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x92, 0x41, 0x04, 0x32, 0x02, 0x49, 0x44, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0xe7,
	0x89, 0x88, 0xe6, 0x9c, 0xac, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0x61, 0x70, 0x6b, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x33,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x52, 0x0c, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8,
	0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x52, 0x03, 0x65, 0x6e, 0x76,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x30, 0xe6, 0x9c, 0x89,
	0xe6, 0x95, 0x88, 0x31, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x32, 0x0e, 0x30, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x31, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92,
	0x41, 0x10, 0x32, 0x0e, 0x30, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x31, 0xe6, 0x97, 0xa0, 0xe6,
	0x95, 0x88, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31,
	0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x53, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x92, 0x41, 0x04, 0x32, 0x02, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe7, 0x8e, 0xaf,
	0xe5, 0xa2, 0x83, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31, 0xe6, 0x88,
	0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x54, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe6, 0x9c, 0x80, 0xe6,
	0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdf, 0x03, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x92, 0x41, 0x04, 0x32, 0x02,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x92, 0x41,
	0x0c, 0x32, 0x0a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0x61, 0x70, 0x6b, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7,
	0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x52, 0x0c, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xbf, 0x90,
	0xe8, 0xa1, 0x8c, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x30, 0xe6, 0x9c, 0x89, 0xe6, 0x95,
	0x88, 0x31, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0x30, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x31, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x32, 0x0e, 0x30, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x31, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x48, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x69, 0x64, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x43, 0x61, 0x73, 0x74, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31,
	0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x32, 0x12, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe7, 0x9a, 0x84, 0x4e, 0x46, 0x54,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x03, 0x0a,
	0x07, 0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x32, 0x05, 0xe9, 0x93, 0xbe, 0x49, 0x44, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x32, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a,
	0x32, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe9, 0x93, 0xbe, 0xe8, 0xb4,
	0xa6, 0xe6, 0x88, 0xb7, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe7, 0x9a, 0x84,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x20, 0x4e, 0x46, 0x54, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x20, 0x4e, 0x46, 0x54, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x20, 0x4e, 0x46, 0x54, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x20, 0x4e, 0x46, 0x54, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x22, 0x88, 0x05, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x78, 0x52, 0x02, 0x74, 0x78, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x63, 0x6d, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x1a, 0xb5, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x1a, 0x59, 0x0a, 0x0b,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x85, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x5d, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13,
	0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe5, 0xa4, 0xb1,
	0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x44,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x30, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe7, 0x9a,
	0x84, 0xe9, 0x92, 0xb1, 0xe5, 0x8c, 0x85, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x42,
	0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x30,
	0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85, 0xb6,
	0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x59, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x76, 0x70,
	0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe4, 0xbb,
	0x8e, 0x4d, 0x56, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0x4e, 0x46, 0x54, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x03, 0x0a, 0x0a, 0x4d, 0x76, 0x70, 0x4e, 0x46, 0x54,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0x4e, 0x46, 0x54, 0x20, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9d, 0x80, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09,
	0x32, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe9, 0x93, 0xbe, 0xe5, 0xa4, 0x96, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x75, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x27, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe5, 0x85, 0x83, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0x92, 0x41,
	0x08, 0x32, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0x92, 0x41, 0x0b, 0x32, 0x09, 0x4e, 0x46, 0x54, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0x4e, 0x46, 0x54, 0xe5, 0x85, 0x83, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe9, 0x92, 0xb1, 0xe5, 0x8c, 0x85, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x42, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a,
	0x32, 0x08, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x69, 0x64, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5,
	0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xb8,
	0x8b, 0xe4, 0xb8, 0x80, 0xe9, 0xa1, 0xb5, 0x6b, 0x65, 0x79, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x30,
	0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x31, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x85, 0xb6,
	0xe4, 0xbb, 0x96, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x46, 0x54, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x8c, 0x01, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x4e, 0x46, 0x54, 0xe7, 0x9a, 0x84, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x63, 0x6d, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x23, 0x92,
	0x41, 0x20, 0x32, 0x1e, 0xe4, 0xbb, 0x8e, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0x4e, 0x46, 0x54, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf4, 0x05, 0x0a, 0x0f, 0x50, 0x6c, 0x61,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0x4e,
	0x46, 0x54, 0x20, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5,
	0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0xe9, 0x93, 0xbe, 0xe5, 0xa4, 0x96, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x75, 0x72,
	0x69, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xa7, 0x86, 0xe9,
	0xa2, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x36, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0xa7, 0x86, 0xe9, 0xa2,
	0x91, 0xe5, 0x85, 0x83, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x4e, 0x46,
	0x54, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x33,
	0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x4e, 0x46, 0x54, 0xe5, 0x85, 0x83,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x92, 0xb1, 0xe5, 0x8c, 0x85, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32,
	0x44, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x30, 0xe4, 0xb8,
	0x8d, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x31, 0xe6, 0x97,
	0xa0, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0x90, 0x8d, 0x32, 0x5b, 0x70, 0x6e, 0x67, 0x2c,
	0x6a, 0x70, 0x67, 0x2c, 0x77, 0x65, 0x62, 0x70, 0x5d, 0x33, 0x5b, 0x67, 0x69, 0x66, 0x5d, 0x34,
	0x5b, 0x6d, 0x70, 0x34, 0x5d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x32, 0x18, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0x90,
	0x8d, 0xe7, 0x9a, 0x84, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x03, 0x65, 0x78, 0x74, 0x32,
	0xa4, 0x12, 0x0a, 0x0e, 0x44, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x78, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x2e, 0x64,
	0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x2b, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe5, 0xaf, 0xbc, 0xe5, 0x87, 0xba, 0xe7, 0xa7, 0x81, 0xe9,
	0x92, 0xa5, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x64, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x84, 0x01, 0x0a,
	0x09, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x1f, 0x2e, 0x64, 0x63, 0x6d,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x63,
	0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x34, 0x92,
	0x41, 0x14, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22,
	0x12, 0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x42, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54,
	0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x63, 0x6d,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x46, 0x54, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x44, 0x92, 0x41, 0x20, 0x12, 0x1e, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe9, 0x93, 0xbe,
	0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x4e, 0x46, 0x54, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16,
	0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x66, 0x74, 0x62,
	0x79, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x1d, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x26, 0x92, 0x41, 0x08, 0x12, 0x06, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x63, 0x6d,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3e, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x4e, 0x46, 0x54, 0xe7, 0x9a, 0x84, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe8, 0xbf,
	0x9b, 0xe5, 0xba, 0xa6, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f,
	0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x25, 0x2e, 0x64, 0x63, 0x6d, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x46, 0x92, 0x41, 0x20, 0x12, 0x1e, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0x4e, 0x46, 0x54, 0xe7, 0x9a,
	0x84, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x6f, 0x67,
	0x12, 0x82, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x20, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe5, 0x85, 0xa5, 0xe9, 0xa9,
	0xbb, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a,
	0x22, 0x13, 0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0xbf, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2d, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43,
	0x61, 0x73, 0x74, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x2e, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x61,
	0x73, 0x74, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x45, 0x92, 0x41, 0x17, 0x12, 0x15, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe6, 0x8a, 0x95, 0xe5, 0xb1, 0x8f, 0x4e, 0x46, 0x54, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f,
	0x67, 0x65, 0x74, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x63, 0x61, 0x73, 0x74, 0x62, 0x79, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x21, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x63, 0x6d,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x36, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe6, 0x89,
	0xb9, 0xe9, 0x87, 0x8f, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x64, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0xaa, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x23, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x42, 0x79, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46,
	0x54, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4e, 0x92, 0x41,
	0x2a, 0x12, 0x28, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x92, 0xb1, 0xe5, 0x8c, 0x85, 0xe6,
	0x97, 0xb6, 0xe4, 0xbb, 0x8e, 0x6d, 0x76, 0x70, 0x2d, 0x73, 0x65, 0x72, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x4e, 0x46, 0x54, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x67,
	0x65, 0x74, 0x6e, 0x66, 0x74, 0x62, 0x79, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x9e, 0x01, 0x0a,
	0x0d, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x42, 0x92, 0x41, 0x1e, 0x12, 0x1c,
	0xe5, 0xa1, 0xab, 0xe5, 0x8a, 0xa0, 0x2f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x61, 0x70, 0x70,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f,
	0x73, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x9d, 0x01,
	0x0a, 0x0d, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x41, 0x92, 0x41, 0x1d, 0x12,
	0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x61, 0x70, 0x70, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f,
	0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x01,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3b, 0x92, 0x41, 0x17, 0x12,
	0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x61, 0x70, 0x70, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22,
	0x16, 0x2f, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x41, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x64,
	0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x48, 0x92,
	0x41, 0x21, 0x12, 0x1f, 0xe5, 0xa1, 0xab, 0xe5, 0x8a, 0xa0, 0x2f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x64,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x64,
	0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x64, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x47, 0x92,
	0x41, 0x20, 0x12, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x64, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x5a, 0x16, 0x70, 0x62, 0x2f, 0x64, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x70, 0x62, 0x3b, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_dscreenpb_dscreen_proto_rawDescOnce sync.Once
	file_pb_dscreenpb_dscreen_proto_rawDescData = file_pb_dscreenpb_dscreen_proto_rawDesc
)

func file_pb_dscreenpb_dscreen_proto_rawDescGZIP() []byte {
	file_pb_dscreenpb_dscreen_proto_rawDescOnce.Do(func() {
		file_pb_dscreenpb_dscreen_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_dscreenpb_dscreen_proto_rawDescData)
	})
	return file_pb_dscreenpb_dscreen_proto_rawDescData
}

var file_pb_dscreenpb_dscreen_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_pb_dscreenpb_dscreen_proto_goTypes = []interface{}{
	(*ImportKeyReq)(nil),                 // 0: dcmp.pb.dscreenpb.ImportKeyReq
	(*ImportKeyResp)(nil),                // 1: dcmp.pb.dscreenpb.ImportKeyResp
	(*PlatformsReq)(nil),                 // 2: dcmp.pb.dscreenpb.PlatformsReq
	(*PlatformsResp)(nil),                // 3: dcmp.pb.dscreenpb.PlatformsResp
	(*PlatformInfo)(nil),                 // 4: dcmp.pb.dscreenpb.PlatformInfo
	(*DisplayReq)(nil),                   // 5: dcmp.pb.dscreenpb.DisplayReq
	(*DisplayResp)(nil),                  // 6: dcmp.pb.dscreenpb.DisplayResp
	(*DisplayResInfo)(nil),               // 7: dcmp.pb.dscreenpb.DisplayResInfo
	(*QueryProgressReq)(nil),             // 8: dcmp.pb.dscreenpb.QueryProgressReq
	(*QueryProgressResp)(nil),            // 9: dcmp.pb.dscreenpb.QueryProgressResp
	(*QueryDisplayLogReq)(nil),           // 10: dcmp.pb.dscreenpb.QueryDisplayLogReq
	(*QueryDisplayLogResp)(nil),          // 11: dcmp.pb.dscreenpb.QueryDisplayLogResp
	(*DisplayLogInfo)(nil),               // 12: dcmp.pb.dscreenpb.DisplayLogInfo
	(*ApplyEnterReq)(nil),                // 13: dcmp.pb.dscreenpb.ApplyEnterReq
	(*ApplyEnterResp)(nil),               // 14: dcmp.pb.dscreenpb.ApplyEnterResp
	(*DelAppVersionReq)(nil),             // 15: dcmp.pb.dscreenpb.DelAppVersionReq
	(*DelAppVersionResp)(nil),            // 16: dcmp.pb.dscreenpb.DelAppVersionResp
	(*SetAppVersionReq)(nil),             // 17: dcmp.pb.dscreenpb.SetAppVersionReq
	(*SetAppVersionResp)(nil),            // 18: dcmp.pb.dscreenpb.SetAppVersionResp
	(*GetAppVersionReq)(nil),             // 19: dcmp.pb.dscreenpb.GetAppVersionReq
	(*GetAppVersionResp)(nil),            // 20: dcmp.pb.dscreenpb.GetAppVersionResp
	(*AppVersionInfo)(nil),               // 21: dcmp.pb.dscreenpb.AppVersionInfo
	(*SetDeviceVersionReq)(nil),          // 22: dcmp.pb.dscreenpb.SetDeviceVersionReq
	(*SetDeviceVersionResp)(nil),         // 23: dcmp.pb.dscreenpb.SetDeviceVersionResp
	(*GetDeviceVersionReq)(nil),          // 24: dcmp.pb.dscreenpb.GetDeviceVersionReq
	(*GetDeviceVersionResp)(nil),         // 25: dcmp.pb.dscreenpb.GetDeviceVersionResp
	(*DeviceVersionInfo)(nil),            // 26: dcmp.pb.dscreenpb.DeviceVersionInfo
	(*GetScreenCastByDeviceIdReq)(nil),   // 27: dcmp.pb.dscreenpb.GetScreenCastByDeviceIdReq
	(*GetScreenCastByDeviceIdResp)(nil),  // 28: dcmp.pb.dscreenpb.GetScreenCastByDeviceIdResp
	(*NFTInfo)(nil),                      // 29: dcmp.pb.dscreenpb.NFTInfo
	(*BatchNotifyReq)(nil),               // 30: dcmp.pb.dscreenpb.BatchNotifyReq
	(*BassResp)(nil),                     // 31: dcmp.pb.dscreenpb.BassResp
	(*GetNFTByOwnerReq)(nil),             // 32: dcmp.pb.dscreenpb.GetNFTByOwnerReq
	(*GetNFTByOwnerResp)(nil),            // 33: dcmp.pb.dscreenpb.GetNFTByOwnerResp
	(*MvpNFTInfo)(nil),                   // 34: dcmp.pb.dscreenpb.MvpNFTInfo
	(*GetNFTByPhoneReq)(nil),             // 35: dcmp.pb.dscreenpb.GetNFTByPhoneReq
	(*GetNFTByPhoneResp)(nil),            // 36: dcmp.pb.dscreenpb.GetNFTByPhoneResp
	(*PlatFormNFTInfo)(nil),              // 37: dcmp.pb.dscreenpb.PlatFormNFTInfo
	(*PlatformsResp_Data)(nil),           // 38: dcmp.pb.dscreenpb.PlatformsResp.Data
	(*BatchNotifyReq_ChainNotifyTx)(nil), // 39: dcmp.pb.dscreenpb.BatchNotifyReq.ChainNotifyTx
	(*BatchNotifyReq_ReceiptInfo)(nil),   // 40: dcmp.pb.dscreenpb.BatchNotifyReq.ReceiptInfo
	(*BatchNotifyReq_ErrorInfo)(nil),     // 41: dcmp.pb.dscreenpb.BatchNotifyReq.ErrorInfo
	(*GetNFTByPhoneResp_Data)(nil),       // 42: dcmp.pb.dscreenpb.GetNFTByPhoneResp.Data
}
var file_pb_dscreenpb_dscreen_proto_depIdxs = []int32{
	38, // 0: dcmp.pb.dscreenpb.PlatformsResp.data:type_name -> dcmp.pb.dscreenpb.PlatformsResp.Data
	7,  // 1: dcmp.pb.dscreenpb.DisplayResp.data:type_name -> dcmp.pb.dscreenpb.DisplayResInfo
	12, // 2: dcmp.pb.dscreenpb.QueryDisplayLogResp.data:type_name -> dcmp.pb.dscreenpb.DisplayLogInfo
	21, // 3: dcmp.pb.dscreenpb.GetAppVersionResp.data:type_name -> dcmp.pb.dscreenpb.AppVersionInfo
	26, // 4: dcmp.pb.dscreenpb.GetDeviceVersionResp.data:type_name -> dcmp.pb.dscreenpb.DeviceVersionInfo
	29, // 5: dcmp.pb.dscreenpb.GetScreenCastByDeviceIdResp.data:type_name -> dcmp.pb.dscreenpb.NFTInfo
	39, // 6: dcmp.pb.dscreenpb.BatchNotifyReq.tx:type_name -> dcmp.pb.dscreenpb.BatchNotifyReq.ChainNotifyTx
	40, // 7: dcmp.pb.dscreenpb.BatchNotifyReq.receipt:type_name -> dcmp.pb.dscreenpb.BatchNotifyReq.ReceiptInfo
	41, // 8: dcmp.pb.dscreenpb.BatchNotifyReq.error:type_name -> dcmp.pb.dscreenpb.BatchNotifyReq.ErrorInfo
	34, // 9: dcmp.pb.dscreenpb.GetNFTByOwnerResp.data:type_name -> dcmp.pb.dscreenpb.MvpNFTInfo
	42, // 10: dcmp.pb.dscreenpb.GetNFTByPhoneResp.data:type_name -> dcmp.pb.dscreenpb.GetNFTByPhoneResp.Data
	4,  // 11: dcmp.pb.dscreenpb.PlatformsResp.Data.data:type_name -> dcmp.pb.dscreenpb.PlatformInfo
	37, // 12: dcmp.pb.dscreenpb.GetNFTByPhoneResp.Data.data:type_name -> dcmp.pb.dscreenpb.PlatFormNFTInfo
	0,  // 13: dcmp.pb.dscreenpb.DScreenService.Import:input_type -> dcmp.pb.dscreenpb.ImportKeyReq
	2,  // 14: dcmp.pb.dscreenpb.DScreenService.Platforms:input_type -> dcmp.pb.dscreenpb.PlatformsReq
	35, // 15: dcmp.pb.dscreenpb.DScreenService.GetNFTByPhone:input_type -> dcmp.pb.dscreenpb.GetNFTByPhoneReq
	5,  // 16: dcmp.pb.dscreenpb.DScreenService.Display:input_type -> dcmp.pb.dscreenpb.DisplayReq
	8,  // 17: dcmp.pb.dscreenpb.DScreenService.QueryProgress:input_type -> dcmp.pb.dscreenpb.QueryProgressReq
	10, // 18: dcmp.pb.dscreenpb.DScreenService.QueryDisplayLog:input_type -> dcmp.pb.dscreenpb.QueryDisplayLogReq
	13, // 19: dcmp.pb.dscreenpb.DScreenService.ApplyEnter:input_type -> dcmp.pb.dscreenpb.ApplyEnterReq
	27, // 20: dcmp.pb.dscreenpb.DScreenService.GetScreencastByDeviceId:input_type -> dcmp.pb.dscreenpb.GetScreenCastByDeviceIdReq
	30, // 21: dcmp.pb.dscreenpb.DScreenService.BatchNotify:input_type -> dcmp.pb.dscreenpb.BatchNotifyReq
	32, // 22: dcmp.pb.dscreenpb.DScreenService.GetNFTByOwner:input_type -> dcmp.pb.dscreenpb.GetNFTByOwnerReq
	17, // 23: dcmp.pb.dscreenpb.DScreenService.SetAppVersion:input_type -> dcmp.pb.dscreenpb.SetAppVersionReq
	19, // 24: dcmp.pb.dscreenpb.DScreenService.getAppVersion:input_type -> dcmp.pb.dscreenpb.GetAppVersionReq
	15, // 25: dcmp.pb.dscreenpb.DScreenService.DelAppVersion:input_type -> dcmp.pb.dscreenpb.DelAppVersionReq
	22, // 26: dcmp.pb.dscreenpb.DScreenService.SetDeviceVersion:input_type -> dcmp.pb.dscreenpb.SetDeviceVersionReq
	24, // 27: dcmp.pb.dscreenpb.DScreenService.getDeviceVersion:input_type -> dcmp.pb.dscreenpb.GetDeviceVersionReq
	1,  // 28: dcmp.pb.dscreenpb.DScreenService.Import:output_type -> dcmp.pb.dscreenpb.ImportKeyResp
	3,  // 29: dcmp.pb.dscreenpb.DScreenService.Platforms:output_type -> dcmp.pb.dscreenpb.PlatformsResp
	36, // 30: dcmp.pb.dscreenpb.DScreenService.GetNFTByPhone:output_type -> dcmp.pb.dscreenpb.GetNFTByPhoneResp
	6,  // 31: dcmp.pb.dscreenpb.DScreenService.Display:output_type -> dcmp.pb.dscreenpb.DisplayResp
	9,  // 32: dcmp.pb.dscreenpb.DScreenService.QueryProgress:output_type -> dcmp.pb.dscreenpb.QueryProgressResp
	11, // 33: dcmp.pb.dscreenpb.DScreenService.QueryDisplayLog:output_type -> dcmp.pb.dscreenpb.QueryDisplayLogResp
	14, // 34: dcmp.pb.dscreenpb.DScreenService.ApplyEnter:output_type -> dcmp.pb.dscreenpb.ApplyEnterResp
	28, // 35: dcmp.pb.dscreenpb.DScreenService.GetScreencastByDeviceId:output_type -> dcmp.pb.dscreenpb.GetScreenCastByDeviceIdResp
	31, // 36: dcmp.pb.dscreenpb.DScreenService.BatchNotify:output_type -> dcmp.pb.dscreenpb.BassResp
	33, // 37: dcmp.pb.dscreenpb.DScreenService.GetNFTByOwner:output_type -> dcmp.pb.dscreenpb.GetNFTByOwnerResp
	18, // 38: dcmp.pb.dscreenpb.DScreenService.SetAppVersion:output_type -> dcmp.pb.dscreenpb.SetAppVersionResp
	20, // 39: dcmp.pb.dscreenpb.DScreenService.getAppVersion:output_type -> dcmp.pb.dscreenpb.GetAppVersionResp
	16, // 40: dcmp.pb.dscreenpb.DScreenService.DelAppVersion:output_type -> dcmp.pb.dscreenpb.DelAppVersionResp
	23, // 41: dcmp.pb.dscreenpb.DScreenService.SetDeviceVersion:output_type -> dcmp.pb.dscreenpb.SetDeviceVersionResp
	25, // 42: dcmp.pb.dscreenpb.DScreenService.getDeviceVersion:output_type -> dcmp.pb.dscreenpb.GetDeviceVersionResp
	28, // [28:43] is the sub-list for method output_type
	13, // [13:28] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pb_dscreenpb_dscreen_proto_init() }
func file_pb_dscreenpb_dscreen_proto_init() {
	if File_pb_dscreenpb_dscreen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_dscreenpb_dscreen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportKeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayResInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProgressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProgressResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDisplayLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDisplayLogResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyEnterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyEnterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAppVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAppVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAppVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAppVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScreenCastByDeviceIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScreenCastByDeviceIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BassResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTByOwnerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTByOwnerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvpNFTInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTByPhoneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatFormNFTInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformsResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNotifyReq_ChainNotifyTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNotifyReq_ReceiptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNotifyReq_ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dscreenpb_dscreen_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTByPhoneResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_dscreenpb_dscreen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_dscreenpb_dscreen_proto_goTypes,
		DependencyIndexes: file_pb_dscreenpb_dscreen_proto_depIdxs,
		MessageInfos:      file_pb_dscreenpb_dscreen_proto_msgTypes,
	}.Build()
	File_pb_dscreenpb_dscreen_proto = out.File
	file_pb_dscreenpb_dscreen_proto_rawDesc = nil
	file_pb_dscreenpb_dscreen_proto_goTypes = nil
	file_pb_dscreenpb_dscreen_proto_depIdxs = nil
}
