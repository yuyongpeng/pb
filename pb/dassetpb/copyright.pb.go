// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/dassetpb/copyright.proto

package dassetpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CopyrightRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightType  uint32 `protobuf:"varint,1,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`
	CopyrightTitle string `protobuf:"bytes,2,opt,name=copyright_title,json=copyrightTitle,proto3" json:"copyright_title,omitempty"`
	Creator        string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	AttachUrl      string `protobuf:"bytes,4,opt,name=attach_url,json=attachUrl,proto3" json:"attach_url,omitempty"`
	CreativeTime   uint32 `protobuf:"varint,5,opt,name=creative_time,json=creativeTime,proto3" json:"creative_time,omitempty"`
	IsOriginal     uint32 `protobuf:"varint,6,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	Remarks        string `protobuf:"bytes,7,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *CopyrightRegisterReq) Reset() {
	*x = CopyrightRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightRegisterReq) ProtoMessage() {}

func (x *CopyrightRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightRegisterReq.ProtoReflect.Descriptor instead.
func (*CopyrightRegisterReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{0}
}

func (x *CopyrightRegisterReq) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *CopyrightRegisterReq) GetCopyrightTitle() string {
	if x != nil {
		return x.CopyrightTitle
	}
	return ""
}

func (x *CopyrightRegisterReq) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CopyrightRegisterReq) GetAttachUrl() string {
	if x != nil {
		return x.AttachUrl
	}
	return ""
}

func (x *CopyrightRegisterReq) GetCreativeTime() uint32 {
	if x != nil {
		return x.CreativeTime
	}
	return 0
}

func (x *CopyrightRegisterReq) GetIsOriginal() uint32 {
	if x != nil {
		return x.IsOriginal
	}
	return 0
}

func (x *CopyrightRegisterReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type CopyrightRegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CopyrightRegisterResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightRegisterResp) Reset() {
	*x = CopyrightRegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightRegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightRegisterResp) ProtoMessage() {}

func (x *CopyrightRegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightRegisterResp.ProtoReflect.Descriptor instead.
func (*CopyrightRegisterResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{1}
}

func (x *CopyrightRegisterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CopyrightRegisterResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CopyrightRegisterResp) GetData() *CopyrightRegisterResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightRegisterListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightTitle  string `protobuf:"bytes,1,opt,name=copyright_title,json=copyrightTitle,proto3" json:"copyright_title,omitempty"`
	CopyrightHash   string `protobuf:"bytes,2,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	CopyrightType   uint32 `protobuf:"varint,3,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`
	IsOriginal      string `protobuf:"bytes,4,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	CreateTimeStart uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd   uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page            uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CopyrightRegisterListReq) Reset() {
	*x = CopyrightRegisterListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightRegisterListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightRegisterListReq) ProtoMessage() {}

func (x *CopyrightRegisterListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightRegisterListReq.ProtoReflect.Descriptor instead.
func (*CopyrightRegisterListReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{2}
}

func (x *CopyrightRegisterListReq) GetCopyrightTitle() string {
	if x != nil {
		return x.CopyrightTitle
	}
	return ""
}

func (x *CopyrightRegisterListReq) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *CopyrightRegisterListReq) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *CopyrightRegisterListReq) GetIsOriginal() string {
	if x != nil {
		return x.IsOriginal
	}
	return ""
}

func (x *CopyrightRegisterListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *CopyrightRegisterListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *CopyrightRegisterListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CopyrightRegisterListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CopyrightRegisterListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CopyrightRegisterListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightRegisterListResp) Reset() {
	*x = CopyrightRegisterListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightRegisterListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightRegisterListResp) ProtoMessage() {}

func (x *CopyrightRegisterListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightRegisterListResp.ProtoReflect.Descriptor instead.
func (*CopyrightRegisterListResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{3}
}

func (x *CopyrightRegisterListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CopyrightRegisterListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CopyrightRegisterListResp) GetData() *CopyrightRegisterListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightRegisterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightId    uint32 `protobuf:"varint,1,opt,name=copyright_id,json=copyrightId,proto3" json:"copyright_id,omitempty"`
	CopyrightTitle string `protobuf:"bytes,2,opt,name=copyright_title,json=copyrightTitle,proto3" json:"copyright_title,omitempty"`
	CopyrightType  uint32 `protobuf:"varint,3,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`
	CopyrightHash  string `protobuf:"bytes,4,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	IsOriginal     uint32 `protobuf:"varint,5,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	Creator        string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	CreativeTime   uint32 `protobuf:"varint,7,opt,name=creative_time,json=creativeTime,proto3" json:"creative_time,omitempty"`
	Remarks        string `protobuf:"bytes,8,opt,name=remarks,proto3" json:"remarks,omitempty"`
	AttachUrl      string `protobuf:"bytes,9,opt,name=attach_url,json=attachUrl,proto3" json:"attach_url,omitempty"`
	AppNo          string `protobuf:"bytes,10,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	CreateTime     uint32 `protobuf:"varint,21,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *CopyrightRegisterInfo) Reset() {
	*x = CopyrightRegisterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightRegisterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightRegisterInfo) ProtoMessage() {}

func (x *CopyrightRegisterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightRegisterInfo.ProtoReflect.Descriptor instead.
func (*CopyrightRegisterInfo) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{4}
}

func (x *CopyrightRegisterInfo) GetCopyrightId() uint32 {
	if x != nil {
		return x.CopyrightId
	}
	return 0
}

func (x *CopyrightRegisterInfo) GetCopyrightTitle() string {
	if x != nil {
		return x.CopyrightTitle
	}
	return ""
}

func (x *CopyrightRegisterInfo) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *CopyrightRegisterInfo) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *CopyrightRegisterInfo) GetIsOriginal() uint32 {
	if x != nil {
		return x.IsOriginal
	}
	return 0
}

func (x *CopyrightRegisterInfo) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CopyrightRegisterInfo) GetCreativeTime() uint32 {
	if x != nil {
		return x.CreativeTime
	}
	return 0
}

func (x *CopyrightRegisterInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CopyrightRegisterInfo) GetAttachUrl() string {
	if x != nil {
		return x.AttachUrl
	}
	return ""
}

func (x *CopyrightRegisterInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *CopyrightRegisterInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CopyrightAuthorizationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential            string `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	AuthorizationIds      string `protobuf:"bytes,2,opt,name=authorization_ids,json=authorizationIds,proto3" json:"authorization_ids,omitempty"`
	ContractIds           string `protobuf:"bytes,3,opt,name=contract_ids,json=contractIds,proto3" json:"contract_ids,omitempty"`
	AuthorizerUserAddress string `protobuf:"bytes,4,opt,name=authorizer_user_address,json=authorizerUserAddress,proto3" json:"authorizer_user_address,omitempty"`
	AuthorizedUserAddress string `protobuf:"bytes,5,opt,name=authorized_user_address,json=authorizedUserAddress,proto3" json:"authorized_user_address,omitempty"`
	AuthorizationCode     string `protobuf:"bytes,6,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	AuthorizationType     uint32 `protobuf:"varint,7,opt,name=authorization_type,json=authorizationType,proto3" json:"authorization_type,omitempty"`
	CreateTimeStart       uint32 `protobuf:"varint,8,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd         uint32 `protobuf:"varint,9,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page                  uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit                 uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CopyrightAuthorizationListReq) Reset() {
	*x = CopyrightAuthorizationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightAuthorizationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightAuthorizationListReq) ProtoMessage() {}

func (x *CopyrightAuthorizationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightAuthorizationListReq.ProtoReflect.Descriptor instead.
func (*CopyrightAuthorizationListReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{5}
}

func (x *CopyrightAuthorizationListReq) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *CopyrightAuthorizationListReq) GetAuthorizationIds() string {
	if x != nil {
		return x.AuthorizationIds
	}
	return ""
}

func (x *CopyrightAuthorizationListReq) GetContractIds() string {
	if x != nil {
		return x.ContractIds
	}
	return ""
}

func (x *CopyrightAuthorizationListReq) GetAuthorizerUserAddress() string {
	if x != nil {
		return x.AuthorizerUserAddress
	}
	return ""
}

func (x *CopyrightAuthorizationListReq) GetAuthorizedUserAddress() string {
	if x != nil {
		return x.AuthorizedUserAddress
	}
	return ""
}

func (x *CopyrightAuthorizationListReq) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

func (x *CopyrightAuthorizationListReq) GetAuthorizationType() uint32 {
	if x != nil {
		return x.AuthorizationType
	}
	return 0
}

func (x *CopyrightAuthorizationListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *CopyrightAuthorizationListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *CopyrightAuthorizationListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CopyrightAuthorizationListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CopyrightAuthorizationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CopyrightAuthorizationListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightAuthorizationListResp) Reset() {
	*x = CopyrightAuthorizationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightAuthorizationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightAuthorizationListResp) ProtoMessage() {}

func (x *CopyrightAuthorizationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightAuthorizationListResp.ProtoReflect.Descriptor instead.
func (*CopyrightAuthorizationListResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{6}
}

func (x *CopyrightAuthorizationListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CopyrightAuthorizationListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CopyrightAuthorizationListResp) GetData() *CopyrightAuthorizationListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightAuthorizationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationId       uint32                   `protobuf:"varint,1,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`
	ContractId            uint32                   `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AuthorizationCode     string                   `protobuf:"bytes,3,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	AuthorizerUid         uint32                   `protobuf:"varint,4,opt,name=authorizer_uid,json=authorizerUid,proto3" json:"authorizer_uid,omitempty"`
	AuthorizerUidName     string                   `protobuf:"bytes,5,opt,name=authorizer_uid_name,json=authorizerUidName,proto3" json:"authorizer_uid_name,omitempty"`
	AuthorizerUserAddress string                   `protobuf:"bytes,6,opt,name=authorizer_user_address,json=authorizerUserAddress,proto3" json:"authorizer_user_address,omitempty"`
	AuthorizedUid         uint32                   `protobuf:"varint,7,opt,name=authorized_uid,json=authorizedUid,proto3" json:"authorized_uid,omitempty"`
	AuthorizedUidName     string                   `protobuf:"bytes,8,opt,name=authorized_uid_name,json=authorizedUidName,proto3" json:"authorized_uid_name,omitempty"`
	AuthorizedUserAddress string                   `protobuf:"bytes,9,opt,name=authorized_user_address,json=authorizedUserAddress,proto3" json:"authorized_user_address,omitempty"`
	AppNo                 string                   `protobuf:"bytes,10,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	AuthorizationCategory string                   `protobuf:"bytes,11,opt,name=authorization_category,json=authorizationCategory,proto3" json:"authorization_category,omitempty"`
	AuthorizationNumber   uint32                   `protobuf:"varint,12,opt,name=authorization_number,json=authorizationNumber,proto3" json:"authorization_number,omitempty"`
	AuthorizationContent  string                   `protobuf:"bytes,13,opt,name=authorization_content,json=authorizationContent,proto3" json:"authorization_content,omitempty"`
	Credential            string                   `protobuf:"bytes,14,opt,name=credential,proto3" json:"credential,omitempty"`
	Copyrights            []*CopyrightRegisterInfo `protobuf:"bytes,15,rep,name=copyrights,proto3" json:"copyrights,omitempty"`
	CopyrightClaims       []*CopyrightClaimInfo    `protobuf:"bytes,16,rep,name=copyright_claims,json=copyrightClaims,proto3" json:"copyright_claims,omitempty"`
	CreateTime            uint32                   `protobuf:"varint,21,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *CopyrightAuthorizationInfo) Reset() {
	*x = CopyrightAuthorizationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightAuthorizationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightAuthorizationInfo) ProtoMessage() {}

func (x *CopyrightAuthorizationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightAuthorizationInfo.ProtoReflect.Descriptor instead.
func (*CopyrightAuthorizationInfo) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{7}
}

func (x *CopyrightAuthorizationInfo) GetAuthorizationId() uint32 {
	if x != nil {
		return x.AuthorizationId
	}
	return 0
}

func (x *CopyrightAuthorizationInfo) GetContractId() uint32 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *CopyrightAuthorizationInfo) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

func (x *CopyrightAuthorizationInfo) GetAuthorizerUid() uint32 {
	if x != nil {
		return x.AuthorizerUid
	}
	return 0
}

func (x *CopyrightAuthorizationInfo) GetAuthorizerUidName() string {
	if x != nil {
		return x.AuthorizerUidName
	}
	return ""
}

func (x *CopyrightAuthorizationInfo) GetAuthorizerUserAddress() string {
	if x != nil {
		return x.AuthorizerUserAddress
	}
	return ""
}

func (x *CopyrightAuthorizationInfo) GetAuthorizedUid() uint32 {
	if x != nil {
		return x.AuthorizedUid
	}
	return 0
}

func (x *CopyrightAuthorizationInfo) GetAuthorizedUidName() string {
	if x != nil {
		return x.AuthorizedUidName
	}
	return ""
}

func (x *CopyrightAuthorizationInfo) GetAuthorizedUserAddress() string {
	if x != nil {
		return x.AuthorizedUserAddress
	}
	return ""
}

func (x *CopyrightAuthorizationInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *CopyrightAuthorizationInfo) GetAuthorizationCategory() string {
	if x != nil {
		return x.AuthorizationCategory
	}
	return ""
}

func (x *CopyrightAuthorizationInfo) GetAuthorizationNumber() uint32 {
	if x != nil {
		return x.AuthorizationNumber
	}
	return 0
}

func (x *CopyrightAuthorizationInfo) GetAuthorizationContent() string {
	if x != nil {
		return x.AuthorizationContent
	}
	return ""
}

func (x *CopyrightAuthorizationInfo) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *CopyrightAuthorizationInfo) GetCopyrights() []*CopyrightRegisterInfo {
	if x != nil {
		return x.Copyrights
	}
	return nil
}

func (x *CopyrightAuthorizationInfo) GetCopyrightClaims() []*CopyrightClaimInfo {
	if x != nil {
		return x.CopyrightClaims
	}
	return nil
}

func (x *CopyrightAuthorizationInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type AuthorizationClaimListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationId uint32 `protobuf:"varint,1,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`
	CopyrightTitle  string `protobuf:"bytes,2,opt,name=copyright_title,json=copyrightTitle,proto3" json:"copyright_title,omitempty"`
	CopyrightHash   string `protobuf:"bytes,3,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	CopyrightType   uint32 `protobuf:"varint,4,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`
	IsOriginal      string `protobuf:"bytes,5,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	CreateTimeStart uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd   uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page            uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *AuthorizationClaimListReq) Reset() {
	*x = AuthorizationClaimListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationClaimListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationClaimListReq) ProtoMessage() {}

func (x *AuthorizationClaimListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationClaimListReq.ProtoReflect.Descriptor instead.
func (*AuthorizationClaimListReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{8}
}

func (x *AuthorizationClaimListReq) GetAuthorizationId() uint32 {
	if x != nil {
		return x.AuthorizationId
	}
	return 0
}

func (x *AuthorizationClaimListReq) GetCopyrightTitle() string {
	if x != nil {
		return x.CopyrightTitle
	}
	return ""
}

func (x *AuthorizationClaimListReq) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *AuthorizationClaimListReq) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *AuthorizationClaimListReq) GetIsOriginal() string {
	if x != nil {
		return x.IsOriginal
	}
	return ""
}

func (x *AuthorizationClaimListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *AuthorizationClaimListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *AuthorizationClaimListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AuthorizationClaimListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CopyrightClaimAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightId uint32          `protobuf:"varint,1,opt,name=copyright_id,json=copyrightId,proto3" json:"copyright_id,omitempty"`
	Claim       *CopyrightClaim `protobuf:"bytes,3,opt,name=claim,proto3" json:"claim,omitempty"`
	Remarks     string          `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"` //string proof = 5 [(validate.rules).string = {min_len: 1},(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "存证声明数据的签名"}];注释原因：系统自己生成签名
}

func (x *CopyrightClaimAddReq) Reset() {
	*x = CopyrightClaimAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimAddReq) ProtoMessage() {}

func (x *CopyrightClaimAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimAddReq.ProtoReflect.Descriptor instead.
func (*CopyrightClaimAddReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{9}
}

func (x *CopyrightClaimAddReq) GetCopyrightId() uint32 {
	if x != nil {
		return x.CopyrightId
	}
	return 0
}

func (x *CopyrightClaimAddReq) GetClaim() *CopyrightClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *CopyrightClaimAddReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type CopyrightClaimEditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightClaimId uint32          `protobuf:"varint,1,opt,name=copyright_claim_id,json=copyrightClaimId,proto3" json:"copyright_claim_id,omitempty"`
	Claim            *CopyrightClaim `protobuf:"bytes,3,opt,name=claim,proto3" json:"claim,omitempty"`
	Remarks          string          `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *CopyrightClaimEditReq) Reset() {
	*x = CopyrightClaimEditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimEditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimEditReq) ProtoMessage() {}

func (x *CopyrightClaimEditReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimEditReq.ProtoReflect.Descriptor instead.
func (*CopyrightClaimEditReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{10}
}

func (x *CopyrightClaimEditReq) GetCopyrightClaimId() uint32 {
	if x != nil {
		return x.CopyrightClaimId
	}
	return 0
}

func (x *CopyrightClaimEditReq) GetClaim() *CopyrightClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *CopyrightClaimEditReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type CopyrightClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string claim_sign_address = 1 [(validate.rules).string = {min_len: 1},(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "登记人签名地址"}];注释原因：用星矿userAddress
	DidCredential     string `protobuf:"bytes,2,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightHash     string `protobuf:"bytes,3,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	ClaimTitle        string `protobuf:"bytes,5,opt,name=claim_title,json=claimTitle,proto3" json:"claim_title,omitempty"`
	Creator           string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	CreativeTime      uint32 `protobuf:"varint,7,opt,name=creative_time,json=creativeTime,proto3" json:"creative_time,omitempty"`
	IsOriginal        uint32 `protobuf:"varint,8,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	AttachUrl         string `protobuf:"bytes,9,opt,name=attach_url,json=attachUrl,proto3" json:"attach_url,omitempty"`
	CopyrightCategory string `protobuf:"bytes,10,opt,name=copyright_category,json=copyrightCategory,proto3" json:"copyright_category,omitempty"`
	AuthorizedNumber  uint32 `protobuf:"varint,11,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	DeclareTime       string `protobuf:"bytes,12,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension         string `protobuf:"bytes,13,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CopyrightClaim) Reset() {
	*x = CopyrightClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaim) ProtoMessage() {}

func (x *CopyrightClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaim.ProtoReflect.Descriptor instead.
func (*CopyrightClaim) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{11}
}

func (x *CopyrightClaim) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CopyrightClaim) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *CopyrightClaim) GetClaimTitle() string {
	if x != nil {
		return x.ClaimTitle
	}
	return ""
}

func (x *CopyrightClaim) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CopyrightClaim) GetCreativeTime() uint32 {
	if x != nil {
		return x.CreativeTime
	}
	return 0
}

func (x *CopyrightClaim) GetIsOriginal() uint32 {
	if x != nil {
		return x.IsOriginal
	}
	return 0
}

func (x *CopyrightClaim) GetAttachUrl() string {
	if x != nil {
		return x.AttachUrl
	}
	return ""
}

func (x *CopyrightClaim) GetCopyrightCategory() string {
	if x != nil {
		return x.CopyrightCategory
	}
	return ""
}

func (x *CopyrightClaim) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *CopyrightClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *CopyrightClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type CopyrightClaimRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimTitle        string `protobuf:"bytes,1,opt,name=claim_title,json=claimTitle,proto3" json:"claim_title,omitempty"`
	CopyrightCategory string `protobuf:"bytes,2,opt,name=copyright_category,json=copyrightCategory,proto3" json:"copyright_category,omitempty"`
	AuthorizedNumber  uint32 `protobuf:"varint,3,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	DeclareTime       string `protobuf:"bytes,4,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension         string `protobuf:"bytes,5,opt,name=extension,proto3" json:"extension,omitempty"`
	Remarks           string `protobuf:"bytes,6,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *CopyrightClaimRegister) Reset() {
	*x = CopyrightClaimRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimRegister) ProtoMessage() {}

func (x *CopyrightClaimRegister) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimRegister.ProtoReflect.Descriptor instead.
func (*CopyrightClaimRegister) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{12}
}

func (x *CopyrightClaimRegister) GetClaimTitle() string {
	if x != nil {
		return x.ClaimTitle
	}
	return ""
}

func (x *CopyrightClaimRegister) GetCopyrightCategory() string {
	if x != nil {
		return x.CopyrightCategory
	}
	return ""
}

func (x *CopyrightClaimRegister) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *CopyrightClaimRegister) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *CopyrightClaimRegister) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *CopyrightClaimRegister) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type CopyrightContractRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizedNumber  uint32 `protobuf:"varint,2,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	CopyrightCategory string `protobuf:"bytes,3,opt,name=copyright_category,json=copyrightCategory,proto3" json:"copyright_category,omitempty"`
	Content           string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CopyrightContractRegister) Reset() {
	*x = CopyrightContractRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightContractRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightContractRegister) ProtoMessage() {}

func (x *CopyrightContractRegister) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightContractRegister.ProtoReflect.Descriptor instead.
func (*CopyrightContractRegister) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{13}
}

func (x *CopyrightContractRegister) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *CopyrightContractRegister) GetCopyrightCategory() string {
	if x != nil {
		return x.CopyrightCategory
	}
	return ""
}

func (x *CopyrightContractRegister) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CopyrightContractAuthorizationRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizedAddress     string `protobuf:"bytes,1,opt,name=authorized_address,json=authorizedAddress,proto3" json:"authorized_address,omitempty"`
	AuthorizationContent  string `protobuf:"bytes,2,opt,name=authorization_content,json=authorizationContent,proto3" json:"authorization_content,omitempty"`
	Remarks               string `protobuf:"bytes,3,opt,name=remarks,proto3" json:"remarks,omitempty"`
	AuthorizationCategory string `protobuf:"bytes,4,opt,name=authorization_category,json=authorizationCategory,proto3" json:"authorization_category,omitempty"`
	AuthorizedNumber      uint32 `protobuf:"varint,5,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	DeclareTime           string `protobuf:"bytes,6,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension             string `protobuf:"bytes,9,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CopyrightContractAuthorizationRegister) Reset() {
	*x = CopyrightContractAuthorizationRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightContractAuthorizationRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightContractAuthorizationRegister) ProtoMessage() {}

func (x *CopyrightContractAuthorizationRegister) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightContractAuthorizationRegister.ProtoReflect.Descriptor instead.
func (*CopyrightContractAuthorizationRegister) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{14}
}

func (x *CopyrightContractAuthorizationRegister) GetAuthorizedAddress() string {
	if x != nil {
		return x.AuthorizedAddress
	}
	return ""
}

func (x *CopyrightContractAuthorizationRegister) GetAuthorizationContent() string {
	if x != nil {
		return x.AuthorizationContent
	}
	return ""
}

func (x *CopyrightContractAuthorizationRegister) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CopyrightContractAuthorizationRegister) GetAuthorizationCategory() string {
	if x != nil {
		return x.AuthorizationCategory
	}
	return ""
}

func (x *CopyrightContractAuthorizationRegister) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *CopyrightContractAuthorizationRegister) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *CopyrightContractAuthorizationRegister) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type CopyrightClaimAuthorizationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightType                  uint32                                  `protobuf:"varint,1,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`
	CopyrightTitle                 string                                  `protobuf:"bytes,2,opt,name=copyright_title,json=copyrightTitle,proto3" json:"copyright_title,omitempty"`
	Creator                        string                                  `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	AttachUrl                      string                                  `protobuf:"bytes,4,opt,name=attach_url,json=attachUrl,proto3" json:"attach_url,omitempty"`
	CreativeTime                   uint32                                  `protobuf:"varint,5,opt,name=creative_time,json=creativeTime,proto3" json:"creative_time,omitempty"`
	IsOriginal                     uint32                                  `protobuf:"varint,6,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	Remarks                        string                                  `protobuf:"bytes,7,opt,name=remarks,proto3" json:"remarks,omitempty"`
	NotifyUrl                      string                                  `protobuf:"bytes,8,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts                     string                                  `protobuf:"bytes,9,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
	CopyrightClaim                 *CopyrightClaimRegister                 `protobuf:"bytes,10,opt,name=copyright_claim,json=copyrightClaim,proto3" json:"copyright_claim,omitempty"`
	CopyrightContract              *CopyrightContractRegister              `protobuf:"bytes,11,opt,name=copyright_contract,json=copyrightContract,proto3" json:"copyright_contract,omitempty"`
	CopyrightContractAuthorization *CopyrightContractAuthorizationRegister `protobuf:"bytes,12,opt,name=copyright_contract_authorization,json=copyrightContractAuthorization,proto3" json:"copyright_contract_authorization,omitempty"`
}

func (x *CopyrightClaimAuthorizationReq) Reset() {
	*x = CopyrightClaimAuthorizationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimAuthorizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimAuthorizationReq) ProtoMessage() {}

func (x *CopyrightClaimAuthorizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimAuthorizationReq.ProtoReflect.Descriptor instead.
func (*CopyrightClaimAuthorizationReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{15}
}

func (x *CopyrightClaimAuthorizationReq) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *CopyrightClaimAuthorizationReq) GetCopyrightTitle() string {
	if x != nil {
		return x.CopyrightTitle
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReq) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReq) GetAttachUrl() string {
	if x != nil {
		return x.AttachUrl
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReq) GetCreativeTime() uint32 {
	if x != nil {
		return x.CreativeTime
	}
	return 0
}

func (x *CopyrightClaimAuthorizationReq) GetIsOriginal() uint32 {
	if x != nil {
		return x.IsOriginal
	}
	return 0
}

func (x *CopyrightClaimAuthorizationReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReq) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReq) GetCopyrightClaim() *CopyrightClaimRegister {
	if x != nil {
		return x.CopyrightClaim
	}
	return nil
}

func (x *CopyrightClaimAuthorizationReq) GetCopyrightContract() *CopyrightContractRegister {
	if x != nil {
		return x.CopyrightContract
	}
	return nil
}

func (x *CopyrightClaimAuthorizationReq) GetCopyrightContractAuthorization() *CopyrightContractAuthorizationRegister {
	if x != nil {
		return x.CopyrightContractAuthorization
	}
	return nil
}

type CopyrightClaimAuthorizationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CopyrightClaimAuthorizationResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightClaimAuthorizationResp) Reset() {
	*x = CopyrightClaimAuthorizationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimAuthorizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimAuthorizationResp) ProtoMessage() {}

func (x *CopyrightClaimAuthorizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimAuthorizationResp.ProtoReflect.Descriptor instead.
func (*CopyrightClaimAuthorizationResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{16}
}

func (x *CopyrightClaimAuthorizationResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CopyrightClaimAuthorizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CopyrightClaimAuthorizationResp) GetData() *CopyrightClaimAuthorizationResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightMintReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightType                  uint32                                  `protobuf:"varint,1,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`
	CopyrightTitle                 string                                  `protobuf:"bytes,2,opt,name=copyright_title,json=copyrightTitle,proto3" json:"copyright_title,omitempty"`
	Creator                        string                                  `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	AttachUrl                      string                                  `protobuf:"bytes,4,opt,name=attach_url,json=attachUrl,proto3" json:"attach_url,omitempty"`
	CreativeTime                   uint32                                  `protobuf:"varint,5,opt,name=creative_time,json=creativeTime,proto3" json:"creative_time,omitempty"`
	IsOriginal                     uint32                                  `protobuf:"varint,6,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	Remarks                        string                                  `protobuf:"bytes,7,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CopyrightClaim                 *CopyrightClaimRegister                 `protobuf:"bytes,8,opt,name=copyright_claim,json=copyrightClaim,proto3" json:"copyright_claim,omitempty"`
	CopyrightContract              *CopyrightContractRegister              `protobuf:"bytes,9,opt,name=copyright_contract,json=copyrightContract,proto3" json:"copyright_contract,omitempty"`
	CopyrightContractAuthorization *CopyrightContractAuthorizationRegister `protobuf:"bytes,10,opt,name=copyright_contract_authorization,json=copyrightContractAuthorization,proto3" json:"copyright_contract_authorization,omitempty"`
}

func (x *CopyrightMintReq) Reset() {
	*x = CopyrightMintReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightMintReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightMintReq) ProtoMessage() {}

func (x *CopyrightMintReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightMintReq.ProtoReflect.Descriptor instead.
func (*CopyrightMintReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{17}
}

func (x *CopyrightMintReq) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *CopyrightMintReq) GetCopyrightTitle() string {
	if x != nil {
		return x.CopyrightTitle
	}
	return ""
}

func (x *CopyrightMintReq) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CopyrightMintReq) GetAttachUrl() string {
	if x != nil {
		return x.AttachUrl
	}
	return ""
}

func (x *CopyrightMintReq) GetCreativeTime() uint32 {
	if x != nil {
		return x.CreativeTime
	}
	return 0
}

func (x *CopyrightMintReq) GetIsOriginal() uint32 {
	if x != nil {
		return x.IsOriginal
	}
	return 0
}

func (x *CopyrightMintReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CopyrightMintReq) GetCopyrightClaim() *CopyrightClaimRegister {
	if x != nil {
		return x.CopyrightClaim
	}
	return nil
}

func (x *CopyrightMintReq) GetCopyrightContract() *CopyrightContractRegister {
	if x != nil {
		return x.CopyrightContract
	}
	return nil
}

func (x *CopyrightMintReq) GetCopyrightContractAuthorization() *CopyrightContractAuthorizationRegister {
	if x != nil {
		return x.CopyrightContractAuthorization
	}
	return nil
}

type CopyrightMintResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CopyrightMintResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightMintResp) Reset() {
	*x = CopyrightMintResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightMintResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightMintResp) ProtoMessage() {}

func (x *CopyrightMintResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightMintResp.ProtoReflect.Descriptor instead.
func (*CopyrightMintResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{18}
}

func (x *CopyrightMintResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CopyrightMintResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CopyrightMintResp) GetData() *CopyrightMintResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContractCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightClaimIds string `protobuf:"bytes,1,opt,name=copyright_claim_ids,json=copyrightClaimIds,proto3" json:"copyright_claim_ids,omitempty"`
	AuthorizedNumber  uint32 `protobuf:"varint,2,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	CopyrightCategory string `protobuf:"bytes,3,opt,name=copyright_category,json=copyrightCategory,proto3" json:"copyright_category,omitempty"`
	Content           string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ContractCreateReq) Reset() {
	*x = ContractCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCreateReq) ProtoMessage() {}

func (x *ContractCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCreateReq.ProtoReflect.Descriptor instead.
func (*ContractCreateReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{19}
}

func (x *ContractCreateReq) GetCopyrightClaimIds() string {
	if x != nil {
		return x.CopyrightClaimIds
	}
	return ""
}

func (x *ContractCreateReq) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *ContractCreateReq) GetCopyrightCategory() string {
	if x != nil {
		return x.CopyrightCategory
	}
	return ""
}

func (x *ContractCreateReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ContractCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ContractCreateResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ContractCreateResp) Reset() {
	*x = ContractCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCreateResp) ProtoMessage() {}

func (x *ContractCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCreateResp.ProtoReflect.Descriptor instead.
func (*ContractCreateResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{20}
}

func (x *ContractCreateResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ContractCreateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ContractCreateResp) GetData() *ContractCreateResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContractListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractIds     string `protobuf:"bytes,1,opt,name=contract_ids,json=contractIds,proto3" json:"contract_ids,omitempty"`
	CreateTimeStart uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd   uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page            uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ContractListReq) Reset() {
	*x = ContractListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractListReq) ProtoMessage() {}

func (x *ContractListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractListReq.ProtoReflect.Descriptor instead.
func (*ContractListReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{21}
}

func (x *ContractListReq) GetContractIds() string {
	if x != nil {
		return x.ContractIds
	}
	return ""
}

func (x *ContractListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *ContractListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *ContractListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ContractListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ContractListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ContractListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ContractListResp) Reset() {
	*x = ContractListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractListResp) ProtoMessage() {}

func (x *ContractListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractListResp.ProtoReflect.Descriptor instead.
func (*ContractListResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{22}
}

func (x *ContractListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ContractListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ContractListResp) GetData() *ContractListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId             uint32 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	CopyrightCategory      string `protobuf:"bytes,2,opt,name=copyright_category,json=copyrightCategory,proto3" json:"copyright_category,omitempty"`
	AuthorizedNumber       uint32 `protobuf:"varint,3,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	AuthorizedUsedNumber   uint32 `protobuf:"varint,4,opt,name=authorized_used_number,json=authorizedUsedNumber,proto3" json:"authorized_used_number,omitempty"`
	CastedCollectionNumber uint32 `protobuf:"varint,5,opt,name=casted_collection_number,json=castedCollectionNumber,proto3" json:"casted_collection_number,omitempty"`
	Content                string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	CopyrightCredential    string `protobuf:"bytes,7,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	CreateTime             uint32 `protobuf:"varint,21,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *ContractInfo) Reset() {
	*x = ContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractInfo) ProtoMessage() {}

func (x *ContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractInfo.ProtoReflect.Descriptor instead.
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{23}
}

func (x *ContractInfo) GetContractId() uint32 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractInfo) GetCopyrightCategory() string {
	if x != nil {
		return x.CopyrightCategory
	}
	return ""
}

func (x *ContractInfo) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *ContractInfo) GetAuthorizedUsedNumber() uint32 {
	if x != nil {
		return x.AuthorizedUsedNumber
	}
	return 0
}

func (x *ContractInfo) GetCastedCollectionNumber() uint32 {
	if x != nil {
		return x.CastedCollectionNumber
	}
	return 0
}

func (x *ContractInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ContractInfo) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *ContractInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ContractAuthorizationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId           uint32                      `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AuthorizedAddress    string                      `protobuf:"bytes,2,opt,name=authorized_address,json=authorizedAddress,proto3" json:"authorized_address,omitempty"`
	AuthorizationContent string                      `protobuf:"bytes,3,opt,name=authorization_content,json=authorizationContent,proto3" json:"authorization_content,omitempty"`
	Claim                *ContractAuthorizationClaim `protobuf:"bytes,4,opt,name=claim,proto3" json:"claim,omitempty"`
	Remarks              string                      `protobuf:"bytes,5,opt,name=remarks,proto3" json:"remarks,omitempty"`
	// string proof = 6 [(validate.rules).string = {min_len: 1},(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "存证声明数据的签名"}];注释原因：系统自己生成签名
	NotifyUrl  string `protobuf:"bytes,7,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts string `protobuf:"bytes,8,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
}

func (x *ContractAuthorizationReq) Reset() {
	*x = ContractAuthorizationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractAuthorizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAuthorizationReq) ProtoMessage() {}

func (x *ContractAuthorizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAuthorizationReq.ProtoReflect.Descriptor instead.
func (*ContractAuthorizationReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{24}
}

func (x *ContractAuthorizationReq) GetContractId() uint32 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractAuthorizationReq) GetAuthorizedAddress() string {
	if x != nil {
		return x.AuthorizedAddress
	}
	return ""
}

func (x *ContractAuthorizationReq) GetAuthorizationContent() string {
	if x != nil {
		return x.AuthorizationContent
	}
	return ""
}

func (x *ContractAuthorizationReq) GetClaim() *ContractAuthorizationClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *ContractAuthorizationReq) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ContractAuthorizationReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *ContractAuthorizationReq) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

type ContractAuthorizationClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidCredential         string `protobuf:"bytes,1,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential   string `protobuf:"bytes,2,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCategory string `protobuf:"bytes,4,opt,name=authorization_category,json=authorizationCategory,proto3" json:"authorization_category,omitempty"`
	AuthorizedNumber      uint32 `protobuf:"varint,5,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	DeclareTime           string `protobuf:"bytes,6,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension             string `protobuf:"bytes,9,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ContractAuthorizationClaim) Reset() {
	*x = ContractAuthorizationClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractAuthorizationClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAuthorizationClaim) ProtoMessage() {}

func (x *ContractAuthorizationClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAuthorizationClaim.ProtoReflect.Descriptor instead.
func (*ContractAuthorizationClaim) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{25}
}

func (x *ContractAuthorizationClaim) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *ContractAuthorizationClaim) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *ContractAuthorizationClaim) GetAuthorizationCategory() string {
	if x != nil {
		return x.AuthorizationCategory
	}
	return ""
}

func (x *ContractAuthorizationClaim) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *ContractAuthorizationClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *ContractAuthorizationClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type ContractAuthorizationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ContractAuthorizationResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ContractAuthorizationResp) Reset() {
	*x = ContractAuthorizationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractAuthorizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAuthorizationResp) ProtoMessage() {}

func (x *ContractAuthorizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAuthorizationResp.ProtoReflect.Descriptor instead.
func (*ContractAuthorizationResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{26}
}

func (x *ContractAuthorizationResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ContractAuthorizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ContractAuthorizationResp) GetData() *ContractAuthorizationResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightClaimListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimTitle      string `protobuf:"bytes,1,opt,name=claim_title,json=claimTitle,proto3" json:"claim_title,omitempty"`
	CopyrightHash   string `protobuf:"bytes,2,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	Credential      string `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
	RegisterAddress string `protobuf:"bytes,4,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`
	ContractIds     string `protobuf:"bytes,5,opt,name=contract_ids,json=contractIds,proto3" json:"contract_ids,omitempty"`
	AuditStatus     string `protobuf:"bytes,7,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	AuditTimeStart  uint32 `protobuf:"varint,8,opt,name=audit_time_start,json=auditTimeStart,proto3" json:"audit_time_start,omitempty"`
	AuditTimeEnd    uint32 `protobuf:"varint,9,opt,name=audit_time_end,json=auditTimeEnd,proto3" json:"audit_time_end,omitempty"`
	CreateTimeStart uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd   uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page            uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CopyrightClaimListReq) Reset() {
	*x = CopyrightClaimListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimListReq) ProtoMessage() {}

func (x *CopyrightClaimListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimListReq.ProtoReflect.Descriptor instead.
func (*CopyrightClaimListReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{27}
}

func (x *CopyrightClaimListReq) GetClaimTitle() string {
	if x != nil {
		return x.ClaimTitle
	}
	return ""
}

func (x *CopyrightClaimListReq) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *CopyrightClaimListReq) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *CopyrightClaimListReq) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *CopyrightClaimListReq) GetContractIds() string {
	if x != nil {
		return x.ContractIds
	}
	return ""
}

func (x *CopyrightClaimListReq) GetAuditStatus() string {
	if x != nil {
		return x.AuditStatus
	}
	return ""
}

func (x *CopyrightClaimListReq) GetAuditTimeStart() uint32 {
	if x != nil {
		return x.AuditTimeStart
	}
	return 0
}

func (x *CopyrightClaimListReq) GetAuditTimeEnd() uint32 {
	if x != nil {
		return x.AuditTimeEnd
	}
	return 0
}

func (x *CopyrightClaimListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *CopyrightClaimListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *CopyrightClaimListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CopyrightClaimListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CopyrightClaimListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CopyrightClaimListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightClaimListResp) Reset() {
	*x = CopyrightClaimListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimListResp) ProtoMessage() {}

func (x *CopyrightClaimListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimListResp.ProtoReflect.Descriptor instead.
func (*CopyrightClaimListResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{28}
}

func (x *CopyrightClaimListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CopyrightClaimListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CopyrightClaimListResp) GetData() *CopyrightClaimListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightClaimInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightClaimId       uint32 `protobuf:"varint,1,opt,name=copyright_claim_id,json=copyrightClaimId,proto3" json:"copyright_claim_id,omitempty"`
	ClaimTitle             string `protobuf:"bytes,2,opt,name=claim_title,json=claimTitle,proto3" json:"claim_title,omitempty"`
	CopyrightId            uint32 `protobuf:"varint,3,opt,name=copyright_id,json=copyrightId,proto3" json:"copyright_id,omitempty"`
	RegisterAddress        string `protobuf:"bytes,4,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`
	AppNo                  string `protobuf:"bytes,6,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	Credential             string `protobuf:"bytes,8,opt,name=credential,proto3" json:"credential,omitempty"`
	CopyrightHash          string `protobuf:"bytes,9,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	AuditStatus            uint32 `protobuf:"varint,13,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	AuditTime              uint32 `protobuf:"varint,14,opt,name=audit_time,json=auditTime,proto3" json:"audit_time,omitempty"`
	RejectReason           string `protobuf:"bytes,15,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Remarks                string `protobuf:"bytes,16,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CopyrightCategory      string `protobuf:"bytes,17,opt,name=copyright_category,json=copyrightCategory,proto3" json:"copyright_category,omitempty"`
	AuthorizedNumber       uint32 `protobuf:"varint,18,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	AuthorizedUsedNumber   uint32 `protobuf:"varint,19,opt,name=authorized_used_number,json=authorizedUsedNumber,proto3" json:"authorized_used_number,omitempty"`
	CastedCollectionNumber uint32 `protobuf:"varint,20,opt,name=casted_collection_number,json=castedCollectionNumber,proto3" json:"casted_collection_number,omitempty"`
	Claim                  string `protobuf:"bytes,21,opt,name=claim,proto3" json:"claim,omitempty"`
	CreateTime             uint32 `protobuf:"varint,22,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *CopyrightClaimInfo) Reset() {
	*x = CopyrightClaimInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimInfo) ProtoMessage() {}

func (x *CopyrightClaimInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimInfo.ProtoReflect.Descriptor instead.
func (*CopyrightClaimInfo) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{29}
}

func (x *CopyrightClaimInfo) GetCopyrightClaimId() uint32 {
	if x != nil {
		return x.CopyrightClaimId
	}
	return 0
}

func (x *CopyrightClaimInfo) GetClaimTitle() string {
	if x != nil {
		return x.ClaimTitle
	}
	return ""
}

func (x *CopyrightClaimInfo) GetCopyrightId() uint32 {
	if x != nil {
		return x.CopyrightId
	}
	return 0
}

func (x *CopyrightClaimInfo) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *CopyrightClaimInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *CopyrightClaimInfo) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *CopyrightClaimInfo) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *CopyrightClaimInfo) GetAuditStatus() uint32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *CopyrightClaimInfo) GetAuditTime() uint32 {
	if x != nil {
		return x.AuditTime
	}
	return 0
}

func (x *CopyrightClaimInfo) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *CopyrightClaimInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CopyrightClaimInfo) GetCopyrightCategory() string {
	if x != nil {
		return x.CopyrightCategory
	}
	return ""
}

func (x *CopyrightClaimInfo) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *CopyrightClaimInfo) GetAuthorizedUsedNumber() uint32 {
	if x != nil {
		return x.AuthorizedUsedNumber
	}
	return 0
}

func (x *CopyrightClaimInfo) GetCastedCollectionNumber() uint32 {
	if x != nil {
		return x.CastedCollectionNumber
	}
	return 0
}

func (x *CopyrightClaimInfo) GetClaim() string {
	if x != nil {
		return x.Claim
	}
	return ""
}

func (x *CopyrightClaimInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CopyrightStatisticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CopyrightStatisticsReq) Reset() {
	*x = CopyrightStatisticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightStatisticsReq) ProtoMessage() {}

func (x *CopyrightStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightStatisticsReq.ProtoReflect.Descriptor instead.
func (*CopyrightStatisticsReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{30}
}

type CopyrightStatisticsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CopyrightStatisticsResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightStatisticsResp) Reset() {
	*x = CopyrightStatisticsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightStatisticsResp) ProtoMessage() {}

func (x *CopyrightStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightStatisticsResp.ProtoReflect.Descriptor instead.
func (*CopyrightStatisticsResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{31}
}

func (x *CopyrightStatisticsResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CopyrightStatisticsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CopyrightStatisticsResp) GetData() *CopyrightStatisticsResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightRegisterResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightId         uint32 `protobuf:"varint,1,opt,name=copyright_id,json=copyrightId,proto3" json:"copyright_id,omitempty"`
	CopyrightHash       string `protobuf:"bytes,2,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	CopyrightClaimId    uint32 `protobuf:"varint,3,opt,name=copyright_claim_id,json=copyrightClaimId,proto3" json:"copyright_claim_id,omitempty"`
	CopyrightCredential string `protobuf:"bytes,4,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
}

func (x *CopyrightRegisterResp_Data) Reset() {
	*x = CopyrightRegisterResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightRegisterResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightRegisterResp_Data) ProtoMessage() {}

func (x *CopyrightRegisterResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightRegisterResp_Data.ProtoReflect.Descriptor instead.
func (*CopyrightRegisterResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CopyrightRegisterResp_Data) GetCopyrightId() uint32 {
	if x != nil {
		return x.CopyrightId
	}
	return 0
}

func (x *CopyrightRegisterResp_Data) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *CopyrightRegisterResp_Data) GetCopyrightClaimId() uint32 {
	if x != nil {
		return x.CopyrightClaimId
	}
	return 0
}

func (x *CopyrightRegisterResp_Data) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

type CopyrightRegisterListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*CopyrightRegisterInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightRegisterListResp_Data) Reset() {
	*x = CopyrightRegisterListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightRegisterListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightRegisterListResp_Data) ProtoMessage() {}

func (x *CopyrightRegisterListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightRegisterListResp_Data.ProtoReflect.Descriptor instead.
func (*CopyrightRegisterListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CopyrightRegisterListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CopyrightRegisterListResp_Data) GetData() []*CopyrightRegisterInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightAuthorizationListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                        `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*CopyrightAuthorizationInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightAuthorizationListResp_Data) Reset() {
	*x = CopyrightAuthorizationListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightAuthorizationListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightAuthorizationListResp_Data) ProtoMessage() {}

func (x *CopyrightAuthorizationListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightAuthorizationListResp_Data.ProtoReflect.Descriptor instead.
func (*CopyrightAuthorizationListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CopyrightAuthorizationListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CopyrightAuthorizationListResp_Data) GetData() []*CopyrightAuthorizationInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightClaimAuthorizationResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationId         uint32 `protobuf:"varint,1,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`
	AuthorizationCode       string `protobuf:"bytes,2,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	DidCredential           string `protobuf:"bytes,3,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential     string `protobuf:"bytes,4,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCredential string `protobuf:"bytes,5,opt,name=authorization_credential,json=authorizationCredential,proto3" json:"authorization_credential,omitempty"`
}

func (x *CopyrightClaimAuthorizationResp_Data) Reset() {
	*x = CopyrightClaimAuthorizationResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimAuthorizationResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimAuthorizationResp_Data) ProtoMessage() {}

func (x *CopyrightClaimAuthorizationResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimAuthorizationResp_Data.ProtoReflect.Descriptor instead.
func (*CopyrightClaimAuthorizationResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CopyrightClaimAuthorizationResp_Data) GetAuthorizationId() uint32 {
	if x != nil {
		return x.AuthorizationId
	}
	return 0
}

func (x *CopyrightClaimAuthorizationResp_Data) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

func (x *CopyrightClaimAuthorizationResp_Data) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CopyrightClaimAuthorizationResp_Data) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *CopyrightClaimAuthorizationResp_Data) GetAuthorizationCredential() string {
	if x != nil {
		return x.AuthorizationCredential
	}
	return ""
}

type CopyrightMintResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightId      uint32 `protobuf:"varint,1,opt,name=copyright_id,json=copyrightId,proto3" json:"copyright_id,omitempty"`
	CopyrightHash    string `protobuf:"bytes,2,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	CopyrightClaimId uint32 `protobuf:"varint,3,opt,name=copyright_claim_id,json=copyrightClaimId,proto3" json:"copyright_claim_id,omitempty"`
}

func (x *CopyrightMintResp_Data) Reset() {
	*x = CopyrightMintResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightMintResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightMintResp_Data) ProtoMessage() {}

func (x *CopyrightMintResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightMintResp_Data.ProtoReflect.Descriptor instead.
func (*CopyrightMintResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CopyrightMintResp_Data) GetCopyrightId() uint32 {
	if x != nil {
		return x.CopyrightId
	}
	return 0
}

func (x *CopyrightMintResp_Data) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *CopyrightMintResp_Data) GetCopyrightClaimId() uint32 {
	if x != nil {
		return x.CopyrightClaimId
	}
	return 0
}

type ContractCreateResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId uint32 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (x *ContractCreateResp_Data) Reset() {
	*x = ContractCreateResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCreateResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCreateResp_Data) ProtoMessage() {}

func (x *ContractCreateResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCreateResp_Data.ProtoReflect.Descriptor instead.
func (*ContractCreateResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ContractCreateResp_Data) GetContractId() uint32 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

type ContractListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*ContractInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ContractListResp_Data) Reset() {
	*x = ContractListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractListResp_Data) ProtoMessage() {}

func (x *ContractListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractListResp_Data.ProtoReflect.Descriptor instead.
func (*ContractListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ContractListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ContractListResp_Data) GetData() []*ContractInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContractAuthorizationResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationId         uint32 `protobuf:"varint,1,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`
	AuthorizationCredential string `protobuf:"bytes,2,opt,name=authorization_credential,json=authorizationCredential,proto3" json:"authorization_credential,omitempty"`
}

func (x *ContractAuthorizationResp_Data) Reset() {
	*x = ContractAuthorizationResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractAuthorizationResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAuthorizationResp_Data) ProtoMessage() {}

func (x *ContractAuthorizationResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAuthorizationResp_Data.ProtoReflect.Descriptor instead.
func (*ContractAuthorizationResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{26, 0}
}

func (x *ContractAuthorizationResp_Data) GetAuthorizationId() uint32 {
	if x != nil {
		return x.AuthorizationId
	}
	return 0
}

func (x *ContractAuthorizationResp_Data) GetAuthorizationCredential() string {
	if x != nil {
		return x.AuthorizationCredential
	}
	return ""
}

type CopyrightClaimListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*CopyrightClaimInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyrightClaimListResp_Data) Reset() {
	*x = CopyrightClaimListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimListResp_Data) ProtoMessage() {}

func (x *CopyrightClaimListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimListResp_Data.ProtoReflect.Descriptor instead.
func (*CopyrightClaimListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{28, 0}
}

func (x *CopyrightClaimListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CopyrightClaimListResp_Data) GetData() []*CopyrightClaimInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightStatisticsResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompositionNum    uint32 `protobuf:"varint,1,opt,name=composition_num,json=compositionNum,proto3" json:"composition_num,omitempty"`
	CopyrightNum      uint32 `protobuf:"varint,2,opt,name=copyright_num,json=copyrightNum,proto3" json:"copyright_num,omitempty"`
	CollectionNum     uint32 `protobuf:"varint,3,opt,name=collection_num,json=collectionNum,proto3" json:"collection_num,omitempty"`
	HoldCollectionNum uint32 `protobuf:"varint,4,opt,name=hold_collection_num,json=holdCollectionNum,proto3" json:"hold_collection_num,omitempty"`
	DealAmount        uint32 `protobuf:"varint,5,opt,name=deal_amount,json=dealAmount,proto3" json:"deal_amount,omitempty"`
	DealNum           uint32 `protobuf:"varint,6,opt,name=deal_num,json=dealNum,proto3" json:"deal_num,omitempty"`
}

func (x *CopyrightStatisticsResp_Data) Reset() {
	*x = CopyrightStatisticsResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyright_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightStatisticsResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightStatisticsResp_Data) ProtoMessage() {}

func (x *CopyrightStatisticsResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyright_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightStatisticsResp_Data.ProtoReflect.Descriptor instead.
func (*CopyrightStatisticsResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyright_proto_rawDescGZIP(), []int{31, 0}
}

func (x *CopyrightStatisticsResp_Data) GetCompositionNum() uint32 {
	if x != nil {
		return x.CompositionNum
	}
	return 0
}

func (x *CopyrightStatisticsResp_Data) GetCopyrightNum() uint32 {
	if x != nil {
		return x.CopyrightNum
	}
	return 0
}

func (x *CopyrightStatisticsResp_Data) GetCollectionNum() uint32 {
	if x != nil {
		return x.CollectionNum
	}
	return 0
}

func (x *CopyrightStatisticsResp_Data) GetHoldCollectionNum() uint32 {
	if x != nil {
		return x.HoldCollectionNum
	}
	return 0
}

func (x *CopyrightStatisticsResp_Data) GetDealAmount() uint32 {
	if x != nil {
		return x.DealAmount
	}
	return 0
}

func (x *CopyrightStatisticsResp_Data) GetDealNum() uint32 {
	if x != nil {
		return x.DealNum
	}
	return 0
}

var File_pb_dassetpb_copyright_proto protoreflect.FileDescriptor

var file_pb_dassetpb_copyright_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2f, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xca, 0x04, 0x0a, 0x14, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x76, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x4f, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xef, 0xbc, 0x9b,
	0x32, 0x2d, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xa4, 0xb4,
	0xe5, 0x83, 0x8f, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0x33, 0x44, 0xef, 0xbc, 0x9b, 0x35, 0x2d, 0xe7,
	0xa4, 0xbe, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xef, 0xbc, 0x9b, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe7, 0x89,
	0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c,
	0xe4, 0xba, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x45, 0x92, 0x41, 0x38, 0x32, 0x36, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c,
	0xe5, 0x93, 0x81, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xef,
	0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xe7, 0x94,
	0xa8, 0xe5, 0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x55,
	0x72, 0x6c, 0x12, 0x5d, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x92, 0x41, 0x32, 0x32, 0x30,
	0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4,
	0xbd, 0x9c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x31, 0x36, 0x36, 0x31, 0x39, 0x36, 0x31, 0x36, 0x30, 0x30, 0x29,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x9b, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x90,
	0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87,
	0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x8a, 0x03, 0x0a,
	0x15, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x40, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x88,
	0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92,
	0x41, 0x0a, 0x32, 0x08, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0x52, 0x0b, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99,
	0xbb, 0xe8, 0xae, 0xb0, 0x48, 0x61, 0x73, 0x68, 0xe5, 0x80, 0xbc, 0x52, 0x0d, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x41, 0x0a, 0x12, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe7, 0x89, 0x88,
	0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x69, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x4a, 0x0a,
	0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xad,
	0x98, 0xe8, 0xaf, 0x81, 0x52, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xcd, 0x04, 0x0a, 0x18, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7, 0x9a, 0x84, 0xe6,
	0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x32, 0x13, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0,
	0x48, 0x61, 0x73, 0x68, 0xe5, 0x80, 0xbc, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x73, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4c,
	0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d,
	0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xa4, 0xb4, 0xe5, 0x83,
	0x8f, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0x33, 0x44, 0xef, 0xbc, 0x9b, 0x35, 0x2d, 0xe7, 0xa4, 0xbe,
	0xe4, 0xba, 0xa4, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xef, 0xbc, 0x9b, 0x52, 0x0d, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8e, 0x9f,
	0xe5, 0x88, 0x9b, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x90, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d,
	0xe6, 0x98, 0xaf, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x52, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32,
	0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5,
	0xb0, 0x8f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41,
	0x24, 0x32, 0x22, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20,
	0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x19, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x44, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x59, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0,
	0x05, 0x0a, 0x15, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0x52, 0x0b, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81,
	0xe7, 0x9a, 0x84, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x73, 0x0a, 0x0e, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xef, 0xbc,
	0x9b, 0x32, 0x2d, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xa4,
	0xb4, 0xe5, 0x83, 0x8f, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0x33, 0x44, 0xef, 0xbc, 0x9b, 0x35, 0x2d,
	0xe7, 0xa4, 0xbe, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xef, 0xbc, 0x9b, 0x52,
	0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe7, 0x89, 0x88,
	0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x48, 0x61, 0x73, 0x68, 0xe5, 0x80, 0xbc,
	0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x42, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x9b, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x90, 0xa6, 0xef,
	0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe7, 0x89, 0x88, 0xe6, 0x9d,
	0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x4f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0xe7, 0x89, 0x88,
	0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7,
	0xa7, 0x92, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x5a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38,
	0x32, 0x36, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe8, 0xae,
	0xbf, 0xe9, 0x97, 0xae, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a,
	0xe4, 0xb8, 0xaa, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe5,
	0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x32, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xb3, 0x06, 0x0a, 0x1d, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e,
	0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64,
	0x20, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86,
	0xe5, 0x89, 0xb2, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x32, 0x1b, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x69, 0x64, 0x20, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8,
	0xaa, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x32, 0x15, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x55,
	0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0xa2, 0xab, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4,
	0xba, 0xba, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xa0,
	0x81, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x38, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x30, 0xe6, 0x88,
	0x91, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x9a, 0x84, 0x31, 0xe6, 0x8e, 0x88, 0xe6, 0x9d,
	0x83, 0xe7, 0xbb, 0x99, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0x32, 0xe5, 0x85, 0xa8, 0xe9, 0x83,
	0xa8, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x02, 0x28, 0x00, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe6,
	0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32,
	0x22, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5e, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x09, 0x0a, 0x1a,
	0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x10, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6, 0x8e, 0x88, 0xe6, 0x9d,
	0x83, 0x69, 0x64, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08,
	0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x69, 0x64, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xa0, 0x81,
	0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x32, 0x0e, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64,
	0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x47, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe8, 0xa2, 0xab, 0xe6, 0x8e, 0x88, 0xe6,
	0x9d, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe8, 0xa2, 0xab,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x69,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0xe8, 0xa2, 0xab,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x4e, 0x6f, 0x12, 0x48, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d,
	0x83, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x44,
	0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52,
	0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x9a, 0x84,
	0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x62,
	0x0a, 0x10, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e,
	0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x05, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0x52, 0x0f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe4, 0xbd,
	0x9c, 0xe5, 0x93, 0x81, 0xe7, 0x9a, 0x84, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x0e, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3f, 0x0a,
	0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x48, 0x61, 0x73, 0x68, 0xe5, 0x80, 0xbc, 0x52,
	0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x73,
	0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xbd, 0x9c,
	0xe5, 0x93, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0x9b, 0xbe,
	0xe7, 0x89, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xef, 0xbc,
	0x9b, 0x33, 0x2d, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0x33, 0x44,
	0xef, 0xbc, 0x9b, 0x35, 0x2d, 0xe7, 0xa4, 0xbe, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0xa7, 0xe5, 0x93,
	0x81, 0xef, 0xbc, 0x9b, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x9b, 0xef, 0xbc, 0x9a, 0x30, 0x2d,
	0xe5, 0x90, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x52, 0x0a, 0x69, 0x73, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3,
	0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6,
	0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32,
	0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95,
	0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12,
	0x52, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0,
	0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3,
	0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x15, 0x43,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x69, 0x64, 0xe0,
	0x41, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xad, 0x98, 0xe8,
	0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06,
	0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22,
	0x99, 0x07, 0x0a, 0x0e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x17, 0x32,
	0x15, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd,
	0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x42, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe7, 0x89,
	0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x48, 0x61, 0x73, 0x68, 0xe5, 0x80,
	0xbc, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe7,
	0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe7,
	0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd,
	0x9c, 0xe4, 0xba, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5a, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0xe7, 0x89, 0x88, 0xe6, 0x9d,
	0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x28, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3,
	0x31, 0x36, 0x36, 0x31, 0x39, 0x36, 0x31, 0x36, 0x30, 0x30, 0x29, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8e, 0x9f, 0xe5, 0x88,
	0x9b, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x90, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x98,
	0xaf, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x64, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x45, 0x92, 0x41, 0x38, 0x32, 0x36, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd,
	0x9c, 0xe5, 0x93, 0x81, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5,
	0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xe7,
	0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x55, 0x72, 0x6c, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe5, 0x8f, 0xaf, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xb1,
	0xbb, 0xe5, 0x88, 0xab, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x5f, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x92, 0x41,
	0x2f, 0x32, 0x2d, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5,
	0x9c, 0xa8, 0xe8, 0xaf, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe5, 0x8f, 0xaf, 0xe9, 0x93,
	0xb8, 0xe9, 0x80, 0xa0, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f,
	0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5,
	0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0x32, 0x30, 0x32, 0x32,
	0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x20, 0x31, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x29,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32,
	0x2f, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x29,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x03, 0x0a, 0x16,
	0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe5, 0xa3, 0xb0,
	0xe6, 0x98, 0x8e, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x8f, 0xaf, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e,
	0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x9c, 0xa8, 0xe8, 0xaf, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5,
	0x88, 0xab, 0xe5, 0x8f, 0xaf, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0c,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0x32, 0x30, 0x32, 0x32, 0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31,
	0x20, 0x31, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x58, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x32, 0x35, 0xe5, 0xa3, 0xb0, 0xe6, 0x98,
	0x8e, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x29,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x3b, 0x92, 0x41, 0x35, 0x32, 0x33, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x9c,
	0xa8, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84,
	0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe5, 0x8f, 0xaf, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe8,
	0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0xe0, 0x41, 0x02, 0x52, 0x10,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xcf, 0x04, 0x0a, 0x26, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x57,
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1b, 0x32,
	0x19, 0xe8, 0xa2, 0xab, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6,
	0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe0, 0x41, 0x02, 0x52, 0x10,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x59, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28,
	0x32, 0x30, 0x32, 0x32, 0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x20, 0x31, 0x30, 0x3a, 0x30, 0x30,
	0x3a, 0x30, 0x30, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a,
	0x92, 0x41, 0x37, 0x32, 0x35, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x89, 0xa9, 0xe5, 0xb1,
	0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f,
	0xaf, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9,
	0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x29, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x08, 0x0a, 0x1e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x76, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x4f, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xef, 0xbc, 0x9b,
	0x32, 0x2d, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xa4, 0xb4,
	0xe5, 0x83, 0x8f, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0x33, 0x44, 0xef, 0xbc, 0x9b, 0x35, 0x2d, 0xe7,
	0xa4, 0xbe, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xef, 0xbc, 0x9b, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe7, 0x89,
	0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c,
	0xe4, 0xba, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c,
	0xe5, 0x93, 0x81, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xef,
	0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xe7, 0x94,
	0xa8, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0x28, 0x2c, 0x29, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x5a, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4,
	0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x28, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x31, 0x36,
	0x36, 0x31, 0x39, 0x36, 0x31, 0x36, 0x30, 0x30, 0x29, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x32, 0x1c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x9b, 0xef,
	0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x90, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x52,
	0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0xe5,
	0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x30,
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c,
	0x12, 0x5e, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x38, 0xe5, 0x8f, 0xaf, 0xe9,
	0x80, 0x89, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x2c, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92, 0xe4,
	0xbb, 0x80, 0xe4, 0xb9, 0x88, 0x2c, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0xe7, 0x9a, 0x84, 0xe6,
	0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe5, 0xb8, 0xa6, 0xe5, 0x9b, 0x9e, 0xe5, 0x8e, 0xbb, 0xe4, 0xbb,
	0x80, 0xe4, 0xb9, 0x88, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x73,
	0x12, 0x67, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x70, 0x0a, 0x12, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x20,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x1e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x04, 0x0a, 0x1f, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x98, 0x03, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0x52, 0x0f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c,
	0x32, 0x0a, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x0e, 0x64, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x90,
	0x88, 0xe7, 0xba, 0xa6, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab,
	0xe4, 0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x0d, 0x64, 0x69, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x7f, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe7, 0x89, 0x88,
	0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe8,
	0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x28, 0xe5, 0xa4, 0x9a, 0xe4,
	0xb8, 0xaa, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe8, 0x8b,
	0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2,
	0x27, 0x3b, 0x27, 0x29, 0x52, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x18, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x17,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xbb, 0x07, 0x0a, 0x10, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x76, 0x0a, 0x0e,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x4f, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xbd, 0x9c, 0xe5, 0x93,
	0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0x9b, 0xbe, 0xe7, 0x89,
	0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xef, 0xbc, 0x9b, 0x33,
	0x2d, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0x33, 0x44, 0xef, 0xbc,
	0x9b, 0x35, 0x2d, 0xe7, 0xa4, 0xbe, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xef,
	0xbc, 0x9b, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d,
	0x32, 0x1b, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88,
	0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x5a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0xe7, 0x89, 0x88, 0xe6, 0x9d,
	0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe9, 0x93, 0xbe,
	0xe6, 0x8e, 0xa5, 0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x93, 0xbe, 0xe6,
	0x8e, 0xa5, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe9, 0x9a,
	0x94, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x5a, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83,
	0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x28, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x31,
	0x36, 0x36, 0x31, 0x39, 0x36, 0x31, 0x36, 0x30, 0x30, 0x29, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92,
	0x41, 0x1e, 0x32, 0x1c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x9b,
	0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x90, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x98, 0xaf,
	0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x07,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x32, 0x12, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0,
	0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x67, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x70, 0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x20, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42,
	0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x1e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xbc, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0x52, 0x0b, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7,
	0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x48, 0x61, 0x73, 0x68, 0xe5, 0x80, 0xbc, 0x52, 0x0d, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x41, 0x0a, 0x12, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe7, 0x89,
	0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x69, 0x64, 0x52, 0x10, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x22, 0x8d,
	0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x5a, 0x0a, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0x69, 0x64, 0x20, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86,
	0xe5, 0x89, 0xb2, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x73,
	0x12, 0x98, 0x01, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6b, 0x92, 0x41,
	0x65, 0x32, 0x63, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x9c, 0xa8, 0xe6, 0x8e, 0x88, 0xe6,
	0x9d, 0x83, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xb1, 0xbb, 0xe5, 0x88,
	0xab, 0xe5, 0x8f, 0xaf, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81,
	0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0x2c, 0xe5, 0x8f, 0x96, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa,
	0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x20, 0xe5, 0x8f, 0xaf, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0x20, 0xe6, 0x9c, 0x80,
	0xe5, 0xb0, 0x8f, 0xe5, 0x80, 0xbc, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x12, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90,
	0x88, 0xe7, 0xba, 0xa6, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5,
	0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb1,
	0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x36, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0x90,
	0x88, 0xe7, 0xba, 0xa6, 0x69, 0x64, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x22, 0xd0, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x32, 0x1b, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x69, 0x64, 0x20, 0xe5, 0xa4, 0x9a, 0xe4,
	0xb8, 0xaa, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x4f, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0x20, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6,
	0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x50, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x94, 0x05, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0x90, 0x88, 0xe7,
	0xba, 0xa6, 0x69, 0x64, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0x52,
	0x11, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x65, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x92,
	0x41, 0x35, 0x32, 0x33, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x9c, 0xa8, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xb1, 0xbb, 0xe5,
	0x88, 0xab, 0xe5, 0x8f, 0xaf, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x16, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33,
	0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x9c, 0xa8, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe5, 0xb7,
	0xb2, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x80, 0xbb,
	0xe9, 0x87, 0x8f, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x18, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3b, 0x92, 0x41, 0x38,
	0x32, 0x36, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x9c, 0xa8, 0xe6, 0x8e, 0x88, 0xe6, 0x9d,
	0x83, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab,
	0xe5, 0xb7, 0xb2, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe7, 0x9a, 0x84, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x16, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe8, 0xaf,
	0xb4, 0xe6, 0x98, 0x8e, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a,
	0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d,
	0x32, 0x2b, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x2c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8,
	0xaa, 0xe5, 0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x52, 0x13, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x04, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5,
	0x90, 0x88, 0xe7, 0xba, 0xa6, 0x69, 0x64, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20,
	0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1b, 0x32, 0x19,
	0xe8, 0xa2, 0xab, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6,
	0x9d, 0x83, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xad, 0x98, 0xe8,
	0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06,
	0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x30, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72,
	0x6c, 0x12, 0x5e, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x38, 0xe5, 0x8f, 0xaf,
	0xe9, 0x80, 0x89, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x2c, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92,
	0xe4, 0xbb, 0x80, 0xe4, 0xb9, 0x88, 0x2c, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0xe7, 0x9a, 0x84,
	0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe5, 0xb8, 0xa6, 0xe5, 0x9b, 0x9e, 0xe5, 0x8e, 0xbb, 0xe4,
	0xbb, 0x80, 0xe4, 0xb9, 0x88, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74,
	0x73, 0x22, 0xae, 0x04, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x51, 0x0a, 0x0e, 0x64, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5,
	0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe8, 0xba,
	0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x7d, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4a, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x28, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8,
	0xaa, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe8, 0x8b, 0xb1,
	0xe6, 0x96, 0x87, 0xe5, 0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x27,
	0x3b, 0x27, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x52, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7,
	0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x28, 0x32, 0x30, 0x32, 0x32, 0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x20, 0x31, 0x30,
	0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87,
	0xaa, 0xe8, 0xa1, 0x8c, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95,
	0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x29, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x8e, 0x01, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0x52, 0x0f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad,
	0x98, 0xe8, 0xaf, 0x81, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xe0, 0x06,
	0x0a, 0x15, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13,
	0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x48, 0x61, 0x73, 0x68,
	0xe5, 0x80, 0xbc, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x27, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x75, 0x75, 0x69,
	0x64, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x46, 0x0a,
	0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0xe7, 0x89,
	0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0xe4, 0xba, 0xba, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x32, 0x1d, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x69, 0x64, 0x73, 0x20, 0x20, 0xe5, 0xa4, 0x9a,
	0xe4, 0xb8, 0xaa, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x67, 0x0a, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x3f, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0xe7, 0xa9, 0xba, 0xe5, 0x85, 0xa8, 0xe9, 0x83,
	0xa8, 0xef, 0xbc, 0x9b, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xef,
	0xbc, 0x9b, 0x31, 0x2d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4,
	0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92,
	0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92,
	0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7,
	0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88,
	0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0,
	0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xd9, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x56, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x09, 0x0a,
	0x12, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0x69, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x9a, 0x84, 0xe6, 0xa0, 0x87, 0xe9, 0xa2,
	0x98, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x0c, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83,
	0x69, 0x64, 0x52, 0x0b, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16,
	0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0xe4, 0xba, 0xba, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbd,
	0x9c, 0xe5, 0x93, 0x81, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e,
	0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7,
	0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x48, 0x61, 0x73, 0x68, 0xe5, 0x80, 0xbc, 0x52, 0x0d, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5b, 0x0a, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b,
	0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x52, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8b, 0x92, 0xe7, 0xbb, 0x9d, 0xe5, 0x8e,
	0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x8f, 0xaf, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0x52, 0x11, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5f, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xe5,
	0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x9c, 0xa8, 0xe8, 0xaf,
	0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe5, 0x8f, 0xaf, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x10, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x74,
	0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3e,
	0x92, 0x41, 0x3b, 0x32, 0x39, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x89, 0x88, 0xe6, 0x9d,
	0x83, 0xe5, 0x9c, 0xa8, 0xe8, 0xaf, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe5, 0xb7, 0xb2,
	0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d, 0xe7, 0xbb, 0x99, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe7,
	0x9a, 0x84, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x14,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x18, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xe5, 0xa3, 0xb0,
	0xe6, 0x98, 0x8e, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x9c, 0xa8, 0xe8, 0xaf, 0xa5, 0xe7,
	0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe5, 0xb7, 0xb2, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe8, 0x97,
	0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x16, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9a, 0x84, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x20, 0xe4, 0xb8, 0xb2, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x32, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x22, 0xf1, 0x03, 0x0a, 0x17,
	0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x42, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0xeb, 0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x32, 0x12, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x13, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe8, 0x97,
	0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x11, 0x68, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x32, 0x0a,
	0x0b, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x88, 0x90, 0xe4, 0xba, 0xa4, 0xe9,
	0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x88, 0x90, 0xe4, 0xba, 0xa4,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x42,
	0x16, 0x5a, 0x14, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x3b, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_dassetpb_copyright_proto_rawDescOnce sync.Once
	file_pb_dassetpb_copyright_proto_rawDescData = file_pb_dassetpb_copyright_proto_rawDesc
)

func file_pb_dassetpb_copyright_proto_rawDescGZIP() []byte {
	file_pb_dassetpb_copyright_proto_rawDescOnce.Do(func() {
		file_pb_dassetpb_copyright_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_dassetpb_copyright_proto_rawDescData)
	})
	return file_pb_dassetpb_copyright_proto_rawDescData
}

var file_pb_dassetpb_copyright_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_pb_dassetpb_copyright_proto_goTypes = []interface{}{
	(*CopyrightRegisterReq)(nil),                   // 0: daop.pb.dassetpb.CopyrightRegisterReq
	(*CopyrightRegisterResp)(nil),                  // 1: daop.pb.dassetpb.CopyrightRegisterResp
	(*CopyrightRegisterListReq)(nil),               // 2: daop.pb.dassetpb.CopyrightRegisterListReq
	(*CopyrightRegisterListResp)(nil),              // 3: daop.pb.dassetpb.CopyrightRegisterListResp
	(*CopyrightRegisterInfo)(nil),                  // 4: daop.pb.dassetpb.CopyrightRegisterInfo
	(*CopyrightAuthorizationListReq)(nil),          // 5: daop.pb.dassetpb.CopyrightAuthorizationListReq
	(*CopyrightAuthorizationListResp)(nil),         // 6: daop.pb.dassetpb.CopyrightAuthorizationListResp
	(*CopyrightAuthorizationInfo)(nil),             // 7: daop.pb.dassetpb.CopyrightAuthorizationInfo
	(*AuthorizationClaimListReq)(nil),              // 8: daop.pb.dassetpb.AuthorizationClaimListReq
	(*CopyrightClaimAddReq)(nil),                   // 9: daop.pb.dassetpb.CopyrightClaimAddReq
	(*CopyrightClaimEditReq)(nil),                  // 10: daop.pb.dassetpb.CopyrightClaimEditReq
	(*CopyrightClaim)(nil),                         // 11: daop.pb.dassetpb.CopyrightClaim
	(*CopyrightClaimRegister)(nil),                 // 12: daop.pb.dassetpb.CopyrightClaimRegister
	(*CopyrightContractRegister)(nil),              // 13: daop.pb.dassetpb.CopyrightContractRegister
	(*CopyrightContractAuthorizationRegister)(nil), // 14: daop.pb.dassetpb.CopyrightContractAuthorizationRegister
	(*CopyrightClaimAuthorizationReq)(nil),         // 15: daop.pb.dassetpb.CopyrightClaimAuthorizationReq
	(*CopyrightClaimAuthorizationResp)(nil),        // 16: daop.pb.dassetpb.CopyrightClaimAuthorizationResp
	(*CopyrightMintReq)(nil),                       // 17: daop.pb.dassetpb.CopyrightMintReq
	(*CopyrightMintResp)(nil),                      // 18: daop.pb.dassetpb.CopyrightMintResp
	(*ContractCreateReq)(nil),                      // 19: daop.pb.dassetpb.ContractCreateReq
	(*ContractCreateResp)(nil),                     // 20: daop.pb.dassetpb.ContractCreateResp
	(*ContractListReq)(nil),                        // 21: daop.pb.dassetpb.ContractListReq
	(*ContractListResp)(nil),                       // 22: daop.pb.dassetpb.ContractListResp
	(*ContractInfo)(nil),                           // 23: daop.pb.dassetpb.ContractInfo
	(*ContractAuthorizationReq)(nil),               // 24: daop.pb.dassetpb.ContractAuthorizationReq
	(*ContractAuthorizationClaim)(nil),             // 25: daop.pb.dassetpb.ContractAuthorizationClaim
	(*ContractAuthorizationResp)(nil),              // 26: daop.pb.dassetpb.ContractAuthorizationResp
	(*CopyrightClaimListReq)(nil),                  // 27: daop.pb.dassetpb.CopyrightClaimListReq
	(*CopyrightClaimListResp)(nil),                 // 28: daop.pb.dassetpb.CopyrightClaimListResp
	(*CopyrightClaimInfo)(nil),                     // 29: daop.pb.dassetpb.CopyrightClaimInfo
	(*CopyrightStatisticsReq)(nil),                 // 30: daop.pb.dassetpb.CopyrightStatisticsReq
	(*CopyrightStatisticsResp)(nil),                // 31: daop.pb.dassetpb.CopyrightStatisticsResp
	(*CopyrightRegisterResp_Data)(nil),             // 32: daop.pb.dassetpb.CopyrightRegisterResp.Data
	(*CopyrightRegisterListResp_Data)(nil),         // 33: daop.pb.dassetpb.CopyrightRegisterListResp.Data
	(*CopyrightAuthorizationListResp_Data)(nil),    // 34: daop.pb.dassetpb.CopyrightAuthorizationListResp.Data
	(*CopyrightClaimAuthorizationResp_Data)(nil),   // 35: daop.pb.dassetpb.CopyrightClaimAuthorizationResp.Data
	(*CopyrightMintResp_Data)(nil),                 // 36: daop.pb.dassetpb.CopyrightMintResp.Data
	(*ContractCreateResp_Data)(nil),                // 37: daop.pb.dassetpb.ContractCreateResp.Data
	(*ContractListResp_Data)(nil),                  // 38: daop.pb.dassetpb.ContractListResp.Data
	(*ContractAuthorizationResp_Data)(nil),         // 39: daop.pb.dassetpb.ContractAuthorizationResp.Data
	(*CopyrightClaimListResp_Data)(nil),            // 40: daop.pb.dassetpb.CopyrightClaimListResp.Data
	(*CopyrightStatisticsResp_Data)(nil),           // 41: daop.pb.dassetpb.CopyrightStatisticsResp.Data
}
var file_pb_dassetpb_copyright_proto_depIdxs = []int32{
	32, // 0: daop.pb.dassetpb.CopyrightRegisterResp.data:type_name -> daop.pb.dassetpb.CopyrightRegisterResp.Data
	33, // 1: daop.pb.dassetpb.CopyrightRegisterListResp.data:type_name -> daop.pb.dassetpb.CopyrightRegisterListResp.Data
	34, // 2: daop.pb.dassetpb.CopyrightAuthorizationListResp.data:type_name -> daop.pb.dassetpb.CopyrightAuthorizationListResp.Data
	4,  // 3: daop.pb.dassetpb.CopyrightAuthorizationInfo.copyrights:type_name -> daop.pb.dassetpb.CopyrightRegisterInfo
	29, // 4: daop.pb.dassetpb.CopyrightAuthorizationInfo.copyright_claims:type_name -> daop.pb.dassetpb.CopyrightClaimInfo
	11, // 5: daop.pb.dassetpb.CopyrightClaimAddReq.claim:type_name -> daop.pb.dassetpb.CopyrightClaim
	11, // 6: daop.pb.dassetpb.CopyrightClaimEditReq.claim:type_name -> daop.pb.dassetpb.CopyrightClaim
	12, // 7: daop.pb.dassetpb.CopyrightClaimAuthorizationReq.copyright_claim:type_name -> daop.pb.dassetpb.CopyrightClaimRegister
	13, // 8: daop.pb.dassetpb.CopyrightClaimAuthorizationReq.copyright_contract:type_name -> daop.pb.dassetpb.CopyrightContractRegister
	14, // 9: daop.pb.dassetpb.CopyrightClaimAuthorizationReq.copyright_contract_authorization:type_name -> daop.pb.dassetpb.CopyrightContractAuthorizationRegister
	35, // 10: daop.pb.dassetpb.CopyrightClaimAuthorizationResp.data:type_name -> daop.pb.dassetpb.CopyrightClaimAuthorizationResp.Data
	12, // 11: daop.pb.dassetpb.CopyrightMintReq.copyright_claim:type_name -> daop.pb.dassetpb.CopyrightClaimRegister
	13, // 12: daop.pb.dassetpb.CopyrightMintReq.copyright_contract:type_name -> daop.pb.dassetpb.CopyrightContractRegister
	14, // 13: daop.pb.dassetpb.CopyrightMintReq.copyright_contract_authorization:type_name -> daop.pb.dassetpb.CopyrightContractAuthorizationRegister
	36, // 14: daop.pb.dassetpb.CopyrightMintResp.data:type_name -> daop.pb.dassetpb.CopyrightMintResp.Data
	37, // 15: daop.pb.dassetpb.ContractCreateResp.data:type_name -> daop.pb.dassetpb.ContractCreateResp.Data
	38, // 16: daop.pb.dassetpb.ContractListResp.data:type_name -> daop.pb.dassetpb.ContractListResp.Data
	25, // 17: daop.pb.dassetpb.ContractAuthorizationReq.claim:type_name -> daop.pb.dassetpb.ContractAuthorizationClaim
	39, // 18: daop.pb.dassetpb.ContractAuthorizationResp.data:type_name -> daop.pb.dassetpb.ContractAuthorizationResp.Data
	40, // 19: daop.pb.dassetpb.CopyrightClaimListResp.data:type_name -> daop.pb.dassetpb.CopyrightClaimListResp.Data
	41, // 20: daop.pb.dassetpb.CopyrightStatisticsResp.data:type_name -> daop.pb.dassetpb.CopyrightStatisticsResp.Data
	4,  // 21: daop.pb.dassetpb.CopyrightRegisterListResp.Data.data:type_name -> daop.pb.dassetpb.CopyrightRegisterInfo
	7,  // 22: daop.pb.dassetpb.CopyrightAuthorizationListResp.Data.data:type_name -> daop.pb.dassetpb.CopyrightAuthorizationInfo
	23, // 23: daop.pb.dassetpb.ContractListResp.Data.data:type_name -> daop.pb.dassetpb.ContractInfo
	29, // 24: daop.pb.dassetpb.CopyrightClaimListResp.Data.data:type_name -> daop.pb.dassetpb.CopyrightClaimInfo
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_pb_dassetpb_copyright_proto_init() }
func file_pb_dassetpb_copyright_proto_init() {
	if File_pb_dassetpb_copyright_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_dassetpb_copyright_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightRegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightRegisterListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightRegisterListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightRegisterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightAuthorizationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightAuthorizationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightAuthorizationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationClaimListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimEditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightContractRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightContractAuthorizationRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimAuthorizationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimAuthorizationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightMintReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightMintResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractAuthorizationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractAuthorizationClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractAuthorizationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightStatisticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightStatisticsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightRegisterResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightRegisterListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightAuthorizationListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimAuthorizationResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightMintResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCreateResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractAuthorizationResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyright_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightStatisticsResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_dassetpb_copyright_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_dassetpb_copyright_proto_goTypes,
		DependencyIndexes: file_pb_dassetpb_copyright_proto_depIdxs,
		MessageInfos:      file_pb_dassetpb_copyright_proto_msgTypes,
	}.Build()
	File_pb_dassetpb_copyright_proto = out.File
	file_pb_dassetpb_copyright_proto_rawDesc = nil
	file_pb_dassetpb_copyright_proto_goTypes = nil
	file_pb_dassetpb_copyright_proto_depIdxs = nil
}
