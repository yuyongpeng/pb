// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/dassetpb/collection.proto

package dassetpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CollectionClaimCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationId   uint32 `protobuf:"varint,1,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`
	AuthorizationCode string `protobuf:"bytes,2,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	CollectionName    string `protobuf:"bytes,4,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	DeclareTime       string `protobuf:"bytes,5,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
}

func (x *CollectionClaimCreateReq) Reset() {
	*x = CollectionClaimCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionClaimCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionClaimCreateReq) ProtoMessage() {}

func (x *CollectionClaimCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionClaimCreateReq.ProtoReflect.Descriptor instead.
func (*CollectionClaimCreateReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{0}
}

func (x *CollectionClaimCreateReq) GetAuthorizationId() uint32 {
	if x != nil {
		return x.AuthorizationId
	}
	return 0
}

func (x *CollectionClaimCreateReq) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

func (x *CollectionClaimCreateReq) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionClaimCreateReq) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

type CollectionClaimCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CollectionClaimCreateResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionClaimCreateResp) Reset() {
	*x = CollectionClaimCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionClaimCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionClaimCreateResp) ProtoMessage() {}

func (x *CollectionClaimCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionClaimCreateResp.ProtoReflect.Descriptor instead.
func (*CollectionClaimCreateResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{1}
}

func (x *CollectionClaimCreateResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CollectionClaimCreateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectionClaimCreateResp) GetData() *CollectionClaimCreateResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *CollectionTokenReq) Reset() {
	*x = CollectionTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTokenReq) ProtoMessage() {}

func (x *CollectionTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTokenReq.ProtoReflect.Descriptor instead.
func (*CollectionTokenReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{2}
}

func (x *CollectionTokenReq) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type CollectionTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	ExternalUrl string `protobuf:"bytes,2,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`
	Image       string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Num         string `protobuf:"bytes,5,opt,name=num,proto3" json:"num,omitempty"`
	TxId        string `protobuf:"bytes,6,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	TxTime      uint32 `protobuf:"varint,8,opt,name=tx_time,json=txTime,proto3" json:"tx_time,omitempty"`
}

func (x *CollectionTokenResp) Reset() {
	*x = CollectionTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTokenResp) ProtoMessage() {}

func (x *CollectionTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTokenResp.ProtoReflect.Descriptor instead.
func (*CollectionTokenResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{3}
}

func (x *CollectionTokenResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CollectionTokenResp) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *CollectionTokenResp) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CollectionTokenResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollectionTokenResp) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

func (x *CollectionTokenResp) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *CollectionTokenResp) GetTxTime() uint32 {
	if x != nil {
		return x.TxTime
	}
	return 0
}

type CollectionCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationId   uint32           `protobuf:"varint,1,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`
	AuthorizationCode string           `protobuf:"bytes,2,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	Price             uint32           `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	TokenUrl          string           `protobuf:"bytes,5,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	AvailableTimes    uint32           `protobuf:"varint,6,opt,name=available_times,json=availableTimes,proto3" json:"available_times,omitempty"`
	Claim             *CollectionClaim `protobuf:"bytes,7,opt,name=claim,proto3" json:"claim,omitempty"`
	// string proof = 8 [(validate.rules).string = {min_len: 1},(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "存证声明数据的签名"}]; 注释原因：系统自己生成签名
	NotifyUrl  string `protobuf:"bytes,9,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts string `protobuf:"bytes,10,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
}

func (x *CollectionCreateReq) Reset() {
	*x = CollectionCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCreateReq) ProtoMessage() {}

func (x *CollectionCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCreateReq.ProtoReflect.Descriptor instead.
func (*CollectionCreateReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{4}
}

func (x *CollectionCreateReq) GetAuthorizationId() uint32 {
	if x != nil {
		return x.AuthorizationId
	}
	return 0
}

func (x *CollectionCreateReq) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

func (x *CollectionCreateReq) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CollectionCreateReq) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *CollectionCreateReq) GetAvailableTimes() uint32 {
	if x != nil {
		return x.AvailableTimes
	}
	return 0
}

func (x *CollectionCreateReq) GetClaim() *CollectionClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *CollectionCreateReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CollectionCreateReq) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

type CollectionClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	// string claim_sign_address = 2 [(validate.rules).string = {min_len: 1},(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "藏品链上持有人用户userAddress"}];  注释原因：系统自己生成签名
	DidCredential           string `protobuf:"bytes,3,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential     string `protobuf:"bytes,4,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCredential string `protobuf:"bytes,5,opt,name=authorization_credential,json=authorizationCredential,proto3" json:"authorization_credential,omitempty"`
	CollectionHash          string `protobuf:"bytes,6,opt,name=collection_hash,json=collectionHash,proto3" json:"collection_hash,omitempty"`
	TokenId                 string `protobuf:"bytes,7,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	From                    string `protobuf:"bytes,9,opt,name=from,proto3" json:"from,omitempty"`
	DeclareTime             string `protobuf:"bytes,10,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension               string `protobuf:"bytes,11,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CollectionClaim) Reset() {
	*x = CollectionClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionClaim) ProtoMessage() {}

func (x *CollectionClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionClaim.ProtoReflect.Descriptor instead.
func (*CollectionClaim) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{5}
}

func (x *CollectionClaim) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionClaim) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CollectionClaim) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *CollectionClaim) GetAuthorizationCredential() string {
	if x != nil {
		return x.AuthorizationCredential
	}
	return ""
}

func (x *CollectionClaim) GetCollectionHash() string {
	if x != nil {
		return x.CollectionHash
	}
	return ""
}

func (x *CollectionClaim) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *CollectionClaim) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CollectionClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *CollectionClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type CollectionCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CollectionCreateResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionCreateResp) Reset() {
	*x = CollectionCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCreateResp) ProtoMessage() {}

func (x *CollectionCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCreateResp.ProtoReflect.Descriptor instead.
func (*CollectionCreateResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{6}
}

func (x *CollectionCreateResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CollectionCreateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectionCreateResp) GetData() *CollectionCreateResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionBatchCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationId   uint32                  `protobuf:"varint,1,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`
	AuthorizationCode string                  `protobuf:"bytes,2,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	Data              []*CollectionCreateInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	NotifyUrl         string                  `protobuf:"bytes,9,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts        string                  `protobuf:"bytes,10,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
}

func (x *CollectionBatchCreateReq) Reset() {
	*x = CollectionBatchCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionBatchCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionBatchCreateReq) ProtoMessage() {}

func (x *CollectionBatchCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionBatchCreateReq.ProtoReflect.Descriptor instead.
func (*CollectionBatchCreateReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{7}
}

func (x *CollectionBatchCreateReq) GetAuthorizationId() uint32 {
	if x != nil {
		return x.AuthorizationId
	}
	return 0
}

func (x *CollectionBatchCreateReq) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

func (x *CollectionBatchCreateReq) GetData() []*CollectionCreateInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CollectionBatchCreateReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CollectionBatchCreateReq) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

type CollectionCreateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price          uint32           `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	TokenUrl       string           `protobuf:"bytes,5,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	AvailableTimes uint32           `protobuf:"varint,6,opt,name=available_times,json=availableTimes,proto3" json:"available_times,omitempty"`
	Claim          *CollectionClaim `protobuf:"bytes,7,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *CollectionCreateInfo) Reset() {
	*x = CollectionCreateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCreateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCreateInfo) ProtoMessage() {}

func (x *CollectionCreateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCreateInfo.ProtoReflect.Descriptor instead.
func (*CollectionCreateInfo) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{8}
}

func (x *CollectionCreateInfo) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CollectionCreateInfo) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *CollectionCreateInfo) GetAvailableTimes() uint32 {
	if x != nil {
		return x.AvailableTimes
	}
	return 0
}

func (x *CollectionCreateInfo) GetClaim() *CollectionClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

type CollectionBatchCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CollectionBatchCreateResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionBatchCreateResp) Reset() {
	*x = CollectionBatchCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionBatchCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionBatchCreateResp) ProtoMessage() {}

func (x *CollectionBatchCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionBatchCreateResp.ProtoReflect.Descriptor instead.
func (*CollectionBatchCreateResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{9}
}

func (x *CollectionBatchCreateResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CollectionBatchCreateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectionBatchCreateResp) GetData() *CollectionBatchCreateResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionLightCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*CollectionLight `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	NotifyUrl  string             `protobuf:"bytes,9,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts string             `protobuf:"bytes,10,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
}

func (x *CollectionLightCreateReq) Reset() {
	*x = CollectionLightCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionLightCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionLightCreateReq) ProtoMessage() {}

func (x *CollectionLightCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionLightCreateReq.ProtoReflect.Descriptor instead.
func (*CollectionLightCreateReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{10}
}

func (x *CollectionLightCreateReq) GetData() []*CollectionLight {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CollectionLightCreateReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CollectionLightCreateReq) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

type CollectionLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Price          uint32 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	TokenUrl       string `protobuf:"bytes,4,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	AvailableTimes uint32 `protobuf:"varint,5,opt,name=available_times,json=availableTimes,proto3" json:"available_times,omitempty"`
}

func (x *CollectionLight) Reset() {
	*x = CollectionLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionLight) ProtoMessage() {}

func (x *CollectionLight) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionLight.ProtoReflect.Descriptor instead.
func (*CollectionLight) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{11}
}

func (x *CollectionLight) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionLight) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CollectionLight) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *CollectionLight) GetAvailableTimes() uint32 {
	if x != nil {
		return x.AvailableTimes
	}
	return 0
}

type CollectionLightCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CollectionLightCreateResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionLightCreateResp) Reset() {
	*x = CollectionLightCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionLightCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionLightCreateResp) ProtoMessage() {}

func (x *CollectionLightCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionLightCreateResp.ProtoReflect.Descriptor instead.
func (*CollectionLightCreateResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{12}
}

func (x *CollectionLightCreateResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CollectionLightCreateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectionLightCreateResp) GetData() *CollectionLightCreateResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionHash    string `protobuf:"bytes,1,opt,name=collection_hash,json=collectionHash,proto3" json:"collection_hash,omitempty"`
	AuthorizationCode string `protobuf:"bytes,2,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	CastingAddress    string `protobuf:"bytes,3,opt,name=casting_address,json=castingAddress,proto3" json:"casting_address,omitempty"`
	OwnerAddress      string `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	Credential        string `protobuf:"bytes,5,opt,name=credential,proto3" json:"credential,omitempty"`
	CollectionType    uint32 `protobuf:"varint,6,opt,name=collection_type,json=collectionType,proto3" json:"collection_type,omitempty"`
	CreateTimeStart   uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd     uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page              uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit             uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CollectionListReq) Reset() {
	*x = CollectionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionListReq) ProtoMessage() {}

func (x *CollectionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionListReq.ProtoReflect.Descriptor instead.
func (*CollectionListReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{13}
}

func (x *CollectionListReq) GetCollectionHash() string {
	if x != nil {
		return x.CollectionHash
	}
	return ""
}

func (x *CollectionListReq) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

func (x *CollectionListReq) GetCastingAddress() string {
	if x != nil {
		return x.CastingAddress
	}
	return ""
}

func (x *CollectionListReq) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *CollectionListReq) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *CollectionListReq) GetCollectionType() uint32 {
	if x != nil {
		return x.CollectionType
	}
	return 0
}

func (x *CollectionListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *CollectionListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *CollectionListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CollectionListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CollectionListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CollectionListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionListResp) Reset() {
	*x = CollectionListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionListResp) ProtoMessage() {}

func (x *CollectionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionListResp.ProtoReflect.Descriptor instead.
func (*CollectionListResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{14}
}

func (x *CollectionListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CollectionListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectionListResp) GetData() *CollectionListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId      uint32 `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CollectionName    string `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	CollectionHash    string `protobuf:"bytes,3,opt,name=collection_hash,json=collectionHash,proto3" json:"collection_hash,omitempty"`
	AuthorizationCode string `protobuf:"bytes,4,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	TokenId           string `protobuf:"bytes,5,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Credential        string `protobuf:"bytes,6,opt,name=credential,proto3" json:"credential,omitempty"`
	CastingUid        uint32 `protobuf:"varint,7,opt,name=casting_uid,json=castingUid,proto3" json:"casting_uid,omitempty"`
	CastingUidName    string `protobuf:"bytes,8,opt,name=casting_uid_name,json=castingUidName,proto3" json:"casting_uid_name,omitempty"`
	CastingAddress    string `protobuf:"bytes,9,opt,name=casting_address,json=castingAddress,proto3" json:"casting_address,omitempty"`
	OwnerUid          uint32 `protobuf:"varint,10,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	OwnerUidName      string `protobuf:"bytes,11,opt,name=owner_uid_name,json=ownerUidName,proto3" json:"owner_uid_name,omitempty"`
	OwnerAddress      string `protobuf:"bytes,12,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	HolderAddress     string `protobuf:"bytes,13,opt,name=holder_address,json=holderAddress,proto3" json:"holder_address,omitempty"`
	AvailableTimes    uint32 `protobuf:"varint,14,opt,name=available_times,json=availableTimes,proto3" json:"available_times,omitempty"`
	CheckedTimes      uint32 `protobuf:"varint,15,opt,name=checked_times,json=checkedTimes,proto3" json:"checked_times,omitempty"`
	SellStatus        uint32 `protobuf:"varint,16,opt,name=sell_status,json=sellStatus,proto3" json:"sell_status,omitempty"`
	AppNo             string `protobuf:"bytes,17,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	Price             uint32 `protobuf:"varint,18,opt,name=price,proto3" json:"price,omitempty"`
	ChainStatus       uint32 `protobuf:"varint,19,opt,name=chain_status,json=chainStatus,proto3" json:"chain_status,omitempty"`
	ChainTxid         string `protobuf:"bytes,20,opt,name=chain_txid,json=chainTxid,proto3" json:"chain_txid,omitempty"`
	ChainBlockNumber  uint32 `protobuf:"varint,21,opt,name=chain_block_number,json=chainBlockNumber,proto3" json:"chain_block_number,omitempty"`
	ChainTime         uint32 `protobuf:"varint,22,opt,name=chain_time,json=chainTime,proto3" json:"chain_time,omitempty"`
	CheckInAppNo      string `protobuf:"bytes,23,opt,name=check_in_app_no,json=checkInAppNo,proto3" json:"check_in_app_no,omitempty"`
	UsedScene         string `protobuf:"bytes,24,opt,name=used_scene,json=usedScene,proto3" json:"used_scene,omitempty"`
	CreateTime        uint32 `protobuf:"varint,25,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime        uint32 `protobuf:"varint,26,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
}

func (x *CollectionInfo) Reset() {
	*x = CollectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfo) ProtoMessage() {}

func (x *CollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInfo.ProtoReflect.Descriptor instead.
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{15}
}

func (x *CollectionInfo) GetCollectionId() uint32 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *CollectionInfo) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionInfo) GetCollectionHash() string {
	if x != nil {
		return x.CollectionHash
	}
	return ""
}

func (x *CollectionInfo) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

func (x *CollectionInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *CollectionInfo) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *CollectionInfo) GetCastingUid() uint32 {
	if x != nil {
		return x.CastingUid
	}
	return 0
}

func (x *CollectionInfo) GetCastingUidName() string {
	if x != nil {
		return x.CastingUidName
	}
	return ""
}

func (x *CollectionInfo) GetCastingAddress() string {
	if x != nil {
		return x.CastingAddress
	}
	return ""
}

func (x *CollectionInfo) GetOwnerUid() uint32 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

func (x *CollectionInfo) GetOwnerUidName() string {
	if x != nil {
		return x.OwnerUidName
	}
	return ""
}

func (x *CollectionInfo) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *CollectionInfo) GetHolderAddress() string {
	if x != nil {
		return x.HolderAddress
	}
	return ""
}

func (x *CollectionInfo) GetAvailableTimes() uint32 {
	if x != nil {
		return x.AvailableTimes
	}
	return 0
}

func (x *CollectionInfo) GetCheckedTimes() uint32 {
	if x != nil {
		return x.CheckedTimes
	}
	return 0
}

func (x *CollectionInfo) GetSellStatus() uint32 {
	if x != nil {
		return x.SellStatus
	}
	return 0
}

func (x *CollectionInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *CollectionInfo) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CollectionInfo) GetChainStatus() uint32 {
	if x != nil {
		return x.ChainStatus
	}
	return 0
}

func (x *CollectionInfo) GetChainTxid() string {
	if x != nil {
		return x.ChainTxid
	}
	return ""
}

func (x *CollectionInfo) GetChainBlockNumber() uint32 {
	if x != nil {
		return x.ChainBlockNumber
	}
	return 0
}

func (x *CollectionInfo) GetChainTime() uint32 {
	if x != nil {
		return x.ChainTime
	}
	return 0
}

func (x *CollectionInfo) GetCheckInAppNo() string {
	if x != nil {
		return x.CheckInAppNo
	}
	return ""
}

func (x *CollectionInfo) GetUsedScene() string {
	if x != nil {
		return x.UsedScene
	}
	return ""
}

func (x *CollectionInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CollectionInfo) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

type CollectionTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId uint32                      `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Claim        *CollectionTransactionClaim `protobuf:"bytes,7,opt,name=claim,proto3" json:"claim,omitempty"`
	// string proof = 8 [(validate.rules).string = {min_len: 1},(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "存证声明数据的签名"}]; 注释原因：系统自己生成签名
	NotifyUrl  string `protobuf:"bytes,9,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts string `protobuf:"bytes,10,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
}

func (x *CollectionTransactionReq) Reset() {
	*x = CollectionTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTransactionReq) ProtoMessage() {}

func (x *CollectionTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTransactionReq.ProtoReflect.Descriptor instead.
func (*CollectionTransactionReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{16}
}

func (x *CollectionTransactionReq) GetCollectionId() uint32 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *CollectionTransactionReq) GetClaim() *CollectionTransactionClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *CollectionTransactionReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CollectionTransactionReq) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

type CollectionTransactionClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	// string claim_sign_address = 2 [(validate.rules).string = {min_len: 1},(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "藏品链上持有人用户userAddress"}]; 注释原因：系统自己生成签名
	DidCredential                 string `protobuf:"bytes,3,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential           string `protobuf:"bytes,4,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCredential       string `protobuf:"bytes,5,opt,name=authorization_credential,json=authorizationCredential,proto3" json:"authorization_credential,omitempty"`
	CollectionCredential          string `protobuf:"bytes,6,opt,name=collection_credential,json=collectionCredential,proto3" json:"collection_credential,omitempty"`
	PreviousTransactionCredential string `protobuf:"bytes,7,opt,name=previous_transaction_credential,json=previousTransactionCredential,proto3" json:"previous_transaction_credential,omitempty"`
	CollectionHash                string `protobuf:"bytes,8,opt,name=collection_hash,json=collectionHash,proto3" json:"collection_hash,omitempty"`
	TokenId                       string `protobuf:"bytes,9,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	From                          string `protobuf:"bytes,10,opt,name=from,proto3" json:"from,omitempty"`
	To                            string `protobuf:"bytes,11,opt,name=to,proto3" json:"to,omitempty"`
	DeclareTime                   string `protobuf:"bytes,12,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension                     string `protobuf:"bytes,13,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CollectionTransactionClaim) Reset() {
	*x = CollectionTransactionClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTransactionClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTransactionClaim) ProtoMessage() {}

func (x *CollectionTransactionClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTransactionClaim.ProtoReflect.Descriptor instead.
func (*CollectionTransactionClaim) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{17}
}

func (x *CollectionTransactionClaim) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionTransactionClaim) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CollectionTransactionClaim) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *CollectionTransactionClaim) GetAuthorizationCredential() string {
	if x != nil {
		return x.AuthorizationCredential
	}
	return ""
}

func (x *CollectionTransactionClaim) GetCollectionCredential() string {
	if x != nil {
		return x.CollectionCredential
	}
	return ""
}

func (x *CollectionTransactionClaim) GetPreviousTransactionCredential() string {
	if x != nil {
		return x.PreviousTransactionCredential
	}
	return ""
}

func (x *CollectionTransactionClaim) GetCollectionHash() string {
	if x != nil {
		return x.CollectionHash
	}
	return ""
}

func (x *CollectionTransactionClaim) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *CollectionTransactionClaim) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CollectionTransactionClaim) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CollectionTransactionClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *CollectionTransactionClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type CollectionTransactionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CollectionTransactionResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionTransactionResp) Reset() {
	*x = CollectionTransactionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTransactionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTransactionResp) ProtoMessage() {}

func (x *CollectionTransactionResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTransactionResp.ProtoReflect.Descriptor instead.
func (*CollectionTransactionResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{18}
}

func (x *CollectionTransactionResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CollectionTransactionResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectionTransactionResp) GetData() *CollectionTransactionResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionLightTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*CollectionLightTransaction `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	NotifyUrl  string                        `protobuf:"bytes,9,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts string                        `protobuf:"bytes,10,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
}

func (x *CollectionLightTransactionReq) Reset() {
	*x = CollectionLightTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionLightTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionLightTransactionReq) ProtoMessage() {}

func (x *CollectionLightTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionLightTransactionReq.ProtoReflect.Descriptor instead.
func (*CollectionLightTransactionReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{19}
}

func (x *CollectionLightTransactionReq) GetData() []*CollectionLightTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CollectionLightTransactionReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CollectionLightTransactionReq) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

type CollectionLightTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId string `protobuf:"bytes,9,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	From    string `protobuf:"bytes,10,opt,name=from,proto3" json:"from,omitempty"`
	To      string `protobuf:"bytes,11,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *CollectionLightTransaction) Reset() {
	*x = CollectionLightTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionLightTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionLightTransaction) ProtoMessage() {}

func (x *CollectionLightTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionLightTransaction.ProtoReflect.Descriptor instead.
func (*CollectionLightTransaction) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{20}
}

func (x *CollectionLightTransaction) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *CollectionLightTransaction) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CollectionLightTransaction) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type CollectionLightTransactionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CollectionLightTransactionResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionLightTransactionResp) Reset() {
	*x = CollectionLightTransactionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionLightTransactionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionLightTransactionResp) ProtoMessage() {}

func (x *CollectionLightTransactionResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionLightTransactionResp.ProtoReflect.Descriptor instead.
func (*CollectionLightTransactionResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{21}
}

func (x *CollectionLightTransactionResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CollectionLightTransactionResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectionLightTransactionResp) GetData() *CollectionLightTransactionResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionTransactionClaimReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId uint32 `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *CollectionTransactionClaimReq) Reset() {
	*x = CollectionTransactionClaimReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTransactionClaimReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTransactionClaimReq) ProtoMessage() {}

func (x *CollectionTransactionClaimReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTransactionClaimReq.ProtoReflect.Descriptor instead.
func (*CollectionTransactionClaimReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{22}
}

func (x *CollectionTransactionClaimReq) GetCollectionId() uint32 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

type CollectionTransactionClaimResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CollectionTransactionClaimResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionTransactionClaimResp) Reset() {
	*x = CollectionTransactionClaimResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTransactionClaimResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTransactionClaimResp) ProtoMessage() {}

func (x *CollectionTransactionClaimResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTransactionClaimResp.ProtoReflect.Descriptor instead.
func (*CollectionTransactionClaimResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{23}
}

func (x *CollectionTransactionClaimResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CollectionTransactionClaimResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectionTransactionClaimResp) GetData() *CollectionTransactionClaimResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionCheckInReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId uint32 `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CheckinScene string `protobuf:"bytes,2,opt,name=checkin_scene,json=checkinScene,proto3" json:"checkin_scene,omitempty"`
	NotifyUrl    string `protobuf:"bytes,9,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts   string `protobuf:"bytes,10,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
}

func (x *CollectionCheckInReq) Reset() {
	*x = CollectionCheckInReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCheckInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCheckInReq) ProtoMessage() {}

func (x *CollectionCheckInReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCheckInReq.ProtoReflect.Descriptor instead.
func (*CollectionCheckInReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{24}
}

func (x *CollectionCheckInReq) GetCollectionId() uint32 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *CollectionCheckInReq) GetCheckinScene() string {
	if x != nil {
		return x.CheckinScene
	}
	return ""
}

func (x *CollectionCheckInReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CollectionCheckInReq) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

type CollectionCheckInResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CollectionCheckInResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionCheckInResp) Reset() {
	*x = CollectionCheckInResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCheckInResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCheckInResp) ProtoMessage() {}

func (x *CollectionCheckInResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCheckInResp.ProtoReflect.Descriptor instead.
func (*CollectionCheckInResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{25}
}

func (x *CollectionCheckInResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CollectionCheckInResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectionCheckInResp) GetData() *CollectionCheckInResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionCheckInListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId     uint32 `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CheckinScene     string `protobuf:"bytes,2,opt,name=checkin_scene,json=checkinScene,proto3" json:"checkin_scene,omitempty"`
	CheckinTimeStart uint32 `protobuf:"varint,8,opt,name=checkin_time_start,json=checkinTimeStart,proto3" json:"checkin_time_start,omitempty"`
	CheckinTimeEnd   uint32 `protobuf:"varint,9,opt,name=checkin_time_end,json=checkinTimeEnd,proto3" json:"checkin_time_end,omitempty"`
	CreateTimeStart  uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd    uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page             uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit            uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CollectionCheckInListReq) Reset() {
	*x = CollectionCheckInListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCheckInListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCheckInListReq) ProtoMessage() {}

func (x *CollectionCheckInListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCheckInListReq.ProtoReflect.Descriptor instead.
func (*CollectionCheckInListReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{26}
}

func (x *CollectionCheckInListReq) GetCollectionId() uint32 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *CollectionCheckInListReq) GetCheckinScene() string {
	if x != nil {
		return x.CheckinScene
	}
	return ""
}

func (x *CollectionCheckInListReq) GetCheckinTimeStart() uint32 {
	if x != nil {
		return x.CheckinTimeStart
	}
	return 0
}

func (x *CollectionCheckInListReq) GetCheckinTimeEnd() uint32 {
	if x != nil {
		return x.CheckinTimeEnd
	}
	return 0
}

func (x *CollectionCheckInListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *CollectionCheckInListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *CollectionCheckInListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CollectionCheckInListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CollectionCheckInListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CollectionCheckInListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionCheckInListResp) Reset() {
	*x = CollectionCheckInListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCheckInListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCheckInListResp) ProtoMessage() {}

func (x *CollectionCheckInListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCheckInListResp.ProtoReflect.Descriptor instead.
func (*CollectionCheckInListResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{27}
}

func (x *CollectionCheckInListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CollectionCheckInListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CollectionCheckInListResp) GetData() *CollectionCheckInListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionCheckInInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CollectionId uint32 `protobuf:"varint,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	TokenId      string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	CheckinScene string `protobuf:"bytes,4,opt,name=checkin_scene,json=checkinScene,proto3" json:"checkin_scene,omitempty"`
	CheckinTime  uint32 `protobuf:"varint,5,opt,name=checkin_time,json=checkinTime,proto3" json:"checkin_time,omitempty"`
	AppNo        string `protobuf:"bytes,9,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	UserUid      uint32 `protobuf:"varint,10,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	UserUidName  string `protobuf:"bytes,11,opt,name=user_uid_name,json=userUidName,proto3" json:"user_uid_name,omitempty"`
	UserAddress  string `protobuf:"bytes,12,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	CreateTime   uint32 `protobuf:"varint,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *CollectionCheckInInfo) Reset() {
	*x = CollectionCheckInInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCheckInInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCheckInInfo) ProtoMessage() {}

func (x *CollectionCheckInInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCheckInInfo.ProtoReflect.Descriptor instead.
func (*CollectionCheckInInfo) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{28}
}

func (x *CollectionCheckInInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CollectionCheckInInfo) GetCollectionId() uint32 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *CollectionCheckInInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *CollectionCheckInInfo) GetCheckinScene() string {
	if x != nil {
		return x.CheckinScene
	}
	return ""
}

func (x *CollectionCheckInInfo) GetCheckinTime() uint32 {
	if x != nil {
		return x.CheckinTime
	}
	return 0
}

func (x *CollectionCheckInInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *CollectionCheckInInfo) GetUserUid() uint32 {
	if x != nil {
		return x.UserUid
	}
	return 0
}

func (x *CollectionCheckInInfo) GetUserUidName() string {
	if x != nil {
		return x.UserUidName
	}
	return ""
}

func (x *CollectionCheckInInfo) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *CollectionCheckInInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CollectionClaimCreateResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// string claim_sign_address = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "藏品链上持有人用户userAddress"}];
	DidCredential           string `protobuf:"bytes,3,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential     string `protobuf:"bytes,4,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCredential string `protobuf:"bytes,5,opt,name=authorization_credential,json=authorizationCredential,proto3" json:"authorization_credential,omitempty"`
	CollectionHash          string `protobuf:"bytes,6,opt,name=collection_hash,json=collectionHash,proto3" json:"collection_hash,omitempty"`
	From                    string `protobuf:"bytes,8,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *CollectionClaimCreateResp_Data) Reset() {
	*x = CollectionClaimCreateResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionClaimCreateResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionClaimCreateResp_Data) ProtoMessage() {}

func (x *CollectionClaimCreateResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionClaimCreateResp_Data.ProtoReflect.Descriptor instead.
func (*CollectionClaimCreateResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CollectionClaimCreateResp_Data) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *CollectionClaimCreateResp_Data) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CollectionClaimCreateResp_Data) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *CollectionClaimCreateResp_Data) GetAuthorizationCredential() string {
	if x != nil {
		return x.AuthorizationCredential
	}
	return ""
}

func (x *CollectionClaimCreateResp_Data) GetCollectionHash() string {
	if x != nil {
		return x.CollectionHash
	}
	return ""
}

func (x *CollectionClaimCreateResp_Data) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type CollectionCreateResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId         uint32 `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CollectionCredential string `protobuf:"bytes,2,opt,name=collection_credential,json=collectionCredential,proto3" json:"collection_credential,omitempty"`
}

func (x *CollectionCreateResp_Data) Reset() {
	*x = CollectionCreateResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCreateResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCreateResp_Data) ProtoMessage() {}

func (x *CollectionCreateResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCreateResp_Data.ProtoReflect.Descriptor instead.
func (*CollectionCreateResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CollectionCreateResp_Data) GetCollectionId() uint32 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *CollectionCreateResp_Data) GetCollectionCredential() string {
	if x != nil {
		return x.CollectionCredential
	}
	return ""
}

type CollectionBatchCreateResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionBid uint32   `protobuf:"varint,1,opt,name=collection_bid,json=collectionBid,proto3" json:"collection_bid,omitempty"`
	CollectionId  []uint32 `protobuf:"varint,2,rep,packed,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *CollectionBatchCreateResp_Data) Reset() {
	*x = CollectionBatchCreateResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionBatchCreateResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionBatchCreateResp_Data) ProtoMessage() {}

func (x *CollectionBatchCreateResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionBatchCreateResp_Data.ProtoReflect.Descriptor instead.
func (*CollectionBatchCreateResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CollectionBatchCreateResp_Data) GetCollectionBid() uint32 {
	if x != nil {
		return x.CollectionBid
	}
	return 0
}

func (x *CollectionBatchCreateResp_Data) GetCollectionId() []uint32 {
	if x != nil {
		return x.CollectionId
	}
	return nil
}

type CollectionLightCreateResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionBid uint32   `protobuf:"varint,1,opt,name=collection_bid,json=collectionBid,proto3" json:"collection_bid,omitempty"`
	CollectionIds []uint32 `protobuf:"varint,2,rep,packed,name=collection_ids,json=collectionIds,proto3" json:"collection_ids,omitempty"`
}

func (x *CollectionLightCreateResp_Data) Reset() {
	*x = CollectionLightCreateResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionLightCreateResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionLightCreateResp_Data) ProtoMessage() {}

func (x *CollectionLightCreateResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionLightCreateResp_Data.ProtoReflect.Descriptor instead.
func (*CollectionLightCreateResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CollectionLightCreateResp_Data) GetCollectionBid() uint32 {
	if x != nil {
		return x.CollectionBid
	}
	return 0
}

func (x *CollectionLightCreateResp_Data) GetCollectionIds() []uint32 {
	if x != nil {
		return x.CollectionIds
	}
	return nil
}

type CollectionListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*CollectionInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionListResp_Data) Reset() {
	*x = CollectionListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionListResp_Data) ProtoMessage() {}

func (x *CollectionListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionListResp_Data.ProtoReflect.Descriptor instead.
func (*CollectionListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CollectionListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CollectionListResp_Data) GetData() []*CollectionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectionTransactionResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId         uint32 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TransactionCredential string `protobuf:"bytes,2,opt,name=transaction_credential,json=transactionCredential,proto3" json:"transaction_credential,omitempty"`
}

func (x *CollectionTransactionResp_Data) Reset() {
	*x = CollectionTransactionResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTransactionResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTransactionResp_Data) ProtoMessage() {}

func (x *CollectionTransactionResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTransactionResp_Data.ProtoReflect.Descriptor instead.
func (*CollectionTransactionResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CollectionTransactionResp_Data) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *CollectionTransactionResp_Data) GetTransactionCredential() string {
	if x != nil {
		return x.TransactionCredential
	}
	return ""
}

type CollectionLightTransactionResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionBid uint32   `protobuf:"varint,1,opt,name=transaction_bid,json=transactionBid,proto3" json:"transaction_bid,omitempty"`
	TransactionIds []uint32 `protobuf:"varint,2,rep,packed,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
}

func (x *CollectionLightTransactionResp_Data) Reset() {
	*x = CollectionLightTransactionResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionLightTransactionResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionLightTransactionResp_Data) ProtoMessage() {}

func (x *CollectionLightTransactionResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionLightTransactionResp_Data.ProtoReflect.Descriptor instead.
func (*CollectionLightTransactionResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CollectionLightTransactionResp_Data) GetTransactionBid() uint32 {
	if x != nil {
		return x.TransactionBid
	}
	return 0
}

func (x *CollectionLightTransactionResp_Data) GetTransactionIds() []uint32 {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

type CollectionTransactionClaimResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string claim_sign_address = 2 [(google.api.field_behavior) = REQUIRED,(validate.rules).string = {min_len: 1},(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "藏品链上持有人用户userAddress"}];
	DidCredential                 string `protobuf:"bytes,3,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential           string `protobuf:"bytes,4,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCredential       string `protobuf:"bytes,5,opt,name=authorization_credential,json=authorizationCredential,proto3" json:"authorization_credential,omitempty"`
	CollectionCredential          string `protobuf:"bytes,6,opt,name=collection_credential,json=collectionCredential,proto3" json:"collection_credential,omitempty"`
	PreviousTransactionCredential string `protobuf:"bytes,7,opt,name=previous_transaction_credential,json=previousTransactionCredential,proto3" json:"previous_transaction_credential,omitempty"`
	CollectionHash                string `protobuf:"bytes,8,opt,name=collection_hash,json=collectionHash,proto3" json:"collection_hash,omitempty"`
	TokenId                       string `protobuf:"bytes,9,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	From                          string `protobuf:"bytes,10,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *CollectionTransactionClaimResp_Data) Reset() {
	*x = CollectionTransactionClaimResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTransactionClaimResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTransactionClaimResp_Data) ProtoMessage() {}

func (x *CollectionTransactionClaimResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTransactionClaimResp_Data.ProtoReflect.Descriptor instead.
func (*CollectionTransactionClaimResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{23, 0}
}

func (x *CollectionTransactionClaimResp_Data) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CollectionTransactionClaimResp_Data) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *CollectionTransactionClaimResp_Data) GetAuthorizationCredential() string {
	if x != nil {
		return x.AuthorizationCredential
	}
	return ""
}

func (x *CollectionTransactionClaimResp_Data) GetCollectionCredential() string {
	if x != nil {
		return x.CollectionCredential
	}
	return ""
}

func (x *CollectionTransactionClaimResp_Data) GetPreviousTransactionCredential() string {
	if x != nil {
		return x.PreviousTransactionCredential
	}
	return ""
}

func (x *CollectionTransactionClaimResp_Data) GetCollectionHash() string {
	if x != nil {
		return x.CollectionHash
	}
	return ""
}

func (x *CollectionTransactionClaimResp_Data) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *CollectionTransactionClaimResp_Data) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type CollectionCheckInResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CollectionCheckInResp_Data) Reset() {
	*x = CollectionCheckInResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCheckInResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCheckInResp_Data) ProtoMessage() {}

func (x *CollectionCheckInResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCheckInResp_Data.ProtoReflect.Descriptor instead.
func (*CollectionCheckInResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{25, 0}
}

func (x *CollectionCheckInResp_Data) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CollectionCheckInListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*CollectionCheckInInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CollectionCheckInListResp_Data) Reset() {
	*x = CollectionCheckInListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_collection_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCheckInListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCheckInListResp_Data) ProtoMessage() {}

func (x *CollectionCheckInListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_collection_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCheckInListResp_Data.ProtoReflect.Descriptor instead.
func (*CollectionCheckInListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_collection_proto_rawDescGZIP(), []int{27, 0}
}

func (x *CollectionCheckInListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CollectionCheckInListResp_Data) GetData() []*CollectionCheckInInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pb_dassetpb_collection_proto protoreflect.FileDescriptor

var file_pb_dassetpb_collection_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x38, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x12, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0xe7, 0xa0, 0x81, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8,
	0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x23,
	0x32, 0x21, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0x32,
	0x30, 0x32, 0x32, 0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x20, 0x31, 0x30, 0x3a, 0x30, 0x30, 0x3a,
	0x30, 0x30, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa5, 0x05, 0x0a, 0x19, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x44,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x9b, 0x04, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0e,
	0x64, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x90, 0x88, 0xe7, 0xba,
	0xa6, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd,
	0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x0d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x7f, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83,
	0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe8, 0xba, 0xab, 0xe4,
	0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x28, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe7,
	0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe8, 0x8b, 0xb1, 0xe6, 0x96,
	0x87, 0xe5, 0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x27, 0x3b, 0x27,
	0x29, 0x52, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6,
	0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x17, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73,
	0x92, 0x41, 0x70, 0x32, 0x6e, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe3, 0x80, 0x81, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89,
	0xe4, 0xba, 0xba, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe5, 0x92,
	0x8c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x8c, 0x89,
	0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0xe6, 0x8b, 0xbc, 0xe6, 0x88, 0x90, 0xe4, 0xb8, 0x80, 0xe4,
	0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0x89, 0x80, 0xe5, 0x81,
	0x9a, 0xe7, 0x9a, 0x84, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0xe5, 0x93, 0x88,
	0xe5, 0xb8, 0x8c, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4, 0xba,
	0xba, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x22, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x09, 0x32,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8,
	0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x22, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x69, 0x64, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xba, 0xa4, 0xe6,
	0x98, 0x93, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x96, 0x05, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x63, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69,
	0x64, 0x28, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xa0, 0x81, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe6,
	0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0x29, 0x52, 0x0f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x67, 0x0a,
	0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xa0, 0x81, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69,
	0x64, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xa0, 0x81,
	0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe4, 0xb8, 0x80, 0xe4,
	0xb8, 0xaa, 0x29, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe4, 0xbb, 0xb7, 0xe6,
	0xa0, 0xbc, 0x28, 0xe5, 0x88, 0x86, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28,
	0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20,
	0x32, 0x1e, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x86,
	0x85, 0xe5, 0xae, 0xb9, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0x75, 0x72, 0x6c,
	0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x49, 0x0a, 0x0f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a,
	0xe5, 0x8f, 0xaf, 0xe5, 0x85, 0x91, 0xe7, 0x8e, 0xb0, 0xe6, 0x80, 0xbb, 0xe6, 0xac, 0xa1, 0xe6,
	0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0x97,
	0x8f, 0xe5, 0x93, 0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x51, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xe5, 0xbc, 0x82, 0xe6, 0xad,
	0xa5, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0x88,
	0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe7,
	0x9a, 0x84, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x55, 0x72, 0x6c, 0x12, 0x44, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe4,
	0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0x28, 0x6a, 0x73, 0x6f, 0x6e,
	0x29, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x22, 0xc4, 0x06, 0x0a, 0x0f, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4a, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x95, 0xb0,
	0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x64, 0x69, 0x64,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe6, 0x8c,
	0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad, 0x98,
	0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x64,
	0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x89, 0x01, 0x0a,
	0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x49,
	0x32, 0x47, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xad,
	0x98, 0xe8, 0xaf, 0x81, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81,
	0x28, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0,
	0xe6, 0x98, 0x8e, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe5,
	0x88, 0x86, 0xe5, 0x89, 0xb2, 0x27, 0x3b, 0x27, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x9f, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x76, 0x92, 0x41, 0x70, 0x32,
	0x6e, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xe3, 0x80, 0x81, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe4,
	0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe5, 0x92, 0x8c, 0xe5, 0xa3, 0xb0,
	0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x8c, 0x89, 0xe9, 0xa1, 0xba, 0xe5,
	0xba, 0x8f, 0xe6, 0x8b, 0xbc, 0xe6, 0x88, 0x90, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0xad,
	0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0x89, 0x80, 0xe5, 0x81, 0x9a, 0xe7, 0x9a, 0x84,
	0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0xe5, 0x93, 0x88, 0xe5, 0xb8, 0x8c, 0xe0,
	0x41, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x09, 0x32, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x16, 0x32, 0x14, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4, 0xba, 0xba, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92,
	0x41, 0x23, 0x32, 0x21, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x28, 0x32, 0x30, 0x32, 0x32, 0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x20, 0x31, 0x30, 0x3a, 0x30,
	0x30, 0x3a, 0x30, 0x30, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8,
	0xa1, 0x8c, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1,
	0x9e, 0xe6, 0x80, 0xa7, 0x29, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x82, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x82, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x69, 0x64, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52,
	0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xd0, 0x03, 0x0a, 0x18, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x63, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x92, 0x41,
	0x35, 0x32, 0x33, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0x28, 0xe6, 0x8e, 0x88, 0xe6,
	0x9d, 0x83, 0x69, 0x64, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe7, 0xa0, 0x81, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe4,
	0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0x29, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe7, 0xa0, 0x81, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0xe6, 0x88, 0x96, 0xe8, 0x80,
	0x85, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xa0, 0x81, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb,
	0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0x29, 0x52, 0x11, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f,
	0xe5, 0x93, 0x81, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x51, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5,
	0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe7, 0x9a,
	0x84, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x44, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe4, 0xb8,
	0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x29,
	0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x28, 0xe5, 0x88,
	0x86, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe8, 0xae, 0xbf,
	0xe9, 0x97, 0xae, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe5,
	0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0x75, 0x72, 0x6c, 0x52, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x49, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20,
	0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0x8f, 0xaf, 0xe5, 0x85,
	0x91, 0xe7, 0x8e, 0xb0, 0xe6, 0x80, 0xbb, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02,
	0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x59, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0xff, 0x01, 0x0a, 0x19,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x76, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0x69, 0x64, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x69, 0x64, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x80, 0x02,
	0x0a, 0x18, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x14, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f,
	0x32, 0x2d, 0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe7, 0x9a, 0x84, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0x52,
	0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x44, 0x0a, 0x0b, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0x9b, 0x9e, 0xe8,
	0xb0, 0x83, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x29, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x73,
	0x22, 0x9c, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92,
	0x41, 0x14, 0x32, 0x12, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x28, 0xe5, 0x88, 0x86,
	0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe8, 0xae, 0xbf, 0xe9,
	0x97, 0xae, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe5, 0xaf,
	0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0x75, 0x72, 0x6c, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x49, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92,
	0x41, 0x1a, 0x32, 0x18, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0x8f, 0xaf, 0xe5, 0x85, 0x91,
	0xe7, 0x8e, 0xb0, 0xe6, 0x80, 0xbb, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52,
	0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22,
	0x81, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x78, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0x69, 0x64, 0x52, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0x69, 0x64, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x22, 0x8e, 0x05, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x0f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x68,
	0x61, 0x73, 0x68, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xa0, 0x81, 0x52,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e,
	0x32, 0x1c, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4, 0xba,
	0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e,
	0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x49,
	0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x30, 0xe6, 0x8c, 0x81,
	0xe6, 0x9c, 0x89, 0x31, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12,
	0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92,
	0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d,
	0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x52, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xc3, 0x0c, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x69, 0x64, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x68, 0x61, 0x73,
	0x68, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x3d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xa0, 0x81, 0x52, 0x11, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x32, 0x06, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4, 0xba, 0xba, 0x75, 0x69, 0x64, 0x52, 0x0a,
	0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x10, 0x63, 0x61,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe9, 0x93, 0xb8, 0xe9, 0x80,
	0xa0, 0xe4, 0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x55, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x61,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0,
	0xe4, 0xba, 0xba, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x32, 0x0f, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba,
	0x75, 0x69, 0x64, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a,
	0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe6,
	0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0c,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0d,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89,
	0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89,
	0xe4, 0xba, 0xba, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe6,
	0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x32, 0x15, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0xb7, 0xb2, 0xe5, 0x85, 0x91, 0xe7,
	0x8e, 0xb0, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24,
	0x32, 0x22, 0xe9, 0x94, 0x80, 0xe5, 0x94, 0xae, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc,
	0x9a, 0x31, 0x2d, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xb8,
	0x8b, 0xe6, 0x9e, 0xb6, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b,
	0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x6f, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4,
	0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d,
	0xe5, 0xbe, 0x85, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7,
	0xb2, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9,
	0x93, 0xbe, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe4, 0xb8,
	0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f, 0xe7, 0x9a, 0x84, 0xe9, 0x93, 0xbe,
	0xe4, 0xb8, 0x8a, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x12, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe4, 0xb8, 0x8a,
	0xe9, 0x93, 0xbe, 0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5,
	0x9c, 0xa8, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe7, 0x9a, 0x84, 0xe5, 0x8c, 0xba, 0xe5, 0x9d,
	0x97, 0xe5, 0x8f, 0xb7, 0x52, 0x10, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe5, 0x85,
	0x91, 0xe7, 0x8e, 0xb0, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x42, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x32, 0x1e, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe6,
	0xad, 0xa4, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe7, 0x9a, 0x84, 0xe5, 0x9c, 0xba, 0xe6, 0x99,
	0xaf, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5,
	0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x18, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x69, 0x64, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x51, 0x0a, 0x0a, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5, 0xe9, 0x80, 0x9a, 0xe7,
	0x9f, 0xa5, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99,
	0xbb, 0xe8, 0xae, 0xb0, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe7, 0x9a, 0x84, 0xe9, 0x93, 0xbe,
	0xe6, 0x8e, 0xa5, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x44,
	0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe,
	0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x29, 0xe6, 0x89, 0xa9, 0xe5,
	0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4f, 0x70, 0x74, 0x73, 0x22, 0xb4, 0x08, 0x0a, 0x1a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x51, 0x0a, 0x0e, 0x64, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x90,
	0x88, 0xe7, 0xba, 0xa6, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab,
	0xe4, 0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x56, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd,
	0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x28, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe7, 0x89, 0x88,
	0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5,
	0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x27, 0x3b, 0x27, 0x29, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x56,
	0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98,
	0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x17, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0xad,
	0x98, 0xe8, 0xaf, 0x81, 0x52, 0x1d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92,
	0x41, 0x70, 0x32, 0x6e, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe3, 0x80, 0x81, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4,
	0xba, 0xba, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe5, 0x92, 0x8c,
	0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x8c, 0x89, 0xe9,
	0xa1, 0xba, 0xe5, 0xba, 0x8f, 0xe6, 0x8b, 0xbc, 0xe6, 0x88, 0x90, 0xe4, 0xb8, 0x80, 0xe4, 0xb8,
	0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0x89, 0x80, 0xe5, 0x81, 0x9a,
	0xe7, 0x9a, 0x84, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0xe5, 0x93, 0x88, 0xe5,
	0xb8, 0x8c, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x19, 0x32, 0x17, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe4,
	0xba, 0xba, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x16, 0x32, 0x14,
	0xe5, 0x8f, 0x97, 0xe8, 0xae, 0xa9, 0xe4, 0xba, 0xba, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5,
	0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0x32, 0x30, 0x32, 0x32,
	0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x20, 0x31, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x29,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32,
	0x2f, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x29,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x19,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x86, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0x69, 0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xba, 0xa4, 0xe6, 0x98,
	0x93, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x90,
	0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x56, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41,
	0x2f, 0x32, 0x2d, 0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae,
	0xb0, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe7, 0x9a, 0x84, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5,
	0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x44, 0x0a, 0x0b, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0x9b, 0x9e,
	0xe8, 0xb0, 0x83, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x29, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74,
	0x73, 0x22, 0xbf, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0x92, 0x41, 0x19, 0x32, 0x17, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83,
	0xe4, 0xba, 0xba, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x33,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x16, 0x32,
	0x14, 0xe5, 0x8f, 0x97, 0xe8, 0xae, 0xa9, 0xe4, 0xba, 0xba, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x02, 0x74, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x49, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x7c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3c, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe6,
	0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x69, 0x64, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0x69, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x1d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92,
	0x41, 0x0a, 0x32, 0x08, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x69, 0x64, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x92, 0x07, 0x0a, 0x1e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xfe, 0x05, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51,
	0x0a, 0x0e, 0x64, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x90, 0x88,
	0xe7, 0xba, 0xa6, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4,
	0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x56, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0,
	0xe6, 0x98, 0x8e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0x28, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x88,
	0x86, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x27, 0x3b, 0x27, 0x29, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x56, 0x0a,
	0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8,
	0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x17, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x63, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0xad, 0x98,
	0xe8, 0xaf, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x1d, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x9c, 0x01, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70, 0x32, 0x6e, 0xe6, 0x95, 0xb0,
	0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe3,
	0x80, 0x81, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe4, 0xba, 0xba, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe5, 0x92, 0x8c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x8c, 0x89, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0xe6, 0x8b,
	0xbc, 0xe6, 0x88, 0x90, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0xe4, 0xb8, 0xb2, 0xe6, 0x89, 0x80, 0xe5, 0x81, 0x9a, 0xe7, 0x9a, 0x84, 0x4b, 0x65, 0x63, 0x63,
	0x61, 0x6b, 0x32, 0x35, 0x36, 0xe5, 0x93, 0x88, 0xe5, 0xb8, 0x8c, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92,
	0x41, 0x0f, 0x32, 0x0d, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x19, 0x32, 0x17, 0xe6,
	0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0xaf, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0x97, 0x8f,
	0xe5, 0x93, 0x81, 0x69, 0x64, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85, 0x91, 0xe6, 0x8d,
	0xa2, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x51, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5,
	0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe7, 0x9a,
	0x84, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x44, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe4, 0xb8,
	0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x29,
	0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x25, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xa9, 0x04, 0x0a, 0x18, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x32,
	0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0x69, 0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0x52, 0x0c, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0x85, 0x91,
	0xe6, 0x8d, 0xa2, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x10,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x51, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32,
	0x22, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0xa7, 0x20, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26,
	0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29,
	0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7,
	0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5,
	0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xe2, 0x01,
	0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x59, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xfc, 0x03, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5,
	0x85, 0x91, 0xe6, 0x8d, 0xa2, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x69,
	0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0xe5, 0x9c, 0xba,
	0xe6, 0x99, 0xaf, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85,
	0x91, 0xe6, 0x8d, 0xa2, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85,
	0x91, 0xe6, 0x8d, 0xa2, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e,
	0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2,
	0xe4, 0xba, 0xba, 0x75, 0x69, 0x64, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x35, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85, 0x91,
	0xe6, 0x8d, 0xa2, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x32, 0x0d, 0xe5, 0x85, 0x91, 0xe6, 0x8d, 0xa2, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x16, 0x5a, 0x14, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x3b, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pb_dassetpb_collection_proto_rawDescOnce sync.Once
	file_pb_dassetpb_collection_proto_rawDescData = file_pb_dassetpb_collection_proto_rawDesc
)

func file_pb_dassetpb_collection_proto_rawDescGZIP() []byte {
	file_pb_dassetpb_collection_proto_rawDescOnce.Do(func() {
		file_pb_dassetpb_collection_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_dassetpb_collection_proto_rawDescData)
	})
	return file_pb_dassetpb_collection_proto_rawDescData
}

var file_pb_dassetpb_collection_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_pb_dassetpb_collection_proto_goTypes = []interface{}{
	(*CollectionClaimCreateReq)(nil),            // 0: daop.pb.dassetpb.CollectionClaimCreateReq
	(*CollectionClaimCreateResp)(nil),           // 1: daop.pb.dassetpb.CollectionClaimCreateResp
	(*CollectionTokenReq)(nil),                  // 2: daop.pb.dassetpb.CollectionTokenReq
	(*CollectionTokenResp)(nil),                 // 3: daop.pb.dassetpb.CollectionTokenResp
	(*CollectionCreateReq)(nil),                 // 4: daop.pb.dassetpb.CollectionCreateReq
	(*CollectionClaim)(nil),                     // 5: daop.pb.dassetpb.CollectionClaim
	(*CollectionCreateResp)(nil),                // 6: daop.pb.dassetpb.CollectionCreateResp
	(*CollectionBatchCreateReq)(nil),            // 7: daop.pb.dassetpb.CollectionBatchCreateReq
	(*CollectionCreateInfo)(nil),                // 8: daop.pb.dassetpb.CollectionCreateInfo
	(*CollectionBatchCreateResp)(nil),           // 9: daop.pb.dassetpb.CollectionBatchCreateResp
	(*CollectionLightCreateReq)(nil),            // 10: daop.pb.dassetpb.CollectionLightCreateReq
	(*CollectionLight)(nil),                     // 11: daop.pb.dassetpb.CollectionLight
	(*CollectionLightCreateResp)(nil),           // 12: daop.pb.dassetpb.CollectionLightCreateResp
	(*CollectionListReq)(nil),                   // 13: daop.pb.dassetpb.CollectionListReq
	(*CollectionListResp)(nil),                  // 14: daop.pb.dassetpb.CollectionListResp
	(*CollectionInfo)(nil),                      // 15: daop.pb.dassetpb.CollectionInfo
	(*CollectionTransactionReq)(nil),            // 16: daop.pb.dassetpb.CollectionTransactionReq
	(*CollectionTransactionClaim)(nil),          // 17: daop.pb.dassetpb.CollectionTransactionClaim
	(*CollectionTransactionResp)(nil),           // 18: daop.pb.dassetpb.CollectionTransactionResp
	(*CollectionLightTransactionReq)(nil),       // 19: daop.pb.dassetpb.CollectionLightTransactionReq
	(*CollectionLightTransaction)(nil),          // 20: daop.pb.dassetpb.CollectionLightTransaction
	(*CollectionLightTransactionResp)(nil),      // 21: daop.pb.dassetpb.CollectionLightTransactionResp
	(*CollectionTransactionClaimReq)(nil),       // 22: daop.pb.dassetpb.CollectionTransactionClaimReq
	(*CollectionTransactionClaimResp)(nil),      // 23: daop.pb.dassetpb.CollectionTransactionClaimResp
	(*CollectionCheckInReq)(nil),                // 24: daop.pb.dassetpb.CollectionCheckInReq
	(*CollectionCheckInResp)(nil),               // 25: daop.pb.dassetpb.CollectionCheckInResp
	(*CollectionCheckInListReq)(nil),            // 26: daop.pb.dassetpb.CollectionCheckInListReq
	(*CollectionCheckInListResp)(nil),           // 27: daop.pb.dassetpb.CollectionCheckInListResp
	(*CollectionCheckInInfo)(nil),               // 28: daop.pb.dassetpb.CollectionCheckInInfo
	(*CollectionClaimCreateResp_Data)(nil),      // 29: daop.pb.dassetpb.CollectionClaimCreateResp.Data
	(*CollectionCreateResp_Data)(nil),           // 30: daop.pb.dassetpb.CollectionCreateResp.Data
	(*CollectionBatchCreateResp_Data)(nil),      // 31: daop.pb.dassetpb.CollectionBatchCreateResp.Data
	(*CollectionLightCreateResp_Data)(nil),      // 32: daop.pb.dassetpb.CollectionLightCreateResp.Data
	(*CollectionListResp_Data)(nil),             // 33: daop.pb.dassetpb.CollectionListResp.Data
	(*CollectionTransactionResp_Data)(nil),      // 34: daop.pb.dassetpb.CollectionTransactionResp.Data
	(*CollectionLightTransactionResp_Data)(nil), // 35: daop.pb.dassetpb.CollectionLightTransactionResp.Data
	(*CollectionTransactionClaimResp_Data)(nil), // 36: daop.pb.dassetpb.CollectionTransactionClaimResp.Data
	(*CollectionCheckInResp_Data)(nil),          // 37: daop.pb.dassetpb.CollectionCheckInResp.Data
	(*CollectionCheckInListResp_Data)(nil),      // 38: daop.pb.dassetpb.CollectionCheckInListResp.Data
}
var file_pb_dassetpb_collection_proto_depIdxs = []int32{
	29, // 0: daop.pb.dassetpb.CollectionClaimCreateResp.data:type_name -> daop.pb.dassetpb.CollectionClaimCreateResp.Data
	5,  // 1: daop.pb.dassetpb.CollectionCreateReq.claim:type_name -> daop.pb.dassetpb.CollectionClaim
	30, // 2: daop.pb.dassetpb.CollectionCreateResp.data:type_name -> daop.pb.dassetpb.CollectionCreateResp.Data
	8,  // 3: daop.pb.dassetpb.CollectionBatchCreateReq.data:type_name -> daop.pb.dassetpb.CollectionCreateInfo
	5,  // 4: daop.pb.dassetpb.CollectionCreateInfo.claim:type_name -> daop.pb.dassetpb.CollectionClaim
	31, // 5: daop.pb.dassetpb.CollectionBatchCreateResp.data:type_name -> daop.pb.dassetpb.CollectionBatchCreateResp.Data
	11, // 6: daop.pb.dassetpb.CollectionLightCreateReq.data:type_name -> daop.pb.dassetpb.CollectionLight
	32, // 7: daop.pb.dassetpb.CollectionLightCreateResp.data:type_name -> daop.pb.dassetpb.CollectionLightCreateResp.Data
	33, // 8: daop.pb.dassetpb.CollectionListResp.data:type_name -> daop.pb.dassetpb.CollectionListResp.Data
	17, // 9: daop.pb.dassetpb.CollectionTransactionReq.claim:type_name -> daop.pb.dassetpb.CollectionTransactionClaim
	34, // 10: daop.pb.dassetpb.CollectionTransactionResp.data:type_name -> daop.pb.dassetpb.CollectionTransactionResp.Data
	20, // 11: daop.pb.dassetpb.CollectionLightTransactionReq.data:type_name -> daop.pb.dassetpb.CollectionLightTransaction
	35, // 12: daop.pb.dassetpb.CollectionLightTransactionResp.data:type_name -> daop.pb.dassetpb.CollectionLightTransactionResp.Data
	36, // 13: daop.pb.dassetpb.CollectionTransactionClaimResp.data:type_name -> daop.pb.dassetpb.CollectionTransactionClaimResp.Data
	37, // 14: daop.pb.dassetpb.CollectionCheckInResp.data:type_name -> daop.pb.dassetpb.CollectionCheckInResp.Data
	38, // 15: daop.pb.dassetpb.CollectionCheckInListResp.data:type_name -> daop.pb.dassetpb.CollectionCheckInListResp.Data
	15, // 16: daop.pb.dassetpb.CollectionListResp.Data.data:type_name -> daop.pb.dassetpb.CollectionInfo
	28, // 17: daop.pb.dassetpb.CollectionCheckInListResp.Data.data:type_name -> daop.pb.dassetpb.CollectionCheckInInfo
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_pb_dassetpb_collection_proto_init() }
func file_pb_dassetpb_collection_proto_init() {
	if File_pb_dassetpb_collection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_dassetpb_collection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionClaimCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionClaimCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionBatchCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCreateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionBatchCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionLightCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionLightCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTransactionClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTransactionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionLightTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionLightTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionLightTransactionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTransactionClaimReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTransactionClaimResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCheckInReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCheckInResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCheckInListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCheckInListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCheckInInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionClaimCreateResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCreateResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionBatchCreateResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionLightCreateResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTransactionResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionLightTransactionResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionTransactionClaimResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCheckInResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_collection_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCheckInListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_dassetpb_collection_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_dassetpb_collection_proto_goTypes,
		DependencyIndexes: file_pb_dassetpb_collection_proto_depIdxs,
		MessageInfos:      file_pb_dassetpb_collection_proto_msgTypes,
	}.Build()
	File_pb_dassetpb_collection_proto = out.File
	file_pb_dassetpb_collection_proto_rawDesc = nil
	file_pb_dassetpb_collection_proto_goTypes = nil
	file_pb_dassetpb_collection_proto_depIdxs = nil
}
