// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/dassetpb/dasset.proto

package dassetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DAssetService_CollectionClaimCreate_FullMethodName          = "/daop.pb.dassetpb.DAssetService/CollectionClaimCreate"
	DAssetService_CollectionCreate_FullMethodName               = "/daop.pb.dassetpb.DAssetService/CollectionCreate"
	DAssetService_CollectionCreateNew_FullMethodName            = "/daop.pb.dassetpb.DAssetService/CollectionCreateNew"
	DAssetService_CollectionToken_FullMethodName                = "/daop.pb.dassetpb.DAssetService/CollectionToken"
	DAssetService_CollectionBatchCreate_FullMethodName          = "/daop.pb.dassetpb.DAssetService/CollectionBatchCreate"
	DAssetService_CollectionLightCreate_FullMethodName          = "/daop.pb.dassetpb.DAssetService/CollectionLightCreate"
	DAssetService_CollectionLightCreateNew_FullMethodName       = "/daop.pb.dassetpb.DAssetService/CollectionLightCreateNew"
	DAssetService_CollectionList_FullMethodName                 = "/daop.pb.dassetpb.DAssetService/CollectionList"
	DAssetService_CollectionListNew_FullMethodName              = "/daop.pb.dassetpb.DAssetService/CollectionListNew"
	DAssetService_CollectionTransactionClaim_FullMethodName     = "/daop.pb.dassetpb.DAssetService/CollectionTransactionClaim"
	DAssetService_CollectionTransaction_FullMethodName          = "/daop.pb.dassetpb.DAssetService/CollectionTransaction"
	DAssetService_CollectionTransactionNew_FullMethodName       = "/daop.pb.dassetpb.DAssetService/CollectionTransactionNew"
	DAssetService_CollectionLightTransaction_FullMethodName     = "/daop.pb.dassetpb.DAssetService/CollectionLightTransaction"
	DAssetService_CollectionLightTransactionNew_FullMethodName  = "/daop.pb.dassetpb.DAssetService/CollectionLightTransactionNew"
	DAssetService_CollectionCheckIn_FullMethodName              = "/daop.pb.dassetpb.DAssetService/CollectionCheckIn"
	DAssetService_CollectionCheckInList_FullMethodName          = "/daop.pb.dassetpb.DAssetService/CollectionCheckInList"
	DAssetService_ContractAuthorization_FullMethodName          = "/daop.pb.dassetpb.DAssetService/ContractAuthorization"
	DAssetService_ContractAuthorizationNew_FullMethodName       = "/daop.pb.dassetpb.DAssetService/ContractAuthorizationNew"
	DAssetService_ContractCreate_FullMethodName                 = "/daop.pb.dassetpb.DAssetService/ContractCreate"
	DAssetService_ContractCreateNew_FullMethodName              = "/daop.pb.dassetpb.DAssetService/ContractCreateNew"
	DAssetService_ContractList_FullMethodName                   = "/daop.pb.dassetpb.DAssetService/ContractList"
	DAssetService_ContractListNew_FullMethodName                = "/daop.pb.dassetpb.DAssetService/ContractListNew"
	DAssetService_ClaimProof_FullMethodName                     = "/daop.pb.dassetpb.DAssetService/ClaimProof"
	DAssetService_DidCredential_FullMethodName                  = "/daop.pb.dassetpb.DAssetService/DidCredential"
	DAssetService_CopyrightRegister_FullMethodName              = "/daop.pb.dassetpb.DAssetService/CopyrightRegister"
	DAssetService_CopyrightRegisterNew_FullMethodName           = "/daop.pb.dassetpb.DAssetService/CopyrightRegisterNew"
	DAssetService_CopyrightClaimAuthorization_FullMethodName    = "/daop.pb.dassetpb.DAssetService/CopyrightClaimAuthorization"
	DAssetService_CopyrightClaimAuthorizationNew_FullMethodName = "/daop.pb.dassetpb.DAssetService/CopyrightClaimAuthorizationNew"
	DAssetService_CopyrightClaimAdd_FullMethodName              = "/daop.pb.dassetpb.DAssetService/CopyrightClaimAdd"
	DAssetService_CopyrightClaimAddNew_FullMethodName           = "/daop.pb.dassetpb.DAssetService/CopyrightClaimAddNew"
	DAssetService_CopyrightClaimEdit_FullMethodName             = "/daop.pb.dassetpb.DAssetService/CopyrightClaimEdit"
	DAssetService_CopyrightClaimCheck_FullMethodName            = "/daop.pb.dassetpb.DAssetService/CopyrightClaimCheck"
	DAssetService_CredentialInfo_FullMethodName                 = "/daop.pb.dassetpb.DAssetService/CredentialInfo"
	DAssetService_CredentialList_FullMethodName                 = "/daop.pb.dassetpb.DAssetService/CredentialList"
	DAssetService_CopyrightRegisterList_FullMethodName          = "/daop.pb.dassetpb.DAssetService/CopyrightRegisterList"
	DAssetService_CopyrightRegisterListNew_FullMethodName       = "/daop.pb.dassetpb.DAssetService/CopyrightRegisterListNew"
	DAssetService_CopyrightAuthorizationList_FullMethodName     = "/daop.pb.dassetpb.DAssetService/CopyrightAuthorizationList"
	DAssetService_CopyrightAuthorizationListNew_FullMethodName  = "/daop.pb.dassetpb.DAssetService/CopyrightAuthorizationListNew"
	DAssetService_AuthorizationClaimList_FullMethodName         = "/daop.pb.dassetpb.DAssetService/AuthorizationClaimList"
	DAssetService_AuthorizationClaimListNew_FullMethodName      = "/daop.pb.dassetpb.DAssetService/AuthorizationClaimListNew"
	DAssetService_CopyrightClaimList_FullMethodName             = "/daop.pb.dassetpb.DAssetService/CopyrightClaimList"
	DAssetService_CopyrightClaimListNew_FullMethodName          = "/daop.pb.dassetpb.DAssetService/CopyrightClaimListNew"
	DAssetService_CollectionAllList_FullMethodName              = "/daop.pb.dassetpb.DAssetService/CollectionAllList"
	DAssetService_CopyrightRegisterAllList_FullMethodName       = "/daop.pb.dassetpb.DAssetService/CopyrightRegisterAllList"
	DAssetService_ContractAllList_FullMethodName                = "/daop.pb.dassetpb.DAssetService/ContractAllList"
	DAssetService_CopyrightAuthorizationAllList_FullMethodName  = "/daop.pb.dassetpb.DAssetService/CopyrightAuthorizationAllList"
	DAssetService_AuthorizationClaimAllList_FullMethodName      = "/daop.pb.dassetpb.DAssetService/AuthorizationClaimAllList"
	DAssetService_CopyrightClaimAllList_FullMethodName          = "/daop.pb.dassetpb.DAssetService/CopyrightClaimAllList"
	DAssetService_CredentialAllList_FullMethodName              = "/daop.pb.dassetpb.DAssetService/CredentialAllList"
	DAssetService_CopyrightStatistics_FullMethodName            = "/daop.pb.dassetpb.DAssetService/CopyrightStatistics"
	DAssetService_Combination_FullMethodName                    = "/daop.pb.dassetpb.DAssetService/Combination"
	DAssetService_CombinationNew_FullMethodName                 = "/daop.pb.dassetpb.DAssetService/CombinationNew"
	DAssetService_Lock_FullMethodName                           = "/daop.pb.dassetpb.DAssetService/Lock"
	DAssetService_LockNew_FullMethodName                        = "/daop.pb.dassetpb.DAssetService/LockNew"
	DAssetService_Unlock_FullMethodName                         = "/daop.pb.dassetpb.DAssetService/Unlock"
	DAssetService_UnlockNew_FullMethodName                      = "/daop.pb.dassetpb.DAssetService/UnlockNew"
)

// DAssetServiceClient is the client API for DAssetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DAssetServiceClient interface {
	CollectionClaimCreate(ctx context.Context, in *CollectionClaimCreateReq, opts ...grpc.CallOption) (*CollectionClaimCreateResp, error)
	CollectionCreate(ctx context.Context, in *CollectionCreateReq, opts ...grpc.CallOption) (*CollectionCreateResp, error)
	CollectionCreateNew(ctx context.Context, in *CollectionCreateReqNew, opts ...grpc.CallOption) (*CollectionCreateResp, error)
	CollectionToken(ctx context.Context, in *CollectionTokenReq, opts ...grpc.CallOption) (*CollectionTokenResp, error)
	CollectionBatchCreate(ctx context.Context, in *CollectionBatchCreateReq, opts ...grpc.CallOption) (*CollectionBatchCreateResp, error)
	CollectionLightCreate(ctx context.Context, in *CollectionLightCreateReq, opts ...grpc.CallOption) (*CollectionLightCreateResp, error)
	CollectionLightCreateNew(ctx context.Context, in *CollectionLightCreateReqNew, opts ...grpc.CallOption) (*CollectionLightCreateResp, error)
	CollectionList(ctx context.Context, in *CollectionListReq, opts ...grpc.CallOption) (*CollectionListResp, error)
	CollectionListNew(ctx context.Context, in *CollectionListReqNew, opts ...grpc.CallOption) (*CollectionListResp, error)
	CollectionTransactionClaim(ctx context.Context, in *CollectionTransactionClaimReq, opts ...grpc.CallOption) (*CollectionTransactionClaimResp, error)
	CollectionTransaction(ctx context.Context, in *CollectionTransactionReq, opts ...grpc.CallOption) (*CollectionTransactionResp, error)
	CollectionTransactionNew(ctx context.Context, in *CollectionTransactionReqNew, opts ...grpc.CallOption) (*CollectionTransactionResp, error)
	CollectionLightTransaction(ctx context.Context, in *CollectionLightTransactionReq, opts ...grpc.CallOption) (*CollectionLightTransactionResp, error)
	CollectionLightTransactionNew(ctx context.Context, in *CollectionLightTransactionReqNew, opts ...grpc.CallOption) (*CollectionLightTransactionResp, error)
	CollectionCheckIn(ctx context.Context, in *CollectionCheckInReq, opts ...grpc.CallOption) (*CollectionCheckInResp, error)
	CollectionCheckInList(ctx context.Context, in *CollectionCheckInListReq, opts ...grpc.CallOption) (*CollectionCheckInListResp, error)
	ContractAuthorization(ctx context.Context, in *ContractAuthorizationReq, opts ...grpc.CallOption) (*ContractAuthorizationResp, error)
	ContractAuthorizationNew(ctx context.Context, in *ContractAuthorizationReqNew, opts ...grpc.CallOption) (*ContractAuthorizationResp, error)
	ContractCreate(ctx context.Context, in *ContractCreateReq, opts ...grpc.CallOption) (*ContractCreateResp, error)
	ContractCreateNew(ctx context.Context, in *ContractCreateReqNew, opts ...grpc.CallOption) (*ContractCreateResp, error)
	ContractList(ctx context.Context, in *ContractListReq, opts ...grpc.CallOption) (*ContractListResp, error)
	ContractListNew(ctx context.Context, in *ContractListReqNew, opts ...grpc.CallOption) (*ContractListResp, error)
	ClaimProof(ctx context.Context, in *ClaimProofReq, opts ...grpc.CallOption) (*ClaimProofResp, error)
	DidCredential(ctx context.Context, in *DidCredentialReq, opts ...grpc.CallOption) (*DidCredentialResp, error)
	CopyrightRegister(ctx context.Context, in *CopyrightRegisterReq, opts ...grpc.CallOption) (*CopyrightRegisterResp, error)
	CopyrightRegisterNew(ctx context.Context, in *CopyrightRegisterReqNew, opts ...grpc.CallOption) (*CopyrightRegisterResp, error)
	CopyrightClaimAuthorization(ctx context.Context, in *CopyrightClaimAuthorizationReq, opts ...grpc.CallOption) (*CopyrightClaimAuthorizationResp, error)
	CopyrightClaimAuthorizationNew(ctx context.Context, in *CopyrightClaimAuthorizationReqNew, opts ...grpc.CallOption) (*CopyrightClaimAuthorizationResp, error)
	// todo待开发
	//
	//	rpc CopyrightMint(CopyrightMintReq) returns (CopyrightMintResp) {
	//	  option (google.api.http) = {
	//	    post: "/dasset/copyright/mint"
	//	    body:"*"
	//	  };
	//	  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	//	    summary: "版权/声明/授权/铸造"
	//	  };
	//	}
	CopyrightClaimAdd(ctx context.Context, in *CopyrightClaimAddReq, opts ...grpc.CallOption) (*CopyrightRegisterResp, error)
	CopyrightClaimAddNew(ctx context.Context, in *CopyrightClaimAddReqNew, opts ...grpc.CallOption) (*CopyrightRegisterResp, error)
	CopyrightClaimEdit(ctx context.Context, in *CopyrightClaimEditReq, opts ...grpc.CallOption) (*CopyrightRegisterResp, error)
	CopyrightClaimCheck(ctx context.Context, in *CopyrightClaimCheckReq, opts ...grpc.CallOption) (*DidCredentialResp, error)
	CredentialInfo(ctx context.Context, in *CredentialInfoReq, opts ...grpc.CallOption) (*CredentialInfoResp, error)
	CredentialList(ctx context.Context, in *CredentialListReq, opts ...grpc.CallOption) (*CredentialListResp, error)
	CopyrightRegisterList(ctx context.Context, in *CopyrightRegisterListReq, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error)
	CopyrightRegisterListNew(ctx context.Context, in *CopyrightRegisterListReqNew, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error)
	CopyrightAuthorizationList(ctx context.Context, in *CopyrightAuthorizationListReq, opts ...grpc.CallOption) (*CopyrightAuthorizationListResp, error)
	CopyrightAuthorizationListNew(ctx context.Context, in *CopyrightAuthorizationListReqNew, opts ...grpc.CallOption) (*CopyrightAuthorizationListResp, error)
	AuthorizationClaimList(ctx context.Context, in *AuthorizationClaimListReq, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error)
	AuthorizationClaimListNew(ctx context.Context, in *AuthorizationClaimListReqNew, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error)
	CopyrightClaimList(ctx context.Context, in *CopyrightClaimListReq, opts ...grpc.CallOption) (*CopyrightClaimListResp, error)
	CopyrightClaimListNew(ctx context.Context, in *CopyrightClaimListReqNew, opts ...grpc.CallOption) (*CopyrightClaimListResp, error)
	CollectionAllList(ctx context.Context, in *CollectionListReq, opts ...grpc.CallOption) (*CollectionListResp, error)
	CopyrightRegisterAllList(ctx context.Context, in *CopyrightRegisterListReq, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error)
	ContractAllList(ctx context.Context, in *ContractListReq, opts ...grpc.CallOption) (*ContractListResp, error)
	CopyrightAuthorizationAllList(ctx context.Context, in *CopyrightAuthorizationListReq, opts ...grpc.CallOption) (*CopyrightAuthorizationListResp, error)
	AuthorizationClaimAllList(ctx context.Context, in *AuthorizationClaimListReq, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error)
	CopyrightClaimAllList(ctx context.Context, in *CopyrightClaimListReq, opts ...grpc.CallOption) (*CopyrightClaimListResp, error)
	CredentialAllList(ctx context.Context, in *CredentialListReq, opts ...grpc.CallOption) (*CredentialListResp, error)
	CopyrightStatistics(ctx context.Context, in *CopyrightStatisticsReq, opts ...grpc.CallOption) (*CopyrightStatisticsResp, error)
	Combination(ctx context.Context, in *CombinationReq, opts ...grpc.CallOption) (*CombinationResp, error)
	CombinationNew(ctx context.Context, in *CombinationReqNew, opts ...grpc.CallOption) (*CombinationResp, error)
	Lock(ctx context.Context, in *LockReq, opts ...grpc.CallOption) (*LockResp, error)
	LockNew(ctx context.Context, in *LockReqNew, opts ...grpc.CallOption) (*LockResp, error)
	Unlock(ctx context.Context, in *UnlockReq, opts ...grpc.CallOption) (*UnlockResp, error)
	UnlockNew(ctx context.Context, in *UnlockReqNew, opts ...grpc.CallOption) (*UnlockResp, error)
}

type dAssetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDAssetServiceClient(cc grpc.ClientConnInterface) DAssetServiceClient {
	return &dAssetServiceClient{cc}
}

func (c *dAssetServiceClient) CollectionClaimCreate(ctx context.Context, in *CollectionClaimCreateReq, opts ...grpc.CallOption) (*CollectionClaimCreateResp, error) {
	out := new(CollectionClaimCreateResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionClaimCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionCreate(ctx context.Context, in *CollectionCreateReq, opts ...grpc.CallOption) (*CollectionCreateResp, error) {
	out := new(CollectionCreateResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionCreateNew(ctx context.Context, in *CollectionCreateReqNew, opts ...grpc.CallOption) (*CollectionCreateResp, error) {
	out := new(CollectionCreateResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionCreateNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionToken(ctx context.Context, in *CollectionTokenReq, opts ...grpc.CallOption) (*CollectionTokenResp, error) {
	out := new(CollectionTokenResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionBatchCreate(ctx context.Context, in *CollectionBatchCreateReq, opts ...grpc.CallOption) (*CollectionBatchCreateResp, error) {
	out := new(CollectionBatchCreateResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionBatchCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionLightCreate(ctx context.Context, in *CollectionLightCreateReq, opts ...grpc.CallOption) (*CollectionLightCreateResp, error) {
	out := new(CollectionLightCreateResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionLightCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionLightCreateNew(ctx context.Context, in *CollectionLightCreateReqNew, opts ...grpc.CallOption) (*CollectionLightCreateResp, error) {
	out := new(CollectionLightCreateResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionLightCreateNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionList(ctx context.Context, in *CollectionListReq, opts ...grpc.CallOption) (*CollectionListResp, error) {
	out := new(CollectionListResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionListNew(ctx context.Context, in *CollectionListReqNew, opts ...grpc.CallOption) (*CollectionListResp, error) {
	out := new(CollectionListResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionListNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionTransactionClaim(ctx context.Context, in *CollectionTransactionClaimReq, opts ...grpc.CallOption) (*CollectionTransactionClaimResp, error) {
	out := new(CollectionTransactionClaimResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionTransactionClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionTransaction(ctx context.Context, in *CollectionTransactionReq, opts ...grpc.CallOption) (*CollectionTransactionResp, error) {
	out := new(CollectionTransactionResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionTransactionNew(ctx context.Context, in *CollectionTransactionReqNew, opts ...grpc.CallOption) (*CollectionTransactionResp, error) {
	out := new(CollectionTransactionResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionTransactionNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionLightTransaction(ctx context.Context, in *CollectionLightTransactionReq, opts ...grpc.CallOption) (*CollectionLightTransactionResp, error) {
	out := new(CollectionLightTransactionResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionLightTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionLightTransactionNew(ctx context.Context, in *CollectionLightTransactionReqNew, opts ...grpc.CallOption) (*CollectionLightTransactionResp, error) {
	out := new(CollectionLightTransactionResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionLightTransactionNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionCheckIn(ctx context.Context, in *CollectionCheckInReq, opts ...grpc.CallOption) (*CollectionCheckInResp, error) {
	out := new(CollectionCheckInResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionCheckIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionCheckInList(ctx context.Context, in *CollectionCheckInListReq, opts ...grpc.CallOption) (*CollectionCheckInListResp, error) {
	out := new(CollectionCheckInListResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionCheckInList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) ContractAuthorization(ctx context.Context, in *ContractAuthorizationReq, opts ...grpc.CallOption) (*ContractAuthorizationResp, error) {
	out := new(ContractAuthorizationResp)
	err := c.cc.Invoke(ctx, DAssetService_ContractAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) ContractAuthorizationNew(ctx context.Context, in *ContractAuthorizationReqNew, opts ...grpc.CallOption) (*ContractAuthorizationResp, error) {
	out := new(ContractAuthorizationResp)
	err := c.cc.Invoke(ctx, DAssetService_ContractAuthorizationNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) ContractCreate(ctx context.Context, in *ContractCreateReq, opts ...grpc.CallOption) (*ContractCreateResp, error) {
	out := new(ContractCreateResp)
	err := c.cc.Invoke(ctx, DAssetService_ContractCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) ContractCreateNew(ctx context.Context, in *ContractCreateReqNew, opts ...grpc.CallOption) (*ContractCreateResp, error) {
	out := new(ContractCreateResp)
	err := c.cc.Invoke(ctx, DAssetService_ContractCreateNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) ContractList(ctx context.Context, in *ContractListReq, opts ...grpc.CallOption) (*ContractListResp, error) {
	out := new(ContractListResp)
	err := c.cc.Invoke(ctx, DAssetService_ContractList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) ContractListNew(ctx context.Context, in *ContractListReqNew, opts ...grpc.CallOption) (*ContractListResp, error) {
	out := new(ContractListResp)
	err := c.cc.Invoke(ctx, DAssetService_ContractListNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) ClaimProof(ctx context.Context, in *ClaimProofReq, opts ...grpc.CallOption) (*ClaimProofResp, error) {
	out := new(ClaimProofResp)
	err := c.cc.Invoke(ctx, DAssetService_ClaimProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) DidCredential(ctx context.Context, in *DidCredentialReq, opts ...grpc.CallOption) (*DidCredentialResp, error) {
	out := new(DidCredentialResp)
	err := c.cc.Invoke(ctx, DAssetService_DidCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightRegister(ctx context.Context, in *CopyrightRegisterReq, opts ...grpc.CallOption) (*CopyrightRegisterResp, error) {
	out := new(CopyrightRegisterResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightRegisterNew(ctx context.Context, in *CopyrightRegisterReqNew, opts ...grpc.CallOption) (*CopyrightRegisterResp, error) {
	out := new(CopyrightRegisterResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightRegisterNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightClaimAuthorization(ctx context.Context, in *CopyrightClaimAuthorizationReq, opts ...grpc.CallOption) (*CopyrightClaimAuthorizationResp, error) {
	out := new(CopyrightClaimAuthorizationResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightClaimAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightClaimAuthorizationNew(ctx context.Context, in *CopyrightClaimAuthorizationReqNew, opts ...grpc.CallOption) (*CopyrightClaimAuthorizationResp, error) {
	out := new(CopyrightClaimAuthorizationResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightClaimAuthorizationNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightClaimAdd(ctx context.Context, in *CopyrightClaimAddReq, opts ...grpc.CallOption) (*CopyrightRegisterResp, error) {
	out := new(CopyrightRegisterResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightClaimAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightClaimAddNew(ctx context.Context, in *CopyrightClaimAddReqNew, opts ...grpc.CallOption) (*CopyrightRegisterResp, error) {
	out := new(CopyrightRegisterResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightClaimAddNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightClaimEdit(ctx context.Context, in *CopyrightClaimEditReq, opts ...grpc.CallOption) (*CopyrightRegisterResp, error) {
	out := new(CopyrightRegisterResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightClaimEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightClaimCheck(ctx context.Context, in *CopyrightClaimCheckReq, opts ...grpc.CallOption) (*DidCredentialResp, error) {
	out := new(DidCredentialResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightClaimCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CredentialInfo(ctx context.Context, in *CredentialInfoReq, opts ...grpc.CallOption) (*CredentialInfoResp, error) {
	out := new(CredentialInfoResp)
	err := c.cc.Invoke(ctx, DAssetService_CredentialInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CredentialList(ctx context.Context, in *CredentialListReq, opts ...grpc.CallOption) (*CredentialListResp, error) {
	out := new(CredentialListResp)
	err := c.cc.Invoke(ctx, DAssetService_CredentialList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightRegisterList(ctx context.Context, in *CopyrightRegisterListReq, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error) {
	out := new(CopyrightRegisterListResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightRegisterList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightRegisterListNew(ctx context.Context, in *CopyrightRegisterListReqNew, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error) {
	out := new(CopyrightRegisterListResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightRegisterListNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightAuthorizationList(ctx context.Context, in *CopyrightAuthorizationListReq, opts ...grpc.CallOption) (*CopyrightAuthorizationListResp, error) {
	out := new(CopyrightAuthorizationListResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightAuthorizationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightAuthorizationListNew(ctx context.Context, in *CopyrightAuthorizationListReqNew, opts ...grpc.CallOption) (*CopyrightAuthorizationListResp, error) {
	out := new(CopyrightAuthorizationListResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightAuthorizationListNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) AuthorizationClaimList(ctx context.Context, in *AuthorizationClaimListReq, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error) {
	out := new(CopyrightRegisterListResp)
	err := c.cc.Invoke(ctx, DAssetService_AuthorizationClaimList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) AuthorizationClaimListNew(ctx context.Context, in *AuthorizationClaimListReqNew, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error) {
	out := new(CopyrightRegisterListResp)
	err := c.cc.Invoke(ctx, DAssetService_AuthorizationClaimListNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightClaimList(ctx context.Context, in *CopyrightClaimListReq, opts ...grpc.CallOption) (*CopyrightClaimListResp, error) {
	out := new(CopyrightClaimListResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightClaimList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightClaimListNew(ctx context.Context, in *CopyrightClaimListReqNew, opts ...grpc.CallOption) (*CopyrightClaimListResp, error) {
	out := new(CopyrightClaimListResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightClaimListNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CollectionAllList(ctx context.Context, in *CollectionListReq, opts ...grpc.CallOption) (*CollectionListResp, error) {
	out := new(CollectionListResp)
	err := c.cc.Invoke(ctx, DAssetService_CollectionAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightRegisterAllList(ctx context.Context, in *CopyrightRegisterListReq, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error) {
	out := new(CopyrightRegisterListResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightRegisterAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) ContractAllList(ctx context.Context, in *ContractListReq, opts ...grpc.CallOption) (*ContractListResp, error) {
	out := new(ContractListResp)
	err := c.cc.Invoke(ctx, DAssetService_ContractAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightAuthorizationAllList(ctx context.Context, in *CopyrightAuthorizationListReq, opts ...grpc.CallOption) (*CopyrightAuthorizationListResp, error) {
	out := new(CopyrightAuthorizationListResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightAuthorizationAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) AuthorizationClaimAllList(ctx context.Context, in *AuthorizationClaimListReq, opts ...grpc.CallOption) (*CopyrightRegisterListResp, error) {
	out := new(CopyrightRegisterListResp)
	err := c.cc.Invoke(ctx, DAssetService_AuthorizationClaimAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightClaimAllList(ctx context.Context, in *CopyrightClaimListReq, opts ...grpc.CallOption) (*CopyrightClaimListResp, error) {
	out := new(CopyrightClaimListResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightClaimAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CredentialAllList(ctx context.Context, in *CredentialListReq, opts ...grpc.CallOption) (*CredentialListResp, error) {
	out := new(CredentialListResp)
	err := c.cc.Invoke(ctx, DAssetService_CredentialAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CopyrightStatistics(ctx context.Context, in *CopyrightStatisticsReq, opts ...grpc.CallOption) (*CopyrightStatisticsResp, error) {
	out := new(CopyrightStatisticsResp)
	err := c.cc.Invoke(ctx, DAssetService_CopyrightStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) Combination(ctx context.Context, in *CombinationReq, opts ...grpc.CallOption) (*CombinationResp, error) {
	out := new(CombinationResp)
	err := c.cc.Invoke(ctx, DAssetService_Combination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) CombinationNew(ctx context.Context, in *CombinationReqNew, opts ...grpc.CallOption) (*CombinationResp, error) {
	out := new(CombinationResp)
	err := c.cc.Invoke(ctx, DAssetService_CombinationNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) Lock(ctx context.Context, in *LockReq, opts ...grpc.CallOption) (*LockResp, error) {
	out := new(LockResp)
	err := c.cc.Invoke(ctx, DAssetService_Lock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) LockNew(ctx context.Context, in *LockReqNew, opts ...grpc.CallOption) (*LockResp, error) {
	out := new(LockResp)
	err := c.cc.Invoke(ctx, DAssetService_LockNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) Unlock(ctx context.Context, in *UnlockReq, opts ...grpc.CallOption) (*UnlockResp, error) {
	out := new(UnlockResp)
	err := c.cc.Invoke(ctx, DAssetService_Unlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAssetServiceClient) UnlockNew(ctx context.Context, in *UnlockReqNew, opts ...grpc.CallOption) (*UnlockResp, error) {
	out := new(UnlockResp)
	err := c.cc.Invoke(ctx, DAssetService_UnlockNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DAssetServiceServer is the server API for DAssetService service.
// All implementations should embed UnimplementedDAssetServiceServer
// for forward compatibility
type DAssetServiceServer interface {
	CollectionClaimCreate(context.Context, *CollectionClaimCreateReq) (*CollectionClaimCreateResp, error)
	CollectionCreate(context.Context, *CollectionCreateReq) (*CollectionCreateResp, error)
	CollectionCreateNew(context.Context, *CollectionCreateReqNew) (*CollectionCreateResp, error)
	CollectionToken(context.Context, *CollectionTokenReq) (*CollectionTokenResp, error)
	CollectionBatchCreate(context.Context, *CollectionBatchCreateReq) (*CollectionBatchCreateResp, error)
	CollectionLightCreate(context.Context, *CollectionLightCreateReq) (*CollectionLightCreateResp, error)
	CollectionLightCreateNew(context.Context, *CollectionLightCreateReqNew) (*CollectionLightCreateResp, error)
	CollectionList(context.Context, *CollectionListReq) (*CollectionListResp, error)
	CollectionListNew(context.Context, *CollectionListReqNew) (*CollectionListResp, error)
	CollectionTransactionClaim(context.Context, *CollectionTransactionClaimReq) (*CollectionTransactionClaimResp, error)
	CollectionTransaction(context.Context, *CollectionTransactionReq) (*CollectionTransactionResp, error)
	CollectionTransactionNew(context.Context, *CollectionTransactionReqNew) (*CollectionTransactionResp, error)
	CollectionLightTransaction(context.Context, *CollectionLightTransactionReq) (*CollectionLightTransactionResp, error)
	CollectionLightTransactionNew(context.Context, *CollectionLightTransactionReqNew) (*CollectionLightTransactionResp, error)
	CollectionCheckIn(context.Context, *CollectionCheckInReq) (*CollectionCheckInResp, error)
	CollectionCheckInList(context.Context, *CollectionCheckInListReq) (*CollectionCheckInListResp, error)
	ContractAuthorization(context.Context, *ContractAuthorizationReq) (*ContractAuthorizationResp, error)
	ContractAuthorizationNew(context.Context, *ContractAuthorizationReqNew) (*ContractAuthorizationResp, error)
	ContractCreate(context.Context, *ContractCreateReq) (*ContractCreateResp, error)
	ContractCreateNew(context.Context, *ContractCreateReqNew) (*ContractCreateResp, error)
	ContractList(context.Context, *ContractListReq) (*ContractListResp, error)
	ContractListNew(context.Context, *ContractListReqNew) (*ContractListResp, error)
	ClaimProof(context.Context, *ClaimProofReq) (*ClaimProofResp, error)
	DidCredential(context.Context, *DidCredentialReq) (*DidCredentialResp, error)
	CopyrightRegister(context.Context, *CopyrightRegisterReq) (*CopyrightRegisterResp, error)
	CopyrightRegisterNew(context.Context, *CopyrightRegisterReqNew) (*CopyrightRegisterResp, error)
	CopyrightClaimAuthorization(context.Context, *CopyrightClaimAuthorizationReq) (*CopyrightClaimAuthorizationResp, error)
	CopyrightClaimAuthorizationNew(context.Context, *CopyrightClaimAuthorizationReqNew) (*CopyrightClaimAuthorizationResp, error)
	// todo待开发
	//
	//	rpc CopyrightMint(CopyrightMintReq) returns (CopyrightMintResp) {
	//	  option (google.api.http) = {
	//	    post: "/dasset/copyright/mint"
	//	    body:"*"
	//	  };
	//	  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	//	    summary: "版权/声明/授权/铸造"
	//	  };
	//	}
	CopyrightClaimAdd(context.Context, *CopyrightClaimAddReq) (*CopyrightRegisterResp, error)
	CopyrightClaimAddNew(context.Context, *CopyrightClaimAddReqNew) (*CopyrightRegisterResp, error)
	CopyrightClaimEdit(context.Context, *CopyrightClaimEditReq) (*CopyrightRegisterResp, error)
	CopyrightClaimCheck(context.Context, *CopyrightClaimCheckReq) (*DidCredentialResp, error)
	CredentialInfo(context.Context, *CredentialInfoReq) (*CredentialInfoResp, error)
	CredentialList(context.Context, *CredentialListReq) (*CredentialListResp, error)
	CopyrightRegisterList(context.Context, *CopyrightRegisterListReq) (*CopyrightRegisterListResp, error)
	CopyrightRegisterListNew(context.Context, *CopyrightRegisterListReqNew) (*CopyrightRegisterListResp, error)
	CopyrightAuthorizationList(context.Context, *CopyrightAuthorizationListReq) (*CopyrightAuthorizationListResp, error)
	CopyrightAuthorizationListNew(context.Context, *CopyrightAuthorizationListReqNew) (*CopyrightAuthorizationListResp, error)
	AuthorizationClaimList(context.Context, *AuthorizationClaimListReq) (*CopyrightRegisterListResp, error)
	AuthorizationClaimListNew(context.Context, *AuthorizationClaimListReqNew) (*CopyrightRegisterListResp, error)
	CopyrightClaimList(context.Context, *CopyrightClaimListReq) (*CopyrightClaimListResp, error)
	CopyrightClaimListNew(context.Context, *CopyrightClaimListReqNew) (*CopyrightClaimListResp, error)
	CollectionAllList(context.Context, *CollectionListReq) (*CollectionListResp, error)
	CopyrightRegisterAllList(context.Context, *CopyrightRegisterListReq) (*CopyrightRegisterListResp, error)
	ContractAllList(context.Context, *ContractListReq) (*ContractListResp, error)
	CopyrightAuthorizationAllList(context.Context, *CopyrightAuthorizationListReq) (*CopyrightAuthorizationListResp, error)
	AuthorizationClaimAllList(context.Context, *AuthorizationClaimListReq) (*CopyrightRegisterListResp, error)
	CopyrightClaimAllList(context.Context, *CopyrightClaimListReq) (*CopyrightClaimListResp, error)
	CredentialAllList(context.Context, *CredentialListReq) (*CredentialListResp, error)
	CopyrightStatistics(context.Context, *CopyrightStatisticsReq) (*CopyrightStatisticsResp, error)
	Combination(context.Context, *CombinationReq) (*CombinationResp, error)
	CombinationNew(context.Context, *CombinationReqNew) (*CombinationResp, error)
	Lock(context.Context, *LockReq) (*LockResp, error)
	LockNew(context.Context, *LockReqNew) (*LockResp, error)
	Unlock(context.Context, *UnlockReq) (*UnlockResp, error)
	UnlockNew(context.Context, *UnlockReqNew) (*UnlockResp, error)
}

// UnimplementedDAssetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDAssetServiceServer struct {
}

func (UnimplementedDAssetServiceServer) CollectionClaimCreate(context.Context, *CollectionClaimCreateReq) (*CollectionClaimCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionClaimCreate not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionCreate(context.Context, *CollectionCreateReq) (*CollectionCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionCreate not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionCreateNew(context.Context, *CollectionCreateReqNew) (*CollectionCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionCreateNew not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionToken(context.Context, *CollectionTokenReq) (*CollectionTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionToken not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionBatchCreate(context.Context, *CollectionBatchCreateReq) (*CollectionBatchCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionBatchCreate not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionLightCreate(context.Context, *CollectionLightCreateReq) (*CollectionLightCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionLightCreate not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionLightCreateNew(context.Context, *CollectionLightCreateReqNew) (*CollectionLightCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionLightCreateNew not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionList(context.Context, *CollectionListReq) (*CollectionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionList not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionListNew(context.Context, *CollectionListReqNew) (*CollectionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionListNew not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionTransactionClaim(context.Context, *CollectionTransactionClaimReq) (*CollectionTransactionClaimResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionTransactionClaim not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionTransaction(context.Context, *CollectionTransactionReq) (*CollectionTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionTransaction not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionTransactionNew(context.Context, *CollectionTransactionReqNew) (*CollectionTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionTransactionNew not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionLightTransaction(context.Context, *CollectionLightTransactionReq) (*CollectionLightTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionLightTransaction not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionLightTransactionNew(context.Context, *CollectionLightTransactionReqNew) (*CollectionLightTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionLightTransactionNew not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionCheckIn(context.Context, *CollectionCheckInReq) (*CollectionCheckInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionCheckIn not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionCheckInList(context.Context, *CollectionCheckInListReq) (*CollectionCheckInListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionCheckInList not implemented")
}
func (UnimplementedDAssetServiceServer) ContractAuthorization(context.Context, *ContractAuthorizationReq) (*ContractAuthorizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractAuthorization not implemented")
}
func (UnimplementedDAssetServiceServer) ContractAuthorizationNew(context.Context, *ContractAuthorizationReqNew) (*ContractAuthorizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractAuthorizationNew not implemented")
}
func (UnimplementedDAssetServiceServer) ContractCreate(context.Context, *ContractCreateReq) (*ContractCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCreate not implemented")
}
func (UnimplementedDAssetServiceServer) ContractCreateNew(context.Context, *ContractCreateReqNew) (*ContractCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCreateNew not implemented")
}
func (UnimplementedDAssetServiceServer) ContractList(context.Context, *ContractListReq) (*ContractListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractList not implemented")
}
func (UnimplementedDAssetServiceServer) ContractListNew(context.Context, *ContractListReqNew) (*ContractListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractListNew not implemented")
}
func (UnimplementedDAssetServiceServer) ClaimProof(context.Context, *ClaimProofReq) (*ClaimProofResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimProof not implemented")
}
func (UnimplementedDAssetServiceServer) DidCredential(context.Context, *DidCredentialReq) (*DidCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidCredential not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightRegister(context.Context, *CopyrightRegisterReq) (*CopyrightRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightRegister not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightRegisterNew(context.Context, *CopyrightRegisterReqNew) (*CopyrightRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightRegisterNew not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightClaimAuthorization(context.Context, *CopyrightClaimAuthorizationReq) (*CopyrightClaimAuthorizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightClaimAuthorization not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightClaimAuthorizationNew(context.Context, *CopyrightClaimAuthorizationReqNew) (*CopyrightClaimAuthorizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightClaimAuthorizationNew not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightClaimAdd(context.Context, *CopyrightClaimAddReq) (*CopyrightRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightClaimAdd not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightClaimAddNew(context.Context, *CopyrightClaimAddReqNew) (*CopyrightRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightClaimAddNew not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightClaimEdit(context.Context, *CopyrightClaimEditReq) (*CopyrightRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightClaimEdit not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightClaimCheck(context.Context, *CopyrightClaimCheckReq) (*DidCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightClaimCheck not implemented")
}
func (UnimplementedDAssetServiceServer) CredentialInfo(context.Context, *CredentialInfoReq) (*CredentialInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialInfo not implemented")
}
func (UnimplementedDAssetServiceServer) CredentialList(context.Context, *CredentialListReq) (*CredentialListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialList not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightRegisterList(context.Context, *CopyrightRegisterListReq) (*CopyrightRegisterListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightRegisterList not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightRegisterListNew(context.Context, *CopyrightRegisterListReqNew) (*CopyrightRegisterListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightRegisterListNew not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightAuthorizationList(context.Context, *CopyrightAuthorizationListReq) (*CopyrightAuthorizationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightAuthorizationList not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightAuthorizationListNew(context.Context, *CopyrightAuthorizationListReqNew) (*CopyrightAuthorizationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightAuthorizationListNew not implemented")
}
func (UnimplementedDAssetServiceServer) AuthorizationClaimList(context.Context, *AuthorizationClaimListReq) (*CopyrightRegisterListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizationClaimList not implemented")
}
func (UnimplementedDAssetServiceServer) AuthorizationClaimListNew(context.Context, *AuthorizationClaimListReqNew) (*CopyrightRegisterListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizationClaimListNew not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightClaimList(context.Context, *CopyrightClaimListReq) (*CopyrightClaimListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightClaimList not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightClaimListNew(context.Context, *CopyrightClaimListReqNew) (*CopyrightClaimListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightClaimListNew not implemented")
}
func (UnimplementedDAssetServiceServer) CollectionAllList(context.Context, *CollectionListReq) (*CollectionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionAllList not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightRegisterAllList(context.Context, *CopyrightRegisterListReq) (*CopyrightRegisterListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightRegisterAllList not implemented")
}
func (UnimplementedDAssetServiceServer) ContractAllList(context.Context, *ContractListReq) (*ContractListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractAllList not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightAuthorizationAllList(context.Context, *CopyrightAuthorizationListReq) (*CopyrightAuthorizationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightAuthorizationAllList not implemented")
}
func (UnimplementedDAssetServiceServer) AuthorizationClaimAllList(context.Context, *AuthorizationClaimListReq) (*CopyrightRegisterListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizationClaimAllList not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightClaimAllList(context.Context, *CopyrightClaimListReq) (*CopyrightClaimListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightClaimAllList not implemented")
}
func (UnimplementedDAssetServiceServer) CredentialAllList(context.Context, *CredentialListReq) (*CredentialListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialAllList not implemented")
}
func (UnimplementedDAssetServiceServer) CopyrightStatistics(context.Context, *CopyrightStatisticsReq) (*CopyrightStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightStatistics not implemented")
}
func (UnimplementedDAssetServiceServer) Combination(context.Context, *CombinationReq) (*CombinationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Combination not implemented")
}
func (UnimplementedDAssetServiceServer) CombinationNew(context.Context, *CombinationReqNew) (*CombinationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CombinationNew not implemented")
}
func (UnimplementedDAssetServiceServer) Lock(context.Context, *LockReq) (*LockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedDAssetServiceServer) LockNew(context.Context, *LockReqNew) (*LockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockNew not implemented")
}
func (UnimplementedDAssetServiceServer) Unlock(context.Context, *UnlockReq) (*UnlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedDAssetServiceServer) UnlockNew(context.Context, *UnlockReqNew) (*UnlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockNew not implemented")
}

// UnsafeDAssetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DAssetServiceServer will
// result in compilation errors.
type UnsafeDAssetServiceServer interface {
	mustEmbedUnimplementedDAssetServiceServer()
}

func RegisterDAssetServiceServer(s grpc.ServiceRegistrar, srv DAssetServiceServer) {
	s.RegisterService(&DAssetService_ServiceDesc, srv)
}

func _DAssetService_CollectionClaimCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionClaimCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionClaimCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionClaimCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionClaimCreate(ctx, req.(*CollectionClaimCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionCreate(ctx, req.(*CollectionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionCreateNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionCreateReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionCreateNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionCreateNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionCreateNew(ctx, req.(*CollectionCreateReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionToken(ctx, req.(*CollectionTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionBatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionBatchCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionBatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionBatchCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionBatchCreate(ctx, req.(*CollectionBatchCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionLightCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionLightCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionLightCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionLightCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionLightCreate(ctx, req.(*CollectionLightCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionLightCreateNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionLightCreateReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionLightCreateNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionLightCreateNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionLightCreateNew(ctx, req.(*CollectionLightCreateReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionList(ctx, req.(*CollectionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionListNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionListReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionListNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionListNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionListNew(ctx, req.(*CollectionListReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionTransactionClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionTransactionClaimReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionTransactionClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionTransactionClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionTransactionClaim(ctx, req.(*CollectionTransactionClaimReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionTransaction(ctx, req.(*CollectionTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionTransactionNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionTransactionReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionTransactionNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionTransactionNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionTransactionNew(ctx, req.(*CollectionTransactionReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionLightTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionLightTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionLightTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionLightTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionLightTransaction(ctx, req.(*CollectionLightTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionLightTransactionNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionLightTransactionReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionLightTransactionNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionLightTransactionNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionLightTransactionNew(ctx, req.(*CollectionLightTransactionReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionCheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionCheckInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionCheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionCheckIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionCheckIn(ctx, req.(*CollectionCheckInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionCheckInList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionCheckInListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionCheckInList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionCheckInList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionCheckInList(ctx, req.(*CollectionCheckInListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_ContractAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractAuthorizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).ContractAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_ContractAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).ContractAuthorization(ctx, req.(*ContractAuthorizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_ContractAuthorizationNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractAuthorizationReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).ContractAuthorizationNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_ContractAuthorizationNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).ContractAuthorizationNew(ctx, req.(*ContractAuthorizationReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_ContractCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).ContractCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_ContractCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).ContractCreate(ctx, req.(*ContractCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_ContractCreateNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCreateReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).ContractCreateNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_ContractCreateNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).ContractCreateNew(ctx, req.(*ContractCreateReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_ContractList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).ContractList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_ContractList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).ContractList(ctx, req.(*ContractListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_ContractListNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractListReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).ContractListNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_ContractListNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).ContractListNew(ctx, req.(*ContractListReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_ClaimProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimProofReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).ClaimProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_ClaimProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).ClaimProof(ctx, req.(*ClaimProofReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_DidCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DidCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).DidCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_DidCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).DidCredential(ctx, req.(*DidCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightRegister(ctx, req.(*CopyrightRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightRegisterNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightRegisterReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightRegisterNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightRegisterNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightRegisterNew(ctx, req.(*CopyrightRegisterReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightClaimAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightClaimAuthorizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightClaimAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightClaimAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightClaimAuthorization(ctx, req.(*CopyrightClaimAuthorizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightClaimAuthorizationNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightClaimAuthorizationReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightClaimAuthorizationNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightClaimAuthorizationNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightClaimAuthorizationNew(ctx, req.(*CopyrightClaimAuthorizationReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightClaimAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightClaimAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightClaimAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightClaimAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightClaimAdd(ctx, req.(*CopyrightClaimAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightClaimAddNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightClaimAddReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightClaimAddNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightClaimAddNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightClaimAddNew(ctx, req.(*CopyrightClaimAddReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightClaimEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightClaimEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightClaimEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightClaimEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightClaimEdit(ctx, req.(*CopyrightClaimEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightClaimCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightClaimCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightClaimCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightClaimCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightClaimCheck(ctx, req.(*CopyrightClaimCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CredentialInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CredentialInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CredentialInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CredentialInfo(ctx, req.(*CredentialInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CredentialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CredentialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CredentialList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CredentialList(ctx, req.(*CredentialListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightRegisterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightRegisterListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightRegisterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightRegisterList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightRegisterList(ctx, req.(*CopyrightRegisterListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightRegisterListNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightRegisterListReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightRegisterListNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightRegisterListNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightRegisterListNew(ctx, req.(*CopyrightRegisterListReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightAuthorizationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightAuthorizationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightAuthorizationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightAuthorizationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightAuthorizationList(ctx, req.(*CopyrightAuthorizationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightAuthorizationListNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightAuthorizationListReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightAuthorizationListNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightAuthorizationListNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightAuthorizationListNew(ctx, req.(*CopyrightAuthorizationListReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_AuthorizationClaimList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationClaimListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).AuthorizationClaimList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_AuthorizationClaimList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).AuthorizationClaimList(ctx, req.(*AuthorizationClaimListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_AuthorizationClaimListNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationClaimListReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).AuthorizationClaimListNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_AuthorizationClaimListNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).AuthorizationClaimListNew(ctx, req.(*AuthorizationClaimListReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightClaimList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightClaimListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightClaimList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightClaimList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightClaimList(ctx, req.(*CopyrightClaimListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightClaimListNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightClaimListReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightClaimListNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightClaimListNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightClaimListNew(ctx, req.(*CopyrightClaimListReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CollectionAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CollectionAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CollectionAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CollectionAllList(ctx, req.(*CollectionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightRegisterAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightRegisterListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightRegisterAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightRegisterAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightRegisterAllList(ctx, req.(*CopyrightRegisterListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_ContractAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).ContractAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_ContractAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).ContractAllList(ctx, req.(*ContractListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightAuthorizationAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightAuthorizationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightAuthorizationAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightAuthorizationAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightAuthorizationAllList(ctx, req.(*CopyrightAuthorizationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_AuthorizationClaimAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationClaimListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).AuthorizationClaimAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_AuthorizationClaimAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).AuthorizationClaimAllList(ctx, req.(*AuthorizationClaimListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightClaimAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightClaimListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightClaimAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightClaimAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightClaimAllList(ctx, req.(*CopyrightClaimListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CredentialAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CredentialAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CredentialAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CredentialAllList(ctx, req.(*CredentialListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CopyrightStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CopyrightStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CopyrightStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CopyrightStatistics(ctx, req.(*CopyrightStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_Combination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CombinationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).Combination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_Combination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).Combination(ctx, req.(*CombinationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_CombinationNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CombinationReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).CombinationNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_CombinationNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).CombinationNew(ctx, req.(*CombinationReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_Lock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).Lock(ctx, req.(*LockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_LockNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).LockNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_LockNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).LockNew(ctx, req.(*LockReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).Unlock(ctx, req.(*UnlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAssetService_UnlockNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockReqNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAssetServiceServer).UnlockNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAssetService_UnlockNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAssetServiceServer).UnlockNew(ctx, req.(*UnlockReqNew))
	}
	return interceptor(ctx, in, info, handler)
}

// DAssetService_ServiceDesc is the grpc.ServiceDesc for DAssetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DAssetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daop.pb.dassetpb.DAssetService",
	HandlerType: (*DAssetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectionClaimCreate",
			Handler:    _DAssetService_CollectionClaimCreate_Handler,
		},
		{
			MethodName: "CollectionCreate",
			Handler:    _DAssetService_CollectionCreate_Handler,
		},
		{
			MethodName: "CollectionCreateNew",
			Handler:    _DAssetService_CollectionCreateNew_Handler,
		},
		{
			MethodName: "CollectionToken",
			Handler:    _DAssetService_CollectionToken_Handler,
		},
		{
			MethodName: "CollectionBatchCreate",
			Handler:    _DAssetService_CollectionBatchCreate_Handler,
		},
		{
			MethodName: "CollectionLightCreate",
			Handler:    _DAssetService_CollectionLightCreate_Handler,
		},
		{
			MethodName: "CollectionLightCreateNew",
			Handler:    _DAssetService_CollectionLightCreateNew_Handler,
		},
		{
			MethodName: "CollectionList",
			Handler:    _DAssetService_CollectionList_Handler,
		},
		{
			MethodName: "CollectionListNew",
			Handler:    _DAssetService_CollectionListNew_Handler,
		},
		{
			MethodName: "CollectionTransactionClaim",
			Handler:    _DAssetService_CollectionTransactionClaim_Handler,
		},
		{
			MethodName: "CollectionTransaction",
			Handler:    _DAssetService_CollectionTransaction_Handler,
		},
		{
			MethodName: "CollectionTransactionNew",
			Handler:    _DAssetService_CollectionTransactionNew_Handler,
		},
		{
			MethodName: "CollectionLightTransaction",
			Handler:    _DAssetService_CollectionLightTransaction_Handler,
		},
		{
			MethodName: "CollectionLightTransactionNew",
			Handler:    _DAssetService_CollectionLightTransactionNew_Handler,
		},
		{
			MethodName: "CollectionCheckIn",
			Handler:    _DAssetService_CollectionCheckIn_Handler,
		},
		{
			MethodName: "CollectionCheckInList",
			Handler:    _DAssetService_CollectionCheckInList_Handler,
		},
		{
			MethodName: "ContractAuthorization",
			Handler:    _DAssetService_ContractAuthorization_Handler,
		},
		{
			MethodName: "ContractAuthorizationNew",
			Handler:    _DAssetService_ContractAuthorizationNew_Handler,
		},
		{
			MethodName: "ContractCreate",
			Handler:    _DAssetService_ContractCreate_Handler,
		},
		{
			MethodName: "ContractCreateNew",
			Handler:    _DAssetService_ContractCreateNew_Handler,
		},
		{
			MethodName: "ContractList",
			Handler:    _DAssetService_ContractList_Handler,
		},
		{
			MethodName: "ContractListNew",
			Handler:    _DAssetService_ContractListNew_Handler,
		},
		{
			MethodName: "ClaimProof",
			Handler:    _DAssetService_ClaimProof_Handler,
		},
		{
			MethodName: "DidCredential",
			Handler:    _DAssetService_DidCredential_Handler,
		},
		{
			MethodName: "CopyrightRegister",
			Handler:    _DAssetService_CopyrightRegister_Handler,
		},
		{
			MethodName: "CopyrightRegisterNew",
			Handler:    _DAssetService_CopyrightRegisterNew_Handler,
		},
		{
			MethodName: "CopyrightClaimAuthorization",
			Handler:    _DAssetService_CopyrightClaimAuthorization_Handler,
		},
		{
			MethodName: "CopyrightClaimAuthorizationNew",
			Handler:    _DAssetService_CopyrightClaimAuthorizationNew_Handler,
		},
		{
			MethodName: "CopyrightClaimAdd",
			Handler:    _DAssetService_CopyrightClaimAdd_Handler,
		},
		{
			MethodName: "CopyrightClaimAddNew",
			Handler:    _DAssetService_CopyrightClaimAddNew_Handler,
		},
		{
			MethodName: "CopyrightClaimEdit",
			Handler:    _DAssetService_CopyrightClaimEdit_Handler,
		},
		{
			MethodName: "CopyrightClaimCheck",
			Handler:    _DAssetService_CopyrightClaimCheck_Handler,
		},
		{
			MethodName: "CredentialInfo",
			Handler:    _DAssetService_CredentialInfo_Handler,
		},
		{
			MethodName: "CredentialList",
			Handler:    _DAssetService_CredentialList_Handler,
		},
		{
			MethodName: "CopyrightRegisterList",
			Handler:    _DAssetService_CopyrightRegisterList_Handler,
		},
		{
			MethodName: "CopyrightRegisterListNew",
			Handler:    _DAssetService_CopyrightRegisterListNew_Handler,
		},
		{
			MethodName: "CopyrightAuthorizationList",
			Handler:    _DAssetService_CopyrightAuthorizationList_Handler,
		},
		{
			MethodName: "CopyrightAuthorizationListNew",
			Handler:    _DAssetService_CopyrightAuthorizationListNew_Handler,
		},
		{
			MethodName: "AuthorizationClaimList",
			Handler:    _DAssetService_AuthorizationClaimList_Handler,
		},
		{
			MethodName: "AuthorizationClaimListNew",
			Handler:    _DAssetService_AuthorizationClaimListNew_Handler,
		},
		{
			MethodName: "CopyrightClaimList",
			Handler:    _DAssetService_CopyrightClaimList_Handler,
		},
		{
			MethodName: "CopyrightClaimListNew",
			Handler:    _DAssetService_CopyrightClaimListNew_Handler,
		},
		{
			MethodName: "CollectionAllList",
			Handler:    _DAssetService_CollectionAllList_Handler,
		},
		{
			MethodName: "CopyrightRegisterAllList",
			Handler:    _DAssetService_CopyrightRegisterAllList_Handler,
		},
		{
			MethodName: "ContractAllList",
			Handler:    _DAssetService_ContractAllList_Handler,
		},
		{
			MethodName: "CopyrightAuthorizationAllList",
			Handler:    _DAssetService_CopyrightAuthorizationAllList_Handler,
		},
		{
			MethodName: "AuthorizationClaimAllList",
			Handler:    _DAssetService_AuthorizationClaimAllList_Handler,
		},
		{
			MethodName: "CopyrightClaimAllList",
			Handler:    _DAssetService_CopyrightClaimAllList_Handler,
		},
		{
			MethodName: "CredentialAllList",
			Handler:    _DAssetService_CredentialAllList_Handler,
		},
		{
			MethodName: "CopyrightStatistics",
			Handler:    _DAssetService_CopyrightStatistics_Handler,
		},
		{
			MethodName: "Combination",
			Handler:    _DAssetService_Combination_Handler,
		},
		{
			MethodName: "CombinationNew",
			Handler:    _DAssetService_CombinationNew_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _DAssetService_Lock_Handler,
		},
		{
			MethodName: "LockNew",
			Handler:    _DAssetService_LockNew_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _DAssetService_Unlock_Handler,
		},
		{
			MethodName: "UnlockNew",
			Handler:    _DAssetService_UnlockNew_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/dassetpb/dasset.proto",
}
