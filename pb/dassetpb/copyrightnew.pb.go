// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/dassetpb/copyrightnew.proto

package dassetpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CopyrightRegisterReqNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint32 `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CopyrightType  uint32 `protobuf:"varint,1,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`
	CopyrightTitle string `protobuf:"bytes,2,opt,name=copyright_title,json=copyrightTitle,proto3" json:"copyright_title,omitempty"`
	Creator        string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	AttachUrl      string `protobuf:"bytes,4,opt,name=attach_url,json=attachUrl,proto3" json:"attach_url,omitempty"`
	CreativeTime   uint32 `protobuf:"varint,5,opt,name=creative_time,json=creativeTime,proto3" json:"creative_time,omitempty"`
	IsOriginal     uint32 `protobuf:"varint,6,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	Remarks        string `protobuf:"bytes,7,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *CopyrightRegisterReqNew) Reset() {
	*x = CopyrightRegisterReqNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightRegisterReqNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightRegisterReqNew) ProtoMessage() {}

func (x *CopyrightRegisterReqNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightRegisterReqNew.ProtoReflect.Descriptor instead.
func (*CopyrightRegisterReqNew) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyrightnew_proto_rawDescGZIP(), []int{0}
}

func (x *CopyrightRegisterReqNew) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CopyrightRegisterReqNew) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *CopyrightRegisterReqNew) GetCopyrightTitle() string {
	if x != nil {
		return x.CopyrightTitle
	}
	return ""
}

func (x *CopyrightRegisterReqNew) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CopyrightRegisterReqNew) GetAttachUrl() string {
	if x != nil {
		return x.AttachUrl
	}
	return ""
}

func (x *CopyrightRegisterReqNew) GetCreativeTime() uint32 {
	if x != nil {
		return x.CreativeTime
	}
	return 0
}

func (x *CopyrightRegisterReqNew) GetIsOriginal() uint32 {
	if x != nil {
		return x.IsOriginal
	}
	return 0
}

func (x *CopyrightRegisterReqNew) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type CopyrightClaimAuthorizationReqNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                         uint32                                  `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CopyrightType                  uint32                                  `protobuf:"varint,1,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`
	CopyrightTitle                 string                                  `protobuf:"bytes,2,opt,name=copyright_title,json=copyrightTitle,proto3" json:"copyright_title,omitempty"`
	Creator                        string                                  `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	AttachUrl                      string                                  `protobuf:"bytes,4,opt,name=attach_url,json=attachUrl,proto3" json:"attach_url,omitempty"`
	CreativeTime                   uint32                                  `protobuf:"varint,5,opt,name=creative_time,json=creativeTime,proto3" json:"creative_time,omitempty"`
	IsOriginal                     uint32                                  `protobuf:"varint,6,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	Remarks                        string                                  `protobuf:"bytes,7,opt,name=remarks,proto3" json:"remarks,omitempty"`
	NotifyUrl                      string                                  `protobuf:"bytes,8,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts                     string                                  `protobuf:"bytes,9,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
	CopyrightClaim                 *CopyrightClaimRegister                 `protobuf:"bytes,10,opt,name=copyright_claim,json=copyrightClaim,proto3" json:"copyright_claim,omitempty"`
	CopyrightContract              *CopyrightContractRegister              `protobuf:"bytes,11,opt,name=copyright_contract,json=copyrightContract,proto3" json:"copyright_contract,omitempty"`
	CopyrightContractAuthorization *CopyrightContractAuthorizationRegister `protobuf:"bytes,12,opt,name=copyright_contract_authorization,json=copyrightContractAuthorization,proto3" json:"copyright_contract_authorization,omitempty"`
}

func (x *CopyrightClaimAuthorizationReqNew) Reset() {
	*x = CopyrightClaimAuthorizationReqNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimAuthorizationReqNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimAuthorizationReqNew) ProtoMessage() {}

func (x *CopyrightClaimAuthorizationReqNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimAuthorizationReqNew.ProtoReflect.Descriptor instead.
func (*CopyrightClaimAuthorizationReqNew) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyrightnew_proto_rawDescGZIP(), []int{1}
}

func (x *CopyrightClaimAuthorizationReqNew) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CopyrightClaimAuthorizationReqNew) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *CopyrightClaimAuthorizationReqNew) GetCopyrightTitle() string {
	if x != nil {
		return x.CopyrightTitle
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReqNew) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReqNew) GetAttachUrl() string {
	if x != nil {
		return x.AttachUrl
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReqNew) GetCreativeTime() uint32 {
	if x != nil {
		return x.CreativeTime
	}
	return 0
}

func (x *CopyrightClaimAuthorizationReqNew) GetIsOriginal() uint32 {
	if x != nil {
		return x.IsOriginal
	}
	return 0
}

func (x *CopyrightClaimAuthorizationReqNew) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReqNew) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReqNew) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

func (x *CopyrightClaimAuthorizationReqNew) GetCopyrightClaim() *CopyrightClaimRegister {
	if x != nil {
		return x.CopyrightClaim
	}
	return nil
}

func (x *CopyrightClaimAuthorizationReqNew) GetCopyrightContract() *CopyrightContractRegister {
	if x != nil {
		return x.CopyrightContract
	}
	return nil
}

func (x *CopyrightClaimAuthorizationReqNew) GetCopyrightContractAuthorization() *CopyrightContractAuthorizationRegister {
	if x != nil {
		return x.CopyrightContractAuthorization
	}
	return nil
}

type CopyrightRegisterListReqNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          uint32 `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CopyrightTitle  string `protobuf:"bytes,1,opt,name=copyright_title,json=copyrightTitle,proto3" json:"copyright_title,omitempty"`
	CopyrightHash   string `protobuf:"bytes,2,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	CopyrightType   uint32 `protobuf:"varint,3,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`
	IsOriginal      string `protobuf:"bytes,4,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	CreateTimeStart uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd   uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page            uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CopyrightRegisterListReqNew) Reset() {
	*x = CopyrightRegisterListReqNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightRegisterListReqNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightRegisterListReqNew) ProtoMessage() {}

func (x *CopyrightRegisterListReqNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightRegisterListReqNew.ProtoReflect.Descriptor instead.
func (*CopyrightRegisterListReqNew) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyrightnew_proto_rawDescGZIP(), []int{2}
}

func (x *CopyrightRegisterListReqNew) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CopyrightRegisterListReqNew) GetCopyrightTitle() string {
	if x != nil {
		return x.CopyrightTitle
	}
	return ""
}

func (x *CopyrightRegisterListReqNew) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *CopyrightRegisterListReqNew) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *CopyrightRegisterListReqNew) GetIsOriginal() string {
	if x != nil {
		return x.IsOriginal
	}
	return ""
}

func (x *CopyrightRegisterListReqNew) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *CopyrightRegisterListReqNew) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *CopyrightRegisterListReqNew) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CopyrightRegisterListReqNew) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CopyrightClaimAddReqNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint32          `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CopyrightId uint32          `protobuf:"varint,1,opt,name=copyright_id,json=copyrightId,proto3" json:"copyright_id,omitempty"`
	Claim       *CopyrightClaim `protobuf:"bytes,3,opt,name=claim,proto3" json:"claim,omitempty"`
	Remarks     string          `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *CopyrightClaimAddReqNew) Reset() {
	*x = CopyrightClaimAddReqNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimAddReqNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimAddReqNew) ProtoMessage() {}

func (x *CopyrightClaimAddReqNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimAddReqNew.ProtoReflect.Descriptor instead.
func (*CopyrightClaimAddReqNew) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyrightnew_proto_rawDescGZIP(), []int{3}
}

func (x *CopyrightClaimAddReqNew) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CopyrightClaimAddReqNew) GetCopyrightId() uint32 {
	if x != nil {
		return x.CopyrightId
	}
	return 0
}

func (x *CopyrightClaimAddReqNew) GetClaim() *CopyrightClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *CopyrightClaimAddReqNew) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

type CopyrightClaimListReqNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          uint32 `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClaimTitle      string `protobuf:"bytes,1,opt,name=claim_title,json=claimTitle,proto3" json:"claim_title,omitempty"`
	CopyrightHash   string `protobuf:"bytes,2,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	Credential      string `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
	RegisterAddress string `protobuf:"bytes,4,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`
	ContractIds     string `protobuf:"bytes,5,opt,name=contract_ids,json=contractIds,proto3" json:"contract_ids,omitempty"`
	AuditStatus     string `protobuf:"bytes,7,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	AuditTimeStart  uint32 `protobuf:"varint,8,opt,name=audit_time_start,json=auditTimeStart,proto3" json:"audit_time_start,omitempty"`
	AuditTimeEnd    uint32 `protobuf:"varint,9,opt,name=audit_time_end,json=auditTimeEnd,proto3" json:"audit_time_end,omitempty"`
	CreateTimeStart uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd   uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page            uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CopyrightClaimListReqNew) Reset() {
	*x = CopyrightClaimListReqNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimListReqNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimListReqNew) ProtoMessage() {}

func (x *CopyrightClaimListReqNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimListReqNew.ProtoReflect.Descriptor instead.
func (*CopyrightClaimListReqNew) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyrightnew_proto_rawDescGZIP(), []int{4}
}

func (x *CopyrightClaimListReqNew) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CopyrightClaimListReqNew) GetClaimTitle() string {
	if x != nil {
		return x.ClaimTitle
	}
	return ""
}

func (x *CopyrightClaimListReqNew) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *CopyrightClaimListReqNew) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *CopyrightClaimListReqNew) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *CopyrightClaimListReqNew) GetContractIds() string {
	if x != nil {
		return x.ContractIds
	}
	return ""
}

func (x *CopyrightClaimListReqNew) GetAuditStatus() string {
	if x != nil {
		return x.AuditStatus
	}
	return ""
}

func (x *CopyrightClaimListReqNew) GetAuditTimeStart() uint32 {
	if x != nil {
		return x.AuditTimeStart
	}
	return 0
}

func (x *CopyrightClaimListReqNew) GetAuditTimeEnd() uint32 {
	if x != nil {
		return x.AuditTimeEnd
	}
	return 0
}

func (x *CopyrightClaimListReqNew) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *CopyrightClaimListReqNew) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *CopyrightClaimListReqNew) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CopyrightClaimListReqNew) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AuthorizationClaimListReqNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          uint32 `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthorizationId uint32 `protobuf:"varint,1,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`
	CopyrightTitle  string `protobuf:"bytes,2,opt,name=copyright_title,json=copyrightTitle,proto3" json:"copyright_title,omitempty"`
	CopyrightHash   string `protobuf:"bytes,3,opt,name=copyright_hash,json=copyrightHash,proto3" json:"copyright_hash,omitempty"`
	CopyrightType   uint32 `protobuf:"varint,4,opt,name=copyright_type,json=copyrightType,proto3" json:"copyright_type,omitempty"`
	IsOriginal      string `protobuf:"bytes,5,opt,name=is_original,json=isOriginal,proto3" json:"is_original,omitempty"`
	CreateTimeStart uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd   uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page            uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *AuthorizationClaimListReqNew) Reset() {
	*x = AuthorizationClaimListReqNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationClaimListReqNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationClaimListReqNew) ProtoMessage() {}

func (x *AuthorizationClaimListReqNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationClaimListReqNew.ProtoReflect.Descriptor instead.
func (*AuthorizationClaimListReqNew) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyrightnew_proto_rawDescGZIP(), []int{5}
}

func (x *AuthorizationClaimListReqNew) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthorizationClaimListReqNew) GetAuthorizationId() uint32 {
	if x != nil {
		return x.AuthorizationId
	}
	return 0
}

func (x *AuthorizationClaimListReqNew) GetCopyrightTitle() string {
	if x != nil {
		return x.CopyrightTitle
	}
	return ""
}

func (x *AuthorizationClaimListReqNew) GetCopyrightHash() string {
	if x != nil {
		return x.CopyrightHash
	}
	return ""
}

func (x *AuthorizationClaimListReqNew) GetCopyrightType() uint32 {
	if x != nil {
		return x.CopyrightType
	}
	return 0
}

func (x *AuthorizationClaimListReqNew) GetIsOriginal() string {
	if x != nil {
		return x.IsOriginal
	}
	return ""
}

func (x *AuthorizationClaimListReqNew) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *AuthorizationClaimListReqNew) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *AuthorizationClaimListReqNew) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AuthorizationClaimListReqNew) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CopyrightAuthorizationListReqNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                uint32 `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Credential            string `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	AuthorizationIds      string `protobuf:"bytes,2,opt,name=authorization_ids,json=authorizationIds,proto3" json:"authorization_ids,omitempty"`
	ContractIds           string `protobuf:"bytes,3,opt,name=contract_ids,json=contractIds,proto3" json:"contract_ids,omitempty"`
	AuthorizerUserAddress string `protobuf:"bytes,4,opt,name=authorizer_user_address,json=authorizerUserAddress,proto3" json:"authorizer_user_address,omitempty"`
	AuthorizedUserAddress string `protobuf:"bytes,5,opt,name=authorized_user_address,json=authorizedUserAddress,proto3" json:"authorized_user_address,omitempty"`
	AuthorizationCode     string `protobuf:"bytes,6,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	AuthorizationType     uint32 `protobuf:"varint,7,opt,name=authorization_type,json=authorizationType,proto3" json:"authorization_type,omitempty"`
	CreateTimeStart       uint32 `protobuf:"varint,8,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd         uint32 `protobuf:"varint,9,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page                  uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit                 uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CopyrightAuthorizationListReqNew) Reset() {
	*x = CopyrightAuthorizationListReqNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightAuthorizationListReqNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightAuthorizationListReqNew) ProtoMessage() {}

func (x *CopyrightAuthorizationListReqNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightAuthorizationListReqNew.ProtoReflect.Descriptor instead.
func (*CopyrightAuthorizationListReqNew) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyrightnew_proto_rawDescGZIP(), []int{6}
}

func (x *CopyrightAuthorizationListReqNew) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CopyrightAuthorizationListReqNew) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *CopyrightAuthorizationListReqNew) GetAuthorizationIds() string {
	if x != nil {
		return x.AuthorizationIds
	}
	return ""
}

func (x *CopyrightAuthorizationListReqNew) GetContractIds() string {
	if x != nil {
		return x.ContractIds
	}
	return ""
}

func (x *CopyrightAuthorizationListReqNew) GetAuthorizerUserAddress() string {
	if x != nil {
		return x.AuthorizerUserAddress
	}
	return ""
}

func (x *CopyrightAuthorizationListReqNew) GetAuthorizedUserAddress() string {
	if x != nil {
		return x.AuthorizedUserAddress
	}
	return ""
}

func (x *CopyrightAuthorizationListReqNew) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

func (x *CopyrightAuthorizationListReqNew) GetAuthorizationType() uint32 {
	if x != nil {
		return x.AuthorizationType
	}
	return 0
}

func (x *CopyrightAuthorizationListReqNew) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *CopyrightAuthorizationListReqNew) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *CopyrightAuthorizationListReqNew) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CopyrightAuthorizationListReqNew) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ContractCreateReqNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            uint32 `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CopyrightClaimIds string `protobuf:"bytes,1,opt,name=copyright_claim_ids,json=copyrightClaimIds,proto3" json:"copyright_claim_ids,omitempty"`
	AuthorizedNumber  uint32 `protobuf:"varint,2,opt,name=authorized_number,json=authorizedNumber,proto3" json:"authorized_number,omitempty"`
	CopyrightCategory string `protobuf:"bytes,3,opt,name=copyright_category,json=copyrightCategory,proto3" json:"copyright_category,omitempty"`
	Content           string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ContractCreateReqNew) Reset() {
	*x = ContractCreateReqNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCreateReqNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCreateReqNew) ProtoMessage() {}

func (x *ContractCreateReqNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCreateReqNew.ProtoReflect.Descriptor instead.
func (*ContractCreateReqNew) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyrightnew_proto_rawDescGZIP(), []int{7}
}

func (x *ContractCreateReqNew) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContractCreateReqNew) GetCopyrightClaimIds() string {
	if x != nil {
		return x.CopyrightClaimIds
	}
	return ""
}

func (x *ContractCreateReqNew) GetAuthorizedNumber() uint32 {
	if x != nil {
		return x.AuthorizedNumber
	}
	return 0
}

func (x *ContractCreateReqNew) GetCopyrightCategory() string {
	if x != nil {
		return x.CopyrightCategory
	}
	return ""
}

func (x *ContractCreateReqNew) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ContractAuthorizationReqNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId           uint32                      `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AuthorizedAddress    string                      `protobuf:"bytes,2,opt,name=authorized_address,json=authorizedAddress,proto3" json:"authorized_address,omitempty"`
	AuthorizationContent string                      `protobuf:"bytes,3,opt,name=authorization_content,json=authorizationContent,proto3" json:"authorization_content,omitempty"`
	Claim                *ContractAuthorizationClaim `protobuf:"bytes,4,opt,name=claim,proto3" json:"claim,omitempty"`
	Remarks              string                      `protobuf:"bytes,5,opt,name=remarks,proto3" json:"remarks,omitempty"`
	UserId               uint32                      `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NotifyUrl            string                      `protobuf:"bytes,7,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	NotifyOpts           string                      `protobuf:"bytes,8,opt,name=notify_opts,json=notifyOpts,proto3" json:"notify_opts,omitempty"`
}

func (x *ContractAuthorizationReqNew) Reset() {
	*x = ContractAuthorizationReqNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractAuthorizationReqNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAuthorizationReqNew) ProtoMessage() {}

func (x *ContractAuthorizationReqNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAuthorizationReqNew.ProtoReflect.Descriptor instead.
func (*ContractAuthorizationReqNew) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyrightnew_proto_rawDescGZIP(), []int{8}
}

func (x *ContractAuthorizationReqNew) GetContractId() uint32 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractAuthorizationReqNew) GetAuthorizedAddress() string {
	if x != nil {
		return x.AuthorizedAddress
	}
	return ""
}

func (x *ContractAuthorizationReqNew) GetAuthorizationContent() string {
	if x != nil {
		return x.AuthorizationContent
	}
	return ""
}

func (x *ContractAuthorizationReqNew) GetClaim() *ContractAuthorizationClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *ContractAuthorizationReqNew) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ContractAuthorizationReqNew) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContractAuthorizationReqNew) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *ContractAuthorizationReqNew) GetNotifyOpts() string {
	if x != nil {
		return x.NotifyOpts
	}
	return ""
}

type ContractListReqNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          uint32 `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ContractIds     string `protobuf:"bytes,1,opt,name=contract_ids,json=contractIds,proto3" json:"contract_ids,omitempty"`
	CreateTimeStart uint32 `protobuf:"varint,10,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd   uint32 `protobuf:"varint,11,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page            uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ContractListReqNew) Reset() {
	*x = ContractListReqNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractListReqNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractListReqNew) ProtoMessage() {}

func (x *ContractListReqNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_copyrightnew_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractListReqNew.ProtoReflect.Descriptor instead.
func (*ContractListReqNew) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_copyrightnew_proto_rawDescGZIP(), []int{9}
}

func (x *ContractListReqNew) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContractListReqNew) GetContractIds() string {
	if x != nil {
		return x.ContractIds
	}
	return ""
}

func (x *ContractListReqNew) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *ContractListReqNew) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *ContractListReqNew) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ContractListReqNew) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_pb_dassetpb_copyrightnew_proto protoreflect.FileDescriptor

var file_pb_dassetpb_copyrightnew_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2f, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2f,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xff, 0x04, 0x0a, 0x17, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41,
	0x0a, 0x32, 0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x76, 0x0a,
	0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4f, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xbd, 0x9c, 0xe5,
	0x93, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0x9b, 0xbe, 0xe7,
	0x89, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xef, 0xbc, 0x9b,
	0x33, 0x2d, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0x33, 0x44, 0xef,
	0xbc, 0x9b, 0x35, 0x2d, 0xe7, 0xa4, 0xbe, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81,
	0xef, 0xbc, 0x9b, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41,
	0x1d, 0x32, 0x1b, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5,
	0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x64, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x38, 0x32, 0x36, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe9, 0x93,
	0xbe, 0xe6, 0x8e, 0xa5, 0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x93, 0xbe,
	0xe6, 0x8e, 0xa5, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe9,
	0x9a, 0x94, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x5d, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38,
	0x92, 0x41, 0x32, 0x32, 0x30, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93,
	0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0xe7, 0xa7,
	0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x31, 0x36, 0x36, 0x31, 0x39, 0x36,
	0x31, 0x36, 0x30, 0x30, 0x29, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e,
	0x32, 0x1c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x9b, 0xef, 0xbc,
	0x9a, 0x30, 0x2d, 0xe5, 0x90, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x52, 0x0a,
	0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08,
	0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0x93, 0x09, 0x0a, 0x21, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20,
	0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x0e, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x4f, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xef, 0xbc,
	0x9b, 0x32, 0x2d, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xa4,
	0xb4, 0xe5, 0x83, 0x8f, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0x33, 0x44, 0xef, 0xbc, 0x9b, 0x35, 0x2d,
	0xe7, 0xa4, 0xbe, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xef, 0xbc, 0x9b, 0xe0,
	0x41, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe7,
	0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd,
	0x9c, 0xe4, 0xba, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5d, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbd,
	0x9c, 0xe5, 0x93, 0x81, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5,
	0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xe7,
	0x94, 0xa8, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0x28, 0x2c, 0x29, 0xe5, 0x88, 0x86, 0xe9, 0x9a,
	0x94, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x5a, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83,
	0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x28, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x31,
	0x36, 0x36, 0x31, 0x39, 0x36, 0x31, 0x36, 0x30, 0x30, 0x29, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92,
	0x41, 0x1e, 0x32, 0x1c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x9b,
	0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x90, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x98, 0xaf,
	0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x07,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x32, 0x12, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0,
	0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x30, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72,
	0x6c, 0x12, 0x5e, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x38, 0xe5, 0x8f, 0xaf,
	0xe9, 0x80, 0x89, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x2c, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92,
	0xe4, 0xbb, 0x80, 0xe4, 0xb9, 0x88, 0x2c, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0xe7, 0x9a, 0x84,
	0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe5, 0xb8, 0xa6, 0xe5, 0x9b, 0x9e, 0xe5, 0x8e, 0xbb, 0xe4,
	0xbb, 0x80, 0xe4, 0xb9, 0x88, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74,
	0x73, 0x12, 0x67, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98,
	0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x70, 0x0a, 0x12, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x98, 0x01, 0x0a,
	0x20, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x1e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x05, 0x0a, 0x1b, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20,
	0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7,
	0x9a, 0x84, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb,
	0xe8, 0xae, 0xb0, 0x48, 0x61, 0x73, 0x68, 0xe5, 0x80, 0xbc, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x73, 0x0a, 0x0e, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xef, 0xbc,
	0x9b, 0x32, 0x2d, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xa4,
	0xb4, 0xe5, 0x83, 0x8f, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0x33, 0x44, 0xef, 0xbc, 0x9b, 0x35, 0x2d,
	0xe7, 0xa4, 0xbe, 0xe4, 0xba, 0xa4, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xef, 0xbc, 0x9b, 0x52,
	0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x9b, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x90, 0xa6, 0xef, 0xbc,
	0x9b, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6,
	0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92,
	0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6,
	0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x81, 0x02, 0x0a,
	0x17, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x12, 0x36, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x89, 0x88,
	0xe6, 0x9d, 0x83, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xad, 0x98,
	0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32,
	0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x22, 0x9b, 0x07, 0x0a, 0x18, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x12, 0x36, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d,
	0x92, 0x41, 0x10, 0x32, 0x0e, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32,
	0x12, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe7, 0x89,
	0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x48, 0x61, 0x73, 0x68, 0xe5, 0x80,
	0xbc, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x27, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x75, 0x75, 0x69, 0x64, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x10, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0xe4, 0xba, 0xba, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d,
	0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x69, 0x64, 0x73, 0x20, 0x20, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8,
	0xaa, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x67, 0x0a, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x3f, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0xe7, 0xa9, 0xba, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xef,
	0xbc, 0x9b, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xef, 0xbc, 0x9b,
	0x31, 0x2d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xb8, 0x8d,
	0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x32, 0x21, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6,
	0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92,
	0x41, 0x24, 0x32, 0x22, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92,
	0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7,
	0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1,
	0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc6,
	0x05, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x12,
	0x39, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x20, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe6, 0x8c, 0x81,
	0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0x49, 0x44, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6, 0x8e, 0x88, 0xe6, 0x9d,
	0x83, 0x69, 0x64, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x32, 0x0f, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7, 0x9a, 0x84, 0xe6, 0xa0, 0x87,
	0xe9, 0xa2, 0x98, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x32, 0x13, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x48, 0x61,
	0x73, 0x68, 0xe5, 0x80, 0xbc, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x73, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4c, 0x92, 0x41,
	0x49, 0x32, 0x47, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a,
	0x20, 0x31, 0x2d, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe8, 0xa7,
	0x86, 0xe9, 0xa2, 0x91, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xef,
	0xbc, 0x9b, 0x34, 0x2d, 0x33, 0x44, 0xef, 0xbc, 0x9b, 0x35, 0x2d, 0xe7, 0xa4, 0xbe, 0xe4, 0xba,
	0xa4, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xef, 0xbc, 0x9b, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8e, 0x9f, 0xe5, 0x88,
	0x9b, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x90, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x98,
	0xaf, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x52, 0x0a,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32,
	0x22, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xeb, 0x06, 0x0a, 0x20, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x12, 0x33, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x0d, 0x32, 0x0b, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0x49, 0x44, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6,
	0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x69, 0x64, 0x20, 0xe5,
	0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89,
	0xb2, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b,
	0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x69, 0x64, 0x20, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9,
	0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x17,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x32, 0x18, 0xe8, 0xa2, 0xab, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xa0, 0x81, 0x52,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38,
	0x92, 0x41, 0x2c, 0x32, 0x2a, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x30, 0xe6, 0x88, 0x91, 0xe6,
	0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x9a, 0x84, 0x31, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7,
	0xbb, 0x99, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0x32, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xfa,
	0x42, 0x06, 0x2a, 0x04, 0x18, 0x02, 0x28, 0x00, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x4f, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe6,
	0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0x20, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6,
	0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x12, 0x3c,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x23, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x90, 0x88, 0xe7,
	0xba, 0xa6, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x13,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x1b,
	0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x69, 0x64, 0x20, 0xe9,
	0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x6b, 0x92, 0x41, 0x65, 0x32, 0x63, 0xe5, 0x90, 0x88, 0xe7, 0xba,
	0xa6, 0xe5, 0x9c, 0xa8, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0xe7, 0x9a, 0x84, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe5, 0x8f, 0xaf, 0xe9, 0x93, 0xb8, 0xe9,
	0x80, 0xa0, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0x2c, 0xe5,
	0x8f, 0x96, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x20, 0xe5,
	0x8f, 0xaf, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x80,
	0xbb, 0xe9, 0x87, 0x8f, 0x20, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x80, 0xbc, 0xe0, 0x41,
	0x02, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe7, 0xb1, 0xbb, 0xe5,
	0x88, 0xab, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe8, 0xaf, 0xb4,
	0xe6, 0x98, 0x8e, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd9, 0x04, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a,
	0x32, 0x08, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x69, 0x64, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x57, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41,
	0x1b, 0x32, 0x19, 0xe8, 0xa2, 0xab, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6,
	0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x25, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41,
	0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x23, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0,
	0x83, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x5e, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x38, 0xe5, 0x8f,
	0xaf, 0xe9, 0x80, 0x89, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x2c, 0xe4, 0xbc, 0xa0, 0xe9, 0x80,
	0x92, 0xe4, 0xbb, 0x80, 0xe4, 0xb9, 0x88, 0x2c, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0xe7, 0x9a,
	0x84, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe5, 0xb8, 0xa6, 0xe5, 0x9b, 0x9e, 0xe5, 0x8e, 0xbb,
	0xe4, 0xbb, 0x80, 0xe4, 0xb9, 0x88, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70,
	0x74, 0x73, 0x22, 0x85, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x69, 0x64,
	0x20, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86,
	0xe5, 0x89, 0xb2, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x52, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23,
	0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80,
	0xe5, 0xb0, 0x8f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92,
	0x41, 0x24, 0x32, 0x22, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0,
	0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x16, 0x5a, 0x14, 0x70, 0x62,
	0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x3b, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_dassetpb_copyrightnew_proto_rawDescOnce sync.Once
	file_pb_dassetpb_copyrightnew_proto_rawDescData = file_pb_dassetpb_copyrightnew_proto_rawDesc
)

func file_pb_dassetpb_copyrightnew_proto_rawDescGZIP() []byte {
	file_pb_dassetpb_copyrightnew_proto_rawDescOnce.Do(func() {
		file_pb_dassetpb_copyrightnew_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_dassetpb_copyrightnew_proto_rawDescData)
	})
	return file_pb_dassetpb_copyrightnew_proto_rawDescData
}

var file_pb_dassetpb_copyrightnew_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_pb_dassetpb_copyrightnew_proto_goTypes = []interface{}{
	(*CopyrightRegisterReqNew)(nil),                // 0: daop.pb.dassetpb.CopyrightRegisterReqNew
	(*CopyrightClaimAuthorizationReqNew)(nil),      // 1: daop.pb.dassetpb.CopyrightClaimAuthorizationReqNew
	(*CopyrightRegisterListReqNew)(nil),            // 2: daop.pb.dassetpb.CopyrightRegisterListReqNew
	(*CopyrightClaimAddReqNew)(nil),                // 3: daop.pb.dassetpb.CopyrightClaimAddReqNew
	(*CopyrightClaimListReqNew)(nil),               // 4: daop.pb.dassetpb.CopyrightClaimListReqNew
	(*AuthorizationClaimListReqNew)(nil),           // 5: daop.pb.dassetpb.AuthorizationClaimListReqNew
	(*CopyrightAuthorizationListReqNew)(nil),       // 6: daop.pb.dassetpb.CopyrightAuthorizationListReqNew
	(*ContractCreateReqNew)(nil),                   // 7: daop.pb.dassetpb.ContractCreateReqNew
	(*ContractAuthorizationReqNew)(nil),            // 8: daop.pb.dassetpb.ContractAuthorizationReqNew
	(*ContractListReqNew)(nil),                     // 9: daop.pb.dassetpb.ContractListReqNew
	(*CopyrightClaimRegister)(nil),                 // 10: daop.pb.dassetpb.CopyrightClaimRegister
	(*CopyrightContractRegister)(nil),              // 11: daop.pb.dassetpb.CopyrightContractRegister
	(*CopyrightContractAuthorizationRegister)(nil), // 12: daop.pb.dassetpb.CopyrightContractAuthorizationRegister
	(*CopyrightClaim)(nil),                         // 13: daop.pb.dassetpb.CopyrightClaim
	(*ContractAuthorizationClaim)(nil),             // 14: daop.pb.dassetpb.ContractAuthorizationClaim
}
var file_pb_dassetpb_copyrightnew_proto_depIdxs = []int32{
	10, // 0: daop.pb.dassetpb.CopyrightClaimAuthorizationReqNew.copyright_claim:type_name -> daop.pb.dassetpb.CopyrightClaimRegister
	11, // 1: daop.pb.dassetpb.CopyrightClaimAuthorizationReqNew.copyright_contract:type_name -> daop.pb.dassetpb.CopyrightContractRegister
	12, // 2: daop.pb.dassetpb.CopyrightClaimAuthorizationReqNew.copyright_contract_authorization:type_name -> daop.pb.dassetpb.CopyrightContractAuthorizationRegister
	13, // 3: daop.pb.dassetpb.CopyrightClaimAddReqNew.claim:type_name -> daop.pb.dassetpb.CopyrightClaim
	14, // 4: daop.pb.dassetpb.ContractAuthorizationReqNew.claim:type_name -> daop.pb.dassetpb.ContractAuthorizationClaim
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_pb_dassetpb_copyrightnew_proto_init() }
func file_pb_dassetpb_copyrightnew_proto_init() {
	if File_pb_dassetpb_copyrightnew_proto != nil {
		return
	}
	file_pb_dassetpb_copyright_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pb_dassetpb_copyrightnew_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightRegisterReqNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyrightnew_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimAuthorizationReqNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyrightnew_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightRegisterListReqNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyrightnew_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimAddReqNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyrightnew_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimListReqNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyrightnew_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationClaimListReqNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyrightnew_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightAuthorizationListReqNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyrightnew_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCreateReqNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyrightnew_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractAuthorizationReqNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_copyrightnew_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractListReqNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_dassetpb_copyrightnew_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_dassetpb_copyrightnew_proto_goTypes,
		DependencyIndexes: file_pb_dassetpb_copyrightnew_proto_depIdxs,
		MessageInfos:      file_pb_dassetpb_copyrightnew_proto_msgTypes,
	}.Build()
	File_pb_dassetpb_copyrightnew_proto = out.File
	file_pb_dassetpb_copyrightnew_proto_rawDesc = nil
	file_pb_dassetpb_copyrightnew_proto_goTypes = nil
	file_pb_dassetpb_copyrightnew_proto_depIdxs = nil
}
