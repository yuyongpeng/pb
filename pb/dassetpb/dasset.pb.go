// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/dassetpb/dasset.proto

package dassetpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 空参数请求
type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R *emptypb.Empty `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{0}
}

func (x *EmptyReq) GetR() *emptypb.Empty {
	if x != nil {
		return x.R
	}
	return nil
}

type ClaimProofReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claim          string `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	CredentialType uint32 `protobuf:"varint,2,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty"`
}

func (x *ClaimProofReq) Reset() {
	*x = ClaimProofReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimProofReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimProofReq) ProtoMessage() {}

func (x *ClaimProofReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimProofReq.ProtoReflect.Descriptor instead.
func (*ClaimProofReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{1}
}

func (x *ClaimProofReq) GetClaim() string {
	if x != nil {
		return x.Claim
	}
	return ""
}

func (x *ClaimProofReq) GetCredentialType() uint32 {
	if x != nil {
		return x.CredentialType
	}
	return 0
}

type ClaimProofResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ClaimProofResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ClaimProofResp) Reset() {
	*x = ClaimProofResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimProofResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimProofResp) ProtoMessage() {}

func (x *ClaimProofResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimProofResp.ProtoReflect.Descriptor instead.
func (*ClaimProofResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{2}
}

func (x *ClaimProofResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ClaimProofResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ClaimProofResp) GetData() *ClaimProofResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyrightClaimCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyrightClaimId uint32 `protobuf:"varint,1,opt,name=copyright_claim_id,json=copyrightClaimId,proto3" json:"copyright_claim_id,omitempty"`
	AuditStatus      uint32 `protobuf:"varint,2,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	RejectReason     string `protobuf:"bytes,3,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
}

func (x *CopyrightClaimCheckReq) Reset() {
	*x = CopyrightClaimCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightClaimCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightClaimCheckReq) ProtoMessage() {}

func (x *CopyrightClaimCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightClaimCheckReq.ProtoReflect.Descriptor instead.
func (*CopyrightClaimCheckReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{3}
}

func (x *CopyrightClaimCheckReq) GetCopyrightClaimId() uint32 {
	if x != nil {
		return x.CopyrightClaimId
	}
	return 0
}

func (x *CopyrightClaimCheckReq) GetAuditStatus() uint32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *CopyrightClaimCheckReq) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

type DidCredentialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claim *DidCredentialClaim `protobuf:"bytes,8,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *DidCredentialReq) Reset() {
	*x = DidCredentialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidCredentialReq) ProtoMessage() {}

func (x *DidCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidCredentialReq.ProtoReflect.Descriptor instead.
func (*DidCredentialReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{4}
}

func (x *DidCredentialReq) GetClaim() *DidCredentialClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

type DidCredentialClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidType     string `protobuf:"bytes,1,opt,name=did_type,json=didType,proto3" json:"did_type,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Profile     string `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	Address     string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	DeclareTime string `protobuf:"bytes,5,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension   string `protobuf:"bytes,6,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DidCredentialClaim) Reset() {
	*x = DidCredentialClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidCredentialClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidCredentialClaim) ProtoMessage() {}

func (x *DidCredentialClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidCredentialClaim.ProtoReflect.Descriptor instead.
func (*DidCredentialClaim) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{5}
}

func (x *DidCredentialClaim) GetDidType() string {
	if x != nil {
		return x.DidType
	}
	return ""
}

func (x *DidCredentialClaim) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DidCredentialClaim) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *DidCredentialClaim) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DidCredentialClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *DidCredentialClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type DidCredentialResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *DidCredentialResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DidCredentialResp) Reset() {
	*x = DidCredentialResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidCredentialResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidCredentialResp) ProtoMessage() {}

func (x *DidCredentialResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidCredentialResp.ProtoReflect.Descriptor instead.
func (*DidCredentialResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{6}
}

func (x *DidCredentialResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DidCredentialResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DidCredentialResp) GetData() *DidCredentialResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CredentialInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialId uint32 `protobuf:"varint,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *CredentialInfoReq) Reset() {
	*x = CredentialInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialInfoReq) ProtoMessage() {}

func (x *CredentialInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialInfoReq.ProtoReflect.Descriptor instead.
func (*CredentialInfoReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{7}
}

func (x *CredentialInfoReq) GetCredentialId() uint32 {
	if x != nil {
		return x.CredentialId
	}
	return 0
}

type CredentialInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CredentialInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CredentialInfoResp) Reset() {
	*x = CredentialInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialInfoResp) ProtoMessage() {}

func (x *CredentialInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialInfoResp.ProtoReflect.Descriptor instead.
func (*CredentialInfoResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{8}
}

func (x *CredentialInfoResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CredentialInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CredentialInfoResp) GetData() *CredentialInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CredentialListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialIds           string `protobuf:"bytes,1,opt,name=credential_ids,json=credentialIds,proto3" json:"credential_ids,omitempty"`
	CredentialType          uint32 `protobuf:"varint,2,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty"`
	Credential              string `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
	HolderAddress           string `protobuf:"bytes,4,opt,name=holder_address,json=holderAddress,proto3" json:"holder_address,omitempty"`
	DidCredential           string `protobuf:"bytes,5,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential     string `protobuf:"bytes,6,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCredential string `protobuf:"bytes,7,opt,name=authorization_credential,json=authorizationCredential,proto3" json:"authorization_credential,omitempty"`
	CollectionCredential    string `protobuf:"bytes,8,opt,name=collection_credential,json=collectionCredential,proto3" json:"collection_credential,omitempty"`
	Hash                    string `protobuf:"bytes,10,opt,name=hash,proto3" json:"hash,omitempty"`
	ChainTxid               string `protobuf:"bytes,11,opt,name=chain_txid,json=chainTxid,proto3" json:"chain_txid,omitempty"`
	ChainBlockNumber        string `protobuf:"bytes,12,opt,name=chain_block_number,json=chainBlockNumber,proto3" json:"chain_block_number,omitempty"`
	ChainTimeStart          uint32 `protobuf:"varint,13,opt,name=chain_time_start,json=chainTimeStart,proto3" json:"chain_time_start,omitempty"`
	ChainTimeEnd            uint32 `protobuf:"varint,14,opt,name=chain_time_end,json=chainTimeEnd,proto3" json:"chain_time_end,omitempty"`
	ChainStatus             string `protobuf:"bytes,15,opt,name=chain_status,json=chainStatus,proto3" json:"chain_status,omitempty"`
	CreateTimeStart         uint32 `protobuf:"varint,17,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd           uint32 `protobuf:"varint,18,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Page                    uint32 `protobuf:"varint,19,opt,name=page,proto3" json:"page,omitempty"`
	Limit                   uint32 `protobuf:"varint,20,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CredentialListReq) Reset() {
	*x = CredentialListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialListReq) ProtoMessage() {}

func (x *CredentialListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialListReq.ProtoReflect.Descriptor instead.
func (*CredentialListReq) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{9}
}

func (x *CredentialListReq) GetCredentialIds() string {
	if x != nil {
		return x.CredentialIds
	}
	return ""
}

func (x *CredentialListReq) GetCredentialType() uint32 {
	if x != nil {
		return x.CredentialType
	}
	return 0
}

func (x *CredentialListReq) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *CredentialListReq) GetHolderAddress() string {
	if x != nil {
		return x.HolderAddress
	}
	return ""
}

func (x *CredentialListReq) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CredentialListReq) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *CredentialListReq) GetAuthorizationCredential() string {
	if x != nil {
		return x.AuthorizationCredential
	}
	return ""
}

func (x *CredentialListReq) GetCollectionCredential() string {
	if x != nil {
		return x.CollectionCredential
	}
	return ""
}

func (x *CredentialListReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CredentialListReq) GetChainTxid() string {
	if x != nil {
		return x.ChainTxid
	}
	return ""
}

func (x *CredentialListReq) GetChainBlockNumber() string {
	if x != nil {
		return x.ChainBlockNumber
	}
	return ""
}

func (x *CredentialListReq) GetChainTimeStart() uint32 {
	if x != nil {
		return x.ChainTimeStart
	}
	return 0
}

func (x *CredentialListReq) GetChainTimeEnd() uint32 {
	if x != nil {
		return x.ChainTimeEnd
	}
	return 0
}

func (x *CredentialListReq) GetChainStatus() string {
	if x != nil {
		return x.ChainStatus
	}
	return ""
}

func (x *CredentialListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *CredentialListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *CredentialListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CredentialListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CredentialListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CredentialListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CredentialListResp) Reset() {
	*x = CredentialListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialListResp) ProtoMessage() {}

func (x *CredentialListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialListResp.ProtoReflect.Descriptor instead.
func (*CredentialListResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{10}
}

func (x *CredentialListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CredentialListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CredentialListResp) GetData() *CredentialListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CredentialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialId            uint32 `protobuf:"varint,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	Credential              string `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
	CredentialType          uint32 `protobuf:"varint,3,opt,name=credential_type,json=credentialType,proto3" json:"credential_type,omitempty"`
	CreatorUid              uint32 `protobuf:"varint,4,opt,name=creator_uid,json=creatorUid,proto3" json:"creator_uid,omitempty"`
	CreatorUidName          string `protobuf:"bytes,5,opt,name=creator_uid_name,json=creatorUidName,proto3" json:"creator_uid_name,omitempty"`
	HolderAddress           string `protobuf:"bytes,6,opt,name=holder_address,json=holderAddress,proto3" json:"holder_address,omitempty"`
	DidCredential           string `protobuf:"bytes,7,opt,name=did_credential,json=didCredential,proto3" json:"did_credential,omitempty"`
	CopyrightCredential     string `protobuf:"bytes,8,opt,name=copyright_credential,json=copyrightCredential,proto3" json:"copyright_credential,omitempty"`
	AuthorizationCredential string `protobuf:"bytes,9,opt,name=authorization_credential,json=authorizationCredential,proto3" json:"authorization_credential,omitempty"`
	CollectionCredential    string `protobuf:"bytes,10,opt,name=collection_credential,json=collectionCredential,proto3" json:"collection_credential,omitempty"`
	Hash                    string `protobuf:"bytes,11,opt,name=hash,proto3" json:"hash,omitempty"`
	ChainTxid               string `protobuf:"bytes,12,opt,name=chain_txid,json=chainTxid,proto3" json:"chain_txid,omitempty"`
	ChainBlockNumber        uint32 `protobuf:"varint,13,opt,name=chain_block_number,json=chainBlockNumber,proto3" json:"chain_block_number,omitempty"`
	ChainStatus             uint32 `protobuf:"varint,14,opt,name=chain_status,json=chainStatus,proto3" json:"chain_status,omitempty"`
	ChainFailedReason       string `protobuf:"bytes,15,opt,name=chain_failed_reason,json=chainFailedReason,proto3" json:"chain_failed_reason,omitempty"`
	ChainTime               uint32 `protobuf:"varint,16,opt,name=chain_time,json=chainTime,proto3" json:"chain_time,omitempty"`
	CreateTime              uint32 `protobuf:"varint,18,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *CredentialInfo) Reset() {
	*x = CredentialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialInfo) ProtoMessage() {}

func (x *CredentialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialInfo.ProtoReflect.Descriptor instead.
func (*CredentialInfo) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{11}
}

func (x *CredentialInfo) GetCredentialId() uint32 {
	if x != nil {
		return x.CredentialId
	}
	return 0
}

func (x *CredentialInfo) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *CredentialInfo) GetCredentialType() uint32 {
	if x != nil {
		return x.CredentialType
	}
	return 0
}

func (x *CredentialInfo) GetCreatorUid() uint32 {
	if x != nil {
		return x.CreatorUid
	}
	return 0
}

func (x *CredentialInfo) GetCreatorUidName() string {
	if x != nil {
		return x.CreatorUidName
	}
	return ""
}

func (x *CredentialInfo) GetHolderAddress() string {
	if x != nil {
		return x.HolderAddress
	}
	return ""
}

func (x *CredentialInfo) GetDidCredential() string {
	if x != nil {
		return x.DidCredential
	}
	return ""
}

func (x *CredentialInfo) GetCopyrightCredential() string {
	if x != nil {
		return x.CopyrightCredential
	}
	return ""
}

func (x *CredentialInfo) GetAuthorizationCredential() string {
	if x != nil {
		return x.AuthorizationCredential
	}
	return ""
}

func (x *CredentialInfo) GetCollectionCredential() string {
	if x != nil {
		return x.CollectionCredential
	}
	return ""
}

func (x *CredentialInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CredentialInfo) GetChainTxid() string {
	if x != nil {
		return x.ChainTxid
	}
	return ""
}

func (x *CredentialInfo) GetChainBlockNumber() uint32 {
	if x != nil {
		return x.ChainBlockNumber
	}
	return 0
}

func (x *CredentialInfo) GetChainStatus() uint32 {
	if x != nil {
		return x.ChainStatus
	}
	return 0
}

func (x *CredentialInfo) GetChainFailedReason() string {
	if x != nil {
		return x.ChainFailedReason
	}
	return ""
}

func (x *CredentialInfo) GetChainTime() uint32 {
	if x != nil {
		return x.ChainTime
	}
	return 0
}

func (x *CredentialInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 返回的基础结构类型
type BaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseResp) Reset() {
	*x = BaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResp) ProtoMessage() {}

func (x *BaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResp.ProtoReflect.Descriptor instead.
func (*BaseResp) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{12}
}

func (x *BaseResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ClaimProofResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof string `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *ClaimProofResp_Data) Reset() {
	*x = ClaimProofResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimProofResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimProofResp_Data) ProtoMessage() {}

func (x *ClaimProofResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimProofResp_Data.ProtoReflect.Descriptor instead.
func (*ClaimProofResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ClaimProofResp_Data) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

type DidCredentialResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialId uint32 `protobuf:"varint,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	Credential   string `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *DidCredentialResp_Data) Reset() {
	*x = DidCredentialResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidCredentialResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidCredentialResp_Data) ProtoMessage() {}

func (x *DidCredentialResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidCredentialResp_Data.ProtoReflect.Descriptor instead.
func (*DidCredentialResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DidCredentialResp_Data) GetCredentialId() uint32 {
	if x != nil {
		return x.CredentialId
	}
	return 0
}

func (x *DidCredentialResp_Data) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

type CredentialListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*CredentialInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CredentialListResp_Data) Reset() {
	*x = CredentialListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dassetpb_dasset_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialListResp_Data) ProtoMessage() {}

func (x *CredentialListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dassetpb_dasset_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialListResp_Data.ProtoReflect.Descriptor instead.
func (*CredentialListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_dassetpb_dasset_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CredentialListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CredentialListResp_Data) GetData() []*CredentialInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pb_dassetpb_dasset_proto protoreflect.FileDescriptor

var file_pb_dassetpb_dasset_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2f, 0x64, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x62, 0x2f, 0x64, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a,
	0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x01, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x01, 0x72, 0x22,
	0xe4, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x71, 0x12, 0x39, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x16, 0x32, 0x14, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x20, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x97, 0x01, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6e, 0x92, 0x41, 0x68, 0x32, 0x66, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad,
	0x98, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x35, 0x2d, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81,
	0x2e, 0x2e, 0x2e, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1c, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x44, 0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x27, 0x92, 0x41, 0x18, 0x32, 0x16, 0x31, 0x2d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc,
	0x9b, 0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x06, 0x2a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe6, 0x8b, 0x92, 0xe7, 0xbb, 0x9d, 0xe7, 0x90, 0x86, 0xe7, 0x94, 0xb1, 0x52,
	0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6a, 0x0a,
	0x10, 0x44, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x56, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xad, 0x98,
	0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0xa2, 0x03, 0x0a, 0x12, 0x44, 0x69,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x7f, 0x0a, 0x08, 0x64, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x64, 0x92, 0x41, 0x57, 0x32, 0x55, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe8,
	0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x3a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x3b, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0x3a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x3b, 0xe4, 0xb8, 0xaa, 0xe4,
	0xbd, 0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7, 0x3a, 0x69, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x64, 0x69, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x32, 0x06, 0xe7, 0xae, 0x80, 0xe7, 0xa7, 0xb0, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92,
	0x41, 0x31, 0x32, 0x2f, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e, 0xe6,
	0x80, 0xa7, 0x29, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc4,
	0x01, 0x0a, 0x11, 0x44, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x47, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x69, 0x64,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x70,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xc9, 0x0b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x69, 0x64, 0x73, 0x20, 0xe5,
	0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe9, 0x9a,
	0x94, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73,
	0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x78, 0x92, 0x41, 0x75, 0x32,
	0x73, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a,
	0x30, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x31, 0x2d, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83,
	0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe6, 0x8e, 0x88, 0xe6, 0x9d,
	0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x35, 0x2d, 0xe8, 0x97, 0x8f,
	0xe5, 0x93, 0x81, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0xe5, 0xad, 0x98, 0xe8, 0xaf,
	0x81, 0x2e, 0x2e, 0x2e, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xef, 0xbc, 0x88, 0x75, 0x75,
	0x69, 0x64, 0xef, 0xbc, 0x89, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x44, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe6, 0x8c, 0x81, 0xe6,
	0x9c, 0x89, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x69, 0x64, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x98, 0xe8, 0xaf,
	0x81, 0x52, 0x0d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x53, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98,
	0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81,
	0x52, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x61, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe7, 0x89,
	0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52,
	0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x95,
	0xb0, 0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81,
	0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe5, 0xad, 0x98, 0xe8, 0xaf,
	0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x9a, 0x84, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20,
	0xe4, 0xb8, 0xb2, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x32, 0x21, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f,
	0xe7, 0x9a, 0x84, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x69, 0x64,
	0x12, 0x5a, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41,
	0x29, 0x32, 0x27, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f, 0xe4,
	0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0x9c, 0xa8, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe7, 0x9a,
	0x84, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe5, 0x8f, 0xb7, 0x52, 0x10, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x10,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe4, 0xb8, 0x8a,
	0xe9, 0x93, 0xbe, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0x20, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4d,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe4, 0xb8, 0x8a,
	0xe9, 0x93, 0xbe, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x82, 0x01,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x32, 0x5a, 0xe4, 0xb8, 0x8a, 0xe9, 0x93,
	0xbe, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0xe7, 0xa9, 0xba, 0xe8, 0xa1, 0xa8,
	0xe7, 0xa4, 0xba, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xef, 0xbc, 0x9b, 0x30, 0x2d, 0xe5, 0xbe,
	0x85, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe4,
	0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe,
	0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0xa4,
	0xb1, 0xe8, 0xb4, 0xa5, 0x20, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6,
	0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x20, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92,
	0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x20, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6,
	0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcd, 0x01, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x52, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbd, 0x0a, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x32, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xad, 0x98,
	0xe8, 0xaf, 0x81, 0x69, 0x64, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0xe5, 0xad,
	0x98, 0xe8, 0xaf, 0x81, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xef, 0xbc, 0x88, 0x75, 0x75, 0x69,
	0x64, 0xef, 0xbc, 0x89, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x71, 0x92, 0x41, 0x6e, 0x32,
	0x6c, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a,
	0x31, 0x2d, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xef, 0xbc,
	0x9b, 0x32, 0x2d, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xef,
	0xbc, 0x9b, 0x33, 0x2d, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81,
	0xef, 0xbc, 0x9b, 0x34, 0x2d, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf,
	0x81, 0xef, 0xbc, 0x9b, 0x35, 0x2d, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x2e, 0x2e, 0x2e, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x9a,
	0x84, 0x49, 0x44, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x50, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe7, 0x9a, 0x84, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0x20, 0xe5, 0xa7, 0x93, 0xe5, 0x90,
	0x8d, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe6, 0x8c, 0x81, 0xe6,
	0x9c, 0x89, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x69, 0x64, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x98, 0xe8, 0xaf,
	0x81, 0x52, 0x0d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x53, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98,
	0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81,
	0x52, 0x13, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x61, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe7, 0x89,
	0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52,
	0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x95,
	0xb0, 0xe5, 0xad, 0x97, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81,
	0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe5, 0xad, 0x98, 0xe8, 0xaf,
	0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x9a, 0x84, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20,
	0xe4, 0xb8, 0xb2, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x32, 0x21, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f,
	0xe7, 0x9a, 0x84, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x69, 0x64,
	0x12, 0x5a, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41,
	0x29, 0x32, 0x27, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f, 0xe4,
	0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0x9c, 0xa8, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe7, 0x9a,
	0x84, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe5, 0x8f, 0xb7, 0x52, 0x10, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe4, 0xb8, 0x8a,
	0xe9, 0x93, 0xbe, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe4, 0xb8, 0x8a, 0xe9, 0x93,
	0xbe, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0xad, 0xef,
	0xbc, 0x9b, 0x33, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a,
	0x13, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32,
	0x12, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x8e, 0x9f,
	0xe5, 0x9b, 0xa0, 0x52, 0x11, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x08,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xc6,
	0x4c, 0x0a, 0x0d, 0x44, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xb1, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x3f, 0x92, 0x41, 0x13, 0x12, 0x11, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x35, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0xa5, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x4e, 0x65,
	0x77, 0x1a, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3c, 0x92, 0x41, 0x16, 0x12, 0x14,
	0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x29, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x97,
	0x8f, 0xe5, 0x93, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f,
	0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x42, 0x92, 0x41, 0x1f, 0x12, 0x1d, 0xe9,
	0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xbb, 0x01, 0x0a,
	0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x49, 0x92, 0x41, 0x1c, 0x12, 0x1a, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x28, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4c, 0x92,
	0x41, 0x1f, 0x12, 0x1d, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x28, 0xe6, 0x97, 0xa0, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x18,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x53, 0x92, 0x41, 0x27, 0x12, 0x25, 0x28, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0x29, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8,
	0x97, 0x8f, 0xe5, 0x93, 0x81, 0x28, 0xe6, 0x97, 0xa0, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x39, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe6, 0x88,
	0x91, 0xe7, 0x9a, 0x84, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0xa3, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77,
	0x1a, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x40, 0x92, 0x41, 0x1c, 0x12, 0x1a, 0x28, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0x29, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a,
	0x22, 0x16, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xcb, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x2f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4a, 0x92, 0x41, 0x19, 0x12,
	0x17, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0xac, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x92, 0x41, 0x0e, 0x12, 0x0c,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x65, 0x77, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x4e, 0x65,
	0x77, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x41,
	0x92, 0x41, 0x16, 0x12, 0x14, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x29, 0xe8, 0x97, 0x8f,
	0xe5, 0x93, 0x81, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xc7, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x30, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x46, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd4, 0x01, 0x0a, 0x1d,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x12, 0x32, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x4e, 0x65,
	0x77, 0x1a, 0x30, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x4d, 0x92, 0x41, 0x1c, 0x12, 0x1a, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0x29, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe4, 0xba,
	0xa4, 0xe6, 0x98, 0x93, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f,
	0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3c, 0x92, 0x41, 0x14, 0x12, 0x12,
	0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0x85, 0x91, 0xe7,
	0x8e, 0xb0, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x64, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0xb8, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x46, 0x92, 0x41, 0x1a, 0x12,
	0x18, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x9d, 0x83, 0xe7, 0x9b, 0x8a, 0xe5, 0x85, 0x91,
	0xe7, 0x8e, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a,
	0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0xac, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe5, 0x90, 0x88, 0xe7,
	0xba, 0xa6, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01,
	0x2a, 0x22, 0x1e, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x12, 0x2d,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x1a, 0x2b, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x41, 0x92, 0x41, 0x16, 0x12,
	0x14, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x29, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe6,
	0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d,
	0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x90, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x33, 0x92, 0x41, 0x0e,
	0x12, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x9d, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x1a, 0x24,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x92, 0x41, 0x16, 0x12, 0x14, 0x28, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0x29, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x94, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3d, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe6,
	0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x90, 0x88, 0xe7, 0xba,
	0xa6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a,
	0x22, 0x15, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x24, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x4e, 0x65,
	0x77, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x44, 0x92, 0x41, 0x22, 0x12, 0x20, 0x28, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0x29, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83,
	0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x0a,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x22, 0x39, 0x92,
	0x41, 0x13, 0x12, 0x11, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0xe7,
	0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18,
	0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0xb3, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x44, 0x69,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x44, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x59, 0x92, 0x41, 0x35, 0x12, 0x33, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x98, 0xe8,
	0xaf, 0x81, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xef, 0xbc, 0x88, 0xe6, 0x9c, 0xba, 0xe6, 0x9e,
	0x84, 0xe6, 0x88, 0x96, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xef, 0xbc, 0x89, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x64, 0x69, 0x64, 0x12, 0x9c,
	0x01, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x36, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe7, 0x89, 0x88, 0xe6,
	0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01,
	0x2a, 0x22, 0x1a, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0xa9, 0x01,
	0x0a, 0x14, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x4e, 0x65,
	0x77, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3d, 0x92, 0x41, 0x16, 0x12,
	0x14, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x29, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe7,
	0x99, 0xbb, 0xe8, 0xae, 0xb0, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19,
	0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0xcc, 0x01, 0x0a, 0x1b, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x48,
	0x92, 0x41, 0x16, 0x12, 0x14, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0x2f, 0xe5, 0xa3, 0xb0, 0xe6,
	0x98, 0x8e, 0x2f, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a,
	0x01, 0x2a, 0x22, 0x24, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd9, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x12, 0x33, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77,
	0x1a, 0x31, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x4f, 0x92, 0x41, 0x1e, 0x12, 0x1c, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0x29, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0x2f, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x2f,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22,
	0x23, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x64, 0x64, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3c, 0x92, 0x41, 0x14,
	0x12, 0x12, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f,
	0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x64, 0x64, 0x12, 0xaf, 0x01, 0x0a, 0x14, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x64, 0x64, 0x4e,
	0x65, 0x77, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x1a, 0x27, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x43, 0x92, 0x41, 0x1c, 0x12, 0x1a, 0x28, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0x29, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe7, 0x89, 0x88, 0xe6, 0x9d,
	0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a,
	0x22, 0x19, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x64, 0x64, 0x12, 0xa5, 0x01, 0x0a, 0x12,
	0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x64,
	0x69, 0x74, 0x12, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x3d, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe7, 0xbc, 0x96, 0xe8, 0xbe,
	0x91, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x69, 0x74, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x28, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3e, 0x92, 0x41, 0x14, 0x12,
	0x12, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5, 0xae, 0xa1,
	0xe6, 0xa0, 0xb8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x90, 0x01, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x33, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x90, 0x01,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x33, 0x92, 0x41, 0x0e,
	0x12, 0x0c, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0xb2, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x40, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84,
	0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x65, 0x77, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x4e, 0x65,
	0x77, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x47,
	0x92, 0x41, 0x1c, 0x12, 0x1a, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x29, 0xe6, 0x88, 0x91,
	0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4b, 0x92, 0x41, 0x1a, 0x12, 0x18,
	0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x90, 0x88, 0xe7,
	0xba, 0xa6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xd9, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x32, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x1a, 0x30, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x52,
	0x92, 0x41, 0x22, 0x12, 0x20, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x29, 0xe6, 0x88, 0x91,
	0xe7, 0x9a, 0x84, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22,
	0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0xc4, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x50, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe6, 0x88,
	0x91, 0xe7, 0x9a, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22,
	0x28, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xd1, 0x01, 0x0a, 0x19, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x2e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x57, 0x92, 0x41, 0x22, 0x12, 0x20, 0x28, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0x29, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe7,
	0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xac, 0x01,
	0x0a, 0x12, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x43, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe6, 0x88,
	0x91, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22,
	0x1b, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xb9, 0x01, 0x0a,
	0x15, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x4e,
	0x65, 0x77, 0x1a, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4a, 0x92, 0x41,
	0x22, 0x12, 0x20, 0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x29, 0xe6, 0x88, 0x91, 0xe5, 0xa3,
	0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x64,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3e, 0x92, 0x41, 0x13, 0x12, 0x11,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xba, 0x01, 0x0a, 0x18, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x45, 0x92, 0x41, 0x13, 0x12, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe7, 0x89, 0x88, 0xe6, 0x9d,
	0x83, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a,
	0x22, 0x24, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x42, 0x92, 0x41, 0x19, 0x12, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe7, 0x89, 0x88,
	0xe6, 0x9d, 0x83, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xd4, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x50, 0x92, 0x41, 0x19, 0x12,
	0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x90, 0x88, 0xe7,
	0xba, 0xa6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01,
	0x2a, 0x22, 0x29, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xcc, 0x01, 0x0a,
	0x19, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x55, 0x92, 0x41, 0x19, 0x12, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x64, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xb7, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x6c,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4b, 0x92, 0x41, 0x1c, 0x12, 0x1a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88,
	0xe6, 0x9d, 0x83, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a,
	0x01, 0x2a, 0x22, 0x21, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3e, 0x92, 0x41, 0x13, 0x12, 0x11, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x28,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x38, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22,
	0x1c, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xa5, 0x01,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x51, 0x92, 0x41, 0x2b, 0x12, 0x29, 0xe4, 0xb8, 0x80, 0xe9, 0x94, 0xae, 0xe4,
	0xb8, 0x89, 0xe5, 0x8f, 0x91, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x28, 0xe9, 0x93, 0xb8, 0xe9,
	0x80, 0xa0, 0x2f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x2f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x64, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xab, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x1a, 0x21, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x51, 0x92, 0x41, 0x30, 0x12, 0x2e, 0x28, 0xe6, 0x96, 0xb0, 0x29, 0xe4, 0xb8, 0x80, 0xe9,
	0x94, 0xae, 0xe4, 0xb8, 0x89, 0xe5, 0x8f, 0x91, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x28, 0xe9,
	0x93, 0xb8, 0xe9, 0x80, 0xa0, 0x2f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x2f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13,
	0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x2d, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0xe8,
	0x97, 0x8f, 0xe5, 0x93, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11,
	0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x2f, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x72, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x77, 0x12, 0x1c, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x92, 0x41, 0x13, 0x12, 0x11, 0x28, 0xe6, 0x96,
	0xb0, 0x29, 0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x74, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x70, 0x62, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x92, 0x41, 0x0e, 0x12,
	0x0c, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x6c, 0x69, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x7a, 0x0a, 0x09, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x77, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x1a, 0x1c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x92, 0x41, 0x13, 0x12, 0x11, 0x28, 0xe6, 0x96,
	0xb0, 0x29, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x16, 0x5a, 0x14, 0x70, 0x62, 0x2f, 0x64, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x3b, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_dassetpb_dasset_proto_rawDescOnce sync.Once
	file_pb_dassetpb_dasset_proto_rawDescData = file_pb_dassetpb_dasset_proto_rawDesc
)

func file_pb_dassetpb_dasset_proto_rawDescGZIP() []byte {
	file_pb_dassetpb_dasset_proto_rawDescOnce.Do(func() {
		file_pb_dassetpb_dasset_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_dassetpb_dasset_proto_rawDescData)
	})
	return file_pb_dassetpb_dasset_proto_rawDescData
}

var file_pb_dassetpb_dasset_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_pb_dassetpb_dasset_proto_goTypes = []interface{}{
	(*EmptyReq)(nil),                          // 0: daop.pb.dassetpb.EmptyReq
	(*ClaimProofReq)(nil),                     // 1: daop.pb.dassetpb.ClaimProofReq
	(*ClaimProofResp)(nil),                    // 2: daop.pb.dassetpb.ClaimProofResp
	(*CopyrightClaimCheckReq)(nil),            // 3: daop.pb.dassetpb.CopyrightClaimCheckReq
	(*DidCredentialReq)(nil),                  // 4: daop.pb.dassetpb.DidCredentialReq
	(*DidCredentialClaim)(nil),                // 5: daop.pb.dassetpb.DidCredentialClaim
	(*DidCredentialResp)(nil),                 // 6: daop.pb.dassetpb.DidCredentialResp
	(*CredentialInfoReq)(nil),                 // 7: daop.pb.dassetpb.CredentialInfoReq
	(*CredentialInfoResp)(nil),                // 8: daop.pb.dassetpb.CredentialInfoResp
	(*CredentialListReq)(nil),                 // 9: daop.pb.dassetpb.CredentialListReq
	(*CredentialListResp)(nil),                // 10: daop.pb.dassetpb.CredentialListResp
	(*CredentialInfo)(nil),                    // 11: daop.pb.dassetpb.CredentialInfo
	(*BaseResp)(nil),                          // 12: daop.pb.dassetpb.BaseResp
	(*ClaimProofResp_Data)(nil),               // 13: daop.pb.dassetpb.ClaimProofResp.Data
	(*DidCredentialResp_Data)(nil),            // 14: daop.pb.dassetpb.DidCredentialResp.Data
	(*CredentialListResp_Data)(nil),           // 15: daop.pb.dassetpb.CredentialListResp.Data
	(*emptypb.Empty)(nil),                     // 16: google.protobuf.Empty
	(*CollectionClaimCreateReq)(nil),          // 17: daop.pb.dassetpb.CollectionClaimCreateReq
	(*CollectionCreateReq)(nil),               // 18: daop.pb.dassetpb.CollectionCreateReq
	(*CollectionCreateReqNew)(nil),            // 19: daop.pb.dassetpb.CollectionCreateReqNew
	(*CollectionTokenReq)(nil),                // 20: daop.pb.dassetpb.CollectionTokenReq
	(*CollectionBatchCreateReq)(nil),          // 21: daop.pb.dassetpb.CollectionBatchCreateReq
	(*CollectionLightCreateReq)(nil),          // 22: daop.pb.dassetpb.CollectionLightCreateReq
	(*CollectionLightCreateReqNew)(nil),       // 23: daop.pb.dassetpb.CollectionLightCreateReqNew
	(*CollectionListReq)(nil),                 // 24: daop.pb.dassetpb.CollectionListReq
	(*CollectionListReqNew)(nil),              // 25: daop.pb.dassetpb.CollectionListReqNew
	(*CollectionTransactionClaimReq)(nil),     // 26: daop.pb.dassetpb.CollectionTransactionClaimReq
	(*CollectionTransactionReq)(nil),          // 27: daop.pb.dassetpb.CollectionTransactionReq
	(*CollectionTransactionReqNew)(nil),       // 28: daop.pb.dassetpb.CollectionTransactionReqNew
	(*CollectionLightTransactionReq)(nil),     // 29: daop.pb.dassetpb.CollectionLightTransactionReq
	(*CollectionLightTransactionReqNew)(nil),  // 30: daop.pb.dassetpb.CollectionLightTransactionReqNew
	(*CollectionCheckInReq)(nil),              // 31: daop.pb.dassetpb.CollectionCheckInReq
	(*CollectionCheckInListReq)(nil),          // 32: daop.pb.dassetpb.CollectionCheckInListReq
	(*ContractAuthorizationReq)(nil),          // 33: daop.pb.dassetpb.ContractAuthorizationReq
	(*ContractAuthorizationReqNew)(nil),       // 34: daop.pb.dassetpb.ContractAuthorizationReqNew
	(*ContractCreateReq)(nil),                 // 35: daop.pb.dassetpb.ContractCreateReq
	(*ContractCreateReqNew)(nil),              // 36: daop.pb.dassetpb.ContractCreateReqNew
	(*ContractListReq)(nil),                   // 37: daop.pb.dassetpb.ContractListReq
	(*ContractListReqNew)(nil),                // 38: daop.pb.dassetpb.ContractListReqNew
	(*CopyrightRegisterReq)(nil),              // 39: daop.pb.dassetpb.CopyrightRegisterReq
	(*CopyrightRegisterReqNew)(nil),           // 40: daop.pb.dassetpb.CopyrightRegisterReqNew
	(*CopyrightClaimAuthorizationReq)(nil),    // 41: daop.pb.dassetpb.CopyrightClaimAuthorizationReq
	(*CopyrightClaimAuthorizationReqNew)(nil), // 42: daop.pb.dassetpb.CopyrightClaimAuthorizationReqNew
	(*CopyrightClaimAddReq)(nil),              // 43: daop.pb.dassetpb.CopyrightClaimAddReq
	(*CopyrightClaimAddReqNew)(nil),           // 44: daop.pb.dassetpb.CopyrightClaimAddReqNew
	(*CopyrightClaimEditReq)(nil),             // 45: daop.pb.dassetpb.CopyrightClaimEditReq
	(*CopyrightRegisterListReq)(nil),          // 46: daop.pb.dassetpb.CopyrightRegisterListReq
	(*CopyrightRegisterListReqNew)(nil),       // 47: daop.pb.dassetpb.CopyrightRegisterListReqNew
	(*CopyrightAuthorizationListReq)(nil),     // 48: daop.pb.dassetpb.CopyrightAuthorizationListReq
	(*CopyrightAuthorizationListReqNew)(nil),  // 49: daop.pb.dassetpb.CopyrightAuthorizationListReqNew
	(*AuthorizationClaimListReq)(nil),         // 50: daop.pb.dassetpb.AuthorizationClaimListReq
	(*AuthorizationClaimListReqNew)(nil),      // 51: daop.pb.dassetpb.AuthorizationClaimListReqNew
	(*CopyrightClaimListReq)(nil),             // 52: daop.pb.dassetpb.CopyrightClaimListReq
	(*CopyrightClaimListReqNew)(nil),          // 53: daop.pb.dassetpb.CopyrightClaimListReqNew
	(*CopyrightStatisticsReq)(nil),            // 54: daop.pb.dassetpb.CopyrightStatisticsReq
	(*CombinationReq)(nil),                    // 55: daop.pb.dassetpb.CombinationReq
	(*CombinationReqNew)(nil),                 // 56: daop.pb.dassetpb.CombinationReqNew
	(*LockReq)(nil),                           // 57: daop.pb.dassetpb.LockReq
	(*LockReqNew)(nil),                        // 58: daop.pb.dassetpb.LockReqNew
	(*UnlockReq)(nil),                         // 59: daop.pb.dassetpb.UnlockReq
	(*UnlockReqNew)(nil),                      // 60: daop.pb.dassetpb.UnlockReqNew
	(*CollectionClaimCreateResp)(nil),         // 61: daop.pb.dassetpb.CollectionClaimCreateResp
	(*CollectionCreateResp)(nil),              // 62: daop.pb.dassetpb.CollectionCreateResp
	(*CollectionTokenResp)(nil),               // 63: daop.pb.dassetpb.CollectionTokenResp
	(*CollectionBatchCreateResp)(nil),         // 64: daop.pb.dassetpb.CollectionBatchCreateResp
	(*CollectionLightCreateResp)(nil),         // 65: daop.pb.dassetpb.CollectionLightCreateResp
	(*CollectionListResp)(nil),                // 66: daop.pb.dassetpb.CollectionListResp
	(*CollectionTransactionClaimResp)(nil),    // 67: daop.pb.dassetpb.CollectionTransactionClaimResp
	(*CollectionTransactionResp)(nil),         // 68: daop.pb.dassetpb.CollectionTransactionResp
	(*CollectionLightTransactionResp)(nil),    // 69: daop.pb.dassetpb.CollectionLightTransactionResp
	(*CollectionCheckInResp)(nil),             // 70: daop.pb.dassetpb.CollectionCheckInResp
	(*CollectionCheckInListResp)(nil),         // 71: daop.pb.dassetpb.CollectionCheckInListResp
	(*ContractAuthorizationResp)(nil),         // 72: daop.pb.dassetpb.ContractAuthorizationResp
	(*ContractCreateResp)(nil),                // 73: daop.pb.dassetpb.ContractCreateResp
	(*ContractListResp)(nil),                  // 74: daop.pb.dassetpb.ContractListResp
	(*CopyrightRegisterResp)(nil),             // 75: daop.pb.dassetpb.CopyrightRegisterResp
	(*CopyrightClaimAuthorizationResp)(nil),   // 76: daop.pb.dassetpb.CopyrightClaimAuthorizationResp
	(*CopyrightRegisterListResp)(nil),         // 77: daop.pb.dassetpb.CopyrightRegisterListResp
	(*CopyrightAuthorizationListResp)(nil),    // 78: daop.pb.dassetpb.CopyrightAuthorizationListResp
	(*CopyrightClaimListResp)(nil),            // 79: daop.pb.dassetpb.CopyrightClaimListResp
	(*CopyrightStatisticsResp)(nil),           // 80: daop.pb.dassetpb.CopyrightStatisticsResp
	(*CombinationResp)(nil),                   // 81: daop.pb.dassetpb.CombinationResp
	(*LockResp)(nil),                          // 82: daop.pb.dassetpb.LockResp
	(*UnlockResp)(nil),                        // 83: daop.pb.dassetpb.UnlockResp
}
var file_pb_dassetpb_dasset_proto_depIdxs = []int32{
	16, // 0: daop.pb.dassetpb.EmptyReq.r:type_name -> google.protobuf.Empty
	13, // 1: daop.pb.dassetpb.ClaimProofResp.data:type_name -> daop.pb.dassetpb.ClaimProofResp.Data
	5,  // 2: daop.pb.dassetpb.DidCredentialReq.claim:type_name -> daop.pb.dassetpb.DidCredentialClaim
	14, // 3: daop.pb.dassetpb.DidCredentialResp.data:type_name -> daop.pb.dassetpb.DidCredentialResp.Data
	11, // 4: daop.pb.dassetpb.CredentialInfoResp.data:type_name -> daop.pb.dassetpb.CredentialInfo
	15, // 5: daop.pb.dassetpb.CredentialListResp.data:type_name -> daop.pb.dassetpb.CredentialListResp.Data
	11, // 6: daop.pb.dassetpb.CredentialListResp.Data.data:type_name -> daop.pb.dassetpb.CredentialInfo
	17, // 7: daop.pb.dassetpb.DAssetService.CollectionClaimCreate:input_type -> daop.pb.dassetpb.CollectionClaimCreateReq
	18, // 8: daop.pb.dassetpb.DAssetService.CollectionCreate:input_type -> daop.pb.dassetpb.CollectionCreateReq
	19, // 9: daop.pb.dassetpb.DAssetService.CollectionCreateNew:input_type -> daop.pb.dassetpb.CollectionCreateReqNew
	20, // 10: daop.pb.dassetpb.DAssetService.CollectionToken:input_type -> daop.pb.dassetpb.CollectionTokenReq
	21, // 11: daop.pb.dassetpb.DAssetService.CollectionBatchCreate:input_type -> daop.pb.dassetpb.CollectionBatchCreateReq
	22, // 12: daop.pb.dassetpb.DAssetService.CollectionLightCreate:input_type -> daop.pb.dassetpb.CollectionLightCreateReq
	23, // 13: daop.pb.dassetpb.DAssetService.CollectionLightCreateNew:input_type -> daop.pb.dassetpb.CollectionLightCreateReqNew
	24, // 14: daop.pb.dassetpb.DAssetService.CollectionList:input_type -> daop.pb.dassetpb.CollectionListReq
	25, // 15: daop.pb.dassetpb.DAssetService.CollectionListNew:input_type -> daop.pb.dassetpb.CollectionListReqNew
	26, // 16: daop.pb.dassetpb.DAssetService.CollectionTransactionClaim:input_type -> daop.pb.dassetpb.CollectionTransactionClaimReq
	27, // 17: daop.pb.dassetpb.DAssetService.CollectionTransaction:input_type -> daop.pb.dassetpb.CollectionTransactionReq
	28, // 18: daop.pb.dassetpb.DAssetService.CollectionTransactionNew:input_type -> daop.pb.dassetpb.CollectionTransactionReqNew
	29, // 19: daop.pb.dassetpb.DAssetService.CollectionLightTransaction:input_type -> daop.pb.dassetpb.CollectionLightTransactionReq
	30, // 20: daop.pb.dassetpb.DAssetService.CollectionLightTransactionNew:input_type -> daop.pb.dassetpb.CollectionLightTransactionReqNew
	31, // 21: daop.pb.dassetpb.DAssetService.CollectionCheckIn:input_type -> daop.pb.dassetpb.CollectionCheckInReq
	32, // 22: daop.pb.dassetpb.DAssetService.CollectionCheckInList:input_type -> daop.pb.dassetpb.CollectionCheckInListReq
	33, // 23: daop.pb.dassetpb.DAssetService.ContractAuthorization:input_type -> daop.pb.dassetpb.ContractAuthorizationReq
	34, // 24: daop.pb.dassetpb.DAssetService.ContractAuthorizationNew:input_type -> daop.pb.dassetpb.ContractAuthorizationReqNew
	35, // 25: daop.pb.dassetpb.DAssetService.ContractCreate:input_type -> daop.pb.dassetpb.ContractCreateReq
	36, // 26: daop.pb.dassetpb.DAssetService.ContractCreateNew:input_type -> daop.pb.dassetpb.ContractCreateReqNew
	37, // 27: daop.pb.dassetpb.DAssetService.ContractList:input_type -> daop.pb.dassetpb.ContractListReq
	38, // 28: daop.pb.dassetpb.DAssetService.ContractListNew:input_type -> daop.pb.dassetpb.ContractListReqNew
	1,  // 29: daop.pb.dassetpb.DAssetService.ClaimProof:input_type -> daop.pb.dassetpb.ClaimProofReq
	4,  // 30: daop.pb.dassetpb.DAssetService.DidCredential:input_type -> daop.pb.dassetpb.DidCredentialReq
	39, // 31: daop.pb.dassetpb.DAssetService.CopyrightRegister:input_type -> daop.pb.dassetpb.CopyrightRegisterReq
	40, // 32: daop.pb.dassetpb.DAssetService.CopyrightRegisterNew:input_type -> daop.pb.dassetpb.CopyrightRegisterReqNew
	41, // 33: daop.pb.dassetpb.DAssetService.CopyrightClaimAuthorization:input_type -> daop.pb.dassetpb.CopyrightClaimAuthorizationReq
	42, // 34: daop.pb.dassetpb.DAssetService.CopyrightClaimAuthorizationNew:input_type -> daop.pb.dassetpb.CopyrightClaimAuthorizationReqNew
	43, // 35: daop.pb.dassetpb.DAssetService.CopyrightClaimAdd:input_type -> daop.pb.dassetpb.CopyrightClaimAddReq
	44, // 36: daop.pb.dassetpb.DAssetService.CopyrightClaimAddNew:input_type -> daop.pb.dassetpb.CopyrightClaimAddReqNew
	45, // 37: daop.pb.dassetpb.DAssetService.CopyrightClaimEdit:input_type -> daop.pb.dassetpb.CopyrightClaimEditReq
	3,  // 38: daop.pb.dassetpb.DAssetService.CopyrightClaimCheck:input_type -> daop.pb.dassetpb.CopyrightClaimCheckReq
	7,  // 39: daop.pb.dassetpb.DAssetService.CredentialInfo:input_type -> daop.pb.dassetpb.CredentialInfoReq
	9,  // 40: daop.pb.dassetpb.DAssetService.CredentialList:input_type -> daop.pb.dassetpb.CredentialListReq
	46, // 41: daop.pb.dassetpb.DAssetService.CopyrightRegisterList:input_type -> daop.pb.dassetpb.CopyrightRegisterListReq
	47, // 42: daop.pb.dassetpb.DAssetService.CopyrightRegisterListNew:input_type -> daop.pb.dassetpb.CopyrightRegisterListReqNew
	48, // 43: daop.pb.dassetpb.DAssetService.CopyrightAuthorizationList:input_type -> daop.pb.dassetpb.CopyrightAuthorizationListReq
	49, // 44: daop.pb.dassetpb.DAssetService.CopyrightAuthorizationListNew:input_type -> daop.pb.dassetpb.CopyrightAuthorizationListReqNew
	50, // 45: daop.pb.dassetpb.DAssetService.AuthorizationClaimList:input_type -> daop.pb.dassetpb.AuthorizationClaimListReq
	51, // 46: daop.pb.dassetpb.DAssetService.AuthorizationClaimListNew:input_type -> daop.pb.dassetpb.AuthorizationClaimListReqNew
	52, // 47: daop.pb.dassetpb.DAssetService.CopyrightClaimList:input_type -> daop.pb.dassetpb.CopyrightClaimListReq
	53, // 48: daop.pb.dassetpb.DAssetService.CopyrightClaimListNew:input_type -> daop.pb.dassetpb.CopyrightClaimListReqNew
	24, // 49: daop.pb.dassetpb.DAssetService.CollectionAllList:input_type -> daop.pb.dassetpb.CollectionListReq
	46, // 50: daop.pb.dassetpb.DAssetService.CopyrightRegisterAllList:input_type -> daop.pb.dassetpb.CopyrightRegisterListReq
	37, // 51: daop.pb.dassetpb.DAssetService.ContractAllList:input_type -> daop.pb.dassetpb.ContractListReq
	48, // 52: daop.pb.dassetpb.DAssetService.CopyrightAuthorizationAllList:input_type -> daop.pb.dassetpb.CopyrightAuthorizationListReq
	50, // 53: daop.pb.dassetpb.DAssetService.AuthorizationClaimAllList:input_type -> daop.pb.dassetpb.AuthorizationClaimListReq
	52, // 54: daop.pb.dassetpb.DAssetService.CopyrightClaimAllList:input_type -> daop.pb.dassetpb.CopyrightClaimListReq
	9,  // 55: daop.pb.dassetpb.DAssetService.CredentialAllList:input_type -> daop.pb.dassetpb.CredentialListReq
	54, // 56: daop.pb.dassetpb.DAssetService.CopyrightStatistics:input_type -> daop.pb.dassetpb.CopyrightStatisticsReq
	55, // 57: daop.pb.dassetpb.DAssetService.Combination:input_type -> daop.pb.dassetpb.CombinationReq
	56, // 58: daop.pb.dassetpb.DAssetService.CombinationNew:input_type -> daop.pb.dassetpb.CombinationReqNew
	57, // 59: daop.pb.dassetpb.DAssetService.Lock:input_type -> daop.pb.dassetpb.LockReq
	58, // 60: daop.pb.dassetpb.DAssetService.LockNew:input_type -> daop.pb.dassetpb.LockReqNew
	59, // 61: daop.pb.dassetpb.DAssetService.Unlock:input_type -> daop.pb.dassetpb.UnlockReq
	60, // 62: daop.pb.dassetpb.DAssetService.UnlockNew:input_type -> daop.pb.dassetpb.UnlockReqNew
	61, // 63: daop.pb.dassetpb.DAssetService.CollectionClaimCreate:output_type -> daop.pb.dassetpb.CollectionClaimCreateResp
	62, // 64: daop.pb.dassetpb.DAssetService.CollectionCreate:output_type -> daop.pb.dassetpb.CollectionCreateResp
	62, // 65: daop.pb.dassetpb.DAssetService.CollectionCreateNew:output_type -> daop.pb.dassetpb.CollectionCreateResp
	63, // 66: daop.pb.dassetpb.DAssetService.CollectionToken:output_type -> daop.pb.dassetpb.CollectionTokenResp
	64, // 67: daop.pb.dassetpb.DAssetService.CollectionBatchCreate:output_type -> daop.pb.dassetpb.CollectionBatchCreateResp
	65, // 68: daop.pb.dassetpb.DAssetService.CollectionLightCreate:output_type -> daop.pb.dassetpb.CollectionLightCreateResp
	65, // 69: daop.pb.dassetpb.DAssetService.CollectionLightCreateNew:output_type -> daop.pb.dassetpb.CollectionLightCreateResp
	66, // 70: daop.pb.dassetpb.DAssetService.CollectionList:output_type -> daop.pb.dassetpb.CollectionListResp
	66, // 71: daop.pb.dassetpb.DAssetService.CollectionListNew:output_type -> daop.pb.dassetpb.CollectionListResp
	67, // 72: daop.pb.dassetpb.DAssetService.CollectionTransactionClaim:output_type -> daop.pb.dassetpb.CollectionTransactionClaimResp
	68, // 73: daop.pb.dassetpb.DAssetService.CollectionTransaction:output_type -> daop.pb.dassetpb.CollectionTransactionResp
	68, // 74: daop.pb.dassetpb.DAssetService.CollectionTransactionNew:output_type -> daop.pb.dassetpb.CollectionTransactionResp
	69, // 75: daop.pb.dassetpb.DAssetService.CollectionLightTransaction:output_type -> daop.pb.dassetpb.CollectionLightTransactionResp
	69, // 76: daop.pb.dassetpb.DAssetService.CollectionLightTransactionNew:output_type -> daop.pb.dassetpb.CollectionLightTransactionResp
	70, // 77: daop.pb.dassetpb.DAssetService.CollectionCheckIn:output_type -> daop.pb.dassetpb.CollectionCheckInResp
	71, // 78: daop.pb.dassetpb.DAssetService.CollectionCheckInList:output_type -> daop.pb.dassetpb.CollectionCheckInListResp
	72, // 79: daop.pb.dassetpb.DAssetService.ContractAuthorization:output_type -> daop.pb.dassetpb.ContractAuthorizationResp
	72, // 80: daop.pb.dassetpb.DAssetService.ContractAuthorizationNew:output_type -> daop.pb.dassetpb.ContractAuthorizationResp
	73, // 81: daop.pb.dassetpb.DAssetService.ContractCreate:output_type -> daop.pb.dassetpb.ContractCreateResp
	73, // 82: daop.pb.dassetpb.DAssetService.ContractCreateNew:output_type -> daop.pb.dassetpb.ContractCreateResp
	74, // 83: daop.pb.dassetpb.DAssetService.ContractList:output_type -> daop.pb.dassetpb.ContractListResp
	74, // 84: daop.pb.dassetpb.DAssetService.ContractListNew:output_type -> daop.pb.dassetpb.ContractListResp
	2,  // 85: daop.pb.dassetpb.DAssetService.ClaimProof:output_type -> daop.pb.dassetpb.ClaimProofResp
	6,  // 86: daop.pb.dassetpb.DAssetService.DidCredential:output_type -> daop.pb.dassetpb.DidCredentialResp
	75, // 87: daop.pb.dassetpb.DAssetService.CopyrightRegister:output_type -> daop.pb.dassetpb.CopyrightRegisterResp
	75, // 88: daop.pb.dassetpb.DAssetService.CopyrightRegisterNew:output_type -> daop.pb.dassetpb.CopyrightRegisterResp
	76, // 89: daop.pb.dassetpb.DAssetService.CopyrightClaimAuthorization:output_type -> daop.pb.dassetpb.CopyrightClaimAuthorizationResp
	76, // 90: daop.pb.dassetpb.DAssetService.CopyrightClaimAuthorizationNew:output_type -> daop.pb.dassetpb.CopyrightClaimAuthorizationResp
	75, // 91: daop.pb.dassetpb.DAssetService.CopyrightClaimAdd:output_type -> daop.pb.dassetpb.CopyrightRegisterResp
	75, // 92: daop.pb.dassetpb.DAssetService.CopyrightClaimAddNew:output_type -> daop.pb.dassetpb.CopyrightRegisterResp
	75, // 93: daop.pb.dassetpb.DAssetService.CopyrightClaimEdit:output_type -> daop.pb.dassetpb.CopyrightRegisterResp
	6,  // 94: daop.pb.dassetpb.DAssetService.CopyrightClaimCheck:output_type -> daop.pb.dassetpb.DidCredentialResp
	8,  // 95: daop.pb.dassetpb.DAssetService.CredentialInfo:output_type -> daop.pb.dassetpb.CredentialInfoResp
	10, // 96: daop.pb.dassetpb.DAssetService.CredentialList:output_type -> daop.pb.dassetpb.CredentialListResp
	77, // 97: daop.pb.dassetpb.DAssetService.CopyrightRegisterList:output_type -> daop.pb.dassetpb.CopyrightRegisterListResp
	77, // 98: daop.pb.dassetpb.DAssetService.CopyrightRegisterListNew:output_type -> daop.pb.dassetpb.CopyrightRegisterListResp
	78, // 99: daop.pb.dassetpb.DAssetService.CopyrightAuthorizationList:output_type -> daop.pb.dassetpb.CopyrightAuthorizationListResp
	78, // 100: daop.pb.dassetpb.DAssetService.CopyrightAuthorizationListNew:output_type -> daop.pb.dassetpb.CopyrightAuthorizationListResp
	77, // 101: daop.pb.dassetpb.DAssetService.AuthorizationClaimList:output_type -> daop.pb.dassetpb.CopyrightRegisterListResp
	77, // 102: daop.pb.dassetpb.DAssetService.AuthorizationClaimListNew:output_type -> daop.pb.dassetpb.CopyrightRegisterListResp
	79, // 103: daop.pb.dassetpb.DAssetService.CopyrightClaimList:output_type -> daop.pb.dassetpb.CopyrightClaimListResp
	79, // 104: daop.pb.dassetpb.DAssetService.CopyrightClaimListNew:output_type -> daop.pb.dassetpb.CopyrightClaimListResp
	66, // 105: daop.pb.dassetpb.DAssetService.CollectionAllList:output_type -> daop.pb.dassetpb.CollectionListResp
	77, // 106: daop.pb.dassetpb.DAssetService.CopyrightRegisterAllList:output_type -> daop.pb.dassetpb.CopyrightRegisterListResp
	74, // 107: daop.pb.dassetpb.DAssetService.ContractAllList:output_type -> daop.pb.dassetpb.ContractListResp
	78, // 108: daop.pb.dassetpb.DAssetService.CopyrightAuthorizationAllList:output_type -> daop.pb.dassetpb.CopyrightAuthorizationListResp
	77, // 109: daop.pb.dassetpb.DAssetService.AuthorizationClaimAllList:output_type -> daop.pb.dassetpb.CopyrightRegisterListResp
	79, // 110: daop.pb.dassetpb.DAssetService.CopyrightClaimAllList:output_type -> daop.pb.dassetpb.CopyrightClaimListResp
	10, // 111: daop.pb.dassetpb.DAssetService.CredentialAllList:output_type -> daop.pb.dassetpb.CredentialListResp
	80, // 112: daop.pb.dassetpb.DAssetService.CopyrightStatistics:output_type -> daop.pb.dassetpb.CopyrightStatisticsResp
	81, // 113: daop.pb.dassetpb.DAssetService.Combination:output_type -> daop.pb.dassetpb.CombinationResp
	81, // 114: daop.pb.dassetpb.DAssetService.CombinationNew:output_type -> daop.pb.dassetpb.CombinationResp
	82, // 115: daop.pb.dassetpb.DAssetService.Lock:output_type -> daop.pb.dassetpb.LockResp
	82, // 116: daop.pb.dassetpb.DAssetService.LockNew:output_type -> daop.pb.dassetpb.LockResp
	83, // 117: daop.pb.dassetpb.DAssetService.Unlock:output_type -> daop.pb.dassetpb.UnlockResp
	83, // 118: daop.pb.dassetpb.DAssetService.UnlockNew:output_type -> daop.pb.dassetpb.UnlockResp
	63, // [63:119] is the sub-list for method output_type
	7,  // [7:63] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_pb_dassetpb_dasset_proto_init() }
func file_pb_dassetpb_dasset_proto_init() {
	if File_pb_dassetpb_dasset_proto != nil {
		return
	}
	file_pb_dassetpb_collection_proto_init()
	file_pb_dassetpb_collectionnew_proto_init()
	file_pb_dassetpb_copyright_proto_init()
	file_pb_dassetpb_copyrightnew_proto_init()
	file_pb_dassetpb_lite_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pb_dassetpb_dasset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimProofReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimProofResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightClaimCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidCredentialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidCredentialClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidCredentialResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimProofResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidCredentialResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dassetpb_dasset_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_dassetpb_dasset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_dassetpb_dasset_proto_goTypes,
		DependencyIndexes: file_pb_dassetpb_dasset_proto_depIdxs,
		MessageInfos:      file_pb_dassetpb_dasset_proto_msgTypes,
	}.Build()
	File_pb_dassetpb_dasset_proto = out.File
	file_pb_dassetpb_dasset_proto_rawDesc = nil
	file_pb_dassetpb_dasset_proto_goTypes = nil
	file_pb_dassetpb_dasset_proto_depIdxs = nil
}
