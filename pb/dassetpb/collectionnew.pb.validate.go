// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/dassetpb/collectionnew.proto

package dassetpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CollectionLightCreateReqNew with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionLightCreateReqNew) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionLightCreateReqNew with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionLightCreateReqNewMultiError, or nil if none found.
func (m *CollectionLightCreateReqNew) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionLightCreateReqNew) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CollectionLightCreateReqNewValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionLightCreateReqNewValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionLightCreateReqNewValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionLightCreateReqNewValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NotifyUrl

	// no validation rules for NotifyOpts

	if len(errors) > 0 {
		return CollectionLightCreateReqNewMultiError(errors)
	}

	return nil
}

// CollectionLightCreateReqNewMultiError is an error wrapping multiple
// validation errors returned by CollectionLightCreateReqNew.ValidateAll() if
// the designated constraints aren't met.
type CollectionLightCreateReqNewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionLightCreateReqNewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionLightCreateReqNewMultiError) AllErrors() []error { return m }

// CollectionLightCreateReqNewValidationError is the validation error returned
// by CollectionLightCreateReqNew.Validate if the designated constraints
// aren't met.
type CollectionLightCreateReqNewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionLightCreateReqNewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionLightCreateReqNewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionLightCreateReqNewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionLightCreateReqNewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionLightCreateReqNewValidationError) ErrorName() string {
	return "CollectionLightCreateReqNewValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionLightCreateReqNewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionLightCreateReqNew.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionLightCreateReqNewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionLightCreateReqNewValidationError{}

// Validate checks the field values on CollectionLightTransactionReqNew with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CollectionLightTransactionReqNew) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionLightTransactionReqNew with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CollectionLightTransactionReqNewMultiError, or nil if none found.
func (m *CollectionLightTransactionReqNew) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionLightTransactionReqNew) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CollectionLightTransactionReqNewValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionLightTransactionReqNewValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionLightTransactionReqNewValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionLightTransactionReqNewValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NotifyUrl

	// no validation rules for NotifyOpts

	if len(errors) > 0 {
		return CollectionLightTransactionReqNewMultiError(errors)
	}

	return nil
}

// CollectionLightTransactionReqNewMultiError is an error wrapping multiple
// validation errors returned by
// CollectionLightTransactionReqNew.ValidateAll() if the designated
// constraints aren't met.
type CollectionLightTransactionReqNewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionLightTransactionReqNewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionLightTransactionReqNewMultiError) AllErrors() []error { return m }

// CollectionLightTransactionReqNewValidationError is the validation error
// returned by CollectionLightTransactionReqNew.Validate if the designated
// constraints aren't met.
type CollectionLightTransactionReqNewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionLightTransactionReqNewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionLightTransactionReqNewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionLightTransactionReqNewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionLightTransactionReqNewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionLightTransactionReqNewValidationError) ErrorName() string {
	return "CollectionLightTransactionReqNewValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionLightTransactionReqNewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionLightTransactionReqNew.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionLightTransactionReqNewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionLightTransactionReqNewValidationError{}

// Validate checks the field values on CollectionCreateReqNew with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionCreateReqNew) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionCreateReqNew with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionCreateReqNewMultiError, or nil if none found.
func (m *CollectionCreateReqNew) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionCreateReqNew) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorizationId

	// no validation rules for AuthorizationCode

	if m.GetPrice() < 0 {
		err := CollectionCreateReqNewValidationError{
			field:  "Price",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TokenUrl

	// no validation rules for AvailableTimes

	if all {
		switch v := interface{}(m.GetClaim()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionCreateReqNewValidationError{
					field:  "Claim",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionCreateReqNewValidationError{
					field:  "Claim",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClaim()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionCreateReqNewValidationError{
				field:  "Claim",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := CollectionCreateReqNewValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NotifyUrl

	// no validation rules for NotifyOpts

	if len(errors) > 0 {
		return CollectionCreateReqNewMultiError(errors)
	}

	return nil
}

// CollectionCreateReqNewMultiError is an error wrapping multiple validation
// errors returned by CollectionCreateReqNew.ValidateAll() if the designated
// constraints aren't met.
type CollectionCreateReqNewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionCreateReqNewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionCreateReqNewMultiError) AllErrors() []error { return m }

// CollectionCreateReqNewValidationError is the validation error returned by
// CollectionCreateReqNew.Validate if the designated constraints aren't met.
type CollectionCreateReqNewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionCreateReqNewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionCreateReqNewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionCreateReqNewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionCreateReqNewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionCreateReqNewValidationError) ErrorName() string {
	return "CollectionCreateReqNewValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionCreateReqNewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionCreateReqNew.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionCreateReqNewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionCreateReqNewValidationError{}

// Validate checks the field values on CollectionListReqNew with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionListReqNew) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionListReqNew with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionListReqNewMultiError, or nil if none found.
func (m *CollectionListReqNew) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionListReqNew) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CollectionListReqNewValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CollectionHash

	// no validation rules for AuthorizationCode

	// no validation rules for CastingAddress

	// no validation rules for OwnerAddress

	// no validation rules for Credential

	// no validation rules for CollectionType

	// no validation rules for CreateTimeStart

	// no validation rules for CreateTimeEnd

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return CollectionListReqNewMultiError(errors)
	}

	return nil
}

// CollectionListReqNewMultiError is an error wrapping multiple validation
// errors returned by CollectionListReqNew.ValidateAll() if the designated
// constraints aren't met.
type CollectionListReqNewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionListReqNewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionListReqNewMultiError) AllErrors() []error { return m }

// CollectionListReqNewValidationError is the validation error returned by
// CollectionListReqNew.Validate if the designated constraints aren't met.
type CollectionListReqNewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionListReqNewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionListReqNewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionListReqNewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionListReqNewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionListReqNewValidationError) ErrorName() string {
	return "CollectionListReqNewValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionListReqNewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionListReqNew.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionListReqNewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionListReqNewValidationError{}

// Validate checks the field values on CollectionTransactionReqNew with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionTransactionReqNew) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionTransactionReqNew with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionTransactionReqNewMultiError, or nil if none found.
func (m *CollectionTransactionReqNew) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionTransactionReqNew) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CollectionTransactionReqNewValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCollectionId() <= 0 {
		err := CollectionTransactionReqNewValidationError{
			field:  "CollectionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetClaim()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionTransactionReqNewValidationError{
					field:  "Claim",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionTransactionReqNewValidationError{
					field:  "Claim",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClaim()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionTransactionReqNewValidationError{
				field:  "Claim",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NotifyUrl

	// no validation rules for NotifyOpts

	if len(errors) > 0 {
		return CollectionTransactionReqNewMultiError(errors)
	}

	return nil
}

// CollectionTransactionReqNewMultiError is an error wrapping multiple
// validation errors returned by CollectionTransactionReqNew.ValidateAll() if
// the designated constraints aren't met.
type CollectionTransactionReqNewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionTransactionReqNewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionTransactionReqNewMultiError) AllErrors() []error { return m }

// CollectionTransactionReqNewValidationError is the validation error returned
// by CollectionTransactionReqNew.Validate if the designated constraints
// aren't met.
type CollectionTransactionReqNewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionTransactionReqNewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionTransactionReqNewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionTransactionReqNewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionTransactionReqNewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionTransactionReqNewValidationError) ErrorName() string {
	return "CollectionTransactionReqNewValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionTransactionReqNewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionTransactionReqNew.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionTransactionReqNewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionTransactionReqNewValidationError{}
