// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/basepb/base.proto

package basepb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SmsSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile     string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`                            // 手机号码
	Type       uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                               // 验证码类型,0-通用;1-登陆/注册;2-绑定手机号;3-重置密码;4-忘记密码;5-实名
	SourceType uint32 `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"` // 短信签名,0:DAOP,1:哈稀
}

func (x *SmsSendReq) Reset() {
	*x = SmsSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsSendReq) ProtoMessage() {}

func (x *SmsSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsSendReq.ProtoReflect.Descriptor instead.
func (*SmsSendReq) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{0}
}

func (x *SmsSendReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *SmsSendReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SmsSendReq) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

type SmsValidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"` // 手机号码
	Type   uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`    // 验证码类型,0-通用;1-登陆/注册;2-绑定手机号;3-重置密码;4-忘记密码;5-实名
	Code   uint32 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`    // 四位数验证码
}

func (x *SmsValidReq) Reset() {
	*x = SmsValidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsValidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsValidReq) ProtoMessage() {}

func (x *SmsValidReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsValidReq.ProtoReflect.Descriptor instead.
func (*SmsValidReq) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{1}
}

func (x *SmsValidReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *SmsValidReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SmsValidReq) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type SendNormalEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email   string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`     // 邮箱
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"` // 主题
	Text    string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`       // 内容
}

func (x *SendNormalEmailReq) Reset() {
	*x = SendNormalEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendNormalEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNormalEmailReq) ProtoMessage() {}

func (x *SendNormalEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNormalEmailReq.ProtoReflect.Descriptor instead.
func (*SendNormalEmailReq) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{2}
}

func (x *SendNormalEmailReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SendNormalEmailReq) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SendNormalEmailReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type EmailSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`                              // 邮箱
	Type       uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                               // 验证码类型,0-通用;1-登陆/注册;2-绑定手机号;3-重置密码;4-忘记密码
	SourceType uint32 `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"` // 短信签名,0:DAOP,1:哈稀
}

func (x *EmailSendReq) Reset() {
	*x = EmailSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailSendReq) ProtoMessage() {}

func (x *EmailSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailSendReq.ProtoReflect.Descriptor instead.
func (*EmailSendReq) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{3}
}

func (x *EmailSendReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EmailSendReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EmailSendReq) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

type EmailValidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"` //邮箱
	Type  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`  // 验证码类型,0-通用;1-登陆/注册;2-绑定手机号;3-重置密码;4-忘记密码
	Code  uint32 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`  // 四位验证码
}

func (x *EmailValidReq) Reset() {
	*x = EmailValidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailValidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailValidReq) ProtoMessage() {}

func (x *EmailValidReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailValidReq.ProtoReflect.Descriptor instead.
func (*EmailValidReq) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{4}
}

func (x *EmailValidReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EmailValidReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EmailValidReq) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type SendCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *SendCodeResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 响应数据
}

func (x *SendCodeResp) Reset() {
	*x = SendCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCodeResp) ProtoMessage() {}

func (x *SendCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCodeResp.ProtoReflect.Descriptor instead.
func (*SendCodeResp) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{5}
}

func (x *SendCodeResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SendCodeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SendCodeResp) GetData() *SendCodeResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType uint32 `protobuf:"varint,1,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"` // 1图片
	File     []byte `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`                          // 文件数据
}

func (x *UploadFileReq) Reset() {
	*x = UploadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileReq) ProtoMessage() {}

func (x *UploadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileReq.ProtoReflect.Descriptor instead.
func (*UploadFileReq) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{6}
}

func (x *UploadFileReq) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *UploadFileReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type UploadFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UploadFileResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 响应数据
}

func (x *UploadFileResp) Reset() {
	*x = UploadFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileResp) ProtoMessage() {}

func (x *UploadFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileResp.ProtoReflect.Descriptor instead.
func (*UploadFileResp) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{7}
}

func (x *UploadFileResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UploadFileResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UploadFileResp) GetData() *UploadFileResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type OperationLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNo           string `protobuf:"bytes,2,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`                               // 应用编号
	AccountId       uint32 `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                  // 账号ID
	UserId          uint32 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // 用户ID
	OperationName   string `protobuf:"bytes,5,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`       // 操作功能名称
	RequestApi      string `protobuf:"bytes,6,opt,name=request_api,json=requestApi,proto3" json:"request_api,omitempty"`                // 请求的URI
	RequestParams   []byte `protobuf:"bytes,7,opt,name=request_params,json=requestParams,proto3" json:"request_params,omitempty"`       // 请求参数
	ResponseStatus  uint32 `protobuf:"varint,8,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`   // 响应状态：1-操作成功；2-操作失败
	ResponseContent []byte `protobuf:"bytes,9,opt,name=response_content,json=responseContent,proto3" json:"response_content,omitempty"` // 响应内容
	FailedReason    string `protobuf:"bytes,10,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`         // 操作失败时的失败原因
	OperationType   uint32 `protobuf:"varint,12,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`     // 操作类型：1-new;2-update;3-delete;
}

func (x *OperationLogReq) Reset() {
	*x = OperationLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationLogReq) ProtoMessage() {}

func (x *OperationLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationLogReq.ProtoReflect.Descriptor instead.
func (*OperationLogReq) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{8}
}

func (x *OperationLogReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *OperationLogReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *OperationLogReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OperationLogReq) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *OperationLogReq) GetRequestApi() string {
	if x != nil {
		return x.RequestApi
	}
	return ""
}

func (x *OperationLogReq) GetRequestParams() []byte {
	if x != nil {
		return x.RequestParams
	}
	return nil
}

func (x *OperationLogReq) GetResponseStatus() uint32 {
	if x != nil {
		return x.ResponseStatus
	}
	return 0
}

func (x *OperationLogReq) GetResponseContent() []byte {
	if x != nil {
		return x.ResponseContent
	}
	return nil
}

func (x *OperationLogReq) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *OperationLogReq) GetOperationType() uint32 {
	if x != nil {
		return x.OperationType
	}
	return 0
}

type BaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *structpb.Value `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 响应数据
}

func (x *BaseResp) Reset() {
	*x = BaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResp) ProtoMessage() {}

func (x *BaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResp.ProtoReflect.Descriptor instead.
func (*BaseResp) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{9}
}

func (x *BaseResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BaseResp) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type SendCodeResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 四位数验证码
}

func (x *SendCodeResp_Data) Reset() {
	*x = SendCodeResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCodeResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCodeResp_Data) ProtoMessage() {}

func (x *SendCodeResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCodeResp_Data.ProtoReflect.Descriptor instead.
func (*SendCodeResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SendCodeResp_Data) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type UploadFileResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // 文件路径
}

func (x *UploadFileResp_Data) Reset() {
	*x = UploadFileResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_basepb_base_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileResp_Data) ProtoMessage() {}

func (x *UploadFileResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_basepb_base_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileResp_Data.ProtoReflect.Descriptor instead.
func (*UploadFileResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_basepb_base_proto_rawDescGZIP(), []int{7, 0}
}

func (x *UploadFileResp_Data) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_pb_basepb_base_proto protoreflect.FileDescriptor

var file_pb_basepb_base_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x62, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x02, 0x0a, 0x0a, 0x53,
	0x6d, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x0b, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x77, 0x92, 0x41, 0x63, 0x32,
	0x61, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x3a, 0x30, 0x2d, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0x3b, 0x31, 0x2d, 0xe7, 0x99, 0xbb, 0xe9,
	0x99, 0x86, 0x2f, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0x3b, 0x32, 0x2d, 0xe7, 0xbb, 0x91, 0xe5,
	0xae, 0x9a, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x3b, 0x33, 0x2d, 0xe9, 0x87,
	0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x3b, 0x34, 0x2d, 0xe5, 0xbf, 0x98,
	0xe8, 0xae, 0xb0, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x3b, 0x35, 0x2d, 0xe5, 0xae, 0x9e, 0xe5,
	0x90, 0x8d, 0xfa, 0x42, 0x0e, 0x2a, 0x0c, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x30,
	0x04, 0x30, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe7, 0x9f, 0xad, 0xe4, 0xbf, 0xa1, 0xe7, 0xad, 0xbe, 0xe5, 0x90,
	0x8d, 0x2c, 0x30, 0x3a, 0x44, 0x41, 0x4f, 0x50, 0x2c, 0x31, 0x3a, 0xe5, 0x93, 0x88, 0xe7, 0xa8,
	0x80, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x02,
	0x0a, 0x0b, 0x53, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x0b, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x8b, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x77,
	0x92, 0x41, 0x63, 0x32, 0x61, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x30, 0x2d, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0x3b, 0x31, 0x2d,
	0xe7, 0x99, 0xbb, 0xe9, 0x99, 0x86, 0x2f, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0x3b, 0x32, 0x2d,
	0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x3b,
	0x33, 0x2d, 0xe9, 0x87, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x3b, 0x34,
	0x2d, 0xe5, 0xbf, 0x98, 0xe8, 0xae, 0xb0, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x3b, 0x35, 0x2d,
	0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x0e, 0x2a, 0x0c, 0x30, 0x00, 0x30, 0x01, 0x30,
	0x02, 0x30, 0x03, 0x30, 0x04, 0x30, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe5, 0x9b, 0x9b, 0xe4, 0xbd, 0x8d, 0xe6, 0x95, 0xb0, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf,
	0x81, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x10, 0x8f, 0x4e, 0x20, 0xe8, 0x07, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x08,
	0x32, 0x06, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe4, 0xb8,
	0xbb, 0xe9, 0xa2, 0x98, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08,
	0x32, 0x06, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xff,
	0x01, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x28, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x80, 0x01, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6c, 0x92, 0x41, 0x5a, 0x32, 0x58, 0xe9,
	0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x30,
	0x2d, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0x3b, 0x31, 0x2d, 0xe7, 0x99, 0xbb, 0xe9, 0x99, 0x86,
	0x2f, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0x3b, 0x32, 0x2d, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a,
	0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x3b, 0x33, 0x2d, 0xe9, 0x87, 0x8d, 0xe7,
	0xbd, 0xae, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x3b, 0x34, 0x2d, 0xe5, 0xbf, 0x98, 0xe8, 0xae,
	0xb0, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x0c, 0x2a, 0x0a, 0x30, 0x00, 0x30, 0x01,
	0x30, 0x02, 0x30, 0x03, 0x30, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe7, 0x9f, 0xad, 0xe4, 0xbf, 0xa1, 0xe7, 0xad,
	0xbe, 0xe5, 0x90, 0x8d, 0x2c, 0x30, 0x3a, 0x44, 0x41, 0x4f, 0x50, 0x2c, 0x31, 0x3a, 0xe5, 0x93,
	0x88, 0xe7, 0xa8, 0x80, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x80, 0x01, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6c, 0x92, 0x41, 0x5a,
	0x32, 0x58, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x3a, 0x30, 0x2d, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0x3b, 0x31, 0x2d, 0xe7, 0x99, 0xbb,
	0xe9, 0x99, 0x86, 0x2f, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0x3b, 0x32, 0x2d, 0xe7, 0xbb, 0x91,
	0xe5, 0xae, 0x9a, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x3b, 0x33, 0x2d, 0xe9,
	0x87, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x3b, 0x34, 0x2d, 0xe5, 0xbf,
	0x98, 0xe8, 0xae, 0xb0, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x0c, 0x2a, 0x0a, 0x30,
	0x00, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x30, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92,
	0x41, 0x14, 0x32, 0x12, 0xe5, 0x9b, 0x9b, 0xe4, 0xbd, 0x8d, 0xe6, 0x95, 0xb0, 0xe9, 0xaa, 0x8c,
	0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x10, 0x8f, 0x4e, 0x20, 0xe8,
	0x07, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90,
	0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6,
	0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x33, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0x9b, 0x9b,
	0xe4, 0xbd, 0x8d, 0xe6, 0x95, 0xb0, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0x92, 0x41, 0x17, 0x32, 0x15,
	0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0x31, 0xe5,
	0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x10, 0x02, 0x20, 0x00, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x96, 0x87,
	0xe4, 0xbb, 0xb6, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xfa, 0x42, 0x04, 0x7a, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5,
	0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4,
	0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x2d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0xfa, 0x04, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f,
	0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0x8a, 0x9f, 0xe8, 0x83,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe7, 0x9a, 0x84, 0x55, 0x52, 0x49, 0x52, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x33, 0x92,
	0x41, 0x30, 0x32, 0x2e, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x88, 0x90, 0xe5, 0x8a,
	0x9f, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0xa4, 0xb1, 0xe8,
	0xb4, 0xa5, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3c, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0x6e, 0x65, 0x77, 0x3b, 0x32, 0x2d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3b, 0x33, 0x2d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3b,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xd4, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32,
	0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8,
	0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a,
	0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b,
	0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xa0, 0x07, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x70,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x33, 0x92, 0x41, 0x17, 0x12, 0x15, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe7, 0x9f,
	0xad, 0xe4, 0xbf, 0xa1, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x65,
	0x6e, 0x64, 0x2f, 0x73, 0x6d, 0x73, 0x12, 0x7d, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x6d, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x34, 0x92, 0x41, 0x17, 0x12, 0x15, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0x9f, 0xad, 0xe4,
	0xbf, 0xa1, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x2f, 0x73, 0x6d, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x35, 0x92, 0x41, 0x17, 0x12, 0x15, 0xe5, 0x8f, 0x91, 0xe9,
	0x80, 0x81, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0,
	0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x8d, 0x01, 0x0a,
	0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x70,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x32, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe5,
	0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64,
	0x2f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x83, 0x01, 0x0a,
	0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x36, 0x92, 0x41, 0x17, 0x12,
	0x15, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe9, 0xaa, 0x8c,
	0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22,
	0x11, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x75, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x20, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x70,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x28, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0x8a, 0xe4,
	0xbc, 0xa0, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x7e, 0x0a, 0x0c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x92, 0x41, 0x1a, 0x12,
	0x18, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0xbf, 0x90, 0xe8, 0x90, 0xa5, 0xe5, 0xb9, 0xb3,
	0xe5, 0x8f, 0xb0, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12,
	0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x42, 0x12, 0x5a, 0x10, 0x70, 0x62, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x3b, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_basepb_base_proto_rawDescOnce sync.Once
	file_pb_basepb_base_proto_rawDescData = file_pb_basepb_base_proto_rawDesc
)

func file_pb_basepb_base_proto_rawDescGZIP() []byte {
	file_pb_basepb_base_proto_rawDescOnce.Do(func() {
		file_pb_basepb_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_basepb_base_proto_rawDescData)
	})
	return file_pb_basepb_base_proto_rawDescData
}

var file_pb_basepb_base_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_pb_basepb_base_proto_goTypes = []interface{}{
	(*SmsSendReq)(nil),          // 0: daop.pb.basepb.v1.SmsSendReq
	(*SmsValidReq)(nil),         // 1: daop.pb.basepb.v1.SmsValidReq
	(*SendNormalEmailReq)(nil),  // 2: daop.pb.basepb.v1.SendNormalEmailReq
	(*EmailSendReq)(nil),        // 3: daop.pb.basepb.v1.EmailSendReq
	(*EmailValidReq)(nil),       // 4: daop.pb.basepb.v1.EmailValidReq
	(*SendCodeResp)(nil),        // 5: daop.pb.basepb.v1.SendCodeResp
	(*UploadFileReq)(nil),       // 6: daop.pb.basepb.v1.UploadFileReq
	(*UploadFileResp)(nil),      // 7: daop.pb.basepb.v1.UploadFileResp
	(*OperationLogReq)(nil),     // 8: daop.pb.basepb.v1.OperationLogReq
	(*BaseResp)(nil),            // 9: daop.pb.basepb.v1.BaseResp
	(*SendCodeResp_Data)(nil),   // 10: daop.pb.basepb.v1.SendCodeResp.Data
	(*UploadFileResp_Data)(nil), // 11: daop.pb.basepb.v1.UploadFileResp.Data
	(*structpb.Value)(nil),      // 12: google.protobuf.Value
}
var file_pb_basepb_base_proto_depIdxs = []int32{
	10, // 0: daop.pb.basepb.v1.SendCodeResp.data:type_name -> daop.pb.basepb.v1.SendCodeResp.Data
	11, // 1: daop.pb.basepb.v1.UploadFileResp.data:type_name -> daop.pb.basepb.v1.UploadFileResp.Data
	12, // 2: daop.pb.basepb.v1.BaseResp.data:type_name -> google.protobuf.Value
	0,  // 3: daop.pb.basepb.v1.BaseService.SendSms:input_type -> daop.pb.basepb.v1.SmsSendReq
	1,  // 4: daop.pb.basepb.v1.BaseService.ValidSms:input_type -> daop.pb.basepb.v1.SmsValidReq
	3,  // 5: daop.pb.basepb.v1.BaseService.SendEmail:input_type -> daop.pb.basepb.v1.EmailSendReq
	2,  // 6: daop.pb.basepb.v1.BaseService.SendNormalEmail:input_type -> daop.pb.basepb.v1.SendNormalEmailReq
	4,  // 7: daop.pb.basepb.v1.BaseService.ValidEmail:input_type -> daop.pb.basepb.v1.EmailValidReq
	6,  // 8: daop.pb.basepb.v1.BaseService.UploadFile:input_type -> daop.pb.basepb.v1.UploadFileReq
	8,  // 9: daop.pb.basepb.v1.BaseService.OperationLog:input_type -> daop.pb.basepb.v1.OperationLogReq
	5,  // 10: daop.pb.basepb.v1.BaseService.SendSms:output_type -> daop.pb.basepb.v1.SendCodeResp
	9,  // 11: daop.pb.basepb.v1.BaseService.ValidSms:output_type -> daop.pb.basepb.v1.BaseResp
	5,  // 12: daop.pb.basepb.v1.BaseService.SendEmail:output_type -> daop.pb.basepb.v1.SendCodeResp
	5,  // 13: daop.pb.basepb.v1.BaseService.SendNormalEmail:output_type -> daop.pb.basepb.v1.SendCodeResp
	9,  // 14: daop.pb.basepb.v1.BaseService.ValidEmail:output_type -> daop.pb.basepb.v1.BaseResp
	9,  // 15: daop.pb.basepb.v1.BaseService.UploadFile:output_type -> daop.pb.basepb.v1.BaseResp
	9,  // 16: daop.pb.basepb.v1.BaseService.OperationLog:output_type -> daop.pb.basepb.v1.BaseResp
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_pb_basepb_base_proto_init() }
func file_pb_basepb_base_proto_init() {
	if File_pb_basepb_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_basepb_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsValidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendNormalEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailValidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCodeResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_basepb_base_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_basepb_base_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_basepb_base_proto_goTypes,
		DependencyIndexes: file_pb_basepb_base_proto_depIdxs,
		MessageInfos:      file_pb_basepb_base_proto_msgTypes,
	}.Build()
	File_pb_basepb_base_proto = out.File
	file_pb_basepb_base_proto_rawDesc = nil
	file_pb_basepb_base_proto_goTypes = nil
	file_pb_basepb_base_proto_depIdxs = nil
}
