// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/basepb/base.proto

package basepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BaseService_SendSms_FullMethodName         = "/daop.pb.basepb.v1.BaseService/SendSms"
	BaseService_ValidSms_FullMethodName        = "/daop.pb.basepb.v1.BaseService/ValidSms"
	BaseService_SendEmail_FullMethodName       = "/daop.pb.basepb.v1.BaseService/SendEmail"
	BaseService_SendNormalEmail_FullMethodName = "/daop.pb.basepb.v1.BaseService/SendNormalEmail"
	BaseService_ValidEmail_FullMethodName      = "/daop.pb.basepb.v1.BaseService/ValidEmail"
	BaseService_UploadFile_FullMethodName      = "/daop.pb.basepb.v1.BaseService/UploadFile"
	BaseService_OperationLog_FullMethodName    = "/daop.pb.basepb.v1.BaseService/OperationLog"
)

// BaseServiceClient is the client API for BaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseServiceClient interface {
	// SendSms 发送短信验证码
	//   - scope: open-api
	//   - security: authorized
	SendSms(ctx context.Context, in *SmsSendReq, opts ...grpc.CallOption) (*SendCodeResp, error)
	// ValidSms 验证短信验证码
	//   - scope: open-api
	//   - security: authorized
	ValidSms(ctx context.Context, in *SmsValidReq, opts ...grpc.CallOption) (*BaseResp, error)
	// SendEmail 发送邮箱验证码
	//   - scope: open-api
	//   - security: authorized
	SendEmail(ctx context.Context, in *EmailSendReq, opts ...grpc.CallOption) (*SendCodeResp, error)
	// SendNormalEmail 发送邮件
	//   - scope: open-api
	//   - security: authorized
	SendNormalEmail(ctx context.Context, in *SendNormalEmailReq, opts ...grpc.CallOption) (*SendCodeResp, error)
	// ValidEmail 验证邮箱验证码
	//   - scope: open-api
	//   - security: authorized
	ValidEmail(ctx context.Context, in *EmailValidReq, opts ...grpc.CallOption) (*BaseResp, error)
	// UploadFile 文件上传
	//   - scope: open-api
	//   - security: authorized
	UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*BaseResp, error)
	// OperationLog 记录运营平台日志
	//   - scope: open-api
	//   - security: authorized
	OperationLog(ctx context.Context, in *OperationLogReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type baseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseServiceClient(cc grpc.ClientConnInterface) BaseServiceClient {
	return &baseServiceClient{cc}
}

func (c *baseServiceClient) SendSms(ctx context.Context, in *SmsSendReq, opts ...grpc.CallOption) (*SendCodeResp, error) {
	out := new(SendCodeResp)
	err := c.cc.Invoke(ctx, BaseService_SendSms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) ValidSms(ctx context.Context, in *SmsValidReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, BaseService_ValidSms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) SendEmail(ctx context.Context, in *EmailSendReq, opts ...grpc.CallOption) (*SendCodeResp, error) {
	out := new(SendCodeResp)
	err := c.cc.Invoke(ctx, BaseService_SendEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) SendNormalEmail(ctx context.Context, in *SendNormalEmailReq, opts ...grpc.CallOption) (*SendCodeResp, error) {
	out := new(SendCodeResp)
	err := c.cc.Invoke(ctx, BaseService_SendNormalEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) ValidEmail(ctx context.Context, in *EmailValidReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, BaseService_ValidEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) UploadFile(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, BaseService_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) OperationLog(ctx context.Context, in *OperationLogReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, BaseService_OperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServiceServer is the server API for BaseService service.
// All implementations should embed UnimplementedBaseServiceServer
// for forward compatibility
type BaseServiceServer interface {
	// SendSms 发送短信验证码
	//   - scope: open-api
	//   - security: authorized
	SendSms(context.Context, *SmsSendReq) (*SendCodeResp, error)
	// ValidSms 验证短信验证码
	//   - scope: open-api
	//   - security: authorized
	ValidSms(context.Context, *SmsValidReq) (*BaseResp, error)
	// SendEmail 发送邮箱验证码
	//   - scope: open-api
	//   - security: authorized
	SendEmail(context.Context, *EmailSendReq) (*SendCodeResp, error)
	// SendNormalEmail 发送邮件
	//   - scope: open-api
	//   - security: authorized
	SendNormalEmail(context.Context, *SendNormalEmailReq) (*SendCodeResp, error)
	// ValidEmail 验证邮箱验证码
	//   - scope: open-api
	//   - security: authorized
	ValidEmail(context.Context, *EmailValidReq) (*BaseResp, error)
	// UploadFile 文件上传
	//   - scope: open-api
	//   - security: authorized
	UploadFile(context.Context, *UploadFileReq) (*BaseResp, error)
	// OperationLog 记录运营平台日志
	//   - scope: open-api
	//   - security: authorized
	OperationLog(context.Context, *OperationLogReq) (*BaseResp, error)
}

// UnimplementedBaseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBaseServiceServer struct {
}

func (UnimplementedBaseServiceServer) SendSms(context.Context, *SmsSendReq) (*SendCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedBaseServiceServer) ValidSms(context.Context, *SmsValidReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidSms not implemented")
}
func (UnimplementedBaseServiceServer) SendEmail(context.Context, *EmailSendReq) (*SendCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedBaseServiceServer) SendNormalEmail(context.Context, *SendNormalEmailReq) (*SendCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNormalEmail not implemented")
}
func (UnimplementedBaseServiceServer) ValidEmail(context.Context, *EmailValidReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidEmail not implemented")
}
func (UnimplementedBaseServiceServer) UploadFile(context.Context, *UploadFileReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedBaseServiceServer) OperationLog(context.Context, *OperationLogReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperationLog not implemented")
}

// UnsafeBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServiceServer will
// result in compilation errors.
type UnsafeBaseServiceServer interface {
	mustEmbedUnimplementedBaseServiceServer()
}

func RegisterBaseServiceServer(s grpc.ServiceRegistrar, srv BaseServiceServer) {
	s.RegisterService(&BaseService_ServiceDesc, srv)
}

func _BaseService_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).SendSms(ctx, req.(*SmsSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_ValidSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsValidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).ValidSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_ValidSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).ValidSms(ctx, req.(*SmsValidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).SendEmail(ctx, req.(*EmailSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_SendNormalEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNormalEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).SendNormalEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_SendNormalEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).SendNormalEmail(ctx, req.(*SendNormalEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_ValidEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailValidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).ValidEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_ValidEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).ValidEmail(ctx, req.(*EmailValidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).UploadFile(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_OperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).OperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_OperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).OperationLog(ctx, req.(*OperationLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseService_ServiceDesc is the grpc.ServiceDesc for BaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daop.pb.basepb.v1.BaseService",
	HandlerType: (*BaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSms",
			Handler:    _BaseService_SendSms_Handler,
		},
		{
			MethodName: "ValidSms",
			Handler:    _BaseService_ValidSms_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _BaseService_SendEmail_Handler,
		},
		{
			MethodName: "SendNormalEmail",
			Handler:    _BaseService_SendNormalEmail_Handler,
		},
		{
			MethodName: "ValidEmail",
			Handler:    _BaseService_ValidEmail_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _BaseService_UploadFile_Handler,
		},
		{
			MethodName: "OperationLog",
			Handler:    _BaseService_OperationLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/basepb/base.proto",
}
