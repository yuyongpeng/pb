// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/basepb/base.proto

package basepb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SmsSendReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SmsSendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SmsSendReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SmsSendReqMultiError, or
// nil if none found.
func (m *SmsSendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SmsSendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMobile()) > 11 {
		err := SmsSendReqValidationError{
			field:  "Mobile",
			reason: "value length must be at most 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SmsSendReq_Type_InLookup[m.GetType()]; !ok {
		err := SmsSendReqValidationError{
			field:  "Type",
			reason: "value must be in list [0 1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SourceType

	if len(errors) > 0 {
		return SmsSendReqMultiError(errors)
	}

	return nil
}

// SmsSendReqMultiError is an error wrapping multiple validation errors
// returned by SmsSendReq.ValidateAll() if the designated constraints aren't met.
type SmsSendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmsSendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmsSendReqMultiError) AllErrors() []error { return m }

// SmsSendReqValidationError is the validation error returned by
// SmsSendReq.Validate if the designated constraints aren't met.
type SmsSendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmsSendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmsSendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmsSendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmsSendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmsSendReqValidationError) ErrorName() string { return "SmsSendReqValidationError" }

// Error satisfies the builtin error interface
func (e SmsSendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSmsSendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmsSendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmsSendReqValidationError{}

var _SmsSendReq_Type_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

// Validate checks the field values on SmsValidReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SmsValidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SmsValidReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SmsValidReqMultiError, or
// nil if none found.
func (m *SmsValidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SmsValidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMobile()) > 11 {
		err := SmsValidReqValidationError{
			field:  "Mobile",
			reason: "value length must be at most 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SmsValidReq_Type_InLookup[m.GetType()]; !ok {
		err := SmsValidReqValidationError{
			field:  "Type",
			reason: "value must be in list [0 1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetCode(); val <= 1000 || val >= 9999 {
		err := SmsValidReqValidationError{
			field:  "Code",
			reason: "value must be inside range (1000, 9999)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SmsValidReqMultiError(errors)
	}

	return nil
}

// SmsValidReqMultiError is an error wrapping multiple validation errors
// returned by SmsValidReq.ValidateAll() if the designated constraints aren't met.
type SmsValidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmsValidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmsValidReqMultiError) AllErrors() []error { return m }

// SmsValidReqValidationError is the validation error returned by
// SmsValidReq.Validate if the designated constraints aren't met.
type SmsValidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmsValidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmsValidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmsValidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmsValidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmsValidReqValidationError) ErrorName() string { return "SmsValidReqValidationError" }

// Error satisfies the builtin error interface
func (e SmsValidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSmsValidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmsValidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmsValidReqValidationError{}

var _SmsValidReq_Type_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

// Validate checks the field values on SendNormalEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNormalEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNormalEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNormalEmailReqMultiError, or nil if none found.
func (m *SendNormalEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNormalEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SendNormalEmailReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Subject

	// no validation rules for Text

	if len(errors) > 0 {
		return SendNormalEmailReqMultiError(errors)
	}

	return nil
}

func (m *SendNormalEmailReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SendNormalEmailReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SendNormalEmailReqMultiError is an error wrapping multiple validation errors
// returned by SendNormalEmailReq.ValidateAll() if the designated constraints
// aren't met.
type SendNormalEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNormalEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNormalEmailReqMultiError) AllErrors() []error { return m }

// SendNormalEmailReqValidationError is the validation error returned by
// SendNormalEmailReq.Validate if the designated constraints aren't met.
type SendNormalEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNormalEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNormalEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNormalEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNormalEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNormalEmailReqValidationError) ErrorName() string {
	return "SendNormalEmailReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendNormalEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNormalEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNormalEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNormalEmailReqValidationError{}

// Validate checks the field values on EmailSendReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmailSendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailSendReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmailSendReqMultiError, or
// nil if none found.
func (m *EmailSendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailSendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = EmailSendReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _EmailSendReq_Type_InLookup[m.GetType()]; !ok {
		err := EmailSendReqValidationError{
			field:  "Type",
			reason: "value must be in list [0 1 2 3 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SourceType

	if len(errors) > 0 {
		return EmailSendReqMultiError(errors)
	}

	return nil
}

func (m *EmailSendReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *EmailSendReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// EmailSendReqMultiError is an error wrapping multiple validation errors
// returned by EmailSendReq.ValidateAll() if the designated constraints aren't met.
type EmailSendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailSendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailSendReqMultiError) AllErrors() []error { return m }

// EmailSendReqValidationError is the validation error returned by
// EmailSendReq.Validate if the designated constraints aren't met.
type EmailSendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailSendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailSendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailSendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailSendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailSendReqValidationError) ErrorName() string { return "EmailSendReqValidationError" }

// Error satisfies the builtin error interface
func (e EmailSendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailSendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailSendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailSendReqValidationError{}

var _EmailSendReq_Type_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
}

// Validate checks the field values on EmailValidReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmailValidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailValidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmailValidReqMultiError, or
// nil if none found.
func (m *EmailValidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailValidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = EmailValidReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _EmailValidReq_Type_InLookup[m.GetType()]; !ok {
		err := EmailValidReqValidationError{
			field:  "Type",
			reason: "value must be in list [0 1 2 3 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetCode(); val <= 1000 || val >= 9999 {
		err := EmailValidReqValidationError{
			field:  "Code",
			reason: "value must be inside range (1000, 9999)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EmailValidReqMultiError(errors)
	}

	return nil
}

func (m *EmailValidReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *EmailValidReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// EmailValidReqMultiError is an error wrapping multiple validation errors
// returned by EmailValidReq.ValidateAll() if the designated constraints
// aren't met.
type EmailValidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailValidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailValidReqMultiError) AllErrors() []error { return m }

// EmailValidReqValidationError is the validation error returned by
// EmailValidReq.Validate if the designated constraints aren't met.
type EmailValidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailValidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailValidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailValidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailValidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailValidReqValidationError) ErrorName() string { return "EmailValidReqValidationError" }

// Error satisfies the builtin error interface
func (e EmailValidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailValidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailValidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailValidReqValidationError{}

var _EmailValidReq_Type_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
}

// Validate checks the field values on SendCodeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCodeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendCodeRespMultiError, or
// nil if none found.
func (m *SendCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendCodeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendCodeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendCodeRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendCodeRespMultiError(errors)
	}

	return nil
}

// SendCodeRespMultiError is an error wrapping multiple validation errors
// returned by SendCodeResp.ValidateAll() if the designated constraints aren't met.
type SendCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCodeRespMultiError) AllErrors() []error { return m }

// SendCodeRespValidationError is the validation error returned by
// SendCodeResp.Validate if the designated constraints aren't met.
type SendCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCodeRespValidationError) ErrorName() string { return "SendCodeRespValidationError" }

// Error satisfies the builtin error interface
func (e SendCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCodeRespValidationError{}

// Validate checks the field values on UploadFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadFileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadFileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadFileReqMultiError, or
// nil if none found.
func (m *UploadFileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadFileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetFileType(); val <= 0 || val >= 2 {
		err := UploadFileReqValidationError{
			field:  "FileType",
			reason: "value must be inside range (0, 2)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFile()) < 1 {
		err := UploadFileReqValidationError{
			field:  "File",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UploadFileReqMultiError(errors)
	}

	return nil
}

// UploadFileReqMultiError is an error wrapping multiple validation errors
// returned by UploadFileReq.ValidateAll() if the designated constraints
// aren't met.
type UploadFileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadFileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadFileReqMultiError) AllErrors() []error { return m }

// UploadFileReqValidationError is the validation error returned by
// UploadFileReq.Validate if the designated constraints aren't met.
type UploadFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileReqValidationError) ErrorName() string { return "UploadFileReqValidationError" }

// Error satisfies the builtin error interface
func (e UploadFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileReqValidationError{}

// Validate checks the field values on UploadFileResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadFileResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadFileResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadFileRespMultiError,
// or nil if none found.
func (m *UploadFileResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadFileResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadFileRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadFileRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadFileRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadFileRespMultiError(errors)
	}

	return nil
}

// UploadFileRespMultiError is an error wrapping multiple validation errors
// returned by UploadFileResp.ValidateAll() if the designated constraints
// aren't met.
type UploadFileRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadFileRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadFileRespMultiError) AllErrors() []error { return m }

// UploadFileRespValidationError is the validation error returned by
// UploadFileResp.Validate if the designated constraints aren't met.
type UploadFileRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileRespValidationError) ErrorName() string { return "UploadFileRespValidationError" }

// Error satisfies the builtin error interface
func (e UploadFileRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileRespValidationError{}

// Validate checks the field values on OperationLogReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperationLogReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperationLogReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperationLogReqMultiError, or nil if none found.
func (m *OperationLogReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OperationLogReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppNo

	// no validation rules for AccountId

	// no validation rules for UserId

	// no validation rules for OperationName

	// no validation rules for RequestApi

	// no validation rules for RequestParams

	// no validation rules for ResponseStatus

	// no validation rules for ResponseContent

	// no validation rules for FailedReason

	// no validation rules for OperationType

	if len(errors) > 0 {
		return OperationLogReqMultiError(errors)
	}

	return nil
}

// OperationLogReqMultiError is an error wrapping multiple validation errors
// returned by OperationLogReq.ValidateAll() if the designated constraints
// aren't met.
type OperationLogReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationLogReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationLogReqMultiError) AllErrors() []error { return m }

// OperationLogReqValidationError is the validation error returned by
// OperationLogReq.Validate if the designated constraints aren't met.
type OperationLogReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationLogReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationLogReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationLogReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationLogReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationLogReqValidationError) ErrorName() string { return "OperationLogReqValidationError" }

// Error satisfies the builtin error interface
func (e OperationLogReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationLogReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationLogReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationLogReqValidationError{}

// Validate checks the field values on BaseResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseRespMultiError, or nil
// if none found.
func (m *BaseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BaseRespMultiError(errors)
	}

	return nil
}

// BaseRespMultiError is an error wrapping multiple validation errors returned
// by BaseResp.ValidateAll() if the designated constraints aren't met.
type BaseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseRespMultiError) AllErrors() []error { return m }

// BaseRespValidationError is the validation error returned by
// BaseResp.Validate if the designated constraints aren't met.
type BaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseRespValidationError) ErrorName() string { return "BaseRespValidationError" }

// Error satisfies the builtin error interface
func (e BaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseRespValidationError{}

// Validate checks the field values on SendCodeResp_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendCodeResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCodeResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendCodeResp_DataMultiError, or nil if none found.
func (m *SendCodeResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCodeResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SendCodeResp_DataMultiError(errors)
	}

	return nil
}

// SendCodeResp_DataMultiError is an error wrapping multiple validation errors
// returned by SendCodeResp_Data.ValidateAll() if the designated constraints
// aren't met.
type SendCodeResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCodeResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCodeResp_DataMultiError) AllErrors() []error { return m }

// SendCodeResp_DataValidationError is the validation error returned by
// SendCodeResp_Data.Validate if the designated constraints aren't met.
type SendCodeResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCodeResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCodeResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCodeResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCodeResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCodeResp_DataValidationError) ErrorName() string {
	return "SendCodeResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e SendCodeResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCodeResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCodeResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCodeResp_DataValidationError{}

// Validate checks the field values on UploadFileResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadFileResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadFileResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadFileResp_DataMultiError, or nil if none found.
func (m *UploadFileResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadFileResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	if len(errors) > 0 {
		return UploadFileResp_DataMultiError(errors)
	}

	return nil
}

// UploadFileResp_DataMultiError is an error wrapping multiple validation
// errors returned by UploadFileResp_Data.ValidateAll() if the designated
// constraints aren't met.
type UploadFileResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadFileResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadFileResp_DataMultiError) AllErrors() []error { return m }

// UploadFileResp_DataValidationError is the validation error returned by
// UploadFileResp_Data.Validate if the designated constraints aren't met.
type UploadFileResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileResp_DataValidationError) ErrorName() string {
	return "UploadFileResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UploadFileResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileResp_DataValidationError{}
