// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/adminpb/admin.proto

package adminpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyReqMultiError, or nil
// if none found.
func (m *EmptyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetR()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EmptyReqValidationError{
					field:  "R",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EmptyReqValidationError{
					field:  "R",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetR()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmptyReqValidationError{
				field:  "R",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EmptyReqMultiError(errors)
	}

	return nil
}

// EmptyReqMultiError is an error wrapping multiple validation errors returned
// by EmptyReq.ValidateAll() if the designated constraints aren't met.
type EmptyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyReqMultiError) AllErrors() []error { return m }

// EmptyReqValidationError is the validation error returned by
// EmptyReq.Validate if the designated constraints aren't met.
type EmptyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyReqValidationError) ErrorName() string { return "EmptyReqValidationError" }

// Error satisfies the builtin error interface
func (e EmptyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyReqValidationError{}

// Validate checks the field values on UpStatusReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpStatusReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpStatusReqMultiError, or
// nil if none found.
func (m *UpStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpStatusReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpStatusReqMultiError(errors)
	}

	return nil
}

// UpStatusReqMultiError is an error wrapping multiple validation errors
// returned by UpStatusReq.ValidateAll() if the designated constraints aren't met.
type UpStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpStatusReqMultiError) AllErrors() []error { return m }

// UpStatusReqValidationError is the validation error returned by
// UpStatusReq.Validate if the designated constraints aren't met.
type UpStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpStatusReqValidationError) ErrorName() string { return "UpStatusReqValidationError" }

// Error satisfies the builtin error interface
func (e UpStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpStatusReqValidationError{}

// Validate checks the field values on BaseResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseRespMultiError, or nil
// if none found.
func (m *BaseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BaseRespMultiError(errors)
	}

	return nil
}

// BaseRespMultiError is an error wrapping multiple validation errors returned
// by BaseResp.ValidateAll() if the designated constraints aren't met.
type BaseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseRespMultiError) AllErrors() []error { return m }

// BaseRespValidationError is the validation error returned by
// BaseResp.Validate if the designated constraints aren't met.
type BaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseRespValidationError) ErrorName() string { return "BaseRespValidationError" }

// Error satisfies the builtin error interface
func (e BaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseRespValidationError{}

// Validate checks the field values on GetAccountAddressListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountAddressListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountAddressListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountAddressListReqMultiError, or nil if none found.
func (m *GetAccountAddressListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountAddressListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountAddress

	if len(errors) > 0 {
		return GetAccountAddressListReqMultiError(errors)
	}

	return nil
}

// GetAccountAddressListReqMultiError is an error wrapping multiple validation
// errors returned by GetAccountAddressListReq.ValidateAll() if the designated
// constraints aren't met.
type GetAccountAddressListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountAddressListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountAddressListReqMultiError) AllErrors() []error { return m }

// GetAccountAddressListReqValidationError is the validation error returned by
// GetAccountAddressListReq.Validate if the designated constraints aren't met.
type GetAccountAddressListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountAddressListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountAddressListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountAddressListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountAddressListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountAddressListReqValidationError) ErrorName() string {
	return "GetAccountAddressListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountAddressListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountAddressListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountAddressListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountAddressListReqValidationError{}

// Validate checks the field values on GetAccountAddressListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountAddressListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountAddressListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountAddressListRespMultiError, or nil if none found.
func (m *GetAccountAddressListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountAddressListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountAddressListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountAddressListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountAddressListRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountAddressListRespMultiError(errors)
	}

	return nil
}

// GetAccountAddressListRespMultiError is an error wrapping multiple validation
// errors returned by GetAccountAddressListResp.ValidateAll() if the
// designated constraints aren't met.
type GetAccountAddressListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountAddressListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountAddressListRespMultiError) AllErrors() []error { return m }

// GetAccountAddressListRespValidationError is the validation error returned by
// GetAccountAddressListResp.Validate if the designated constraints aren't met.
type GetAccountAddressListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountAddressListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountAddressListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountAddressListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountAddressListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountAddressListRespValidationError) ErrorName() string {
	return "GetAccountAddressListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountAddressListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountAddressListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountAddressListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountAddressListRespValidationError{}

// Validate checks the field values on GetAccountAddressGasListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountAddressGasListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountAddressGasListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountAddressGasListReqMultiError, or nil if none found.
func (m *GetAccountAddressGasListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountAddressGasListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccountAddress()) < 1 {
		err := GetAccountAddressGasListReqValidationError{
			field:  "AccountAddress",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TimeStart

	// no validation rules for TimeEnd

	if len(errors) > 0 {
		return GetAccountAddressGasListReqMultiError(errors)
	}

	return nil
}

// GetAccountAddressGasListReqMultiError is an error wrapping multiple
// validation errors returned by GetAccountAddressGasListReq.ValidateAll() if
// the designated constraints aren't met.
type GetAccountAddressGasListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountAddressGasListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountAddressGasListReqMultiError) AllErrors() []error { return m }

// GetAccountAddressGasListReqValidationError is the validation error returned
// by GetAccountAddressGasListReq.Validate if the designated constraints
// aren't met.
type GetAccountAddressGasListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountAddressGasListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountAddressGasListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountAddressGasListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountAddressGasListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountAddressGasListReqValidationError) ErrorName() string {
	return "GetAccountAddressGasListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountAddressGasListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountAddressGasListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountAddressGasListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountAddressGasListReqValidationError{}

// Validate checks the field values on GetAccountAddressGasListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountAddressGasListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountAddressGasListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountAddressGasListRespMultiError, or nil if none found.
func (m *GetAccountAddressGasListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountAddressGasListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountAddressGasListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountAddressGasListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountAddressGasListRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountAddressGasListRespMultiError(errors)
	}

	return nil
}

// GetAccountAddressGasListRespMultiError is an error wrapping multiple
// validation errors returned by GetAccountAddressGasListResp.ValidateAll() if
// the designated constraints aren't met.
type GetAccountAddressGasListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountAddressGasListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountAddressGasListRespMultiError) AllErrors() []error { return m }

// GetAccountAddressGasListRespValidationError is the validation error returned
// by GetAccountAddressGasListResp.Validate if the designated constraints
// aren't met.
type GetAccountAddressGasListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountAddressGasListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountAddressGasListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountAddressGasListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountAddressGasListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountAddressGasListRespValidationError) ErrorName() string {
	return "GetAccountAddressGasListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountAddressGasListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountAddressGasListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountAddressGasListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountAddressGasListRespValidationError{}

// Validate checks the field values on GetAccountAddressGasInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountAddressGasInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountAddressGasInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountAddressGasInfoMultiError, or nil if none found.
func (m *GetAccountAddressGasInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountAddressGasInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountAddress

	// no validation rules for StatisticDay

	// no validation rules for GasBalance

	if len(errors) > 0 {
		return GetAccountAddressGasInfoMultiError(errors)
	}

	return nil
}

// GetAccountAddressGasInfoMultiError is an error wrapping multiple validation
// errors returned by GetAccountAddressGasInfo.ValidateAll() if the designated
// constraints aren't met.
type GetAccountAddressGasInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountAddressGasInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountAddressGasInfoMultiError) AllErrors() []error { return m }

// GetAccountAddressGasInfoValidationError is the validation error returned by
// GetAccountAddressGasInfo.Validate if the designated constraints aren't met.
type GetAccountAddressGasInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountAddressGasInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountAddressGasInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountAddressGasInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountAddressGasInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountAddressGasInfoValidationError) ErrorName() string {
	return "GetAccountAddressGasInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountAddressGasInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountAddressGasInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountAddressGasInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountAddressGasInfoValidationError{}

// Validate checks the field values on AdminPresentByAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminPresentByAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminPresentByAccountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminPresentByAccountReqMultiError, or nil if none found.
func (m *AdminPresentByAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminPresentByAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	if m.GetAmount() <= 0 {
		err := AdminPresentByAccountReqValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	if len(errors) > 0 {
		return AdminPresentByAccountReqMultiError(errors)
	}

	return nil
}

// AdminPresentByAccountReqMultiError is an error wrapping multiple validation
// errors returned by AdminPresentByAccountReq.ValidateAll() if the designated
// constraints aren't met.
type AdminPresentByAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminPresentByAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminPresentByAccountReqMultiError) AllErrors() []error { return m }

// AdminPresentByAccountReqValidationError is the validation error returned by
// AdminPresentByAccountReq.Validate if the designated constraints aren't met.
type AdminPresentByAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminPresentByAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminPresentByAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminPresentByAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminPresentByAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminPresentByAccountReqValidationError) ErrorName() string {
	return "AdminPresentByAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdminPresentByAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminPresentByAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminPresentByAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminPresentByAccountReqValidationError{}

// Validate checks the field values on AdminPresentByAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminPresentByAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminPresentByAccountResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminPresentByAccountRespMultiError, or nil if none found.
func (m *AdminPresentByAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminPresentByAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return AdminPresentByAccountRespMultiError(errors)
	}

	return nil
}

// AdminPresentByAccountRespMultiError is an error wrapping multiple validation
// errors returned by AdminPresentByAccountResp.ValidateAll() if the
// designated constraints aren't met.
type AdminPresentByAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminPresentByAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminPresentByAccountRespMultiError) AllErrors() []error { return m }

// AdminPresentByAccountRespValidationError is the validation error returned by
// AdminPresentByAccountResp.Validate if the designated constraints aren't met.
type AdminPresentByAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminPresentByAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminPresentByAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminPresentByAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminPresentByAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminPresentByAccountRespValidationError) ErrorName() string {
	return "AdminPresentByAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e AdminPresentByAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminPresentByAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminPresentByAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminPresentByAccountRespValidationError{}

// Validate checks the field values on GetAccountAddressListResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountAddressListResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountAddressListResp_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAccountAddressListResp_DataMultiError, or nil if none found.
func (m *GetAccountAddressListResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountAddressListResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAccountAddressListResp_DataMultiError(errors)
	}

	return nil
}

// GetAccountAddressListResp_DataMultiError is an error wrapping multiple
// validation errors returned by GetAccountAddressListResp_Data.ValidateAll()
// if the designated constraints aren't met.
type GetAccountAddressListResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountAddressListResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountAddressListResp_DataMultiError) AllErrors() []error { return m }

// GetAccountAddressListResp_DataValidationError is the validation error
// returned by GetAccountAddressListResp_Data.Validate if the designated
// constraints aren't met.
type GetAccountAddressListResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountAddressListResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountAddressListResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountAddressListResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountAddressListResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountAddressListResp_DataValidationError) ErrorName() string {
	return "GetAccountAddressListResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountAddressListResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountAddressListResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountAddressListResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountAddressListResp_DataValidationError{}

// Validate checks the field values on GetAccountAddressGasListResp_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAccountAddressGasListResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountAddressGasListResp_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAccountAddressGasListResp_DataMultiError, or nil if none found.
func (m *GetAccountAddressGasListResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountAddressGasListResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for GasBalance

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountAddressGasListResp_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountAddressGasListResp_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountAddressGasListResp_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountAddressGasListResp_DataMultiError(errors)
	}

	return nil
}

// GetAccountAddressGasListResp_DataMultiError is an error wrapping multiple
// validation errors returned by
// GetAccountAddressGasListResp_Data.ValidateAll() if the designated
// constraints aren't met.
type GetAccountAddressGasListResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountAddressGasListResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountAddressGasListResp_DataMultiError) AllErrors() []error { return m }

// GetAccountAddressGasListResp_DataValidationError is the validation error
// returned by GetAccountAddressGasListResp_Data.Validate if the designated
// constraints aren't met.
type GetAccountAddressGasListResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountAddressGasListResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountAddressGasListResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountAddressGasListResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountAddressGasListResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountAddressGasListResp_DataValidationError) ErrorName() string {
	return "GetAccountAddressGasListResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountAddressGasListResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountAddressGasListResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountAddressGasListResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountAddressGasListResp_DataValidationError{}
