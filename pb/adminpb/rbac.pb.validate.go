// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/adminpb/rbac.proto

package adminpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Privilege with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Privilege) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Privilege with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrivilegeMultiError, or nil
// if none found.
func (m *Privilege) ValidateAll() error {
	return m.validate(true)
}

func (m *Privilege) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrivilegeId

	if m.GetParentId() < 0 {
		err := PrivilegeValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetShowNameCn()) < 1 {
		err := PrivilegeValidationError{
			field:  "ShowNameCn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ShowNameEn

	// no validation rules for PrivilegeType

	// no validation rules for Level

	if utf8.RuneCountInString(m.GetRouterUri()) < 1 {
		err := PrivilegeValidationError{
			field:  "RouterUri",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Icon

	// no validation rules for Target

	// no validation rules for IsShow

	// no validation rules for OnTop

	// no validation rules for Ranking

	// no validation rules for IsPublic

	// no validation rules for NeedLogin

	// no validation rules for NeedAuthorise

	// no validation rules for InitState

	// no validation rules for Remarks

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	// no validation rules for Status

	if len(errors) > 0 {
		return PrivilegeMultiError(errors)
	}

	return nil
}

// PrivilegeMultiError is an error wrapping multiple validation errors returned
// by Privilege.ValidateAll() if the designated constraints aren't met.
type PrivilegeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrivilegeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrivilegeMultiError) AllErrors() []error { return m }

// PrivilegeValidationError is the validation error returned by
// Privilege.Validate if the designated constraints aren't met.
type PrivilegeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrivilegeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrivilegeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrivilegeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrivilegeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrivilegeValidationError) ErrorName() string { return "PrivilegeValidationError" }

// Error satisfies the builtin error interface
func (e PrivilegeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrivilege.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrivilegeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrivilegeValidationError{}

// Validate checks the field values on HandlePrivilegeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandlePrivilegeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandlePrivilegeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandlePrivilegeReqMultiError, or nil if none found.
func (m *HandlePrivilegeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HandlePrivilegeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HandlePrivilegeReq_Action_InLookup[m.GetAction()]; !ok {
		err := HandlePrivilegeReqValidationError{
			field:  "Action",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPrivilege()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandlePrivilegeReqValidationError{
					field:  "Privilege",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandlePrivilegeReqValidationError{
					field:  "Privilege",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivilege()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandlePrivilegeReqValidationError{
				field:  "Privilege",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandlePrivilegeReqMultiError(errors)
	}

	return nil
}

// HandlePrivilegeReqMultiError is an error wrapping multiple validation errors
// returned by HandlePrivilegeReq.ValidateAll() if the designated constraints
// aren't met.
type HandlePrivilegeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandlePrivilegeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandlePrivilegeReqMultiError) AllErrors() []error { return m }

// HandlePrivilegeReqValidationError is the validation error returned by
// HandlePrivilegeReq.Validate if the designated constraints aren't met.
type HandlePrivilegeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandlePrivilegeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandlePrivilegeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandlePrivilegeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandlePrivilegeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandlePrivilegeReqValidationError) ErrorName() string {
	return "HandlePrivilegeReqValidationError"
}

// Error satisfies the builtin error interface
func (e HandlePrivilegeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandlePrivilegeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandlePrivilegeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandlePrivilegeReqValidationError{}

var _HandlePrivilegeReq_Action_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

// Validate checks the field values on GetPrivilegeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPrivilegeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrivilegeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrivilegeRespMultiError, or nil if none found.
func (m *GetPrivilegeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrivilegeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPrivilegeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPrivilegeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPrivilegeRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPrivilegeRespMultiError(errors)
	}

	return nil
}

// GetPrivilegeRespMultiError is an error wrapping multiple validation errors
// returned by GetPrivilegeResp.ValidateAll() if the designated constraints
// aren't met.
type GetPrivilegeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrivilegeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrivilegeRespMultiError) AllErrors() []error { return m }

// GetPrivilegeRespValidationError is the validation error returned by
// GetPrivilegeResp.Validate if the designated constraints aren't met.
type GetPrivilegeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivilegeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivilegeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivilegeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivilegeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivilegeRespValidationError) ErrorName() string { return "GetPrivilegeRespValidationError" }

// Error satisfies the builtin error interface
func (e GetPrivilegeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivilegeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivilegeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivilegeRespValidationError{}

// Validate checks the field values on GetPrivilegeListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrivilegeListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrivilegeListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrivilegeListRespMultiError, or nil if none found.
func (m *GetPrivilegeListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrivilegeListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPrivilegeListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPrivilegeListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPrivilegeListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPrivilegeListRespMultiError(errors)
	}

	return nil
}

// GetPrivilegeListRespMultiError is an error wrapping multiple validation
// errors returned by GetPrivilegeListResp.ValidateAll() if the designated
// constraints aren't met.
type GetPrivilegeListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrivilegeListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrivilegeListRespMultiError) AllErrors() []error { return m }

// GetPrivilegeListRespValidationError is the validation error returned by
// GetPrivilegeListResp.Validate if the designated constraints aren't met.
type GetPrivilegeListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivilegeListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivilegeListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivilegeListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivilegeListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivilegeListRespValidationError) ErrorName() string {
	return "GetPrivilegeListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivilegeListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivilegeListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivilegeListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivilegeListRespValidationError{}

// Validate checks the field values on GetPrivilegeByUriReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrivilegeByUriReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrivilegeByUriReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrivilegeByUriReqMultiError, or nil if none found.
func (m *GetPrivilegeByUriReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrivilegeByUriReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uri

	if len(errors) > 0 {
		return GetPrivilegeByUriReqMultiError(errors)
	}

	return nil
}

// GetPrivilegeByUriReqMultiError is an error wrapping multiple validation
// errors returned by GetPrivilegeByUriReq.ValidateAll() if the designated
// constraints aren't met.
type GetPrivilegeByUriReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrivilegeByUriReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrivilegeByUriReqMultiError) AllErrors() []error { return m }

// GetPrivilegeByUriReqValidationError is the validation error returned by
// GetPrivilegeByUriReq.Validate if the designated constraints aren't met.
type GetPrivilegeByUriReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivilegeByUriReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivilegeByUriReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivilegeByUriReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivilegeByUriReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivilegeByUriReqValidationError) ErrorName() string {
	return "GetPrivilegeByUriReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivilegeByUriReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivilegeByUriReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivilegeByUriReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivilegeByUriReqValidationError{}

// Validate checks the field values on GetPrivilegesOfRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrivilegesOfRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrivilegesOfRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrivilegesOfRoleReqMultiError, or nil if none found.
func (m *GetPrivilegesOfRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrivilegesOfRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for IsSystemAdmin

	if len(errors) > 0 {
		return GetPrivilegesOfRoleReqMultiError(errors)
	}

	return nil
}

// GetPrivilegesOfRoleReqMultiError is an error wrapping multiple validation
// errors returned by GetPrivilegesOfRoleReq.ValidateAll() if the designated
// constraints aren't met.
type GetPrivilegesOfRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrivilegesOfRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrivilegesOfRoleReqMultiError) AllErrors() []error { return m }

// GetPrivilegesOfRoleReqValidationError is the validation error returned by
// GetPrivilegesOfRoleReq.Validate if the designated constraints aren't met.
type GetPrivilegesOfRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivilegesOfRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivilegesOfRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivilegesOfRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivilegesOfRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivilegesOfRoleReqValidationError) ErrorName() string {
	return "GetPrivilegesOfRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivilegesOfRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivilegesOfRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivilegesOfRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivilegesOfRoleReqValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if utf8.RuneCountInString(m.GetRoleNameCn()) < 1 {
		err := RoleValidationError{
			field:  "RoleNameCn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleNameEn

	if m.GetRoleGroupId() <= 0 {
		err := RoleValidationError{
			field:  "RoleGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupNameCn()) < 1 {
		err := RoleValidationError{
			field:  "GroupNameCn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GroupNameEn

	// no validation rules for RoleGrade

	// no validation rules for Ranking

	// no validation rules for InitState

	// no validation rules for Remarks

	// no validation rules for IsSystem

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	// no validation rules for Status

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on RoleGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleGroupMultiError, or nil
// if none found.
func (m *RoleGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if utf8.RuneCountInString(m.GetGroupNameCn()) < 1 {
		err := RoleGroupValidationError{
			field:  "GroupNameCn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GroupNameEn

	// no validation rules for Ranking

	// no validation rules for InitState

	// no validation rules for Remarks

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	// no validation rules for Status

	if len(errors) > 0 {
		return RoleGroupMultiError(errors)
	}

	return nil
}

// RoleGroupMultiError is an error wrapping multiple validation errors returned
// by RoleGroup.ValidateAll() if the designated constraints aren't met.
type RoleGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGroupMultiError) AllErrors() []error { return m }

// RoleGroupValidationError is the validation error returned by
// RoleGroup.Validate if the designated constraints aren't met.
type RoleGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGroupValidationError) ErrorName() string { return "RoleGroupValidationError" }

// Error satisfies the builtin error interface
func (e RoleGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGroupValidationError{}

// Validate checks the field values on RolePrivilege with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RolePrivilege) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolePrivilege with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RolePrivilegeMultiError, or
// nil if none found.
func (m *RolePrivilege) ValidateAll() error {
	return m.validate(true)
}

func (m *RolePrivilege) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetRoleId() <= 0 {
		err := RolePrivilegeValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrivilegeId() <= 0 {
		err := RolePrivilegeValidationError{
			field:  "PrivilegeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InitState

	// no validation rules for Status

	if len(errors) > 0 {
		return RolePrivilegeMultiError(errors)
	}

	return nil
}

// RolePrivilegeMultiError is an error wrapping multiple validation errors
// returned by RolePrivilege.ValidateAll() if the designated constraints
// aren't met.
type RolePrivilegeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolePrivilegeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolePrivilegeMultiError) AllErrors() []error { return m }

// RolePrivilegeValidationError is the validation error returned by
// RolePrivilege.Validate if the designated constraints aren't met.
type RolePrivilegeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolePrivilegeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolePrivilegeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolePrivilegeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolePrivilegeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolePrivilegeValidationError) ErrorName() string { return "RolePrivilegeValidationError" }

// Error satisfies the builtin error interface
func (e RolePrivilegeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolePrivilege.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolePrivilegeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolePrivilegeValidationError{}

// Validate checks the field values on RoleAndGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleAndGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAndGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleAndGroupMultiError, or
// nil if none found.
func (m *RoleAndGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAndGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleAndGroupValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleAndGroupValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleAndGroupValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRoleId() <= 0 {
		err := RoleAndGroupValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRoleNameCn()) < 1 {
		err := RoleAndGroupValidationError{
			field:  "RoleNameCn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleNameEn

	// no validation rules for RoleGrade

	// no validation rules for Ranking

	// no validation rules for InitState

	// no validation rules for IsSystem

	if len(errors) > 0 {
		return RoleAndGroupMultiError(errors)
	}

	return nil
}

// RoleAndGroupMultiError is an error wrapping multiple validation errors
// returned by RoleAndGroup.ValidateAll() if the designated constraints aren't met.
type RoleAndGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAndGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAndGroupMultiError) AllErrors() []error { return m }

// RoleAndGroupValidationError is the validation error returned by
// RoleAndGroup.Validate if the designated constraints aren't met.
type RoleAndGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAndGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAndGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAndGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAndGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAndGroupValidationError) ErrorName() string { return "RoleAndGroupValidationError" }

// Error satisfies the builtin error interface
func (e RoleAndGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAndGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAndGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAndGroupValidationError{}

// Validate checks the field values on RoleAndPrivilege with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleAndPrivilege) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAndPrivilege with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleAndPrivilegeMultiError, or nil if none found.
func (m *RoleAndPrivilege) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAndPrivilege) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleAndPrivilegeValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleAndPrivilegeValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleAndPrivilegeValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetPrivilegeNameCn()) < 1 {
		err := RoleAndPrivilegeValidationError{
			field:  "PrivilegeNameCn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PrivilegeNameEn

	if utf8.RuneCountInString(m.GetRouterUri()) < 1 {
		err := RoleAndPrivilegeValidationError{
			field:  "RouterUri",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParentId() <= 0 {
		err := RoleAndPrivilegeValidationError{
			field:  "ParentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PrivilegeType

	// no validation rules for Level

	// no validation rules for Icon

	// no validation rules for IsPublic

	// no validation rules for NeedLogin

	// no validation rules for NeedAuthorise

	if len(errors) > 0 {
		return RoleAndPrivilegeMultiError(errors)
	}

	return nil
}

// RoleAndPrivilegeMultiError is an error wrapping multiple validation errors
// returned by RoleAndPrivilege.ValidateAll() if the designated constraints
// aren't met.
type RoleAndPrivilegeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAndPrivilegeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAndPrivilegeMultiError) AllErrors() []error { return m }

// RoleAndPrivilegeValidationError is the validation error returned by
// RoleAndPrivilege.Validate if the designated constraints aren't met.
type RoleAndPrivilegeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAndPrivilegeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAndPrivilegeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAndPrivilegeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAndPrivilegeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAndPrivilegeValidationError) ErrorName() string { return "RoleAndPrivilegeValidationError" }

// Error satisfies the builtin error interface
func (e RoleAndPrivilegeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAndPrivilege.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAndPrivilegeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAndPrivilegeValidationError{}

// Validate checks the field values on HandleRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HandleRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HandleRoleReqMultiError, or
// nil if none found.
func (m *HandleRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HandleRoleReq_Action_InLookup[m.GetAction()]; !ok {
		err := HandleRoleReqValidationError{
			field:  "Action",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleRoleReqValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleRoleReqValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleRoleReqValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleRoleReqMultiError(errors)
	}

	return nil
}

// HandleRoleReqMultiError is an error wrapping multiple validation errors
// returned by HandleRoleReq.ValidateAll() if the designated constraints
// aren't met.
type HandleRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleRoleReqMultiError) AllErrors() []error { return m }

// HandleRoleReqValidationError is the validation error returned by
// HandleRoleReq.Validate if the designated constraints aren't met.
type HandleRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleRoleReqValidationError) ErrorName() string { return "HandleRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e HandleRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleRoleReqValidationError{}

var _HandleRoleReq_Action_InLookup = map[uint32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on GetRoleByIdReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleByIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleByIdReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleByIdReqMultiError,
// or nil if none found.
func (m *GetRoleByIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleByIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return GetRoleByIdReqMultiError(errors)
	}

	return nil
}

// GetRoleByIdReqMultiError is an error wrapping multiple validation errors
// returned by GetRoleByIdReq.ValidateAll() if the designated constraints
// aren't met.
type GetRoleByIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleByIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleByIdReqMultiError) AllErrors() []error { return m }

// GetRoleByIdReqValidationError is the validation error returned by
// GetRoleByIdReq.Validate if the designated constraints aren't met.
type GetRoleByIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleByIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleByIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleByIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleByIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleByIdReqValidationError) ErrorName() string { return "GetRoleByIdReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleByIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleByIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleByIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleByIdReqValidationError{}

// Validate checks the field values on GetRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleRespMultiError, or
// nil if none found.
func (m *GetRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoleRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoleRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoleRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRoleRespMultiError(errors)
	}

	return nil
}

// GetRoleRespMultiError is an error wrapping multiple validation errors
// returned by GetRoleResp.ValidateAll() if the designated constraints aren't met.
type GetRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleRespMultiError) AllErrors() []error { return m }

// GetRoleRespValidationError is the validation error returned by
// GetRoleResp.Validate if the designated constraints aren't met.
type GetRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleRespValidationError) ErrorName() string { return "GetRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleRespValidationError{}

// Validate checks the field values on GetRoleListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoleListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleListRespMultiError, or nil if none found.
func (m *GetRoleListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoleListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoleListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoleListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoleListRespMultiError(errors)
	}

	return nil
}

// GetRoleListRespMultiError is an error wrapping multiple validation errors
// returned by GetRoleListResp.ValidateAll() if the designated constraints
// aren't met.
type GetRoleListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleListRespMultiError) AllErrors() []error { return m }

// GetRoleListRespValidationError is the validation error returned by
// GetRoleListResp.Validate if the designated constraints aren't met.
type GetRoleListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleListRespValidationError) ErrorName() string { return "GetRoleListRespValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleListRespValidationError{}

// Validate checks the field values on HandleRoleGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleRoleGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleRoleGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleRoleGroupReqMultiError, or nil if none found.
func (m *HandleRoleGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleRoleGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HandleRoleGroupReq_Action_InLookup[m.GetAction()]; !ok {
		err := HandleRoleGroupReqValidationError{
			field:  "Action",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleRoleGroupReqValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleRoleGroupReqValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleRoleGroupReqValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleRoleGroupReqMultiError(errors)
	}

	return nil
}

// HandleRoleGroupReqMultiError is an error wrapping multiple validation errors
// returned by HandleRoleGroupReq.ValidateAll() if the designated constraints
// aren't met.
type HandleRoleGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleRoleGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleRoleGroupReqMultiError) AllErrors() []error { return m }

// HandleRoleGroupReqValidationError is the validation error returned by
// HandleRoleGroupReq.Validate if the designated constraints aren't met.
type HandleRoleGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleRoleGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleRoleGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleRoleGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleRoleGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleRoleGroupReqValidationError) ErrorName() string {
	return "HandleRoleGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e HandleRoleGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleRoleGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleRoleGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleRoleGroupReqValidationError{}

var _HandleRoleGroupReq_Action_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

// Validate checks the field values on GetRoleGroupListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleGroupListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleGroupListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleGroupListRespMultiError, or nil if none found.
func (m *GetRoleGroupListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleGroupListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoleGroupListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoleGroupListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoleGroupListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoleGroupListRespMultiError(errors)
	}

	return nil
}

// GetRoleGroupListRespMultiError is an error wrapping multiple validation
// errors returned by GetRoleGroupListResp.ValidateAll() if the designated
// constraints aren't met.
type GetRoleGroupListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleGroupListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleGroupListRespMultiError) AllErrors() []error { return m }

// GetRoleGroupListRespValidationError is the validation error returned by
// GetRoleGroupListResp.Validate if the designated constraints aren't met.
type GetRoleGroupListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleGroupListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleGroupListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleGroupListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleGroupListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleGroupListRespValidationError) ErrorName() string {
	return "GetRoleGroupListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleGroupListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleGroupListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleGroupListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleGroupListRespValidationError{}

// Validate checks the field values on AuthorisePrivilegesToRoleReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorisePrivilegesToRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorisePrivilegesToRoleReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorisePrivilegesToRoleReqMultiError, or nil if none found.
func (m *AuthorisePrivilegesToRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorisePrivilegesToRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return AuthorisePrivilegesToRoleReqMultiError(errors)
	}

	return nil
}

// AuthorisePrivilegesToRoleReqMultiError is an error wrapping multiple
// validation errors returned by AuthorisePrivilegesToRoleReq.ValidateAll() if
// the designated constraints aren't met.
type AuthorisePrivilegesToRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorisePrivilegesToRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorisePrivilegesToRoleReqMultiError) AllErrors() []error { return m }

// AuthorisePrivilegesToRoleReqValidationError is the validation error returned
// by AuthorisePrivilegesToRoleReq.Validate if the designated constraints
// aren't met.
type AuthorisePrivilegesToRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorisePrivilegesToRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorisePrivilegesToRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorisePrivilegesToRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorisePrivilegesToRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorisePrivilegesToRoleReqValidationError) ErrorName() string {
	return "AuthorisePrivilegesToRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorisePrivilegesToRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorisePrivilegesToRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorisePrivilegesToRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorisePrivilegesToRoleReqValidationError{}

// Validate checks the field values on RoleGroupPrivilege with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleGroupPrivilege) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGroupPrivilege with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleGroupPrivilegeMultiError, or nil if none found.
func (m *RoleGroupPrivilege) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGroupPrivilege) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRg() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleGroupPrivilegeValidationError{
						field:  fmt.Sprintf("Rg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleGroupPrivilegeValidationError{
						field:  fmt.Sprintf("Rg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleGroupPrivilegeValidationError{
					field:  fmt.Sprintf("Rg[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRp() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleGroupPrivilegeValidationError{
						field:  fmt.Sprintf("Rp[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleGroupPrivilegeValidationError{
						field:  fmt.Sprintf("Rp[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleGroupPrivilegeValidationError{
					field:  fmt.Sprintf("Rp[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleGroupPrivilegeMultiError(errors)
	}

	return nil
}

// RoleGroupPrivilegeMultiError is an error wrapping multiple validation errors
// returned by RoleGroupPrivilege.ValidateAll() if the designated constraints
// aren't met.
type RoleGroupPrivilegeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGroupPrivilegeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGroupPrivilegeMultiError) AllErrors() []error { return m }

// RoleGroupPrivilegeValidationError is the validation error returned by
// RoleGroupPrivilege.Validate if the designated constraints aren't met.
type RoleGroupPrivilegeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGroupPrivilegeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGroupPrivilegeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGroupPrivilegeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGroupPrivilegeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGroupPrivilegeValidationError) ErrorName() string {
	return "RoleGroupPrivilegeValidationError"
}

// Error satisfies the builtin error interface
func (e RoleGroupPrivilegeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGroupPrivilege.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGroupPrivilegeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGroupPrivilegeValidationError{}

// Validate checks the field values on GetPrivilegesOfAllRolesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrivilegesOfAllRolesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrivilegesOfAllRolesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrivilegesOfAllRolesRespMultiError, or nil if none found.
func (m *GetPrivilegesOfAllRolesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrivilegesOfAllRolesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPrivilegesOfAllRolesRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPrivilegesOfAllRolesRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPrivilegesOfAllRolesRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPrivilegesOfAllRolesRespMultiError(errors)
	}

	return nil
}

// GetPrivilegesOfAllRolesRespMultiError is an error wrapping multiple
// validation errors returned by GetPrivilegesOfAllRolesResp.ValidateAll() if
// the designated constraints aren't met.
type GetPrivilegesOfAllRolesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrivilegesOfAllRolesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrivilegesOfAllRolesRespMultiError) AllErrors() []error { return m }

// GetPrivilegesOfAllRolesRespValidationError is the validation error returned
// by GetPrivilegesOfAllRolesResp.Validate if the designated constraints
// aren't met.
type GetPrivilegesOfAllRolesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivilegesOfAllRolesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivilegesOfAllRolesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivilegesOfAllRolesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivilegesOfAllRolesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivilegesOfAllRolesRespValidationError) ErrorName() string {
	return "GetPrivilegesOfAllRolesRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivilegesOfAllRolesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivilegesOfAllRolesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivilegesOfAllRolesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivilegesOfAllRolesRespValidationError{}

// Validate checks the field values on GetPrivilegesOfRoleResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrivilegesOfRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrivilegesOfRoleResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrivilegesOfRoleRespMultiError, or nil if none found.
func (m *GetPrivilegesOfRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrivilegesOfRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPrivilegesOfRoleRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPrivilegesOfRoleRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPrivilegesOfRoleRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPrivilegesOfRoleRespMultiError(errors)
	}

	return nil
}

// GetPrivilegesOfRoleRespMultiError is an error wrapping multiple validation
// errors returned by GetPrivilegesOfRoleResp.ValidateAll() if the designated
// constraints aren't met.
type GetPrivilegesOfRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrivilegesOfRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrivilegesOfRoleRespMultiError) AllErrors() []error { return m }

// GetPrivilegesOfRoleRespValidationError is the validation error returned by
// GetPrivilegesOfRoleResp.Validate if the designated constraints aren't met.
type GetPrivilegesOfRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivilegesOfRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivilegesOfRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivilegesOfRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivilegesOfRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivilegesOfRoleRespValidationError) ErrorName() string {
	return "GetPrivilegesOfRoleRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivilegesOfRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivilegesOfRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivilegesOfRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivilegesOfRoleRespValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccountMultiError, or nil if none found.
func (m *Account) ValidateAll() error {
	return m.validate(true)
}

func (m *Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if utf8.RuneCountInString(m.GetAccountName()) < 1 {
		err := AccountValidationError{
			field:  "AccountName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	if m.GetRoleId() <= 0 {
		err := AccountValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRoleNameCn()) < 1 {
		err := AccountValidationError{
			field:  "RoleNameCn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleNameEn

	// no validation rules for GroupId

	// no validation rules for GroupName

	// no validation rules for RealName

	// no validation rules for Avatar

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for Remarks

	// no validation rules for BindIp

	// no validation rules for BindMac

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for LastLoginTime

	// no validation rules for LastLoginIp

	// no validation rules for LastLoginMac

	// no validation rules for InitState

	// no validation rules for IsSystemAdmin

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	// no validation rules for Status

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}

	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.ValidateAll() if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on HandleAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HandleAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleAccountReqMultiError, or nil if none found.
func (m *HandleAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HandleAccountReq_Action_InLookup[m.GetAction()]; !ok {
		err := HandleAccountReqValidationError{
			field:  "Action",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleAccountReqValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleAccountReqValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleAccountReqValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleAccountReqMultiError(errors)
	}

	return nil
}

// HandleAccountReqMultiError is an error wrapping multiple validation errors
// returned by HandleAccountReq.ValidateAll() if the designated constraints
// aren't met.
type HandleAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleAccountReqMultiError) AllErrors() []error { return m }

// HandleAccountReqValidationError is the validation error returned by
// HandleAccountReq.Validate if the designated constraints aren't met.
type HandleAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleAccountReqValidationError) ErrorName() string { return "HandleAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e HandleAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleAccountReqValidationError{}

var _HandleAccountReq_Action_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

// Validate checks the field values on GetAccountResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAccountRespMultiError,
// or nil if none found.
func (m *GetAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountRespMultiError(errors)
	}

	return nil
}

// GetAccountRespMultiError is an error wrapping multiple validation errors
// returned by GetAccountResp.ValidateAll() if the designated constraints
// aren't met.
type GetAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountRespMultiError) AllErrors() []error { return m }

// GetAccountRespValidationError is the validation error returned by
// GetAccountResp.Validate if the designated constraints aren't met.
type GetAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountRespValidationError) ErrorName() string { return "GetAccountRespValidationError" }

// Error satisfies the builtin error interface
func (e GetAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountRespValidationError{}

// Validate checks the field values on GetAccountListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountListRespMultiError, or nil if none found.
func (m *GetAccountListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountListRespMultiError(errors)
	}

	return nil
}

// GetAccountListRespMultiError is an error wrapping multiple validation errors
// returned by GetAccountListResp.ValidateAll() if the designated constraints
// aren't met.
type GetAccountListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountListRespMultiError) AllErrors() []error { return m }

// GetAccountListRespValidationError is the validation error returned by
// GetAccountListResp.Validate if the designated constraints aren't met.
type GetAccountListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountListRespValidationError) ErrorName() string {
	return "GetAccountListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountListRespValidationError{}

// Validate checks the field values on GetAccountByIdReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountByIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountByIdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountByIdReqMultiError, or nil if none found.
func (m *GetAccountByIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountByIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccountId() <= 0 {
		err := GetAccountByIdReqValidationError{
			field:  "AccountId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountByIdReqMultiError(errors)
	}

	return nil
}

// GetAccountByIdReqMultiError is an error wrapping multiple validation errors
// returned by GetAccountByIdReq.ValidateAll() if the designated constraints
// aren't met.
type GetAccountByIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountByIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountByIdReqMultiError) AllErrors() []error { return m }

// GetAccountByIdReqValidationError is the validation error returned by
// GetAccountByIdReq.Validate if the designated constraints aren't met.
type GetAccountByIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountByIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountByIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountByIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountByIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountByIdReqValidationError) ErrorName() string {
	return "GetAccountByIdReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountByIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountByIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountByIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountByIdReqValidationError{}

// Validate checks the field values on GetAccountByNameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountByNameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountByNameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountByNameReqMultiError, or nil if none found.
func (m *GetAccountByNameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountByNameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccountName()) < 1 {
		err := GetAccountByNameReqValidationError{
			field:  "AccountName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountByNameReqMultiError(errors)
	}

	return nil
}

// GetAccountByNameReqMultiError is an error wrapping multiple validation
// errors returned by GetAccountByNameReq.ValidateAll() if the designated
// constraints aren't met.
type GetAccountByNameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountByNameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountByNameReqMultiError) AllErrors() []error { return m }

// GetAccountByNameReqValidationError is the validation error returned by
// GetAccountByNameReq.Validate if the designated constraints aren't met.
type GetAccountByNameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountByNameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountByNameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountByNameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountByNameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountByNameReqValidationError) ErrorName() string {
	return "GetAccountByNameReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountByNameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountByNameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountByNameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountByNameReqValidationError{}

// Validate checks the field values on GetAccountByMobileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountByMobileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountByMobileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountByMobileReqMultiError, or nil if none found.
func (m *GetAccountByMobileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountByMobileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMobile()) < 1 {
		err := GetAccountByMobileReqValidationError{
			field:  "Mobile",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountByMobileReqMultiError(errors)
	}

	return nil
}

// GetAccountByMobileReqMultiError is an error wrapping multiple validation
// errors returned by GetAccountByMobileReq.ValidateAll() if the designated
// constraints aren't met.
type GetAccountByMobileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountByMobileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountByMobileReqMultiError) AllErrors() []error { return m }

// GetAccountByMobileReqValidationError is the validation error returned by
// GetAccountByMobileReq.Validate if the designated constraints aren't met.
type GetAccountByMobileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountByMobileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountByMobileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountByMobileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountByMobileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountByMobileReqValidationError) ErrorName() string {
	return "GetAccountByMobileReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountByMobileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountByMobileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountByMobileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountByMobileReqValidationError{}

// Validate checks the field values on GetAccountByEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountByEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountByEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountByEmailReqMultiError, or nil if none found.
func (m *GetAccountByEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountByEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = GetAccountByEmailReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountByEmailReqMultiError(errors)
	}

	return nil
}

func (m *GetAccountByEmailReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetAccountByEmailReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetAccountByEmailReqMultiError is an error wrapping multiple validation
// errors returned by GetAccountByEmailReq.ValidateAll() if the designated
// constraints aren't met.
type GetAccountByEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountByEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountByEmailReqMultiError) AllErrors() []error { return m }

// GetAccountByEmailReqValidationError is the validation error returned by
// GetAccountByEmailReq.Validate if the designated constraints aren't met.
type GetAccountByEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountByEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountByEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountByEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountByEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountByEmailReqValidationError) ErrorName() string {
	return "GetAccountByEmailReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountByEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountByEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountByEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountByEmailReqValidationError{}

// Validate checks the field values on GetAccountsByRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsByRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsByRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsByRoleReqMultiError, or nil if none found.
func (m *GetAccountsByRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsByRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := GetAccountsByRoleReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountsByRoleReqMultiError(errors)
	}

	return nil
}

// GetAccountsByRoleReqMultiError is an error wrapping multiple validation
// errors returned by GetAccountsByRoleReq.ValidateAll() if the designated
// constraints aren't met.
type GetAccountsByRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsByRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsByRoleReqMultiError) AllErrors() []error { return m }

// GetAccountsByRoleReqValidationError is the validation error returned by
// GetAccountsByRoleReq.Validate if the designated constraints aren't met.
type GetAccountsByRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsByRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsByRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsByRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsByRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsByRoleReqValidationError) ErrorName() string {
	return "GetAccountsByRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsByRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsByRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsByRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsByRoleReqValidationError{}

// Validate checks the field values on CheckAccessReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckAccessReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAccessReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckAccessReqMultiError,
// or nil if none found.
func (m *CheckAccessReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAccessReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := CheckAccessReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrivilegeId() <= 0 {
		err := CheckAccessReqValidationError{
			field:  "PrivilegeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckAccessReqMultiError(errors)
	}

	return nil
}

// CheckAccessReqMultiError is an error wrapping multiple validation errors
// returned by CheckAccessReq.ValidateAll() if the designated constraints
// aren't met.
type CheckAccessReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAccessReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAccessReqMultiError) AllErrors() []error { return m }

// CheckAccessReqValidationError is the validation error returned by
// CheckAccessReq.Validate if the designated constraints aren't met.
type CheckAccessReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAccessReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAccessReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAccessReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAccessReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAccessReqValidationError) ErrorName() string { return "CheckAccessReqValidationError" }

// Error satisfies the builtin error interface
func (e CheckAccessReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAccessReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAccessReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAccessReqValidationError{}
