// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/adminpb/admin.proto

package adminpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 空参数请求
type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R *emptypb.Empty `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{0}
}

func (x *EmptyReq) GetR() *emptypb.Empty {
	if x != nil {
		return x.R
	}
	return nil
}

// 更新数据状态请求
type UpStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpStatusReq) Reset() {
	*x = UpStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpStatusReq) ProtoMessage() {}

func (x *UpStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpStatusReq.ProtoReflect.Descriptor instead.
func (*UpStatusReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{1}
}

func (x *UpStatusReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpStatusReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 返回的基础结构类型
type BaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *structpb.Value `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BaseResp) Reset() {
	*x = BaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResp) ProtoMessage() {}

func (x *BaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResp.ProtoReflect.Descriptor instead.
func (*BaseResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{2}
}

func (x *BaseResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BaseResp) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAccountAddressListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountAddress string `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (x *GetAccountAddressListReq) Reset() {
	*x = GetAccountAddressListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountAddressListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountAddressListReq) ProtoMessage() {}

func (x *GetAccountAddressListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountAddressListReq.ProtoReflect.Descriptor instead.
func (*GetAccountAddressListReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{3}
}

func (x *GetAccountAddressListReq) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

type GetAccountAddressListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetAccountAddressListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAccountAddressListResp) Reset() {
	*x = GetAccountAddressListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountAddressListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountAddressListResp) ProtoMessage() {}

func (x *GetAccountAddressListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountAddressListResp.ProtoReflect.Descriptor instead.
func (*GetAccountAddressListResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{4}
}

func (x *GetAccountAddressListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAccountAddressListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAccountAddressListResp) GetData() *GetAccountAddressListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAccountAddressGasListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountAddress string `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	TimeStart      uint32 `protobuf:"varint,2,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	TimeEnd        uint32 `protobuf:"varint,3,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
}

func (x *GetAccountAddressGasListReq) Reset() {
	*x = GetAccountAddressGasListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountAddressGasListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountAddressGasListReq) ProtoMessage() {}

func (x *GetAccountAddressGasListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountAddressGasListReq.ProtoReflect.Descriptor instead.
func (*GetAccountAddressGasListReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{5}
}

func (x *GetAccountAddressGasListReq) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *GetAccountAddressGasListReq) GetTimeStart() uint32 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *GetAccountAddressGasListReq) GetTimeEnd() uint32 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

type GetAccountAddressGasListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetAccountAddressGasListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAccountAddressGasListResp) Reset() {
	*x = GetAccountAddressGasListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountAddressGasListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountAddressGasListResp) ProtoMessage() {}

func (x *GetAccountAddressGasListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountAddressGasListResp.ProtoReflect.Descriptor instead.
func (*GetAccountAddressGasListResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{6}
}

func (x *GetAccountAddressGasListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAccountAddressGasListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAccountAddressGasListResp) GetData() *GetAccountAddressGasListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAccountAddressGasInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	StatisticDay   string `protobuf:"bytes,3,opt,name=statistic_day,json=statisticDay,proto3" json:"statistic_day,omitempty"`
	GasBalance     string `protobuf:"bytes,4,opt,name=gas_balance,json=gasBalance,proto3" json:"gas_balance,omitempty"`
}

func (x *GetAccountAddressGasInfo) Reset() {
	*x = GetAccountAddressGasInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountAddressGasInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountAddressGasInfo) ProtoMessage() {}

func (x *GetAccountAddressGasInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountAddressGasInfo.ProtoReflect.Descriptor instead.
func (*GetAccountAddressGasInfo) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{7}
}

func (x *GetAccountAddressGasInfo) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *GetAccountAddressGasInfo) GetStatisticDay() string {
	if x != nil {
		return x.StatisticDay
	}
	return ""
}

func (x *GetAccountAddressGasInfo) GetGasBalance() string {
	if x != nil {
		return x.GasBalance
	}
	return ""
}

type AdminPresentByAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Amount  uint32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Remark  string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"` // ID
}

func (x *AdminPresentByAccountReq) Reset() {
	*x = AdminPresentByAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminPresentByAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminPresentByAccountReq) ProtoMessage() {}

func (x *AdminPresentByAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminPresentByAccountReq.ProtoReflect.Descriptor instead.
func (*AdminPresentByAccountReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{8}
}

func (x *AdminPresentByAccountReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AdminPresentByAccountReq) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AdminPresentByAccountReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type AdminPresentByAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
}

func (x *AdminPresentByAccountResp) Reset() {
	*x = AdminPresentByAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminPresentByAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminPresentByAccountResp) ProtoMessage() {}

func (x *AdminPresentByAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminPresentByAccountResp.ProtoReflect.Descriptor instead.
func (*AdminPresentByAccountResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{9}
}

func (x *AdminPresentByAccountResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AdminPresentByAccountResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetAccountAddressListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetAccountAddressListResp_Data) Reset() {
	*x = GetAccountAddressListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountAddressListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountAddressListResp_Data) ProtoMessage() {}

func (x *GetAccountAddressListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountAddressListResp_Data.ProtoReflect.Descriptor instead.
func (*GetAccountAddressListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GetAccountAddressListResp_Data) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type GetAccountAddressGasListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count      uint32                      `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	GasBalance string                      `protobuf:"bytes,2,opt,name=gas_balance,json=gasBalance,proto3" json:"gas_balance,omitempty"`
	List       []*GetAccountAddressGasInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetAccountAddressGasListResp_Data) Reset() {
	*x = GetAccountAddressGasListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountAddressGasListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountAddressGasListResp_Data) ProtoMessage() {}

func (x *GetAccountAddressGasListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountAddressGasListResp_Data.ProtoReflect.Descriptor instead.
func (*GetAccountAddressGasListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_admin_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetAccountAddressGasListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetAccountAddressGasListResp_Data) GetGasBalance() string {
	if x != nil {
		return x.GasBalance
	}
	return ""
}

func (x *GetAccountAddressGasListResp_Data) GetList() []*GetAccountAddressGasInfo {
	if x != nil {
		return x.List
	}
	return nil
}

var File_pb_adminpb_admin_proto protoreflect.FileDescriptor

var file_pb_adminpb_admin_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x62, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70,
	0x62, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x62,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x01, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x49, 0x44,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x32, 0x1d, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0x3b, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x2e, 0x2e, 0x2e, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x13, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0xd2, 0x01,
	0x02, 0x69, 0x64, 0xd2, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9f, 0x01, 0x0a,
	0x08, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5,
	0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8,
	0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x57,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x0f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x43, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x1a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfd, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0xe8, 0xb4, 0xa6, 0xe5,
	0x8f, 0xb7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x45, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe7, 0xbb, 0x9f, 0xe8, 0xae,
	0xa1, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88,
	0xb3, 0xe7, 0xa7, 0x92, 0x29, 0x20, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22,
	0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x20, 0x28, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xe7, 0xa7, 0x92, 0x29, 0xe6, 0x9c, 0x80, 0xe5, 0xa4,
	0xa7, 0x20, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x3a, 0x0f, 0x92, 0x41, 0x0c,
	0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8a, 0x02, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x7c, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x73,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32,
	0x12, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0xe6, 0x97, 0xa5,
	0xe6, 0x9c, 0x9f, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x61,
	0x79, 0x12, 0x35, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8f, 0xb7, 0x67, 0x61, 0x73, 0xe4, 0xbd, 0x99, 0xe9, 0xa2, 0x9d, 0x52, 0x0a, 0x67, 0x61,
	0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8f, 0xb7, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1b, 0x92, 0x41,
	0x11, 0x32, 0x0f, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe5,
	0x80, 0xbc, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99,
	0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6,
	0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xc5, 0x23, 0x0a, 0x0c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x05, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x92, 0x41, 0x08, 0x12,
	0x06, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a,
	0x22, 0x11, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x36, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01,
	0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x84, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x35, 0x92,
	0x41, 0x0e, 0x12, 0x0c, 0xe9, 0x87, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3e, 0x92, 0x41, 0x15, 0x12, 0x13, 0xe6,
	0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x2f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x37, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01,
	0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x8e,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x38, 0x92, 0x41, 0x11, 0x12, 0x0f, 0xe5, 0x8f, 0x96, 0xe6,
	0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42,
	0x79, 0x55, 0x72, 0x69, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x42, 0x79, 0x55, 0x72, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0xcb,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73,
	0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x4f,
	0x66, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x61, 0x92, 0x41, 0x34, 0x12, 0x32,
	0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x49, 0x44, 0xe5, 0x8f,
	0x96, 0xe5, 0x87, 0xba, 0xe8, 0xaf, 0xa5, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe6, 0x8b, 0xa5,
	0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0xac, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x4f, 0x66,
	0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x73, 0x4f, 0x66, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x48, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80, 0xe6, 0x9c,
	0x89, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe7, 0x9a, 0x84, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72,
	0x62, 0x61, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x73, 0x4f, 0x66, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x19,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x54,
	0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x4a, 0x92, 0x41, 0x17, 0x12, 0x15, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8,
	0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe7, 0x9a, 0x84, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x97, 0x01, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x44, 0x92, 0x41, 0x1b, 0x12, 0x19, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0,
	0x2f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x86,
	0xe7, 0xbb, 0x84, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3d, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x95, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x40, 0x92, 0x41, 0x1a,
	0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xa7,
	0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x12, 0x1b, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x82, 0x01,
	0x0a, 0x0a, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x39, 0x92, 0x41, 0x15, 0x12, 0x13, 0xe6, 0xb7,
	0xbb, 0xe5, 0x8a, 0xa0, 0x2f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xa7, 0x92, 0xe8, 0x89,
	0xb2, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x79, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x1c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x32, 0x92, 0x41, 0x0e, 0x12, 0x0c,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62,
	0x61, 0x63, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x83, 0x01,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x35, 0x92, 0x41,
	0x13, 0x12, 0x11, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x49, 0x44, 0xe5, 0x8f, 0x96, 0xe8, 0xa7,
	0x92, 0xe8, 0x89, 0xb2, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x36, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe5, 0x8f, 0x96, 0xe5, 0x87, 0xba, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x35, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61,
	0x63, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x7f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x35, 0x92, 0x41, 0x0e, 0x12, 0x0c,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62,
	0x61, 0x63, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x8e, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x40, 0x92, 0x41, 0x15, 0x12, 0x13, 0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0x2f, 0xe8, 0xa7, 0xa3,
	0xe9, 0x94, 0x81, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x8e, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x3c, 0x92, 0x41, 0x17, 0x12, 0x15, 0xe5, 0x8f, 0x96, 0xe6, 0x89,
	0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72,
	0x62, 0x61, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x61, 0x92, 0x41, 0x37, 0x12, 0x35, 0xe5, 0x8f, 0x96,
	0xe7, 0xbb, 0x99, 0xe5, 0xae, 0x9a, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x49, 0x44, 0xe5, 0xaf,
	0xb9, 0xe5, 0xba, 0x94, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84,
	0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x44, 0x92, 0x41, 0x1f, 0x12, 0x1d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0xe5, 0x8f, 0x96, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x53, 0x92, 0x41, 0x2c, 0x12, 0x2a, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87,
	0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe7, 0x99, 0xbb, 0xe5,
	0xbd, 0x95, 0xe5, 0x90, 0x8d, 0xe5, 0x8f, 0x96, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x44, 0x92, 0x41, 0x1c, 0x12, 0x1a, 0xe9, 0x80, 0x9a,
	0xe8, 0xbf, 0x87, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0xe5, 0x8f, 0x96, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0xb4, 0x01, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x55, 0x92, 0x41,
	0x2c, 0x12, 0x2a, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5,
	0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5, 0x90, 0x8d, 0xe5, 0x8f,
	0x96, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63,
	0x2f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0xb6,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x46, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xb4, 0xa6, 0xe5,
	0x8f, 0xb7, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73,
	0x73, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xc6, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x4d, 0x92, 0x41, 0x1e, 0x12, 0x1c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0x67, 0x61, 0x73, 0x20, 0xe8, 0xb4, 0xb9, 0xe7, 0x94, 0xa8, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0xce, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x5e, 0x92, 0x41, 0x31, 0x12, 0x2f, 0xe8, 0xbf, 0x90, 0xe8, 0x90, 0xa5, 0xe5, 0x90,
	0x8e, 0xe5, 0x8f, 0xb0, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe7, 0xbb, 0x99, 0xe6, 0x8c, 0x87, 0xe5,
	0xae, 0x9a, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe8, 0x83,
	0xbd, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a,
	0x22, 0x1f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x14, 0x5a, 0x12, 0x70, 0x62, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x3b,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_adminpb_admin_proto_rawDescOnce sync.Once
	file_pb_adminpb_admin_proto_rawDescData = file_pb_adminpb_admin_proto_rawDesc
)

func file_pb_adminpb_admin_proto_rawDescGZIP() []byte {
	file_pb_adminpb_admin_proto_rawDescOnce.Do(func() {
		file_pb_adminpb_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_adminpb_admin_proto_rawDescData)
	})
	return file_pb_adminpb_admin_proto_rawDescData
}

var file_pb_adminpb_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_pb_adminpb_admin_proto_goTypes = []interface{}{
	(*EmptyReq)(nil),                          // 0: daop.pb.adminpb.EmptyReq
	(*UpStatusReq)(nil),                       // 1: daop.pb.adminpb.UpStatusReq
	(*BaseResp)(nil),                          // 2: daop.pb.adminpb.BaseResp
	(*GetAccountAddressListReq)(nil),          // 3: daop.pb.adminpb.GetAccountAddressListReq
	(*GetAccountAddressListResp)(nil),         // 4: daop.pb.adminpb.GetAccountAddressListResp
	(*GetAccountAddressGasListReq)(nil),       // 5: daop.pb.adminpb.GetAccountAddressGasListReq
	(*GetAccountAddressGasListResp)(nil),      // 6: daop.pb.adminpb.GetAccountAddressGasListResp
	(*GetAccountAddressGasInfo)(nil),          // 7: daop.pb.adminpb.GetAccountAddressGasInfo
	(*AdminPresentByAccountReq)(nil),          // 8: daop.pb.adminpb.AdminPresentByAccountReq
	(*AdminPresentByAccountResp)(nil),         // 9: daop.pb.adminpb.AdminPresentByAccountResp
	(*GetAccountAddressListResp_Data)(nil),    // 10: daop.pb.adminpb.GetAccountAddressListResp.Data
	(*GetAccountAddressGasListResp_Data)(nil), // 11: daop.pb.adminpb.GetAccountAddressGasListResp.Data
	(*emptypb.Empty)(nil),                     // 12: google.protobuf.Empty
	(*structpb.Value)(nil),                    // 13: google.protobuf.Value
	(*LoginReq)(nil),                          // 14: daop.pb.adminpb.LoginReq
	(*UpdatePasswordReq)(nil),                 // 15: daop.pb.adminpb.UpdatePasswordReq
	(*ResetPasswordReq)(nil),                  // 16: daop.pb.adminpb.ResetPasswordReq
	(*HandlePrivilegeReq)(nil),                // 17: daop.pb.adminpb.HandlePrivilegeReq
	(*GetPrivilegeByUriReq)(nil),              // 18: daop.pb.adminpb.GetPrivilegeByUriReq
	(*GetPrivilegesOfRoleReq)(nil),            // 19: daop.pb.adminpb.GetPrivilegesOfRoleReq
	(*AuthorisePrivilegesToRoleReq)(nil),      // 20: daop.pb.adminpb.AuthorisePrivilegesToRoleReq
	(*HandleRoleGroupReq)(nil),                // 21: daop.pb.adminpb.HandleRoleGroupReq
	(*HandleRoleReq)(nil),                     // 22: daop.pb.adminpb.HandleRoleReq
	(*GetRoleByIdReq)(nil),                    // 23: daop.pb.adminpb.GetRoleByIdReq
	(*HandleAccountReq)(nil),                  // 24: daop.pb.adminpb.HandleAccountReq
	(*GetAccountsByRoleReq)(nil),              // 25: daop.pb.adminpb.GetAccountsByRoleReq
	(*GetAccountByIdReq)(nil),                 // 26: daop.pb.adminpb.GetAccountByIdReq
	(*GetAccountByNameReq)(nil),               // 27: daop.pb.adminpb.GetAccountByNameReq
	(*GetAccountByEmailReq)(nil),              // 28: daop.pb.adminpb.GetAccountByEmailReq
	(*GetAccountByMobileReq)(nil),             // 29: daop.pb.adminpb.GetAccountByMobileReq
	(*CheckAccessReq)(nil),                    // 30: daop.pb.adminpb.CheckAccessReq
	(*LoginResp)(nil),                         // 31: daop.pb.adminpb.LoginResp
	(*GetPrivilegeListResp)(nil),              // 32: daop.pb.adminpb.GetPrivilegeListResp
	(*GetPrivilegeResp)(nil),                  // 33: daop.pb.adminpb.GetPrivilegeResp
	(*GetPrivilegesOfRoleResp)(nil),           // 34: daop.pb.adminpb.GetPrivilegesOfRoleResp
	(*GetPrivilegesOfAllRolesResp)(nil),       // 35: daop.pb.adminpb.GetPrivilegesOfAllRolesResp
	(*GetRoleGroupListResp)(nil),              // 36: daop.pb.adminpb.GetRoleGroupListResp
	(*GetRoleResp)(nil),                       // 37: daop.pb.adminpb.GetRoleResp
	(*GetRoleListResp)(nil),                   // 38: daop.pb.adminpb.GetRoleListResp
	(*GetAccountListResp)(nil),                // 39: daop.pb.adminpb.GetAccountListResp
	(*GetAccountResp)(nil),                    // 40: daop.pb.adminpb.GetAccountResp
}
var file_pb_adminpb_admin_proto_depIdxs = []int32{
	12, // 0: daop.pb.adminpb.EmptyReq.r:type_name -> google.protobuf.Empty
	13, // 1: daop.pb.adminpb.BaseResp.data:type_name -> google.protobuf.Value
	10, // 2: daop.pb.adminpb.GetAccountAddressListResp.data:type_name -> daop.pb.adminpb.GetAccountAddressListResp.Data
	11, // 3: daop.pb.adminpb.GetAccountAddressGasListResp.data:type_name -> daop.pb.adminpb.GetAccountAddressGasListResp.Data
	7,  // 4: daop.pb.adminpb.GetAccountAddressGasListResp.Data.list:type_name -> daop.pb.adminpb.GetAccountAddressGasInfo
	14, // 5: daop.pb.adminpb.AdminService.Login:input_type -> daop.pb.adminpb.LoginReq
	15, // 6: daop.pb.adminpb.AdminService.UpdatePassword:input_type -> daop.pb.adminpb.UpdatePasswordReq
	16, // 7: daop.pb.adminpb.AdminService.ResetPassword:input_type -> daop.pb.adminpb.ResetPasswordReq
	17, // 8: daop.pb.adminpb.AdminService.HandlePrivilege:input_type -> daop.pb.adminpb.HandlePrivilegeReq
	1,  // 9: daop.pb.adminpb.AdminService.DeletePrivilege:input_type -> daop.pb.adminpb.UpStatusReq
	0,  // 10: daop.pb.adminpb.AdminService.GetAllPrivileges:input_type -> daop.pb.adminpb.EmptyReq
	18, // 11: daop.pb.adminpb.AdminService.GetPrivilegeByUri:input_type -> daop.pb.adminpb.GetPrivilegeByUriReq
	19, // 12: daop.pb.adminpb.AdminService.GetPrivilegesOfRole:input_type -> daop.pb.adminpb.GetPrivilegesOfRoleReq
	0,  // 13: daop.pb.adminpb.AdminService.GetPrivilegesOfAllRoles:input_type -> daop.pb.adminpb.EmptyReq
	20, // 14: daop.pb.adminpb.AdminService.AuthorisePrivilegesToRole:input_type -> daop.pb.adminpb.AuthorisePrivilegesToRoleReq
	21, // 15: daop.pb.adminpb.AdminService.HandleRoleGroup:input_type -> daop.pb.adminpb.HandleRoleGroupReq
	1,  // 16: daop.pb.adminpb.AdminService.DeleteRoleGroup:input_type -> daop.pb.adminpb.UpStatusReq
	0,  // 17: daop.pb.adminpb.AdminService.GetAllRoleGroup:input_type -> daop.pb.adminpb.EmptyReq
	22, // 18: daop.pb.adminpb.AdminService.HandleRole:input_type -> daop.pb.adminpb.HandleRoleReq
	1,  // 19: daop.pb.adminpb.AdminService.DeleteRole:input_type -> daop.pb.adminpb.UpStatusReq
	23, // 20: daop.pb.adminpb.AdminService.GetRoleById:input_type -> daop.pb.adminpb.GetRoleByIdReq
	0,  // 21: daop.pb.adminpb.AdminService.GetAllRoles:input_type -> daop.pb.adminpb.EmptyReq
	24, // 22: daop.pb.adminpb.AdminService.HandleAccount:input_type -> daop.pb.adminpb.HandleAccountReq
	1,  // 23: daop.pb.adminpb.AdminService.DeleteAccount:input_type -> daop.pb.adminpb.UpStatusReq
	1,  // 24: daop.pb.adminpb.AdminService.LockUnlockAccount:input_type -> daop.pb.adminpb.UpStatusReq
	0,  // 25: daop.pb.adminpb.AdminService.GetAllAccounts:input_type -> daop.pb.adminpb.EmptyReq
	25, // 26: daop.pb.adminpb.AdminService.GetAccountsByRoleId:input_type -> daop.pb.adminpb.GetAccountsByRoleReq
	26, // 27: daop.pb.adminpb.AdminService.GetAccountById:input_type -> daop.pb.adminpb.GetAccountByIdReq
	27, // 28: daop.pb.adminpb.AdminService.GetAccountByName:input_type -> daop.pb.adminpb.GetAccountByNameReq
	28, // 29: daop.pb.adminpb.AdminService.GetAccountByEmail:input_type -> daop.pb.adminpb.GetAccountByEmailReq
	29, // 30: daop.pb.adminpb.AdminService.GetAccountByMobile:input_type -> daop.pb.adminpb.GetAccountByMobileReq
	30, // 31: daop.pb.adminpb.AdminService.CheckAccess:input_type -> daop.pb.adminpb.CheckAccessReq
	3,  // 32: daop.pb.adminpb.AdminService.GetAccountAddressList:input_type -> daop.pb.adminpb.GetAccountAddressListReq
	5,  // 33: daop.pb.adminpb.AdminService.GetAccountAddressGasList:input_type -> daop.pb.adminpb.GetAccountAddressGasListReq
	8,  // 34: daop.pb.adminpb.AdminService.AdminPresentByAccount:input_type -> daop.pb.adminpb.AdminPresentByAccountReq
	31, // 35: daop.pb.adminpb.AdminService.Login:output_type -> daop.pb.adminpb.LoginResp
	2,  // 36: daop.pb.adminpb.AdminService.UpdatePassword:output_type -> daop.pb.adminpb.BaseResp
	2,  // 37: daop.pb.adminpb.AdminService.ResetPassword:output_type -> daop.pb.adminpb.BaseResp
	2,  // 38: daop.pb.adminpb.AdminService.HandlePrivilege:output_type -> daop.pb.adminpb.BaseResp
	2,  // 39: daop.pb.adminpb.AdminService.DeletePrivilege:output_type -> daop.pb.adminpb.BaseResp
	32, // 40: daop.pb.adminpb.AdminService.GetAllPrivileges:output_type -> daop.pb.adminpb.GetPrivilegeListResp
	33, // 41: daop.pb.adminpb.AdminService.GetPrivilegeByUri:output_type -> daop.pb.adminpb.GetPrivilegeResp
	34, // 42: daop.pb.adminpb.AdminService.GetPrivilegesOfRole:output_type -> daop.pb.adminpb.GetPrivilegesOfRoleResp
	35, // 43: daop.pb.adminpb.AdminService.GetPrivilegesOfAllRoles:output_type -> daop.pb.adminpb.GetPrivilegesOfAllRolesResp
	2,  // 44: daop.pb.adminpb.AdminService.AuthorisePrivilegesToRole:output_type -> daop.pb.adminpb.BaseResp
	2,  // 45: daop.pb.adminpb.AdminService.HandleRoleGroup:output_type -> daop.pb.adminpb.BaseResp
	2,  // 46: daop.pb.adminpb.AdminService.DeleteRoleGroup:output_type -> daop.pb.adminpb.BaseResp
	36, // 47: daop.pb.adminpb.AdminService.GetAllRoleGroup:output_type -> daop.pb.adminpb.GetRoleGroupListResp
	2,  // 48: daop.pb.adminpb.AdminService.HandleRole:output_type -> daop.pb.adminpb.BaseResp
	2,  // 49: daop.pb.adminpb.AdminService.DeleteRole:output_type -> daop.pb.adminpb.BaseResp
	37, // 50: daop.pb.adminpb.AdminService.GetRoleById:output_type -> daop.pb.adminpb.GetRoleResp
	38, // 51: daop.pb.adminpb.AdminService.GetAllRoles:output_type -> daop.pb.adminpb.GetRoleListResp
	2,  // 52: daop.pb.adminpb.AdminService.HandleAccount:output_type -> daop.pb.adminpb.BaseResp
	2,  // 53: daop.pb.adminpb.AdminService.DeleteAccount:output_type -> daop.pb.adminpb.BaseResp
	2,  // 54: daop.pb.adminpb.AdminService.LockUnlockAccount:output_type -> daop.pb.adminpb.BaseResp
	39, // 55: daop.pb.adminpb.AdminService.GetAllAccounts:output_type -> daop.pb.adminpb.GetAccountListResp
	39, // 56: daop.pb.adminpb.AdminService.GetAccountsByRoleId:output_type -> daop.pb.adminpb.GetAccountListResp
	40, // 57: daop.pb.adminpb.AdminService.GetAccountById:output_type -> daop.pb.adminpb.GetAccountResp
	40, // 58: daop.pb.adminpb.AdminService.GetAccountByName:output_type -> daop.pb.adminpb.GetAccountResp
	40, // 59: daop.pb.adminpb.AdminService.GetAccountByEmail:output_type -> daop.pb.adminpb.GetAccountResp
	40, // 60: daop.pb.adminpb.AdminService.GetAccountByMobile:output_type -> daop.pb.adminpb.GetAccountResp
	2,  // 61: daop.pb.adminpb.AdminService.CheckAccess:output_type -> daop.pb.adminpb.BaseResp
	4,  // 62: daop.pb.adminpb.AdminService.GetAccountAddressList:output_type -> daop.pb.adminpb.GetAccountAddressListResp
	6,  // 63: daop.pb.adminpb.AdminService.GetAccountAddressGasList:output_type -> daop.pb.adminpb.GetAccountAddressGasListResp
	9,  // 64: daop.pb.adminpb.AdminService.AdminPresentByAccount:output_type -> daop.pb.adminpb.AdminPresentByAccountResp
	35, // [35:65] is the sub-list for method output_type
	5,  // [5:35] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_pb_adminpb_admin_proto_init() }
func file_pb_adminpb_admin_proto_init() {
	if File_pb_adminpb_admin_proto != nil {
		return
	}
	file_pb_adminpb_rbac_proto_init()
	file_pb_adminpb_auth_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pb_adminpb_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountAddressListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountAddressListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountAddressGasListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountAddressGasListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountAddressGasInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminPresentByAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminPresentByAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountAddressListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountAddressGasListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_adminpb_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_adminpb_admin_proto_goTypes,
		DependencyIndexes: file_pb_adminpb_admin_proto_depIdxs,
		MessageInfos:      file_pb_adminpb_admin_proto_msgTypes,
	}.Build()
	File_pb_adminpb_admin_proto = out.File
	file_pb_adminpb_admin_proto_rawDesc = nil
	file_pb_adminpb_admin_proto_goTypes = nil
	file_pb_adminpb_admin_proto_depIdxs = nil
}
