// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/adminpb/admin.proto

package adminpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminService_Login_FullMethodName                     = "/daop.pb.adminpb.AdminService/Login"
	AdminService_UpdatePassword_FullMethodName            = "/daop.pb.adminpb.AdminService/UpdatePassword"
	AdminService_ResetPassword_FullMethodName             = "/daop.pb.adminpb.AdminService/ResetPassword"
	AdminService_HandlePrivilege_FullMethodName           = "/daop.pb.adminpb.AdminService/HandlePrivilege"
	AdminService_DeletePrivilege_FullMethodName           = "/daop.pb.adminpb.AdminService/DeletePrivilege"
	AdminService_GetAllPrivileges_FullMethodName          = "/daop.pb.adminpb.AdminService/GetAllPrivileges"
	AdminService_GetPrivilegeByUri_FullMethodName         = "/daop.pb.adminpb.AdminService/GetPrivilegeByUri"
	AdminService_GetPrivilegesOfRole_FullMethodName       = "/daop.pb.adminpb.AdminService/GetPrivilegesOfRole"
	AdminService_GetPrivilegesOfAllRoles_FullMethodName   = "/daop.pb.adminpb.AdminService/GetPrivilegesOfAllRoles"
	AdminService_AuthorisePrivilegesToRole_FullMethodName = "/daop.pb.adminpb.AdminService/AuthorisePrivilegesToRole"
	AdminService_HandleRoleGroup_FullMethodName           = "/daop.pb.adminpb.AdminService/HandleRoleGroup"
	AdminService_DeleteRoleGroup_FullMethodName           = "/daop.pb.adminpb.AdminService/DeleteRoleGroup"
	AdminService_GetAllRoleGroup_FullMethodName           = "/daop.pb.adminpb.AdminService/GetAllRoleGroup"
	AdminService_HandleRole_FullMethodName                = "/daop.pb.adminpb.AdminService/HandleRole"
	AdminService_DeleteRole_FullMethodName                = "/daop.pb.adminpb.AdminService/DeleteRole"
	AdminService_GetRoleById_FullMethodName               = "/daop.pb.adminpb.AdminService/GetRoleById"
	AdminService_GetAllRoles_FullMethodName               = "/daop.pb.adminpb.AdminService/GetAllRoles"
	AdminService_HandleAccount_FullMethodName             = "/daop.pb.adminpb.AdminService/HandleAccount"
	AdminService_DeleteAccount_FullMethodName             = "/daop.pb.adminpb.AdminService/DeleteAccount"
	AdminService_LockUnlockAccount_FullMethodName         = "/daop.pb.adminpb.AdminService/LockUnlockAccount"
	AdminService_GetAllAccounts_FullMethodName            = "/daop.pb.adminpb.AdminService/GetAllAccounts"
	AdminService_GetAccountsByRoleId_FullMethodName       = "/daop.pb.adminpb.AdminService/GetAccountsByRoleId"
	AdminService_GetAccountById_FullMethodName            = "/daop.pb.adminpb.AdminService/GetAccountById"
	AdminService_GetAccountByName_FullMethodName          = "/daop.pb.adminpb.AdminService/GetAccountByName"
	AdminService_GetAccountByEmail_FullMethodName         = "/daop.pb.adminpb.AdminService/GetAccountByEmail"
	AdminService_GetAccountByMobile_FullMethodName        = "/daop.pb.adminpb.AdminService/GetAccountByMobile"
	AdminService_CheckAccess_FullMethodName               = "/daop.pb.adminpb.AdminService/CheckAccess"
	AdminService_GetAccountAddressList_FullMethodName     = "/daop.pb.adminpb.AdminService/GetAccountAddressList"
	AdminService_GetAccountAddressGasList_FullMethodName  = "/daop.pb.adminpb.AdminService/GetAccountAddressGasList"
	AdminService_AdminPresentByAccount_FullMethodName     = "/daop.pb.adminpb.AdminService/AdminPresentByAccount"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*BaseResp, error)
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 添加/更新权限
	HandlePrivilege(ctx context.Context, in *HandlePrivilegeReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 删除权限
	DeletePrivilege(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 取所有权限
	GetAllPrivileges(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetPrivilegeListResp, error)
	// 通过Uri取出权限
	GetPrivilegeByUri(ctx context.Context, in *GetPrivilegeByUriReq, opts ...grpc.CallOption) (*GetPrivilegeResp, error)
	// 通过角色ID取出该角色拥有的所有权限
	GetPrivilegesOfRole(ctx context.Context, in *GetPrivilegesOfRoleReq, opts ...grpc.CallOption) (*GetPrivilegesOfRoleResp, error)
	// 取所有角色的权限
	GetPrivilegesOfAllRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetPrivilegesOfAllRolesResp, error)
	// 授权权限给角色
	AuthorisePrivilegesToRole(ctx context.Context, in *AuthorisePrivilegesToRoleReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 添加/更新角色分组
	HandleRoleGroup(ctx context.Context, in *HandleRoleGroupReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 删除角色分组
	DeleteRoleGroup(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 获取所有角色分组
	GetAllRoleGroup(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetRoleGroupListResp, error)
	// 添加/更新角色
	HandleRole(ctx context.Context, in *HandleRoleReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 通过ID取角色
	GetRoleById(ctx context.Context, in *GetRoleByIdReq, opts ...grpc.CallOption) (*GetRoleResp, error)
	// 取出所有角色
	GetAllRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetRoleListResp, error)
	// 创建账号
	HandleAccount(ctx context.Context, in *HandleAccountReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 删除账号
	DeleteAccount(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 锁定/解锁账号
	LockUnlockAccount(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 取所有账号信息
	GetAllAccounts(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetAccountListResp, error)
	// 取给定角色ID对应角色下的所有账号信息
	GetAccountsByRoleId(ctx context.Context, in *GetAccountsByRoleReq, opts ...grpc.CallOption) (*GetAccountListResp, error)
	// 通过账号ID取账号信息
	GetAccountById(ctx context.Context, in *GetAccountByIdReq, opts ...grpc.CallOption) (*GetAccountResp, error)
	// 通过账号名称登录名取账号信息
	GetAccountByName(ctx context.Context, in *GetAccountByNameReq, opts ...grpc.CallOption) (*GetAccountResp, error)
	// 通过Email取账号信息
	GetAccountByEmail(ctx context.Context, in *GetAccountByEmailReq, opts ...grpc.CallOption) (*GetAccountResp, error)
	// 通过手机号码登录名取账号信息
	GetAccountByMobile(ctx context.Context, in *GetAccountByMobileReq, opts ...grpc.CallOption) (*GetAccountResp, error)
	// 检查某个角色是否有访问某个权限的请求(不对外提供API接口，只响应RPC请求)
	CheckAccess(ctx context.Context, in *CheckAccessReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 获取账号地址列表
	GetAccountAddressList(ctx context.Context, in *GetAccountAddressListReq, opts ...grpc.CallOption) (*GetAccountAddressListResp, error)
	// 获取账号地址gas 费用列表
	GetAccountAddressGasList(ctx context.Context, in *GetAccountAddressGasListReq, opts ...grpc.CallOption) (*GetAccountAddressGasListResp, error)
	// AdminPresentByAccount (运营后台)指定账户增加能量值
	AdminPresentByAccount(ctx context.Context, in *AdminPresentByAccountReq, opts ...grpc.CallOption) (*AdminPresentByAccountResp, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AdminService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_UpdatePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HandlePrivilege(ctx context.Context, in *HandlePrivilegeReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_HandlePrivilege_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeletePrivilege(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_DeletePrivilege_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAllPrivileges(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetPrivilegeListResp, error) {
	out := new(GetPrivilegeListResp)
	err := c.cc.Invoke(ctx, AdminService_GetAllPrivileges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPrivilegeByUri(ctx context.Context, in *GetPrivilegeByUriReq, opts ...grpc.CallOption) (*GetPrivilegeResp, error) {
	out := new(GetPrivilegeResp)
	err := c.cc.Invoke(ctx, AdminService_GetPrivilegeByUri_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPrivilegesOfRole(ctx context.Context, in *GetPrivilegesOfRoleReq, opts ...grpc.CallOption) (*GetPrivilegesOfRoleResp, error) {
	out := new(GetPrivilegesOfRoleResp)
	err := c.cc.Invoke(ctx, AdminService_GetPrivilegesOfRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPrivilegesOfAllRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetPrivilegesOfAllRolesResp, error) {
	out := new(GetPrivilegesOfAllRolesResp)
	err := c.cc.Invoke(ctx, AdminService_GetPrivilegesOfAllRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AuthorisePrivilegesToRole(ctx context.Context, in *AuthorisePrivilegesToRoleReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_AuthorisePrivilegesToRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HandleRoleGroup(ctx context.Context, in *HandleRoleGroupReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_HandleRoleGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteRoleGroup(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_DeleteRoleGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAllRoleGroup(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetRoleGroupListResp, error) {
	out := new(GetRoleGroupListResp)
	err := c.cc.Invoke(ctx, AdminService_GetAllRoleGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HandleRole(ctx context.Context, in *HandleRoleReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_HandleRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteRole(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetRoleById(ctx context.Context, in *GetRoleByIdReq, opts ...grpc.CallOption) (*GetRoleResp, error) {
	out := new(GetRoleResp)
	err := c.cc.Invoke(ctx, AdminService_GetRoleById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAllRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetRoleListResp, error) {
	out := new(GetRoleListResp)
	err := c.cc.Invoke(ctx, AdminService_GetAllRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HandleAccount(ctx context.Context, in *HandleAccountReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_HandleAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteAccount(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_DeleteAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) LockUnlockAccount(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_LockUnlockAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAllAccounts(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetAccountListResp, error) {
	out := new(GetAccountListResp)
	err := c.cc.Invoke(ctx, AdminService_GetAllAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAccountsByRoleId(ctx context.Context, in *GetAccountsByRoleReq, opts ...grpc.CallOption) (*GetAccountListResp, error) {
	out := new(GetAccountListResp)
	err := c.cc.Invoke(ctx, AdminService_GetAccountsByRoleId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAccountById(ctx context.Context, in *GetAccountByIdReq, opts ...grpc.CallOption) (*GetAccountResp, error) {
	out := new(GetAccountResp)
	err := c.cc.Invoke(ctx, AdminService_GetAccountById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAccountByName(ctx context.Context, in *GetAccountByNameReq, opts ...grpc.CallOption) (*GetAccountResp, error) {
	out := new(GetAccountResp)
	err := c.cc.Invoke(ctx, AdminService_GetAccountByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAccountByEmail(ctx context.Context, in *GetAccountByEmailReq, opts ...grpc.CallOption) (*GetAccountResp, error) {
	out := new(GetAccountResp)
	err := c.cc.Invoke(ctx, AdminService_GetAccountByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAccountByMobile(ctx context.Context, in *GetAccountByMobileReq, opts ...grpc.CallOption) (*GetAccountResp, error) {
	out := new(GetAccountResp)
	err := c.cc.Invoke(ctx, AdminService_GetAccountByMobile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CheckAccess(ctx context.Context, in *CheckAccessReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, AdminService_CheckAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAccountAddressList(ctx context.Context, in *GetAccountAddressListReq, opts ...grpc.CallOption) (*GetAccountAddressListResp, error) {
	out := new(GetAccountAddressListResp)
	err := c.cc.Invoke(ctx, AdminService_GetAccountAddressList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAccountAddressGasList(ctx context.Context, in *GetAccountAddressGasListReq, opts ...grpc.CallOption) (*GetAccountAddressGasListResp, error) {
	out := new(GetAccountAddressGasListResp)
	err := c.cc.Invoke(ctx, AdminService_GetAccountAddressGasList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AdminPresentByAccount(ctx context.Context, in *AdminPresentByAccountReq, opts ...grpc.CallOption) (*AdminPresentByAccountResp, error) {
	out := new(AdminPresentByAccountResp)
	err := c.cc.Invoke(ctx, AdminService_AdminPresentByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations should embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	UpdatePassword(context.Context, *UpdatePasswordReq) (*BaseResp, error)
	ResetPassword(context.Context, *ResetPasswordReq) (*BaseResp, error)
	// 添加/更新权限
	HandlePrivilege(context.Context, *HandlePrivilegeReq) (*BaseResp, error)
	// 删除权限
	DeletePrivilege(context.Context, *UpStatusReq) (*BaseResp, error)
	// 取所有权限
	GetAllPrivileges(context.Context, *EmptyReq) (*GetPrivilegeListResp, error)
	// 通过Uri取出权限
	GetPrivilegeByUri(context.Context, *GetPrivilegeByUriReq) (*GetPrivilegeResp, error)
	// 通过角色ID取出该角色拥有的所有权限
	GetPrivilegesOfRole(context.Context, *GetPrivilegesOfRoleReq) (*GetPrivilegesOfRoleResp, error)
	// 取所有角色的权限
	GetPrivilegesOfAllRoles(context.Context, *EmptyReq) (*GetPrivilegesOfAllRolesResp, error)
	// 授权权限给角色
	AuthorisePrivilegesToRole(context.Context, *AuthorisePrivilegesToRoleReq) (*BaseResp, error)
	// 添加/更新角色分组
	HandleRoleGroup(context.Context, *HandleRoleGroupReq) (*BaseResp, error)
	// 删除角色分组
	DeleteRoleGroup(context.Context, *UpStatusReq) (*BaseResp, error)
	// 获取所有角色分组
	GetAllRoleGroup(context.Context, *EmptyReq) (*GetRoleGroupListResp, error)
	// 添加/更新角色
	HandleRole(context.Context, *HandleRoleReq) (*BaseResp, error)
	// 删除角色
	DeleteRole(context.Context, *UpStatusReq) (*BaseResp, error)
	// 通过ID取角色
	GetRoleById(context.Context, *GetRoleByIdReq) (*GetRoleResp, error)
	// 取出所有角色
	GetAllRoles(context.Context, *EmptyReq) (*GetRoleListResp, error)
	// 创建账号
	HandleAccount(context.Context, *HandleAccountReq) (*BaseResp, error)
	// 删除账号
	DeleteAccount(context.Context, *UpStatusReq) (*BaseResp, error)
	// 锁定/解锁账号
	LockUnlockAccount(context.Context, *UpStatusReq) (*BaseResp, error)
	// 取所有账号信息
	GetAllAccounts(context.Context, *EmptyReq) (*GetAccountListResp, error)
	// 取给定角色ID对应角色下的所有账号信息
	GetAccountsByRoleId(context.Context, *GetAccountsByRoleReq) (*GetAccountListResp, error)
	// 通过账号ID取账号信息
	GetAccountById(context.Context, *GetAccountByIdReq) (*GetAccountResp, error)
	// 通过账号名称登录名取账号信息
	GetAccountByName(context.Context, *GetAccountByNameReq) (*GetAccountResp, error)
	// 通过Email取账号信息
	GetAccountByEmail(context.Context, *GetAccountByEmailReq) (*GetAccountResp, error)
	// 通过手机号码登录名取账号信息
	GetAccountByMobile(context.Context, *GetAccountByMobileReq) (*GetAccountResp, error)
	// 检查某个角色是否有访问某个权限的请求(不对外提供API接口，只响应RPC请求)
	CheckAccess(context.Context, *CheckAccessReq) (*BaseResp, error)
	// 获取账号地址列表
	GetAccountAddressList(context.Context, *GetAccountAddressListReq) (*GetAccountAddressListResp, error)
	// 获取账号地址gas 费用列表
	GetAccountAddressGasList(context.Context, *GetAccountAddressGasListReq) (*GetAccountAddressGasListResp, error)
	// AdminPresentByAccount (运营后台)指定账户增加能量值
	AdminPresentByAccount(context.Context, *AdminPresentByAccountReq) (*AdminPresentByAccountResp, error)
}

// UnimplementedAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePassword(context.Context, *UpdatePasswordReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedAdminServiceServer) ResetPassword(context.Context, *ResetPasswordReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAdminServiceServer) HandlePrivilege(context.Context, *HandlePrivilegeReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePrivilege not implemented")
}
func (UnimplementedAdminServiceServer) DeletePrivilege(context.Context, *UpStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrivilege not implemented")
}
func (UnimplementedAdminServiceServer) GetAllPrivileges(context.Context, *EmptyReq) (*GetPrivilegeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPrivileges not implemented")
}
func (UnimplementedAdminServiceServer) GetPrivilegeByUri(context.Context, *GetPrivilegeByUriReq) (*GetPrivilegeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivilegeByUri not implemented")
}
func (UnimplementedAdminServiceServer) GetPrivilegesOfRole(context.Context, *GetPrivilegesOfRoleReq) (*GetPrivilegesOfRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivilegesOfRole not implemented")
}
func (UnimplementedAdminServiceServer) GetPrivilegesOfAllRoles(context.Context, *EmptyReq) (*GetPrivilegesOfAllRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivilegesOfAllRoles not implemented")
}
func (UnimplementedAdminServiceServer) AuthorisePrivilegesToRole(context.Context, *AuthorisePrivilegesToRoleReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorisePrivilegesToRole not implemented")
}
func (UnimplementedAdminServiceServer) HandleRoleGroup(context.Context, *HandleRoleGroupReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRoleGroup not implemented")
}
func (UnimplementedAdminServiceServer) DeleteRoleGroup(context.Context, *UpStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleGroup not implemented")
}
func (UnimplementedAdminServiceServer) GetAllRoleGroup(context.Context, *EmptyReq) (*GetRoleGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoleGroup not implemented")
}
func (UnimplementedAdminServiceServer) HandleRole(context.Context, *HandleRoleReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRole not implemented")
}
func (UnimplementedAdminServiceServer) DeleteRole(context.Context, *UpStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAdminServiceServer) GetRoleById(context.Context, *GetRoleByIdReq) (*GetRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleById not implemented")
}
func (UnimplementedAdminServiceServer) GetAllRoles(context.Context, *EmptyReq) (*GetRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (UnimplementedAdminServiceServer) HandleAccount(context.Context, *HandleAccountReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleAccount not implemented")
}
func (UnimplementedAdminServiceServer) DeleteAccount(context.Context, *UpStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAdminServiceServer) LockUnlockAccount(context.Context, *UpStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockUnlockAccount not implemented")
}
func (UnimplementedAdminServiceServer) GetAllAccounts(context.Context, *EmptyReq) (*GetAccountListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccounts not implemented")
}
func (UnimplementedAdminServiceServer) GetAccountsByRoleId(context.Context, *GetAccountsByRoleReq) (*GetAccountListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsByRoleId not implemented")
}
func (UnimplementedAdminServiceServer) GetAccountById(context.Context, *GetAccountByIdReq) (*GetAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountById not implemented")
}
func (UnimplementedAdminServiceServer) GetAccountByName(context.Context, *GetAccountByNameReq) (*GetAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByName not implemented")
}
func (UnimplementedAdminServiceServer) GetAccountByEmail(context.Context, *GetAccountByEmailReq) (*GetAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByEmail not implemented")
}
func (UnimplementedAdminServiceServer) GetAccountByMobile(context.Context, *GetAccountByMobileReq) (*GetAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByMobile not implemented")
}
func (UnimplementedAdminServiceServer) CheckAccess(context.Context, *CheckAccessReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccess not implemented")
}
func (UnimplementedAdminServiceServer) GetAccountAddressList(context.Context, *GetAccountAddressListReq) (*GetAccountAddressListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAddressList not implemented")
}
func (UnimplementedAdminServiceServer) GetAccountAddressGasList(context.Context, *GetAccountAddressGasListReq) (*GetAccountAddressGasListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAddressGasList not implemented")
}
func (UnimplementedAdminServiceServer) AdminPresentByAccount(context.Context, *AdminPresentByAccountReq) (*AdminPresentByAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminPresentByAccount not implemented")
}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HandlePrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlePrivilegeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HandlePrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HandlePrivilege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HandlePrivilege(ctx, req.(*HandlePrivilegeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeletePrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeletePrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeletePrivilege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeletePrivilege(ctx, req.(*UpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAllPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAllPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAllPrivileges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAllPrivileges(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPrivilegeByUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivilegeByUriReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPrivilegeByUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPrivilegeByUri_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPrivilegeByUri(ctx, req.(*GetPrivilegeByUriReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPrivilegesOfRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivilegesOfRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPrivilegesOfRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPrivilegesOfRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPrivilegesOfRole(ctx, req.(*GetPrivilegesOfRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPrivilegesOfAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPrivilegesOfAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPrivilegesOfAllRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPrivilegesOfAllRoles(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AuthorisePrivilegesToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorisePrivilegesToRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AuthorisePrivilegesToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AuthorisePrivilegesToRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AuthorisePrivilegesToRole(ctx, req.(*AuthorisePrivilegesToRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HandleRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRoleGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HandleRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HandleRoleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HandleRoleGroup(ctx, req.(*HandleRoleGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteRoleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteRoleGroup(ctx, req.(*UpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAllRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAllRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAllRoleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAllRoleGroup(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HandleRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HandleRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HandleRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HandleRole(ctx, req.(*HandleRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteRole(ctx, req.(*UpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetRoleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRoleById(ctx, req.(*GetRoleByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAllRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAllRoles(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HandleAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HandleAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HandleAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HandleAccount(ctx, req.(*HandleAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteAccount(ctx, req.(*UpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_LockUnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).LockUnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_LockUnlockAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).LockUnlockAccount(ctx, req.(*UpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAllAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAllAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAllAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAllAccounts(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAccountsByRoleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsByRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAccountsByRoleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAccountsByRoleId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAccountsByRoleId(ctx, req.(*GetAccountsByRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAccountById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAccountById(ctx, req.(*GetAccountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAccountByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAccountByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAccountByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAccountByName(ctx, req.(*GetAccountByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAccountByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAccountByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAccountByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAccountByEmail(ctx, req.(*GetAccountByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAccountByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByMobileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAccountByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAccountByMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAccountByMobile(ctx, req.(*GetAccountByMobileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CheckAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CheckAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CheckAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CheckAccess(ctx, req.(*CheckAccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAccountAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountAddressListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAccountAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAccountAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAccountAddressList(ctx, req.(*GetAccountAddressListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAccountAddressGasList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountAddressGasListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAccountAddressGasList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAccountAddressGasList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAccountAddressGasList(ctx, req.(*GetAccountAddressGasListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AdminPresentByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPresentByAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminPresentByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AdminPresentByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminPresentByAccount(ctx, req.(*AdminPresentByAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daop.pb.adminpb.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AdminService_Login_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _AdminService_UpdatePassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AdminService_ResetPassword_Handler,
		},
		{
			MethodName: "HandlePrivilege",
			Handler:    _AdminService_HandlePrivilege_Handler,
		},
		{
			MethodName: "DeletePrivilege",
			Handler:    _AdminService_DeletePrivilege_Handler,
		},
		{
			MethodName: "GetAllPrivileges",
			Handler:    _AdminService_GetAllPrivileges_Handler,
		},
		{
			MethodName: "GetPrivilegeByUri",
			Handler:    _AdminService_GetPrivilegeByUri_Handler,
		},
		{
			MethodName: "GetPrivilegesOfRole",
			Handler:    _AdminService_GetPrivilegesOfRole_Handler,
		},
		{
			MethodName: "GetPrivilegesOfAllRoles",
			Handler:    _AdminService_GetPrivilegesOfAllRoles_Handler,
		},
		{
			MethodName: "AuthorisePrivilegesToRole",
			Handler:    _AdminService_AuthorisePrivilegesToRole_Handler,
		},
		{
			MethodName: "HandleRoleGroup",
			Handler:    _AdminService_HandleRoleGroup_Handler,
		},
		{
			MethodName: "DeleteRoleGroup",
			Handler:    _AdminService_DeleteRoleGroup_Handler,
		},
		{
			MethodName: "GetAllRoleGroup",
			Handler:    _AdminService_GetAllRoleGroup_Handler,
		},
		{
			MethodName: "HandleRole",
			Handler:    _AdminService_HandleRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AdminService_DeleteRole_Handler,
		},
		{
			MethodName: "GetRoleById",
			Handler:    _AdminService_GetRoleById_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _AdminService_GetAllRoles_Handler,
		},
		{
			MethodName: "HandleAccount",
			Handler:    _AdminService_HandleAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AdminService_DeleteAccount_Handler,
		},
		{
			MethodName: "LockUnlockAccount",
			Handler:    _AdminService_LockUnlockAccount_Handler,
		},
		{
			MethodName: "GetAllAccounts",
			Handler:    _AdminService_GetAllAccounts_Handler,
		},
		{
			MethodName: "GetAccountsByRoleId",
			Handler:    _AdminService_GetAccountsByRoleId_Handler,
		},
		{
			MethodName: "GetAccountById",
			Handler:    _AdminService_GetAccountById_Handler,
		},
		{
			MethodName: "GetAccountByName",
			Handler:    _AdminService_GetAccountByName_Handler,
		},
		{
			MethodName: "GetAccountByEmail",
			Handler:    _AdminService_GetAccountByEmail_Handler,
		},
		{
			MethodName: "GetAccountByMobile",
			Handler:    _AdminService_GetAccountByMobile_Handler,
		},
		{
			MethodName: "CheckAccess",
			Handler:    _AdminService_CheckAccess_Handler,
		},
		{
			MethodName: "GetAccountAddressList",
			Handler:    _AdminService_GetAccountAddressList_Handler,
		},
		{
			MethodName: "GetAccountAddressGasList",
			Handler:    _AdminService_GetAccountAddressGasList_Handler,
		},
		{
			MethodName: "AdminPresentByAccount",
			Handler:    _AdminService_AdminPresentByAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/adminpb/admin.proto",
}
