// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/adminpb/rbac.proto

package adminpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 权限数据结构
type Privilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivilegeId   uint32 `protobuf:"varint,1,opt,name=privilege_id,json=privilegeId,proto3" json:"privilege_id,omitempty"`
	ParentId      uint32 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ShowNameCn    string `protobuf:"bytes,3,opt,name=show_name_cn,json=showNameCn,proto3" json:"show_name_cn,omitempty"`
	ShowNameEn    string `protobuf:"bytes,4,opt,name=show_name_en,json=showNameEn,proto3" json:"show_name_en,omitempty"`
	PrivilegeType uint32 `protobuf:"varint,5,opt,name=privilege_type,json=privilegeType,proto3" json:"privilege_type,omitempty"`
	Level         uint32 `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	RouterUri     string `protobuf:"bytes,9,opt,name=router_uri,json=routerUri,proto3" json:"router_uri,omitempty"`
	Icon          string `protobuf:"bytes,10,opt,name=icon,proto3" json:"icon,omitempty"`
	Target        uint32 `protobuf:"varint,11,opt,name=target,proto3" json:"target,omitempty"`
	IsShow        uint32 `protobuf:"varint,12,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`
	OnTop         uint32 `protobuf:"varint,13,opt,name=on_top,json=onTop,proto3" json:"on_top,omitempty"`
	Ranking       uint32 `protobuf:"varint,14,opt,name=ranking,proto3" json:"ranking,omitempty"`
	IsPublic      uint32 `protobuf:"varint,15,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	NeedLogin     uint32 `protobuf:"varint,16,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	NeedAuthorise uint32 `protobuf:"varint,17,opt,name=need_authorise,json=needAuthorise,proto3" json:"need_authorise,omitempty"`
	InitState     uint32 `protobuf:"varint,18,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	Remarks       string `protobuf:"bytes,19,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CreateTime    uint32 `protobuf:"varint,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime    uint32 `protobuf:"varint,21,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status        uint32 `protobuf:"varint,22,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Privilege) Reset() {
	*x = Privilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Privilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Privilege) ProtoMessage() {}

func (x *Privilege) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Privilege.ProtoReflect.Descriptor instead.
func (*Privilege) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *Privilege) GetPrivilegeId() uint32 {
	if x != nil {
		return x.PrivilegeId
	}
	return 0
}

func (x *Privilege) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Privilege) GetShowNameCn() string {
	if x != nil {
		return x.ShowNameCn
	}
	return ""
}

func (x *Privilege) GetShowNameEn() string {
	if x != nil {
		return x.ShowNameEn
	}
	return ""
}

func (x *Privilege) GetPrivilegeType() uint32 {
	if x != nil {
		return x.PrivilegeType
	}
	return 0
}

func (x *Privilege) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Privilege) GetRouterUri() string {
	if x != nil {
		return x.RouterUri
	}
	return ""
}

func (x *Privilege) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Privilege) GetTarget() uint32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *Privilege) GetIsShow() uint32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *Privilege) GetOnTop() uint32 {
	if x != nil {
		return x.OnTop
	}
	return 0
}

func (x *Privilege) GetRanking() uint32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *Privilege) GetIsPublic() uint32 {
	if x != nil {
		return x.IsPublic
	}
	return 0
}

func (x *Privilege) GetNeedLogin() uint32 {
	if x != nil {
		return x.NeedLogin
	}
	return 0
}

func (x *Privilege) GetNeedAuthorise() uint32 {
	if x != nil {
		return x.NeedAuthorise
	}
	return 0
}

func (x *Privilege) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *Privilege) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Privilege) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Privilege) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *Privilege) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 添加/编辑权限请求
type HandlePrivilegeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    uint32     `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	Privilege *Privilege `protobuf:"bytes,2,opt,name=privilege,proto3" json:"privilege,omitempty"`
}

func (x *HandlePrivilegeReq) Reset() {
	*x = HandlePrivilegeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlePrivilegeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlePrivilegeReq) ProtoMessage() {}

func (x *HandlePrivilegeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlePrivilegeReq.ProtoReflect.Descriptor instead.
func (*HandlePrivilegeReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *HandlePrivilegeReq) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *HandlePrivilegeReq) GetPrivilege() *Privilege {
	if x != nil {
		return x.Privilege
	}
	return nil
}

// 取单个权限返回数据结构
type GetPrivilegeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *Privilege `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPrivilegeResp) Reset() {
	*x = GetPrivilegeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivilegeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivilegeResp) ProtoMessage() {}

func (x *GetPrivilegeResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivilegeResp.ProtoReflect.Descriptor instead.
func (*GetPrivilegeResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *GetPrivilegeResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPrivilegeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetPrivilegeResp) GetData() *Privilege {
	if x != nil {
		return x.Data
	}
	return nil
}

// 取权限列表返回数据结构
type GetPrivilegeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*Privilege `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPrivilegeListResp) Reset() {
	*x = GetPrivilegeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivilegeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivilegeListResp) ProtoMessage() {}

func (x *GetPrivilegeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivilegeListResp.ProtoReflect.Descriptor instead.
func (*GetPrivilegeListResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *GetPrivilegeListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPrivilegeListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetPrivilegeListResp) GetData() []*Privilege {
	if x != nil {
		return x.Data
	}
	return nil
}

// 通过uri取单个权限请求
type GetPrivilegeByUriReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *GetPrivilegeByUriReq) Reset() {
	*x = GetPrivilegeByUriReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivilegeByUriReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivilegeByUriReq) ProtoMessage() {}

func (x *GetPrivilegeByUriReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivilegeByUriReq.ProtoReflect.Descriptor instead.
func (*GetPrivilegeByUriReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *GetPrivilegeByUriReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// 通过角色ID取单个权限请求
type GetPrivilegesOfRoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId        uint32 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	IsSystemAdmin uint32 `protobuf:"varint,2,opt,name=is_system_admin,json=isSystemAdmin,proto3" json:"is_system_admin,omitempty"`
}

func (x *GetPrivilegesOfRoleReq) Reset() {
	*x = GetPrivilegesOfRoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivilegesOfRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivilegesOfRoleReq) ProtoMessage() {}

func (x *GetPrivilegesOfRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivilegesOfRoleReq.ProtoReflect.Descriptor instead.
func (*GetPrivilegesOfRoleReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{5}
}

func (x *GetPrivilegesOfRoleReq) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *GetPrivilegesOfRoleReq) GetIsSystemAdmin() uint32 {
	if x != nil {
		return x.IsSystemAdmin
	}
	return 0
}

// 角色数据结构
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId      uint32 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RoleNameCn  string `protobuf:"bytes,2,opt,name=role_name_cn,json=roleNameCn,proto3" json:"role_name_cn,omitempty"`
	RoleNameEn  string `protobuf:"bytes,3,opt,name=role_name_en,json=roleNameEn,proto3" json:"role_name_en,omitempty"`
	RoleGroupId uint32 `protobuf:"varint,4,opt,name=role_group_id,json=roleGroupId,proto3" json:"role_group_id,omitempty"`
	GroupNameCn string `protobuf:"bytes,5,opt,name=group_name_cn,json=groupNameCn,proto3" json:"group_name_cn,omitempty"`
	GroupNameEn string `protobuf:"bytes,6,opt,name=group_name_en,json=groupNameEn,proto3" json:"group_name_en,omitempty"`
	RoleGrade   uint32 `protobuf:"varint,7,opt,name=role_grade,json=roleGrade,proto3" json:"role_grade,omitempty"`
	Ranking     uint32 `protobuf:"varint,9,opt,name=ranking,proto3" json:"ranking,omitempty"`
	InitState   uint32 `protobuf:"varint,10,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	Remarks     string `protobuf:"bytes,11,opt,name=remarks,proto3" json:"remarks,omitempty"`
	IsSystem    uint32 `protobuf:"varint,12,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`
	CreateTime  uint32 `protobuf:"varint,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime  uint32 `protobuf:"varint,21,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status      uint32 `protobuf:"varint,22,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{6}
}

func (x *Role) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *Role) GetRoleNameCn() string {
	if x != nil {
		return x.RoleNameCn
	}
	return ""
}

func (x *Role) GetRoleNameEn() string {
	if x != nil {
		return x.RoleNameEn
	}
	return ""
}

func (x *Role) GetRoleGroupId() uint32 {
	if x != nil {
		return x.RoleGroupId
	}
	return 0
}

func (x *Role) GetGroupNameCn() string {
	if x != nil {
		return x.GroupNameCn
	}
	return ""
}

func (x *Role) GetGroupNameEn() string {
	if x != nil {
		return x.GroupNameEn
	}
	return ""
}

func (x *Role) GetRoleGrade() uint32 {
	if x != nil {
		return x.RoleGrade
	}
	return 0
}

func (x *Role) GetRanking() uint32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *Role) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *Role) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Role) GetIsSystem() uint32 {
	if x != nil {
		return x.IsSystem
	}
	return 0
}

func (x *Role) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Role) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *Role) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 角色分组数据结构
type RoleGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId     uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupNameCn string `protobuf:"bytes,2,opt,name=group_name_cn,json=groupNameCn,proto3" json:"group_name_cn,omitempty"`
	GroupNameEn string `protobuf:"bytes,6,opt,name=group_name_en,json=groupNameEn,proto3" json:"group_name_en,omitempty"`
	Ranking     uint32 `protobuf:"varint,9,opt,name=ranking,proto3" json:"ranking,omitempty"`
	InitState   uint32 `protobuf:"varint,10,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	Remarks     string `protobuf:"bytes,11,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CreateTime  uint32 `protobuf:"varint,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime  uint32 `protobuf:"varint,21,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status      uint32 `protobuf:"varint,22,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RoleGroup) Reset() {
	*x = RoleGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleGroup) ProtoMessage() {}

func (x *RoleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleGroup.ProtoReflect.Descriptor instead.
func (*RoleGroup) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{7}
}

func (x *RoleGroup) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RoleGroup) GetGroupNameCn() string {
	if x != nil {
		return x.GroupNameCn
	}
	return ""
}

func (x *RoleGroup) GetGroupNameEn() string {
	if x != nil {
		return x.GroupNameEn
	}
	return ""
}

func (x *RoleGroup) GetRanking() uint32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *RoleGroup) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *RoleGroup) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *RoleGroup) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RoleGroup) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *RoleGroup) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 角色和权限关系数据结构
type RolePrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoleId      uint32 `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	PrivilegeId uint32 `protobuf:"varint,3,opt,name=privilege_id,json=privilegeId,proto3" json:"privilege_id,omitempty"`
	InitState   uint32 `protobuf:"varint,4,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	Status      uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RolePrivilege) Reset() {
	*x = RolePrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolePrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePrivilege) ProtoMessage() {}

func (x *RolePrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePrivilege.ProtoReflect.Descriptor instead.
func (*RolePrivilege) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{8}
}

func (x *RolePrivilege) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RolePrivilege) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RolePrivilege) GetPrivilegeId() uint32 {
	if x != nil {
		return x.PrivilegeId
	}
	return 0
}

func (x *RolePrivilege) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *RolePrivilege) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 角色分组及其下角色数据结构
type RoleAndGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group      *RoleGroup `protobuf:"bytes,13,opt,name=group,proto3" json:"group,omitempty"`
	RoleId     uint32     `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RoleNameCn string     `protobuf:"bytes,2,opt,name=role_name_cn,json=roleNameCn,proto3" json:"role_name_cn,omitempty"`
	RoleNameEn string     `protobuf:"bytes,3,opt,name=role_name_en,json=roleNameEn,proto3" json:"role_name_en,omitempty"`
	RoleGrade  uint32     `protobuf:"varint,7,opt,name=role_grade,json=roleGrade,proto3" json:"role_grade,omitempty"`
	Ranking    uint32     `protobuf:"varint,9,opt,name=ranking,proto3" json:"ranking,omitempty"`
	InitState  uint32     `protobuf:"varint,10,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	IsSystem   uint32     `protobuf:"varint,12,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`
}

func (x *RoleAndGroup) Reset() {
	*x = RoleAndGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleAndGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAndGroup) ProtoMessage() {}

func (x *RoleAndGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAndGroup.ProtoReflect.Descriptor instead.
func (*RoleAndGroup) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{9}
}

func (x *RoleAndGroup) GetGroup() *RoleGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *RoleAndGroup) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleAndGroup) GetRoleNameCn() string {
	if x != nil {
		return x.RoleNameCn
	}
	return ""
}

func (x *RoleAndGroup) GetRoleNameEn() string {
	if x != nil {
		return x.RoleNameEn
	}
	return ""
}

func (x *RoleAndGroup) GetRoleGrade() uint32 {
	if x != nil {
		return x.RoleGrade
	}
	return 0
}

func (x *RoleAndGroup) GetRanking() uint32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *RoleAndGroup) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *RoleAndGroup) GetIsSystem() uint32 {
	if x != nil {
		return x.IsSystem
	}
	return 0
}

// 角色和权限关系数据结构(附带权限名称等信息)
type RoleAndPrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref             *RolePrivilege `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	PrivilegeNameCn string         `protobuf:"bytes,2,opt,name=privilege_name_cn,json=privilegeNameCn,proto3" json:"privilege_name_cn,omitempty"`
	PrivilegeNameEn string         `protobuf:"bytes,3,opt,name=privilege_name_en,json=privilegeNameEn,proto3" json:"privilege_name_en,omitempty"`
	RouterUri       string         `protobuf:"bytes,4,opt,name=router_uri,json=routerUri,proto3" json:"router_uri,omitempty"`
	ParentId        uint32         `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	PrivilegeType   uint32         `protobuf:"varint,6,opt,name=privilege_type,json=privilegeType,proto3" json:"privilege_type,omitempty"`
	Level           uint32         `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	Icon            string         `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`
	IsPublic        uint32         `protobuf:"varint,15,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	NeedLogin       uint32         `protobuf:"varint,16,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	NeedAuthorise   uint32         `protobuf:"varint,17,opt,name=need_authorise,json=needAuthorise,proto3" json:"need_authorise,omitempty"`
}

func (x *RoleAndPrivilege) Reset() {
	*x = RoleAndPrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleAndPrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAndPrivilege) ProtoMessage() {}

func (x *RoleAndPrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAndPrivilege.ProtoReflect.Descriptor instead.
func (*RoleAndPrivilege) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{10}
}

func (x *RoleAndPrivilege) GetRef() *RolePrivilege {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *RoleAndPrivilege) GetPrivilegeNameCn() string {
	if x != nil {
		return x.PrivilegeNameCn
	}
	return ""
}

func (x *RoleAndPrivilege) GetPrivilegeNameEn() string {
	if x != nil {
		return x.PrivilegeNameEn
	}
	return ""
}

func (x *RoleAndPrivilege) GetRouterUri() string {
	if x != nil {
		return x.RouterUri
	}
	return ""
}

func (x *RoleAndPrivilege) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *RoleAndPrivilege) GetPrivilegeType() uint32 {
	if x != nil {
		return x.PrivilegeType
	}
	return 0
}

func (x *RoleAndPrivilege) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RoleAndPrivilege) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *RoleAndPrivilege) GetIsPublic() uint32 {
	if x != nil {
		return x.IsPublic
	}
	return 0
}

func (x *RoleAndPrivilege) GetNeedLogin() uint32 {
	if x != nil {
		return x.NeedLogin
	}
	return 0
}

func (x *RoleAndPrivilege) GetNeedAuthorise() uint32 {
	if x != nil {
		return x.NeedAuthorise
	}
	return 0
}

// 添加/编辑角色请求
type HandleRoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action uint32 `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	Role   *Role  `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *HandleRoleReq) Reset() {
	*x = HandleRoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleRoleReq) ProtoMessage() {}

func (x *HandleRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleRoleReq.ProtoReflect.Descriptor instead.
func (*HandleRoleReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{11}
}

func (x *HandleRoleReq) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *HandleRoleReq) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

// 通过ID取单个角色请求
type GetRoleByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId uint32 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *GetRoleByIdReq) Reset() {
	*x = GetRoleByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleByIdReq) ProtoMessage() {}

func (x *GetRoleByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleByIdReq.ProtoReflect.Descriptor instead.
func (*GetRoleByIdReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{12}
}

func (x *GetRoleByIdReq) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

// 取单个角色返回数据结构
type GetRoleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *Role  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRoleResp) Reset() {
	*x = GetRoleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleResp) ProtoMessage() {}

func (x *GetRoleResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleResp.ProtoReflect.Descriptor instead.
func (*GetRoleResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{13}
}

func (x *GetRoleResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetRoleResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetRoleResp) GetData() *Role {
	if x != nil {
		return x.Data
	}
	return nil
}

// 取角色列表返回数据结构
type GetRoleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*Role `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRoleListResp) Reset() {
	*x = GetRoleListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleListResp) ProtoMessage() {}

func (x *GetRoleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleListResp.ProtoReflect.Descriptor instead.
func (*GetRoleListResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{14}
}

func (x *GetRoleListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetRoleListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetRoleListResp) GetData() []*Role {
	if x != nil {
		return x.Data
	}
	return nil
}

// 添加/编辑分组请求
type HandleRoleGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action uint32     `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	Group  *RoleGroup `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *HandleRoleGroupReq) Reset() {
	*x = HandleRoleGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleRoleGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleRoleGroupReq) ProtoMessage() {}

func (x *HandleRoleGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleRoleGroupReq.ProtoReflect.Descriptor instead.
func (*HandleRoleGroupReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{15}
}

func (x *HandleRoleGroupReq) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *HandleRoleGroupReq) GetGroup() *RoleGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// 取角色分组列表返回数据结构
type GetRoleGroupListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*RoleGroup `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRoleGroupListResp) Reset() {
	*x = GetRoleGroupListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleGroupListResp) ProtoMessage() {}

func (x *GetRoleGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleGroupListResp.ProtoReflect.Descriptor instead.
func (*GetRoleGroupListResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{16}
}

func (x *GetRoleGroupListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetRoleGroupListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetRoleGroupListResp) GetData() []*RoleGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

// 保存角色权限请求
type AuthorisePrivilegesToRoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId      uint32   `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	PrivilegeId []uint32 `protobuf:"varint,2,rep,packed,name=privilege_id,json=privilegeId,proto3" json:"privilege_id,omitempty"`
}

func (x *AuthorisePrivilegesToRoleReq) Reset() {
	*x = AuthorisePrivilegesToRoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorisePrivilegesToRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorisePrivilegesToRoleReq) ProtoMessage() {}

func (x *AuthorisePrivilegesToRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorisePrivilegesToRoleReq.ProtoReflect.Descriptor instead.
func (*AuthorisePrivilegesToRoleReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{17}
}

func (x *AuthorisePrivilegesToRoleReq) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *AuthorisePrivilegesToRoleReq) GetPrivilegeId() []uint32 {
	if x != nil {
		return x.PrivilegeId
	}
	return nil
}

type RoleGroupPrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rg []*RoleAndGroup     `protobuf:"bytes,1,rep,name=rg,proto3" json:"rg,omitempty"`
	Rp []*RoleAndPrivilege `protobuf:"bytes,2,rep,name=rp,proto3" json:"rp,omitempty"`
}

func (x *RoleGroupPrivilege) Reset() {
	*x = RoleGroupPrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleGroupPrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleGroupPrivilege) ProtoMessage() {}

func (x *RoleGroupPrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleGroupPrivilege.ProtoReflect.Descriptor instead.
func (*RoleGroupPrivilege) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{18}
}

func (x *RoleGroupPrivilege) GetRg() []*RoleAndGroup {
	if x != nil {
		return x.Rg
	}
	return nil
}

func (x *RoleGroupPrivilege) GetRp() []*RoleAndPrivilege {
	if x != nil {
		return x.Rp
	}
	return nil
}

// 取所有角色的权限的返回结构
type GetPrivilegesOfAllRolesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *RoleGroupPrivilege `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPrivilegesOfAllRolesResp) Reset() {
	*x = GetPrivilegesOfAllRolesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivilegesOfAllRolesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivilegesOfAllRolesResp) ProtoMessage() {}

func (x *GetPrivilegesOfAllRolesResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivilegesOfAllRolesResp.ProtoReflect.Descriptor instead.
func (*GetPrivilegesOfAllRolesResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{19}
}

func (x *GetPrivilegesOfAllRolesResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPrivilegesOfAllRolesResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetPrivilegesOfAllRolesResp) GetData() *RoleGroupPrivilege {
	if x != nil {
		return x.Data
	}
	return nil
}

// 通过角色ID取单个权限请求
type GetPrivilegesOfRoleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*RoleAndPrivilege `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPrivilegesOfRoleResp) Reset() {
	*x = GetPrivilegesOfRoleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivilegesOfRoleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivilegesOfRoleResp) ProtoMessage() {}

func (x *GetPrivilegesOfRoleResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivilegesOfRoleResp.ProtoReflect.Descriptor instead.
func (*GetPrivilegesOfRoleResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{20}
}

func (x *GetPrivilegesOfRoleResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPrivilegesOfRoleResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetPrivilegesOfRoleResp) GetData() []*RoleAndPrivilege {
	if x != nil {
		return x.Data
	}
	return nil
}

// 账号相关数据结构
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountName   string `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Password      string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	RoleId        uint32 `protobuf:"varint,4,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RoleNameCn    string `protobuf:"bytes,5,opt,name=role_name_cn,json=roleNameCn,proto3" json:"role_name_cn,omitempty"`
	RoleNameEn    string `protobuf:"bytes,6,opt,name=role_name_en,json=roleNameEn,proto3" json:"role_name_en,omitempty"`
	GroupId       uint32 `protobuf:"varint,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName     string `protobuf:"bytes,8,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	RealName      string `protobuf:"bytes,9,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Avatar        string `protobuf:"bytes,10,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Mobile        string `protobuf:"bytes,11,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email         string `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	Remarks       string `protobuf:"bytes,13,opt,name=remarks,proto3" json:"remarks,omitempty"`
	BindIp        string `protobuf:"bytes,14,opt,name=bind_ip,json=bindIp,proto3" json:"bind_ip,omitempty"`
	BindMac       string `protobuf:"bytes,15,opt,name=bind_mac,json=bindMac,proto3" json:"bind_mac,omitempty"`
	OperatorId    uint32 `protobuf:"varint,16,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorName  string `protobuf:"bytes,17,opt,name=operator_name,json=operatorName,proto3" json:"operator_name,omitempty"`
	LastLoginTime uint32 `protobuf:"varint,20,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	LastLoginIp   string `protobuf:"bytes,21,opt,name=last_login_ip,json=lastLoginIp,proto3" json:"last_login_ip,omitempty"`
	LastLoginMac  string `protobuf:"bytes,22,opt,name=last_login_mac,json=lastLoginMac,proto3" json:"last_login_mac,omitempty"`
	InitState     uint32 `protobuf:"varint,23,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	IsSystemAdmin uint32 `protobuf:"varint,24,opt,name=is_system_admin,json=isSystemAdmin,proto3" json:"is_system_admin,omitempty"`
	CreateTime    uint32 `protobuf:"varint,25,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime    uint32 `protobuf:"varint,26,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status        uint32 `protobuf:"varint,27,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{21}
}

func (x *Account) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Account) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *Account) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Account) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *Account) GetRoleNameCn() string {
	if x != nil {
		return x.RoleNameCn
	}
	return ""
}

func (x *Account) GetRoleNameEn() string {
	if x != nil {
		return x.RoleNameEn
	}
	return ""
}

func (x *Account) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Account) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Account) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *Account) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Account) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *Account) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Account) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Account) GetBindIp() string {
	if x != nil {
		return x.BindIp
	}
	return ""
}

func (x *Account) GetBindMac() string {
	if x != nil {
		return x.BindMac
	}
	return ""
}

func (x *Account) GetOperatorId() uint32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *Account) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *Account) GetLastLoginTime() uint32 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *Account) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *Account) GetLastLoginMac() string {
	if x != nil {
		return x.LastLoginMac
	}
	return ""
}

func (x *Account) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *Account) GetIsSystemAdmin() uint32 {
	if x != nil {
		return x.IsSystemAdmin
	}
	return 0
}

func (x *Account) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Account) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *Account) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 添加/编辑账号请求
type HandleAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action  uint32   `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	Account *Account `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *HandleAccountReq) Reset() {
	*x = HandleAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleAccountReq) ProtoMessage() {}

func (x *HandleAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleAccountReq.ProtoReflect.Descriptor instead.
func (*HandleAccountReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{22}
}

func (x *HandleAccountReq) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *HandleAccountReq) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

// 取单个账号返回的数据结构
type GetAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *Account `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAccountResp) Reset() {
	*x = GetAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResp) ProtoMessage() {}

func (x *GetAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResp.ProtoReflect.Descriptor instead.
func (*GetAccountResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{23}
}

func (x *GetAccountResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAccountResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAccountResp) GetData() *Account {
	if x != nil {
		return x.Data
	}
	return nil
}

// 取账号列表返回的数据结构
type GetAccountListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*Account `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAccountListResp) Reset() {
	*x = GetAccountListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountListResp) ProtoMessage() {}

func (x *GetAccountListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountListResp.ProtoReflect.Descriptor instead.
func (*GetAccountListResp) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{24}
}

func (x *GetAccountListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAccountListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAccountListResp) GetData() []*Account {
	if x != nil {
		return x.Data
	}
	return nil
}

// 通过账号ID取账号信息返回的数据结构
type GetAccountByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetAccountByIdReq) Reset() {
	*x = GetAccountByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountByIdReq) ProtoMessage() {}

func (x *GetAccountByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountByIdReq.ProtoReflect.Descriptor instead.
func (*GetAccountByIdReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{25}
}

func (x *GetAccountByIdReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

// 通过账号名取账号信息返回的数据结构
type GetAccountByNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
}

func (x *GetAccountByNameReq) Reset() {
	*x = GetAccountByNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountByNameReq) ProtoMessage() {}

func (x *GetAccountByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountByNameReq.ProtoReflect.Descriptor instead.
func (*GetAccountByNameReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{26}
}

func (x *GetAccountByNameReq) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

// 通过手机号取账号信息返回的数据结构
type GetAccountByMobileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
}

func (x *GetAccountByMobileReq) Reset() {
	*x = GetAccountByMobileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountByMobileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountByMobileReq) ProtoMessage() {}

func (x *GetAccountByMobileReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountByMobileReq.ProtoReflect.Descriptor instead.
func (*GetAccountByMobileReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{27}
}

func (x *GetAccountByMobileReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

// 通过Email取账号信息返回的数据结构
type GetAccountByEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetAccountByEmailReq) Reset() {
	*x = GetAccountByEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountByEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountByEmailReq) ProtoMessage() {}

func (x *GetAccountByEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountByEmailReq.ProtoReflect.Descriptor instead.
func (*GetAccountByEmailReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{28}
}

func (x *GetAccountByEmailReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// 通过角色ID取账号信息返回的数据结构
type GetAccountsByRoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId uint32 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *GetAccountsByRoleReq) Reset() {
	*x = GetAccountsByRoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountsByRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsByRoleReq) ProtoMessage() {}

func (x *GetAccountsByRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsByRoleReq.ProtoReflect.Descriptor instead.
func (*GetAccountsByRoleReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{29}
}

func (x *GetAccountsByRoleReq) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

// 检查某个角色是否有访问某个权限的请求
type CheckAccessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId      uint32 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	PrivilegeId uint32 `protobuf:"varint,2,opt,name=privilege_id,json=privilegeId,proto3" json:"privilege_id,omitempty"`
}

func (x *CheckAccessReq) Reset() {
	*x = CheckAccessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_adminpb_rbac_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccessReq) ProtoMessage() {}

func (x *CheckAccessReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_adminpb_rbac_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccessReq.ProtoReflect.Descriptor instead.
func (*CheckAccessReq) Descriptor() ([]byte, []int) {
	return file_pb_adminpb_rbac_proto_rawDescGZIP(), []int{30}
}

func (x *CheckAccessReq) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *CheckAccessReq) GetPrivilegeId() uint32 {
	if x != nil {
		return x.PrivilegeId
	}
	return 0
}

var File_pb_adminpb_rbac_proto protoreflect.FileDescriptor

var file_pb_adminpb_rbac_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x62, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2f, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x0c, 0x0a, 0x09, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92,
	0x41, 0x0a, 0x32, 0x08, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x49, 0x44, 0x52, 0x0b, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x10, 0x32, 0x0e, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x49,
	0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe4,
	0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x90,
	0x8d, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x6a, 0x0a,
	0x0e, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x3b, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe9, 0xa1, 0xb5,
	0xe9, 0x9d, 0xa2, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe6, 0x8c, 0x89, 0xe9, 0x92, 0xae, 0xef, 0xbc,
	0x9b, 0x33, 0x2d, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe5, 0x9d, 0x97, 0xef, 0xbc, 0x9b, 0x34,
	0x2d, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x3a, 0x01, 0x34, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x18, 0xe8,
	0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe7, 0xb1, 0xbb, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9a,
	0x84, 0xe5, 0xb1, 0x82, 0xe7, 0xba, 0xa7, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x4c, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe7, 0x9b, 0xae, 0xe6,
	0xa0, 0x87, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a,
	0x84, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12,
	0x31, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x32, 0x18, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0xe6, 0x88, 0x96, 0xe5, 0x85, 0x83,
	0xe7, 0xb4, 0xa0, 0xe7, 0x9a, 0x84, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x32, 0x57, 0xe8, 0xbf, 0x9e, 0xe6, 0x8e, 0xa5, 0xe7,
	0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d,
	0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0xaa, 0x97, 0xe5, 0x8f, 0xa3, 0xef, 0xbc, 0x9b, 0x32,
	0x2d, 0xe6, 0x96, 0xb0, 0xe7, 0xaa, 0x97, 0xe5, 0x8f, 0xa3, 0x2f, 0xe6, 0xa0, 0x87, 0xe7, 0xad,
	0xbe, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xbc, 0xb9, 0xe5, 0x87, 0xba, 0xe7, 0xaa, 0x97, 0xe5,
	0x8f, 0xa3, 0x28, 0xe6, 0x9a, 0x82, 0xe6, 0x9c, 0xaa, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x29,
	0x3a, 0x01, 0x31, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x32, 0x1a, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xef,
	0xbc, 0x9a, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x3b, 0x32, 0x2d, 0xe5, 0x90, 0xa6, 0x3a, 0x01, 0x31,
	0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x5a, 0x0a, 0x06, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x3b, 0xe8,
	0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe7, 0xba, 0xa7, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5, 0x9c, 0xa8, 0xe9, 0xa1, 0xb6,
	0xe9, 0x83, 0xa8, 0xe5, 0xaf, 0xbc, 0xe8, 0x88, 0xaa, 0xe6, 0x9d, 0xa1, 0xef, 0xbc, 0x9a, 0x31,
	0x2d, 0xe6, 0x98, 0xaf, 0x3b, 0x32, 0x2d, 0xe5, 0x90, 0xa6, 0x3a, 0x01, 0x32, 0x52, 0x05, 0x6f,
	0x6e, 0x54, 0x6f, 0x70, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0xe8, 0x8f, 0x9c, 0xe5,
	0x8d, 0x95, 0xe7, 0xba, 0xa7, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe5, 0x9c, 0xa8, 0xe5, 0x90,
	0x8c, 0xe7, 0xba, 0xa7, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe6, 0x8e, 0x92, 0xe5, 0x88, 0x97,
	0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x51, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0x8f, 0xaf, 0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x80, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a,
	0x84, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x3b,
	0x32, 0x2d, 0xe5, 0x90, 0xa6, 0x3a, 0x01, 0x32, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x12, 0x5f, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x38, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5,
	0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xef, 0xbc,
	0x9a, 0x31, 0x2d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3b, 0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9,
	0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3a, 0x01, 0x31, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x67, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d,
	0x32, 0x38, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8e,
	0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbf,
	0xe9, 0x97, 0xae, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3b, 0x32,
	0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3a, 0x01, 0x31, 0x52, 0x0d, 0x6e,
	0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a,
	0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x65, 0x92, 0x41, 0x62, 0x32, 0x5d, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5,
	0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xef, 0xbc, 0x9b, 0x32, 0x2d,
	0xe9, 0x9d, 0x9e, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8,
	0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0xe4, 0xb8, 0x93, 0xe6, 0x9c, 0x89, 0xe8,
	0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0x3a, 0x01, 0x32, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3,
	0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e,
	0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1c, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3a, 0x01, 0x31, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a, 0x12, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x84, 0x32, 0x12, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xd2, 0x01, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0xd2, 0x01, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e,
	0xd2, 0x01, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x22, 0xc7, 0x01,
	0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe6, 0xb7, 0xbb, 0xe5,
	0x8a, 0xa0, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xfa, 0x42, 0x06,
	0x2a, 0x04, 0x30, 0x02, 0x30, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x3a, 0x1a, 0x92, 0x41, 0x17,
	0x0a, 0x15, 0xd2, 0x01, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x09, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32,
	0x29, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe6,
	0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83,
	0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0xef,
	0xbc, 0x9a, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0xe5, 0x85, 0xb6,
	0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42, 0x79, 0x55,
	0x72, 0x69, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x55,
	0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x69, 0x3a, 0x0b, 0x92, 0x41, 0x08, 0x0a, 0x06, 0xd2, 0x01,
	0x03, 0x75, 0x72, 0x69, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x49, 0x44, 0x52,
	0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0xb3, 0xbb,
	0xe7, 0xbb, 0x9f, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0xe8, 0xa7, 0x92, 0xe8,
	0x89, 0xb2, 0x3a, 0x01, 0x32, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xb8, 0x07, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x49, 0x44, 0x52, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41,
	0x0b, 0x32, 0x09, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12,
	0x30, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0x8b, 0xb1, 0xe6,
	0x96, 0x87, 0xe5, 0x90, 0x8d, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8,
	0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe8,
	0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe4, 0xb8, 0xad, 0xe6, 0x96,
	0x87, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x86, 0xe7,
	0xbb, 0x84, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x69, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4a, 0x92, 0x41,
	0x47, 0x32, 0x45, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xef,
	0xbc, 0x8c, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe8, 0xb6, 0x8a, 0xe5, 0xa4, 0xa7, 0xef, 0xbc,
	0x8c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe8, 0xb6, 0x8a, 0xe5, 0xb0, 0x8f, 0xef, 0xbc, 0x88,
	0xe6, 0x9a, 0x82, 0xe6, 0x9c, 0xaa, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe5,
	0xbe, 0x85, 0xe5, 0xae, 0x9a, 0xef, 0xbc, 0x89, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0x88,
	0x97, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x68, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x41, 0xe5, 0x88, 0x9d, 0xe5, 0xa7,
	0x8b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe7, 0xb3, 0xbb, 0xe7,
	0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0xa7, 0x92, 0xe8, 0x89,
	0xb2, 0x3b, 0x32, 0x2d, 0xe9, 0x9d, 0x9e, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x3a, 0x01, 0x32, 0x52,
	0x09, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08,
	0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x26, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe4, 0xb8, 0xba, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86,
	0xe5, 0x91, 0x98, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x3b, 0x32, 0x2d, 0xe5, 0x90,
	0xa6, 0x3a, 0x01, 0x32, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x32,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c,
	0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0x92, 0x41,
	0x21, 0x32, 0x1c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3a,
	0x01, 0x31, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x34, 0x92, 0x41, 0x31, 0x0a,
	0x2f, 0xd2, 0x01, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e,
	0xd2, 0x01, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0xd2, 0x01, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e,
	0x22, 0xc3, 0x04, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x86,
	0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe8, 0xa7, 0x92, 0xe8,
	0x89, 0xb2, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90,
	0x8d, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x32, 0x15, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe8,
	0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x92,
	0xe5, 0x88, 0x97, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x68, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x41, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe7, 0xb3,
	0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0xa7, 0x92,
	0xe8, 0x89, 0xb2, 0x3b, 0x32, 0x2d, 0xe9, 0x9d, 0x9e, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5,
	0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x3a, 0x01,
	0x32, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc,
	0x9a, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x9c,
	0x89, 0xe6, 0x95, 0x88, 0x3a, 0x01, 0x31, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x15, 0x92, 0x41, 0x12, 0x0a, 0x10, 0xd2, 0x01, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x22, 0xde, 0x02, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0x85, 0xb3, 0xe7, 0xb3,
	0xbb, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8,
	0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41,
	0x0a, 0x32, 0x08, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x68, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x41, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb,
	0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2,
	0x3b, 0x32, 0x2d, 0xe9, 0x9d, 0x9e, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5,
	0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x3a, 0x01, 0x32, 0x52, 0x09,
	0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1c,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x1e, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0xd2, 0x01,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xea, 0x04, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2,
	0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xa7, 0x92, 0xe8, 0x89,
	0xb2, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe4,
	0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x90,
	0x8d, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x69, 0x0a,
	0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x32, 0x45, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0xad,
	0x89, 0xe7, 0xba, 0xa7, 0xef, 0xbc, 0x8c, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe8, 0xb6, 0x8a,
	0xe5, 0xa4, 0xa7, 0xef, 0xbc, 0x8c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe8, 0xb6, 0x8a, 0xe5,
	0xb0, 0x8f, 0xef, 0xbc, 0x88, 0xe6, 0x9a, 0x82, 0xe6, 0x9c, 0xaa, 0xe5, 0x90, 0xaf, 0xe7, 0x94,
	0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xbe, 0x85, 0xe5, 0xae, 0x9a, 0xef, 0xbc, 0x89, 0x52, 0x09, 0x72,
	0x6f, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe6, 0x8e, 0x92, 0xe5, 0x88, 0x97, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x07, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x68, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x41,
	0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x31,
	0x2d, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96,
	0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x3b, 0x32, 0x2d, 0xe9, 0x9d, 0x9e, 0xe7, 0xb3, 0xbb, 0xe7,
	0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0xa7, 0x92, 0xe8, 0x89,
	0xb2, 0x3a, 0x01, 0x32, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x26, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4,
	0xb8, 0xba, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91,
	0x98, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x3b, 0x32, 0x2d, 0xe5, 0x90, 0xa6, 0x3a,
	0x01, 0x32, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x26, 0x92, 0x41,
	0x23, 0x0a, 0x21, 0xd2, 0x01, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xd2, 0x01, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x6e, 0x22, 0xfe, 0x06, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe8, 0xa7, 0x92,
	0xe8, 0x89, 0xb2, 0xe5, 0x92, 0x8c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe5, 0x85, 0xb3, 0xe7,
	0xb3, 0xbb, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x47, 0x0a,
	0x11, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12, 0x40, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe8, 0x8b,
	0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x72,
	0x69, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe7, 0x88, 0xb6, 0xe7, 0xba,
	0xa7, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2,
	0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe6, 0x8c, 0x89, 0xe9, 0x92, 0xae, 0xef, 0xbc, 0x9b, 0x33, 0x2d,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe5, 0x9d, 0x97, 0xef, 0xbc, 0x9b, 0x34, 0x2d, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe7,
	0xb1, 0xbb, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9a, 0x84, 0xe5, 0xb1, 0x82, 0xe7, 0xba,
	0xa7, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe9, 0xa1, 0xb5,
	0xe9, 0x9d, 0xa2, 0xe6, 0x88, 0x96, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe7, 0x9a, 0x84, 0xe5,
	0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x34,
	0x92, 0x41, 0x31, 0x32, 0x2c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe5, 0x85,
	0xac, 0xe5, 0xbc, 0x80, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a, 0x84, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x3b, 0x32, 0x2d, 0xe5, 0x90,
	0xa6, 0x3a, 0x01, 0x32, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x5f,
	0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x38, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9,
	0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5, 0x90, 0x8e, 0xe6, 0x89,
	0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe9,
	0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3b, 0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6,
	0x81, 0x3a, 0x01, 0x31, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x67, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x38, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xef,
	0xbc, 0x9a, 0x31, 0x2d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3b, 0x32, 0x2d, 0xe4, 0xb8, 0x8d,
	0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3a, 0x01, 0x31, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x3a, 0x2b, 0x92, 0x41, 0x28, 0x0a, 0x26, 0xd2,
	0x01, 0x03, 0x72, 0x65, 0x66, 0xd2, 0x01, 0x11, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0xd2, 0x01, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe6,
	0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70,
	0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xa7, 0x92,
	0xe8, 0x89, 0xb2, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x3a,
	0x15, 0x92, 0x41, 0x12, 0x0a, 0x10, 0xd2, 0x01, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xd2,
	0x01, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08,
	0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x49, 0x44, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x22, 0xb4, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0xef,
	0xbc, 0x9a, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0xe5, 0x85, 0xb6,
	0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32,
	0x29, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe6,
	0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83,
	0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x92, 0x41, 0x24, 0x32,
	0x22, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a,
	0x31, 0x2d, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x02, 0x30, 0x01, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x86, 0xe7,
	0xbb, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a,
	0x16, 0x92, 0x41, 0x13, 0x0a, 0x11, 0xd2, 0x01, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xd2,
	0x01, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xc8, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e,
	0x92, 0x41, 0x2b, 0x32, 0x29, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0xef, 0xbc,
	0x9a, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0xe5, 0x85, 0xb6, 0xe5,
	0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2,
	0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xa7, 0x92, 0xe8, 0x89,
	0xb2, 0x49, 0x44, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x49, 0x44,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x49, 0x64, 0x3a, 0x1e, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0xd2, 0x01, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x02, 0x72, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6e, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe8, 0xa7, 0x92, 0xe8,
	0x89, 0xb2, 0xe5, 0x92, 0x8c, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x02, 0x72, 0x67, 0x12, 0x4a, 0x0a, 0x02, 0x72, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xa7, 0x92, 0xe8, 0x89,
	0xb2, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x02, 0x72,
	0x70, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x02, 0x72, 0x67, 0xd2, 0x01, 0x02,
	0x72, 0x70, 0x22, 0xea, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x73, 0x4f, 0x66, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0xe5, 0x85,
	0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x62, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x42, 0x29,
	0x92, 0x41, 0x26, 0x32, 0x24, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe3, 0x80, 0x81, 0xe8, 0xa7,
	0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x8f, 0x8a, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd2, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x73, 0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe6, 0x88,
	0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd,
	0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xa7, 0x92, 0xe8,
	0x89, 0xb2, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x0b, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe7, 0x99, 0xbb, 0xe5, 0xbd,
	0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x0c, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5, 0xaf, 0x86,
	0xe7, 0xa0, 0x81, 0x3a, 0x08, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x38, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8,
	0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41,
	0x0b, 0x32, 0x09, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12,
	0x30, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0x8b, 0xb1, 0xe6,
	0x96, 0x87, 0xe5, 0x90, 0x8d, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x12, 0x28, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84,
	0x49, 0x44, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5, 0xa7, 0x93,
	0xe5, 0x90, 0x8d, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6,
	0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe7, 0xae,
	0x80, 0xe4, 0xbb, 0x8b, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x2c, 0x0a,
	0x07, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x32, 0x0e, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x99, 0xbb, 0xe5, 0xbd,
	0x95, 0x49, 0x50, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x32, 0x15, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95,
	0x4d, 0x41, 0x43, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x4d,
	0x61, 0x63, 0x12, 0x37, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x9c,
	0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe4, 0xba, 0xba, 0x49, 0x44, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5,
	0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x37, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x63, 0x12, 0x62,
	0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x3b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f,
	0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x3b, 0x32, 0x2d, 0xe9,
	0x9d, 0x9e, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x3a, 0x01, 0x32, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x2b,
	0x32, 0x26, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb,
	0x9f, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe6,
	0x98, 0xaf, 0x3b, 0x32, 0x2d, 0xe5, 0x90, 0xa6, 0x3a, 0x01, 0x32, 0x52, 0x0d, 0x69, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e,
	0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x23, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0x3b, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3b, 0x32, 0x2d, 0xe9, 0x94, 0x81, 0xe5,
	0xae, 0x9a, 0x3a, 0x01, 0x31, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x2d, 0x92,
	0x41, 0x2a, 0x0a, 0x28, 0xd2, 0x01, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0xd2, 0x01, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0c,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x22, 0xbd, 0x01, 0x0a,
	0x10, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x30, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xef,
	0xbc, 0x9b, 0x32, 0x2d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30,
	0x02, 0x30, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x3a, 0x18, 0x92, 0x41, 0x15, 0x0a, 0x13, 0xd2, 0x01, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0xd2, 0x01, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xba, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92,
	0x41, 0x2b, 0x32, 0x29, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x9a,
	0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0xe5, 0x85, 0xb6, 0xe5, 0xae,
	0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f,
	0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e,
	0x92, 0x41, 0x2b, 0x32, 0x29, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0xef, 0xbc,
	0x9a, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0xe5, 0x85, 0xb6, 0xe5,
	0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x33, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7,
	0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x3a, 0x12, 0x92, 0x41, 0x0f, 0x0a, 0x0d, 0xd2, 0x01, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe7, 0x99, 0xbb, 0xe5,
	0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a,
	0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f, 0xd2, 0x01, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x30,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0,
	0x81, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x22, 0x4f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82,
	0xae, 0xe7, 0xae, 0xb1, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2,
	0x01, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x07,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92,
	0x41, 0x0a, 0x32, 0x08, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x49, 0x44,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x49, 0x64, 0x3a, 0x1e, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0xd2, 0x01, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x5a, 0x12, 0x70, 0x62, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x70, 0x62, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pb_adminpb_rbac_proto_rawDescOnce sync.Once
	file_pb_adminpb_rbac_proto_rawDescData = file_pb_adminpb_rbac_proto_rawDesc
)

func file_pb_adminpb_rbac_proto_rawDescGZIP() []byte {
	file_pb_adminpb_rbac_proto_rawDescOnce.Do(func() {
		file_pb_adminpb_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_adminpb_rbac_proto_rawDescData)
	})
	return file_pb_adminpb_rbac_proto_rawDescData
}

var file_pb_adminpb_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_pb_adminpb_rbac_proto_goTypes = []interface{}{
	(*Privilege)(nil),                    // 0: daop.pb.adminpb.Privilege
	(*HandlePrivilegeReq)(nil),           // 1: daop.pb.adminpb.HandlePrivilegeReq
	(*GetPrivilegeResp)(nil),             // 2: daop.pb.adminpb.GetPrivilegeResp
	(*GetPrivilegeListResp)(nil),         // 3: daop.pb.adminpb.GetPrivilegeListResp
	(*GetPrivilegeByUriReq)(nil),         // 4: daop.pb.adminpb.GetPrivilegeByUriReq
	(*GetPrivilegesOfRoleReq)(nil),       // 5: daop.pb.adminpb.GetPrivilegesOfRoleReq
	(*Role)(nil),                         // 6: daop.pb.adminpb.Role
	(*RoleGroup)(nil),                    // 7: daop.pb.adminpb.RoleGroup
	(*RolePrivilege)(nil),                // 8: daop.pb.adminpb.RolePrivilege
	(*RoleAndGroup)(nil),                 // 9: daop.pb.adminpb.RoleAndGroup
	(*RoleAndPrivilege)(nil),             // 10: daop.pb.adminpb.RoleAndPrivilege
	(*HandleRoleReq)(nil),                // 11: daop.pb.adminpb.HandleRoleReq
	(*GetRoleByIdReq)(nil),               // 12: daop.pb.adminpb.GetRoleByIdReq
	(*GetRoleResp)(nil),                  // 13: daop.pb.adminpb.GetRoleResp
	(*GetRoleListResp)(nil),              // 14: daop.pb.adminpb.GetRoleListResp
	(*HandleRoleGroupReq)(nil),           // 15: daop.pb.adminpb.HandleRoleGroupReq
	(*GetRoleGroupListResp)(nil),         // 16: daop.pb.adminpb.GetRoleGroupListResp
	(*AuthorisePrivilegesToRoleReq)(nil), // 17: daop.pb.adminpb.AuthorisePrivilegesToRoleReq
	(*RoleGroupPrivilege)(nil),           // 18: daop.pb.adminpb.RoleGroupPrivilege
	(*GetPrivilegesOfAllRolesResp)(nil),  // 19: daop.pb.adminpb.GetPrivilegesOfAllRolesResp
	(*GetPrivilegesOfRoleResp)(nil),      // 20: daop.pb.adminpb.GetPrivilegesOfRoleResp
	(*Account)(nil),                      // 21: daop.pb.adminpb.Account
	(*HandleAccountReq)(nil),             // 22: daop.pb.adminpb.HandleAccountReq
	(*GetAccountResp)(nil),               // 23: daop.pb.adminpb.GetAccountResp
	(*GetAccountListResp)(nil),           // 24: daop.pb.adminpb.GetAccountListResp
	(*GetAccountByIdReq)(nil),            // 25: daop.pb.adminpb.GetAccountByIdReq
	(*GetAccountByNameReq)(nil),          // 26: daop.pb.adminpb.GetAccountByNameReq
	(*GetAccountByMobileReq)(nil),        // 27: daop.pb.adminpb.GetAccountByMobileReq
	(*GetAccountByEmailReq)(nil),         // 28: daop.pb.adminpb.GetAccountByEmailReq
	(*GetAccountsByRoleReq)(nil),         // 29: daop.pb.adminpb.GetAccountsByRoleReq
	(*CheckAccessReq)(nil),               // 30: daop.pb.adminpb.CheckAccessReq
}
var file_pb_adminpb_rbac_proto_depIdxs = []int32{
	0,  // 0: daop.pb.adminpb.HandlePrivilegeReq.privilege:type_name -> daop.pb.adminpb.Privilege
	0,  // 1: daop.pb.adminpb.GetPrivilegeResp.data:type_name -> daop.pb.adminpb.Privilege
	0,  // 2: daop.pb.adminpb.GetPrivilegeListResp.data:type_name -> daop.pb.adminpb.Privilege
	7,  // 3: daop.pb.adminpb.RoleAndGroup.group:type_name -> daop.pb.adminpb.RoleGroup
	8,  // 4: daop.pb.adminpb.RoleAndPrivilege.ref:type_name -> daop.pb.adminpb.RolePrivilege
	6,  // 5: daop.pb.adminpb.HandleRoleReq.role:type_name -> daop.pb.adminpb.Role
	6,  // 6: daop.pb.adminpb.GetRoleResp.data:type_name -> daop.pb.adminpb.Role
	6,  // 7: daop.pb.adminpb.GetRoleListResp.data:type_name -> daop.pb.adminpb.Role
	7,  // 8: daop.pb.adminpb.HandleRoleGroupReq.group:type_name -> daop.pb.adminpb.RoleGroup
	7,  // 9: daop.pb.adminpb.GetRoleGroupListResp.data:type_name -> daop.pb.adminpb.RoleGroup
	9,  // 10: daop.pb.adminpb.RoleGroupPrivilege.rg:type_name -> daop.pb.adminpb.RoleAndGroup
	10, // 11: daop.pb.adminpb.RoleGroupPrivilege.rp:type_name -> daop.pb.adminpb.RoleAndPrivilege
	18, // 12: daop.pb.adminpb.GetPrivilegesOfAllRolesResp.data:type_name -> daop.pb.adminpb.RoleGroupPrivilege
	10, // 13: daop.pb.adminpb.GetPrivilegesOfRoleResp.data:type_name -> daop.pb.adminpb.RoleAndPrivilege
	21, // 14: daop.pb.adminpb.HandleAccountReq.account:type_name -> daop.pb.adminpb.Account
	21, // 15: daop.pb.adminpb.GetAccountResp.data:type_name -> daop.pb.adminpb.Account
	21, // 16: daop.pb.adminpb.GetAccountListResp.data:type_name -> daop.pb.adminpb.Account
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_pb_adminpb_rbac_proto_init() }
func file_pb_adminpb_rbac_proto_init() {
	if File_pb_adminpb_rbac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_adminpb_rbac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Privilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlePrivilegeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivilegeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivilegeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivilegeByUriReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivilegesOfRoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolePrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleAndGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleAndPrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleRoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleRoleGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleGroupListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorisePrivilegesToRoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleGroupPrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivilegesOfAllRolesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivilegesOfRoleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountByNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountByMobileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountByEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountsByRoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_adminpb_rbac_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_adminpb_rbac_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_adminpb_rbac_proto_goTypes,
		DependencyIndexes: file_pb_adminpb_rbac_proto_depIdxs,
		MessageInfos:      file_pb_adminpb_rbac_proto_msgTypes,
	}.Build()
	File_pb_adminpb_rbac_proto = out.File
	file_pb_adminpb_rbac_proto_rawDesc = nil
	file_pb_adminpb_rbac_proto_goTypes = nil
	file_pb_adminpb_rbac_proto_depIdxs = nil
}
