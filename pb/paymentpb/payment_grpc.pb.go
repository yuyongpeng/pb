// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/paymentpb/payment.proto

package paymentpb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PaymentService_MerchantDetail_FullMethodName     = "/daop.pb.paymentpb.PaymentService/MerchantDetail"
	PaymentService_MerchantList_FullMethodName       = "/daop.pb.paymentpb.PaymentService/MerchantList"
	PaymentService_MerchantApply_FullMethodName      = "/daop.pb.paymentpb.PaymentService/MerchantApply"
	PaymentService_MerchantApplyQuery_FullMethodName = "/daop.pb.paymentpb.PaymentService/MerchantApplyQuery"
	PaymentService_Notify_FullMethodName             = "/daop.pb.paymentpb.PaymentService/Notify"
	PaymentService_Pay_FullMethodName                = "/daop.pb.paymentpb.PaymentService/Pay"
	PaymentService_PayQuery_FullMethodName           = "/daop.pb.paymentpb.PaymentService/PayQuery"
	PaymentService_Refund_FullMethodName             = "/daop.pb.paymentpb.PaymentService/Refund"
	PaymentService_RefundQuery_FullMethodName        = "/daop.pb.paymentpb.PaymentService/RefundQuery"
	PaymentService_AmtSettle_FullMethodName          = "/daop.pb.paymentpb.PaymentService/AmtSettle"
	PaymentService_OrderSettle_FullMethodName        = "/daop.pb.paymentpb.PaymentService/OrderSettle"
	PaymentService_OrderSettleQuery_FullMethodName   = "/daop.pb.paymentpb.PaymentService/OrderSettleQuery"
	PaymentService_BillQuery_FullMethodName          = "/daop.pb.paymentpb.PaymentService/BillQuery"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	// MerchantDetail 获取支付商户详情
	MerchantDetail(ctx context.Context, in *MerchantDetailIn, opts ...grpc.CallOption) (*MerchantDetailOut, error)
	// MerchantList 支付商户列表
	MerchantList(ctx context.Context, in *MerchantListIn, opts ...grpc.CallOption) (*MerchantListOut, error)
	// MerchantApply 商户进件
	MerchantApply(ctx context.Context, in *MerchantApplyIn, opts ...grpc.CallOption) (*MerchantApplyOut, error)
	// MerchantApplyQuery 商户进件查询
	MerchantApplyQuery(ctx context.Context, in *MerchantApplyQueryIn, opts ...grpc.CallOption) (*MerchantApplyQueryOut, error)
	// Notify 支付通道通知
	Notify(ctx context.Context, in *NotifyIn, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Pay 支付
	Pay(ctx context.Context, in *PayIn, opts ...grpc.CallOption) (*PayOut, error)
	// PayQuery 支付查询
	PayQuery(ctx context.Context, in *PayQueryIn, opts ...grpc.CallOption) (*PayQueryOut, error)
	// Refund 退款
	Refund(ctx context.Context, in *RefundIn, opts ...grpc.CallOption) (*RefundOut, error)
	// RefundQuery 退款查询
	RefundQuery(ctx context.Context, in *RefundQueryIn, opts ...grpc.CallOption) (*RefundQueryOut, error)
	// AmtSettle 资金结算
	AmtSettle(ctx context.Context, in *AmtSettleIn, opts ...grpc.CallOption) (*AmtSettleOut, error)
	// OrderSettle 订单结算
	OrderSettle(ctx context.Context, in *OrderSettleIn, opts ...grpc.CallOption) (*OrderSettleOut, error)
	// OrderSettleQuery 订单结算查询
	OrderSettleQuery(ctx context.Context, in *OrderSettleQueryIn, opts ...grpc.CallOption) (*OrderSettleQueryOut, error)
	// BillQuery 查询账单下载地址
	BillQuery(ctx context.Context, in *BillQueryIn, opts ...grpc.CallOption) (*BillQueryOut, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) MerchantDetail(ctx context.Context, in *MerchantDetailIn, opts ...grpc.CallOption) (*MerchantDetailOut, error) {
	out := new(MerchantDetailOut)
	err := c.cc.Invoke(ctx, PaymentService_MerchantDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) MerchantList(ctx context.Context, in *MerchantListIn, opts ...grpc.CallOption) (*MerchantListOut, error) {
	out := new(MerchantListOut)
	err := c.cc.Invoke(ctx, PaymentService_MerchantList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) MerchantApply(ctx context.Context, in *MerchantApplyIn, opts ...grpc.CallOption) (*MerchantApplyOut, error) {
	out := new(MerchantApplyOut)
	err := c.cc.Invoke(ctx, PaymentService_MerchantApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) MerchantApplyQuery(ctx context.Context, in *MerchantApplyQueryIn, opts ...grpc.CallOption) (*MerchantApplyQueryOut, error) {
	out := new(MerchantApplyQueryOut)
	err := c.cc.Invoke(ctx, PaymentService_MerchantApplyQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Notify(ctx context.Context, in *NotifyIn, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, PaymentService_Notify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Pay(ctx context.Context, in *PayIn, opts ...grpc.CallOption) (*PayOut, error) {
	out := new(PayOut)
	err := c.cc.Invoke(ctx, PaymentService_Pay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) PayQuery(ctx context.Context, in *PayQueryIn, opts ...grpc.CallOption) (*PayQueryOut, error) {
	out := new(PayQueryOut)
	err := c.cc.Invoke(ctx, PaymentService_PayQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Refund(ctx context.Context, in *RefundIn, opts ...grpc.CallOption) (*RefundOut, error) {
	out := new(RefundOut)
	err := c.cc.Invoke(ctx, PaymentService_Refund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RefundQuery(ctx context.Context, in *RefundQueryIn, opts ...grpc.CallOption) (*RefundQueryOut, error) {
	out := new(RefundQueryOut)
	err := c.cc.Invoke(ctx, PaymentService_RefundQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) AmtSettle(ctx context.Context, in *AmtSettleIn, opts ...grpc.CallOption) (*AmtSettleOut, error) {
	out := new(AmtSettleOut)
	err := c.cc.Invoke(ctx, PaymentService_AmtSettle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) OrderSettle(ctx context.Context, in *OrderSettleIn, opts ...grpc.CallOption) (*OrderSettleOut, error) {
	out := new(OrderSettleOut)
	err := c.cc.Invoke(ctx, PaymentService_OrderSettle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) OrderSettleQuery(ctx context.Context, in *OrderSettleQueryIn, opts ...grpc.CallOption) (*OrderSettleQueryOut, error) {
	out := new(OrderSettleQueryOut)
	err := c.cc.Invoke(ctx, PaymentService_OrderSettleQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) BillQuery(ctx context.Context, in *BillQueryIn, opts ...grpc.CallOption) (*BillQueryOut, error) {
	out := new(BillQueryOut)
	err := c.cc.Invoke(ctx, PaymentService_BillQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations should embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	// MerchantDetail 获取支付商户详情
	MerchantDetail(context.Context, *MerchantDetailIn) (*MerchantDetailOut, error)
	// MerchantList 支付商户列表
	MerchantList(context.Context, *MerchantListIn) (*MerchantListOut, error)
	// MerchantApply 商户进件
	MerchantApply(context.Context, *MerchantApplyIn) (*MerchantApplyOut, error)
	// MerchantApplyQuery 商户进件查询
	MerchantApplyQuery(context.Context, *MerchantApplyQueryIn) (*MerchantApplyQueryOut, error)
	// Notify 支付通道通知
	Notify(context.Context, *NotifyIn) (*httpbody.HttpBody, error)
	// Pay 支付
	Pay(context.Context, *PayIn) (*PayOut, error)
	// PayQuery 支付查询
	PayQuery(context.Context, *PayQueryIn) (*PayQueryOut, error)
	// Refund 退款
	Refund(context.Context, *RefundIn) (*RefundOut, error)
	// RefundQuery 退款查询
	RefundQuery(context.Context, *RefundQueryIn) (*RefundQueryOut, error)
	// AmtSettle 资金结算
	AmtSettle(context.Context, *AmtSettleIn) (*AmtSettleOut, error)
	// OrderSettle 订单结算
	OrderSettle(context.Context, *OrderSettleIn) (*OrderSettleOut, error)
	// OrderSettleQuery 订单结算查询
	OrderSettleQuery(context.Context, *OrderSettleQueryIn) (*OrderSettleQueryOut, error)
	// BillQuery 查询账单下载地址
	BillQuery(context.Context, *BillQueryIn) (*BillQueryOut, error)
}

// UnimplementedPaymentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) MerchantDetail(context.Context, *MerchantDetailIn) (*MerchantDetailOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantDetail not implemented")
}
func (UnimplementedPaymentServiceServer) MerchantList(context.Context, *MerchantListIn) (*MerchantListOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantList not implemented")
}
func (UnimplementedPaymentServiceServer) MerchantApply(context.Context, *MerchantApplyIn) (*MerchantApplyOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantApply not implemented")
}
func (UnimplementedPaymentServiceServer) MerchantApplyQuery(context.Context, *MerchantApplyQueryIn) (*MerchantApplyQueryOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantApplyQuery not implemented")
}
func (UnimplementedPaymentServiceServer) Notify(context.Context, *NotifyIn) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedPaymentServiceServer) Pay(context.Context, *PayIn) (*PayOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedPaymentServiceServer) PayQuery(context.Context, *PayQueryIn) (*PayQueryOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayQuery not implemented")
}
func (UnimplementedPaymentServiceServer) Refund(context.Context, *RefundIn) (*RefundOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}
func (UnimplementedPaymentServiceServer) RefundQuery(context.Context, *RefundQueryIn) (*RefundQueryOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundQuery not implemented")
}
func (UnimplementedPaymentServiceServer) AmtSettle(context.Context, *AmtSettleIn) (*AmtSettleOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmtSettle not implemented")
}
func (UnimplementedPaymentServiceServer) OrderSettle(context.Context, *OrderSettleIn) (*OrderSettleOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderSettle not implemented")
}
func (UnimplementedPaymentServiceServer) OrderSettleQuery(context.Context, *OrderSettleQueryIn) (*OrderSettleQueryOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderSettleQuery not implemented")
}
func (UnimplementedPaymentServiceServer) BillQuery(context.Context, *BillQueryIn) (*BillQueryOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BillQuery not implemented")
}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_MerchantDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantDetailIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).MerchantDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_MerchantDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).MerchantDetail(ctx, req.(*MerchantDetailIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_MerchantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantListIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).MerchantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_MerchantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).MerchantList(ctx, req.(*MerchantListIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_MerchantApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantApplyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).MerchantApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_MerchantApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).MerchantApply(ctx, req.(*MerchantApplyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_MerchantApplyQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantApplyQueryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).MerchantApplyQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_MerchantApplyQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).MerchantApplyQuery(ctx, req.(*MerchantApplyQueryIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Notify(ctx, req.(*NotifyIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_Pay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Pay(ctx, req.(*PayIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_PayQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayQueryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PayQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_PayQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PayQuery(ctx, req.(*PayQueryIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_Refund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Refund(ctx, req.(*RefundIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RefundQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundQueryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RefundQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_RefundQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RefundQuery(ctx, req.(*RefundQueryIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_AmtSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmtSettleIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AmtSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_AmtSettle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AmtSettle(ctx, req.(*AmtSettleIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_OrderSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSettleIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).OrderSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_OrderSettle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).OrderSettle(ctx, req.(*OrderSettleIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_OrderSettleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSettleQueryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).OrderSettleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_OrderSettleQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).OrderSettleQuery(ctx, req.(*OrderSettleQueryIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_BillQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillQueryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).BillQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_BillQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).BillQuery(ctx, req.(*BillQueryIn))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daop.pb.paymentpb.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MerchantDetail",
			Handler:    _PaymentService_MerchantDetail_Handler,
		},
		{
			MethodName: "MerchantList",
			Handler:    _PaymentService_MerchantList_Handler,
		},
		{
			MethodName: "MerchantApply",
			Handler:    _PaymentService_MerchantApply_Handler,
		},
		{
			MethodName: "MerchantApplyQuery",
			Handler:    _PaymentService_MerchantApplyQuery_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _PaymentService_Notify_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _PaymentService_Pay_Handler,
		},
		{
			MethodName: "PayQuery",
			Handler:    _PaymentService_PayQuery_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _PaymentService_Refund_Handler,
		},
		{
			MethodName: "RefundQuery",
			Handler:    _PaymentService_RefundQuery_Handler,
		},
		{
			MethodName: "AmtSettle",
			Handler:    _PaymentService_AmtSettle_Handler,
		},
		{
			MethodName: "OrderSettle",
			Handler:    _PaymentService_OrderSettle_Handler,
		},
		{
			MethodName: "OrderSettleQuery",
			Handler:    _PaymentService_OrderSettleQuery_Handler,
		},
		{
			MethodName: "BillQuery",
			Handler:    _PaymentService_BillQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/paymentpb/payment.proto",
}
