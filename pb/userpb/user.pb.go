// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/userpb/user.proto

package userpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Code     uint32 `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *RegisterReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterReq) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type AuthLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Sign    string `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	Nonce   string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *AuthLoginReq) Reset() {
	*x = AuthLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthLoginReq) ProtoMessage() {}

func (x *AuthLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthLoginReq.ProtoReflect.Descriptor instead.
func (*AuthLoginReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{1}
}

func (x *AuthLoginReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AuthLoginReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *AuthLoginReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Type     uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Code     uint32 `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{2}
}

func (x *LoginReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LoginReq) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *LoginResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{3}
}

func (x *LoginResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LoginResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LoginResp) GetData() *LoginResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type BindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Code    uint32 `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *BindReq) Reset() {
	*x = BindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindReq) ProtoMessage() {}

func (x *BindReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindReq.ProtoReflect.Descriptor instead.
func (*BindReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{4}
}

func (x *BindReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *BindReq) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type ChangePwdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPassword string `protobuf:"bytes,1,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ChangePwdReq) Reset() {
	*x = ChangePwdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePwdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePwdReq) ProtoMessage() {}

func (x *ChangePwdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePwdReq.ProtoReflect.Descriptor instead.
func (*ChangePwdReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{5}
}

func (x *ChangePwdReq) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePwdReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SendSetPwdCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeType   uint32 `protobuf:"varint,1,opt,name=code_type,json=codeType,proto3" json:"code_type,omitempty"`
	SourceType uint32 `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
}

func (x *SendSetPwdCodeReq) Reset() {
	*x = SendSetPwdCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSetPwdCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSetPwdCodeReq) ProtoMessage() {}

func (x *SendSetPwdCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSetPwdCodeReq.ProtoReflect.Descriptor instead.
func (*SendSetPwdCodeReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{6}
}

func (x *SendSetPwdCodeReq) GetCodeType() uint32 {
	if x != nil {
		return x.CodeType
	}
	return 0
}

func (x *SendSetPwdCodeReq) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

type SetPwdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	CodeType uint32 `protobuf:"varint,2,opt,name=code_type,json=codeType,proto3" json:"code_type,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SetPwdReq) Reset() {
	*x = SetPwdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPwdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPwdReq) ProtoMessage() {}

func (x *SetPwdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPwdReq.ProtoReflect.Descriptor instead.
func (*SetPwdReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{7}
}

func (x *SetPwdReq) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetPwdReq) GetCodeType() uint32 {
	if x != nil {
		return x.CodeType
	}
	return 0
}

func (x *SetPwdReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ForgetPwdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Code     uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ForgetPwdReq) Reset() {
	*x = ForgetPwdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForgetPwdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgetPwdReq) ProtoMessage() {}

func (x *ForgetPwdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgetPwdReq.ProtoReflect.Descriptor instead.
func (*ForgetPwdReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{8}
}

func (x *ForgetPwdReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ForgetPwdReq) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ForgetPwdReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AdminSetPwdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Password  string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AdminSetPwdReq) Reset() {
	*x = AdminSetPwdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminSetPwdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminSetPwdReq) ProtoMessage() {}

func (x *AdminSetPwdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminSetPwdReq.ProtoReflect.Descriptor instead.
func (*AdminSetPwdReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{9}
}

func (x *AdminSetPwdReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AdminSetPwdReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ChangeStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChangeStatusReq) Reset() {
	*x = ChangeStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeStatusReq) ProtoMessage() {}

func (x *ChangeStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeStatusReq.ProtoReflect.Descriptor instead.
func (*ChangeStatusReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{10}
}

func (x *ChangeStatusReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChangeStatusReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ChangeCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Credential string `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *ChangeCredential) Reset() {
	*x = ChangeCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeCredential) ProtoMessage() {}

func (x *ChangeCredential) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeCredential.ProtoReflect.Descriptor instead.
func (*ChangeCredential) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{11}
}

func (x *ChangeCredential) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ChangeCredential) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

type RealNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountType     uint32         `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	RealName        string         `protobuf:"bytes,2,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	ShortName       string         `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	IdNo            string         `protobuf:"bytes,4,opt,name=id_no,json=idNo,proto3" json:"id_no,omitempty"`
	IdPhone         string         `protobuf:"bytes,5,opt,name=id_phone,json=idPhone,proto3" json:"id_phone,omitempty"`
	IdPhoneCode     uint32         `protobuf:"varint,6,opt,name=id_phone_code,json=idPhoneCode,proto3" json:"id_phone_code,omitempty"`
	IdPicFront      string         `protobuf:"bytes,7,opt,name=id_pic_front,json=idPicFront,proto3" json:"id_pic_front,omitempty"`
	IdPicBack       string         `protobuf:"bytes,8,opt,name=id_pic_back,json=idPicBack,proto3" json:"id_pic_back,omitempty"`
	IdPicHand       string         `protobuf:"bytes,9,opt,name=id_pic_hand,json=idPicHand,proto3" json:"id_pic_hand,omitempty"`
	LicenseNo       string         `protobuf:"bytes,10,opt,name=license_no,json=licenseNo,proto3" json:"license_no,omitempty"`
	LicensePic      string         `protobuf:"bytes,11,opt,name=license_pic,json=licensePic,proto3" json:"license_pic,omitempty"`
	LegalPersonName string         `protobuf:"bytes,12,opt,name=legal_person_name,json=legalPersonName,proto3" json:"legal_person_name,omitempty"`
	ContactName     string         `protobuf:"bytes,13,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	ContactPhone    string         `protobuf:"bytes,14,opt,name=contact_phone,json=contactPhone,proto3" json:"contact_phone,omitempty"`
	ContactAddress  string         `protobuf:"bytes,15,opt,name=contact_address,json=contactAddress,proto3" json:"contact_address,omitempty"`
	Logo            string         `protobuf:"bytes,16,opt,name=logo,proto3" json:"logo,omitempty"`
	Claim           *RealNameClaim `protobuf:"bytes,17,opt,name=claim,proto3" json:"claim,omitempty"`
	DeveloperFlag   bool           `protobuf:"varint,20,opt,name=developer_flag,json=developerFlag,proto3" json:"developer_flag,omitempty"` // 是否申请成为开发者
}

func (x *RealNameReq) Reset() {
	*x = RealNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealNameReq) ProtoMessage() {}

func (x *RealNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealNameReq.ProtoReflect.Descriptor instead.
func (*RealNameReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{12}
}

func (x *RealNameReq) GetAccountType() uint32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *RealNameReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *RealNameReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *RealNameReq) GetIdNo() string {
	if x != nil {
		return x.IdNo
	}
	return ""
}

func (x *RealNameReq) GetIdPhone() string {
	if x != nil {
		return x.IdPhone
	}
	return ""
}

func (x *RealNameReq) GetIdPhoneCode() uint32 {
	if x != nil {
		return x.IdPhoneCode
	}
	return 0
}

func (x *RealNameReq) GetIdPicFront() string {
	if x != nil {
		return x.IdPicFront
	}
	return ""
}

func (x *RealNameReq) GetIdPicBack() string {
	if x != nil {
		return x.IdPicBack
	}
	return ""
}

func (x *RealNameReq) GetIdPicHand() string {
	if x != nil {
		return x.IdPicHand
	}
	return ""
}

func (x *RealNameReq) GetLicenseNo() string {
	if x != nil {
		return x.LicenseNo
	}
	return ""
}

func (x *RealNameReq) GetLicensePic() string {
	if x != nil {
		return x.LicensePic
	}
	return ""
}

func (x *RealNameReq) GetLegalPersonName() string {
	if x != nil {
		return x.LegalPersonName
	}
	return ""
}

func (x *RealNameReq) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *RealNameReq) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *RealNameReq) GetContactAddress() string {
	if x != nil {
		return x.ContactAddress
	}
	return ""
}

func (x *RealNameReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *RealNameReq) GetClaim() *RealNameClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *RealNameReq) GetDeveloperFlag() bool {
	if x != nil {
		return x.DeveloperFlag
	}
	return false
}

type RealNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *RealNameResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RealNameResp) Reset() {
	*x = RealNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealNameResp) ProtoMessage() {}

func (x *RealNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealNameResp.ProtoReflect.Descriptor instead.
func (*RealNameResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{13}
}

func (x *RealNameResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RealNameResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RealNameResp) GetData() *RealNameResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type RealNameClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidType     string `protobuf:"bytes,1,opt,name=did_type,json=didType,proto3" json:"did_type,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Profile     string `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	Address     string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	DeclareTime string `protobuf:"bytes,5,opt,name=declare_time,json=declareTime,proto3" json:"declare_time,omitempty"`
	Extension   string `protobuf:"bytes,6,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RealNameClaim) Reset() {
	*x = RealNameClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealNameClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealNameClaim) ProtoMessage() {}

func (x *RealNameClaim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealNameClaim.ProtoReflect.Descriptor instead.
func (*RealNameClaim) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{14}
}

func (x *RealNameClaim) GetDidType() string {
	if x != nil {
		return x.DidType
	}
	return ""
}

func (x *RealNameClaim) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RealNameClaim) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *RealNameClaim) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RealNameClaim) GetDeclareTime() string {
	if x != nil {
		return x.DeclareTime
	}
	return ""
}

func (x *RealNameClaim) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type UserServiceBaseListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds string `protobuf:"bytes,1,opt,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	IsAll   bool   `protobuf:"varint,2,opt,name=is_all,json=isAll,proto3" json:"is_all,omitempty"`
	Page    uint32 `protobuf:"varint,11,opt,name=page,proto3" json:"page,omitempty"`
	Limit   uint32 `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UserServiceBaseListReq) Reset() {
	*x = UserServiceBaseListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserServiceBaseListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServiceBaseListReq) ProtoMessage() {}

func (x *UserServiceBaseListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServiceBaseListReq.ProtoReflect.Descriptor instead.
func (*UserServiceBaseListReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{15}
}

func (x *UserServiceBaseListReq) GetUserIds() string {
	if x != nil {
		return x.UserIds
	}
	return ""
}

func (x *UserServiceBaseListReq) GetIsAll() bool {
	if x != nil {
		return x.IsAll
	}
	return false
}

func (x *UserServiceBaseListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserServiceBaseListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UserServiceBaseListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserServiceBaseListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserServiceBaseListResp) Reset() {
	*x = UserServiceBaseListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserServiceBaseListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServiceBaseListResp) ProtoMessage() {}

func (x *UserServiceBaseListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServiceBaseListResp.ProtoReflect.Descriptor instead.
func (*UserServiceBaseListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{16}
}

func (x *UserServiceBaseListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserServiceBaseListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserServiceBaseListResp) GetData() *UserServiceBaseListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserListResp) Reset() {
	*x = UserListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListResp) ProtoMessage() {}

func (x *UserListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListResp.ProtoReflect.Descriptor instead.
func (*UserListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{17}
}

func (x *UserListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserListResp) GetData() *UserListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId             uint32                 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountType           uint32                 `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	UserId                uint32                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppNo                 string                 `protobuf:"bytes,4,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	Mobile                string                 `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email                 string                 `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	RealName              string                 `protobuf:"bytes,7,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	ShortName             string                 `protobuf:"bytes,8,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	CertifyApplyTime      uint32                 `protobuf:"varint,9,opt,name=certify_apply_time,json=certifyApplyTime,proto3" json:"certify_apply_time,omitempty"`
	CertifyAuditTime      uint32                 `protobuf:"varint,10,opt,name=certify_audit_time,json=certifyAuditTime,proto3" json:"certify_audit_time,omitempty"`
	CertifyAuditStatus    uint32                 `protobuf:"varint,11,opt,name=certify_audit_status,json=certifyAuditStatus,proto3" json:"certify_audit_status,omitempty"`
	CertifyRejectReason   string                 `protobuf:"bytes,12,opt,name=certify_reject_reason,json=certifyRejectReason,proto3" json:"certify_reject_reason,omitempty"`
	CreatorApplyTime      uint32                 `protobuf:"varint,13,opt,name=creator_apply_time,json=creatorApplyTime,proto3" json:"creator_apply_time,omitempty"`
	CreatorAuditTime      uint32                 `protobuf:"varint,14,opt,name=creator_audit_time,json=creatorAuditTime,proto3" json:"creator_audit_time,omitempty"`
	CreatorAuditStatus    uint32                 `protobuf:"varint,15,opt,name=creator_audit_status,json=creatorAuditStatus,proto3" json:"creator_audit_status,omitempty"`
	CreatorRejectReason   string                 `protobuf:"bytes,16,opt,name=creator_reject_reason,json=creatorRejectReason,proto3" json:"creator_reject_reason,omitempty"`
	MerchantStatus        uint32                 `protobuf:"varint,17,opt,name=merchant_status,json=merchantStatus,proto3" json:"merchant_status,omitempty"`
	ChainStatus           uint32                 `protobuf:"varint,18,opt,name=chain_status,json=chainStatus,proto3" json:"chain_status,omitempty"`
	ChainTime             uint32                 `protobuf:"varint,19,opt,name=chain_time,json=chainTime,proto3" json:"chain_time,omitempty"`
	ChainFailedReason     string                 `protobuf:"bytes,20,opt,name=chain_failed_reason,json=chainFailedReason,proto3" json:"chain_failed_reason,omitempty"`
	UserAddress           string                 `protobuf:"bytes,21,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	UserPrivateKey        string                 `protobuf:"bytes,22,opt,name=user_private_key,json=userPrivateKey,proto3" json:"user_private_key,omitempty"`
	Credential            string                 `protobuf:"bytes,23,opt,name=credential,proto3" json:"credential,omitempty"`
	AccountStatus         uint32                 `protobuf:"varint,24,opt,name=account_status,json=accountStatus,proto3" json:"account_status,omitempty"`
	UserStatus            uint32                 `protobuf:"varint,25,opt,name=user_status,json=userStatus,proto3" json:"user_status,omitempty"`
	CreateTime            uint32                 `protobuf:"varint,28,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UserCertificationInfo *UserCertificationInfo `protobuf:"bytes,29,opt,name=user_certification_info,json=userCertificationInfo,proto3" json:"user_certification_info,omitempty"`
	Claim                 *RealNameClaim         `protobuf:"bytes,30,opt,name=claim,proto3" json:"claim,omitempty"`
	DeveloperAuditStatus  uint32                 `protobuf:"varint,31,opt,name=developer_audit_status,json=developerAuditStatus,proto3" json:"developer_audit_status,omitempty"`   // 开发者认证状态：0-待认证；1-已认证；2-认证未通过；3-认证中
	DeveloperRejectReason string                 `protobuf:"bytes,32,opt,name=developer_reject_reason,json=developerRejectReason,proto3" json:"developer_reject_reason,omitempty"` // 开发者认证审核不通过原因
	DeveloperContract     string                 `protobuf:"bytes,33,opt,name=developer_contract,json=developerContract,proto3" json:"developer_contract,omitempty"`               // 开发者认证协议链接
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{18}
}

func (x *UserInfo) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserInfo) GetAccountType() uint32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *UserInfo) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *UserInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *UserInfo) GetCertifyApplyTime() uint32 {
	if x != nil {
		return x.CertifyApplyTime
	}
	return 0
}

func (x *UserInfo) GetCertifyAuditTime() uint32 {
	if x != nil {
		return x.CertifyAuditTime
	}
	return 0
}

func (x *UserInfo) GetCertifyAuditStatus() uint32 {
	if x != nil {
		return x.CertifyAuditStatus
	}
	return 0
}

func (x *UserInfo) GetCertifyRejectReason() string {
	if x != nil {
		return x.CertifyRejectReason
	}
	return ""
}

func (x *UserInfo) GetCreatorApplyTime() uint32 {
	if x != nil {
		return x.CreatorApplyTime
	}
	return 0
}

func (x *UserInfo) GetCreatorAuditTime() uint32 {
	if x != nil {
		return x.CreatorAuditTime
	}
	return 0
}

func (x *UserInfo) GetCreatorAuditStatus() uint32 {
	if x != nil {
		return x.CreatorAuditStatus
	}
	return 0
}

func (x *UserInfo) GetCreatorRejectReason() string {
	if x != nil {
		return x.CreatorRejectReason
	}
	return ""
}

func (x *UserInfo) GetMerchantStatus() uint32 {
	if x != nil {
		return x.MerchantStatus
	}
	return 0
}

func (x *UserInfo) GetChainStatus() uint32 {
	if x != nil {
		return x.ChainStatus
	}
	return 0
}

func (x *UserInfo) GetChainTime() uint32 {
	if x != nil {
		return x.ChainTime
	}
	return 0
}

func (x *UserInfo) GetChainFailedReason() string {
	if x != nil {
		return x.ChainFailedReason
	}
	return ""
}

func (x *UserInfo) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *UserInfo) GetUserPrivateKey() string {
	if x != nil {
		return x.UserPrivateKey
	}
	return ""
}

func (x *UserInfo) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *UserInfo) GetAccountStatus() uint32 {
	if x != nil {
		return x.AccountStatus
	}
	return 0
}

func (x *UserInfo) GetUserStatus() uint32 {
	if x != nil {
		return x.UserStatus
	}
	return 0
}

func (x *UserInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserInfo) GetUserCertificationInfo() *UserCertificationInfo {
	if x != nil {
		return x.UserCertificationInfo
	}
	return nil
}

func (x *UserInfo) GetClaim() *RealNameClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *UserInfo) GetDeveloperAuditStatus() uint32 {
	if x != nil {
		return x.DeveloperAuditStatus
	}
	return 0
}

func (x *UserInfo) GetDeveloperRejectReason() string {
	if x != nil {
		return x.DeveloperRejectReason
	}
	return ""
}

func (x *UserInfo) GetDeveloperContract() string {
	if x != nil {
		return x.DeveloperContract
	}
	return ""
}

type UserCertificationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdNo            string         `protobuf:"bytes,1,opt,name=id_no,json=idNo,proto3" json:"id_no,omitempty"`
	IdPicFront      string         `protobuf:"bytes,2,opt,name=id_pic_front,json=idPicFront,proto3" json:"id_pic_front,omitempty"`
	IdPicBack       string         `protobuf:"bytes,3,opt,name=id_pic_back,json=idPicBack,proto3" json:"id_pic_back,omitempty"`
	IdPicHand       string         `protobuf:"bytes,4,opt,name=id_pic_hand,json=idPicHand,proto3" json:"id_pic_hand,omitempty"`
	LicenseNo       string         `protobuf:"bytes,5,opt,name=license_no,json=licenseNo,proto3" json:"license_no,omitempty"`
	LicensePic      string         `protobuf:"bytes,6,opt,name=license_pic,json=licensePic,proto3" json:"license_pic,omitempty"`
	LegalPersonName string         `protobuf:"bytes,7,opt,name=legal_person_name,json=legalPersonName,proto3" json:"legal_person_name,omitempty"`
	ApplyMaterial   string         `protobuf:"bytes,8,opt,name=apply_material,json=applyMaterial,proto3" json:"apply_material,omitempty"`
	ContactName     string         `protobuf:"bytes,9,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	ContactPhone    string         `protobuf:"bytes,10,opt,name=contact_phone,json=contactPhone,proto3" json:"contact_phone,omitempty"`
	ContactAddress  string         `protobuf:"bytes,11,opt,name=contact_address,json=contactAddress,proto3" json:"contact_address,omitempty"`
	Logo            string         `protobuf:"bytes,12,opt,name=logo,proto3" json:"logo,omitempty"`
	IdPhone         string         `protobuf:"bytes,20,opt,name=id_phone,json=idPhone,proto3" json:"id_phone,omitempty"` // 实名手机号
	AccountType     uint32         `protobuf:"varint,30,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	RealName        string         `protobuf:"bytes,31,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	ShortName       string         `protobuf:"bytes,32,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	ApplyTime       uint32         `protobuf:"varint,33,opt,name=apply_time,json=applyTime,proto3" json:"apply_time,omitempty"`
	AuditTime       uint32         `protobuf:"varint,34,opt,name=audit_time,json=auditTime,proto3" json:"audit_time,omitempty"`
	AuditStatus     uint32         `protobuf:"varint,35,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	RejectReason    string         `protobuf:"bytes,36,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Credential      string         `protobuf:"bytes,37,opt,name=credential,proto3" json:"credential,omitempty"`
	Claim           *RealNameClaim `protobuf:"bytes,38,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *UserCertificationInfo) Reset() {
	*x = UserCertificationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCertificationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCertificationInfo) ProtoMessage() {}

func (x *UserCertificationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCertificationInfo.ProtoReflect.Descriptor instead.
func (*UserCertificationInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{19}
}

func (x *UserCertificationInfo) GetIdNo() string {
	if x != nil {
		return x.IdNo
	}
	return ""
}

func (x *UserCertificationInfo) GetIdPicFront() string {
	if x != nil {
		return x.IdPicFront
	}
	return ""
}

func (x *UserCertificationInfo) GetIdPicBack() string {
	if x != nil {
		return x.IdPicBack
	}
	return ""
}

func (x *UserCertificationInfo) GetIdPicHand() string {
	if x != nil {
		return x.IdPicHand
	}
	return ""
}

func (x *UserCertificationInfo) GetLicenseNo() string {
	if x != nil {
		return x.LicenseNo
	}
	return ""
}

func (x *UserCertificationInfo) GetLicensePic() string {
	if x != nil {
		return x.LicensePic
	}
	return ""
}

func (x *UserCertificationInfo) GetLegalPersonName() string {
	if x != nil {
		return x.LegalPersonName
	}
	return ""
}

func (x *UserCertificationInfo) GetApplyMaterial() string {
	if x != nil {
		return x.ApplyMaterial
	}
	return ""
}

func (x *UserCertificationInfo) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *UserCertificationInfo) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *UserCertificationInfo) GetContactAddress() string {
	if x != nil {
		return x.ContactAddress
	}
	return ""
}

func (x *UserCertificationInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UserCertificationInfo) GetIdPhone() string {
	if x != nil {
		return x.IdPhone
	}
	return ""
}

func (x *UserCertificationInfo) GetAccountType() uint32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *UserCertificationInfo) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserCertificationInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *UserCertificationInfo) GetApplyTime() uint32 {
	if x != nil {
		return x.ApplyTime
	}
	return 0
}

func (x *UserCertificationInfo) GetAuditTime() uint32 {
	if x != nil {
		return x.AuditTime
	}
	return 0
}

func (x *UserCertificationInfo) GetAuditStatus() uint32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *UserCertificationInfo) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *UserCertificationInfo) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *UserCertificationInfo) GetClaim() *RealNameClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

type UserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserInfoReq) Reset() {
	*x = UserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoReq) ProtoMessage() {}

func (x *UserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoReq.ProtoReflect.Descriptor instead.
func (*UserInfoReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{20}
}

func (x *UserInfoReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInfoResp) Reset() {
	*x = UserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoResp) ProtoMessage() {}

func (x *UserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoResp.ProtoReflect.Descriptor instead.
func (*UserInfoResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{21}
}

func (x *UserInfoResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserInfoResp) GetData() *UserInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserBaseInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	AppNo       string `protobuf:"bytes,3,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"` // 应用标识
	Mobile      string `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`            // 用户mobile(与appNo配合使用),与其它参数互斥
	Email       string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`              // 用户email(与appNo配合使用),与其它参数互斥
}

func (x *UserBaseInfoReq) Reset() {
	*x = UserBaseInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseInfoReq) ProtoMessage() {}

func (x *UserBaseInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseInfoReq.ProtoReflect.Descriptor instead.
func (*UserBaseInfoReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{22}
}

func (x *UserBaseInfoReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserBaseInfoReq) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *UserBaseInfoReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *UserBaseInfoReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserBaseInfoReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type UserBaseInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserBaseInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserBaseInfoResp) Reset() {
	*x = UserBaseInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseInfoResp) ProtoMessage() {}

func (x *UserBaseInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseInfoResp.ProtoReflect.Descriptor instead.
func (*UserBaseInfoResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{23}
}

func (x *UserBaseInfoResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserBaseInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserBaseInfoResp) GetData() *UserBaseInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserBaseInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  []uint32 `protobuf:"varint,1,rep,packed,name=uid,proto3" json:"uid,omitempty"`
	Addr []string `protobuf:"bytes,2,rep,name=addr,proto3" json:"addr,omitempty"`
}

func (x *UserBaseInfoListReq) Reset() {
	*x = UserBaseInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseInfoListReq) ProtoMessage() {}

func (x *UserBaseInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseInfoListReq.ProtoReflect.Descriptor instead.
func (*UserBaseInfoListReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{24}
}

func (x *UserBaseInfoListReq) GetUid() []uint32 {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *UserBaseInfoListReq) GetAddr() []string {
	if x != nil {
		return x.Addr
	}
	return nil
}

type UserBaseInfoListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*UserBaseInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserBaseInfoListResp) Reset() {
	*x = UserBaseInfoListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseInfoListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseInfoListResp) ProtoMessage() {}

func (x *UserBaseInfoListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseInfoListResp.ProtoReflect.Descriptor instead.
func (*UserBaseInfoListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{25}
}

func (x *UserBaseInfoListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserBaseInfoListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserBaseInfoListResp) GetData() []*UserBaseInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountType         uint32 `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	UserId              uint32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppNo               string `protobuf:"bytes,4,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	Mobile              string `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email               string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	RealName            string `protobuf:"bytes,7,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	ShortName           string `protobuf:"bytes,8,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	CertifyApplyTime    uint32 `protobuf:"varint,9,opt,name=certify_apply_time,json=certifyApplyTime,proto3" json:"certify_apply_time,omitempty"`
	CertifyAuditTime    uint32 `protobuf:"varint,10,opt,name=certify_audit_time,json=certifyAuditTime,proto3" json:"certify_audit_time,omitempty"`
	CertifyAuditStatus  uint32 `protobuf:"varint,11,opt,name=certify_audit_status,json=certifyAuditStatus,proto3" json:"certify_audit_status,omitempty"`
	CertifyRejectReason string `protobuf:"bytes,12,opt,name=certify_reject_reason,json=certifyRejectReason,proto3" json:"certify_reject_reason,omitempty"`
	CreatorApplyTime    uint32 `protobuf:"varint,13,opt,name=creator_apply_time,json=creatorApplyTime,proto3" json:"creator_apply_time,omitempty"`
	CreatorAuditTime    uint32 `protobuf:"varint,14,opt,name=creator_audit_time,json=creatorAuditTime,proto3" json:"creator_audit_time,omitempty"`
	CreatorAuditStatus  uint32 `protobuf:"varint,15,opt,name=creator_audit_status,json=creatorAuditStatus,proto3" json:"creator_audit_status,omitempty"`
	CreatorRejectReason string `protobuf:"bytes,16,opt,name=creator_reject_reason,json=creatorRejectReason,proto3" json:"creator_reject_reason,omitempty"`
	MerchantStatus      uint32 `protobuf:"varint,17,opt,name=merchant_status,json=merchantStatus,proto3" json:"merchant_status,omitempty"`
	UserAddress         string `protobuf:"bytes,21,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	UserPrivateKey      string `protobuf:"bytes,22,opt,name=user_private_key,json=userPrivateKey,proto3" json:"user_private_key,omitempty"`
	AccountStatus       uint32 `protobuf:"varint,24,opt,name=account_status,json=accountStatus,proto3" json:"account_status,omitempty"`
	UserStatus          uint32 `protobuf:"varint,25,opt,name=user_status,json=userStatus,proto3" json:"user_status,omitempty"`
	CreateTime          uint32 `protobuf:"varint,28,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UserBaseInfo) Reset() {
	*x = UserBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseInfo) ProtoMessage() {}

func (x *UserBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseInfo.ProtoReflect.Descriptor instead.
func (*UserBaseInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{26}
}

func (x *UserBaseInfo) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserBaseInfo) GetAccountType() uint32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *UserBaseInfo) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserBaseInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *UserBaseInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserBaseInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserBaseInfo) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserBaseInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *UserBaseInfo) GetCertifyApplyTime() uint32 {
	if x != nil {
		return x.CertifyApplyTime
	}
	return 0
}

func (x *UserBaseInfo) GetCertifyAuditTime() uint32 {
	if x != nil {
		return x.CertifyAuditTime
	}
	return 0
}

func (x *UserBaseInfo) GetCertifyAuditStatus() uint32 {
	if x != nil {
		return x.CertifyAuditStatus
	}
	return 0
}

func (x *UserBaseInfo) GetCertifyRejectReason() string {
	if x != nil {
		return x.CertifyRejectReason
	}
	return ""
}

func (x *UserBaseInfo) GetCreatorApplyTime() uint32 {
	if x != nil {
		return x.CreatorApplyTime
	}
	return 0
}

func (x *UserBaseInfo) GetCreatorAuditTime() uint32 {
	if x != nil {
		return x.CreatorAuditTime
	}
	return 0
}

func (x *UserBaseInfo) GetCreatorAuditStatus() uint32 {
	if x != nil {
		return x.CreatorAuditStatus
	}
	return 0
}

func (x *UserBaseInfo) GetCreatorRejectReason() string {
	if x != nil {
		return x.CreatorRejectReason
	}
	return ""
}

func (x *UserBaseInfo) GetMerchantStatus() uint32 {
	if x != nil {
		return x.MerchantStatus
	}
	return 0
}

func (x *UserBaseInfo) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *UserBaseInfo) GetUserPrivateKey() string {
	if x != nil {
		return x.UserPrivateKey
	}
	return ""
}

func (x *UserBaseInfo) GetAccountStatus() uint32 {
	if x != nil {
		return x.AccountStatus
	}
	return 0
}

func (x *UserBaseInfo) GetUserStatus() uint32 {
	if x != nil {
		return x.UserStatus
	}
	return 0
}

func (x *UserBaseInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type UserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UserResp) Reset() {
	*x = UserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResp) ProtoMessage() {}

func (x *UserResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResp.ProtoReflect.Descriptor instead.
func (*UserResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{27}
}

func (x *UserResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CreatorApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyMaterial string `protobuf:"bytes,1,opt,name=apply_material,json=applyMaterial,proto3" json:"apply_material,omitempty"`
}

func (x *CreatorApplyReq) Reset() {
	*x = CreatorApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatorApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorApplyReq) ProtoMessage() {}

func (x *CreatorApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorApplyReq.ProtoReflect.Descriptor instead.
func (*CreatorApplyReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{28}
}

func (x *CreatorApplyReq) GetApplyMaterial() string {
	if x != nil {
		return x.ApplyMaterial
	}
	return ""
}

type CreatorApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *CreatorApplyResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreatorApplyResp) Reset() {
	*x = CreatorApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatorApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorApplyResp) ProtoMessage() {}

func (x *CreatorApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorApplyResp.ProtoReflect.Descriptor instead.
func (*CreatorApplyResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{29}
}

func (x *CreatorApplyResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreatorApplyResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreatorApplyResp) GetData() *CreatorApplyResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreatorListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountType    uint32 `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	Mobile         string `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email          string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	AuditStatus    uint32 `protobuf:"varint,5,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	ApplyTimeStart uint32 `protobuf:"varint,6,opt,name=apply_time_start,json=applyTimeStart,proto3" json:"apply_time_start,omitempty"`
	ApplyTimeEnd   uint32 `protobuf:"varint,7,opt,name=apply_time_end,json=applyTimeEnd,proto3" json:"apply_time_end,omitempty"`
	AuditTimeStart uint32 `protobuf:"varint,8,opt,name=audit_time_start,json=auditTimeStart,proto3" json:"audit_time_start,omitempty"`
	AuditTimeEnd   uint32 `protobuf:"varint,9,opt,name=audit_time_end,json=auditTimeEnd,proto3" json:"audit_time_end,omitempty"`
	Page           uint32 `protobuf:"varint,11,opt,name=page,proto3" json:"page,omitempty"`
	Limit          uint32 `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CreatorListReq) Reset() {
	*x = CreatorListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatorListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorListReq) ProtoMessage() {}

func (x *CreatorListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorListReq.ProtoReflect.Descriptor instead.
func (*CreatorListReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{30}
}

func (x *CreatorListReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CreatorListReq) GetAccountType() uint32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *CreatorListReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *CreatorListReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreatorListReq) GetAuditStatus() uint32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *CreatorListReq) GetApplyTimeStart() uint32 {
	if x != nil {
		return x.ApplyTimeStart
	}
	return 0
}

func (x *CreatorListReq) GetApplyTimeEnd() uint32 {
	if x != nil {
		return x.ApplyTimeEnd
	}
	return 0
}

func (x *CreatorListReq) GetAuditTimeStart() uint32 {
	if x != nil {
		return x.AuditTimeStart
	}
	return 0
}

func (x *CreatorListReq) GetAuditTimeEnd() uint32 {
	if x != nil {
		return x.AuditTimeEnd
	}
	return 0
}

func (x *CreatorListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CreatorListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CreatorListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *CreatorListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreatorListResp) Reset() {
	*x = CreatorListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatorListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorListResp) ProtoMessage() {}

func (x *CreatorListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorListResp.ProtoReflect.Descriptor instead.
func (*CreatorListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{31}
}

func (x *CreatorListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreatorListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreatorListResp) GetData() *CreatorListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreatorUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountType   uint32 `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	Mobile        string `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email         string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	RealName      string `protobuf:"bytes,7,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	ShortName     string `protobuf:"bytes,8,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	ApplyTime     uint32 `protobuf:"varint,9,opt,name=apply_time,json=applyTime,proto3" json:"apply_time,omitempty"`
	AuditTime     uint32 `protobuf:"varint,10,opt,name=audit_time,json=auditTime,proto3" json:"audit_time,omitempty"`
	AuditStatus   uint32 `protobuf:"varint,11,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	RejectReason  string `protobuf:"bytes,12,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	ApplyMaterial string `protobuf:"bytes,13,opt,name=apply_material,json=applyMaterial,proto3" json:"apply_material,omitempty"`
}

func (x *CreatorUserInfo) Reset() {
	*x = CreatorUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatorUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorUserInfo) ProtoMessage() {}

func (x *CreatorUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorUserInfo.ProtoReflect.Descriptor instead.
func (*CreatorUserInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{32}
}

func (x *CreatorUserInfo) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CreatorUserInfo) GetAccountType() uint32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *CreatorUserInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *CreatorUserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreatorUserInfo) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *CreatorUserInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *CreatorUserInfo) GetApplyTime() uint32 {
	if x != nil {
		return x.ApplyTime
	}
	return 0
}

func (x *CreatorUserInfo) GetAuditTime() uint32 {
	if x != nil {
		return x.AuditTime
	}
	return 0
}

func (x *CreatorUserInfo) GetAuditStatus() uint32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *CreatorUserInfo) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *CreatorUserInfo) GetApplyMaterial() string {
	if x != nil {
		return x.ApplyMaterial
	}
	return ""
}

type CreatorAuditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status       uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	RejectReason string `protobuf:"bytes,3,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
}

func (x *CreatorAuditReq) Reset() {
	*x = CreatorAuditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatorAuditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorAuditReq) ProtoMessage() {}

func (x *CreatorAuditReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorAuditReq.ProtoReflect.Descriptor instead.
func (*CreatorAuditReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{33}
}

func (x *CreatorAuditReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreatorAuditReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreatorAuditReq) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

type UserAdminListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile          string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email           string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Address         string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	AppNo           string `protobuf:"bytes,4,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	CreateTimeStart uint32 `protobuf:"varint,8,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd   uint32 `protobuf:"varint,9,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Status          string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	Page            uint32 `protobuf:"varint,11,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UserAdminListReq) Reset() {
	*x = UserAdminListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminListReq) ProtoMessage() {}

func (x *UserAdminListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminListReq.ProtoReflect.Descriptor instead.
func (*UserAdminListReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{34}
}

func (x *UserAdminListReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserAdminListReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserAdminListReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserAdminListReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *UserAdminListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *UserAdminListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *UserAdminListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserAdminListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserAdminListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UserAdminListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserAdminListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAdminListResp) Reset() {
	*x = UserAdminListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminListResp) ProtoMessage() {}

func (x *UserAdminListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminListResp.ProtoReflect.Descriptor instead.
func (*UserAdminListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{35}
}

func (x *UserAdminListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAdminListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserAdminListResp) GetData() *UserAdminListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAdminInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId     uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppNo      string `protobuf:"bytes,3,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	Mobile     string `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email      string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Address    string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Status     uint32 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime uint32 `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UserAdminInfo) Reset() {
	*x = UserAdminInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInfo) ProtoMessage() {}

func (x *UserAdminInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInfo.ProtoReflect.Descriptor instead.
func (*UserAdminInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{36}
}

func (x *UserAdminInfo) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserAdminInfo) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAdminInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *UserAdminInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserAdminInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserAdminInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserAdminInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserAdminInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type UserAccountAdminListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile                   string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email                    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	CertifyAuditStatus       string `protobuf:"bytes,3,opt,name=certify_audit_status,json=certifyAuditStatus,proto3" json:"certify_audit_status,omitempty"`
	CreatorAuditStatus       string `protobuf:"bytes,4,opt,name=creator_audit_status,json=creatorAuditStatus,proto3" json:"creator_audit_status,omitempty"`
	MerchantStatus           string `protobuf:"bytes,5,opt,name=merchant_status,json=merchantStatus,proto3" json:"merchant_status,omitempty"`
	AccountType              string `protobuf:"bytes,6,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	AppNo                    string `protobuf:"bytes,7,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	CreateTimeStart          uint32 `protobuf:"varint,8,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	CreateTimeEnd            uint32 `protobuf:"varint,9,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	Status                   string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	Page                     uint32 `protobuf:"varint,11,opt,name=page,proto3" json:"page,omitempty"`
	Limit                    uint32 `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	DeveloperAuditStatusList string `protobuf:"bytes,20,opt,name=developer_audit_status_list,json=developerAuditStatusList,proto3" json:"developer_audit_status_list,omitempty"` // 开发者认证状态集合, 0-待认证；1-已认证；2-认证未通过；3-认证中, 格式:0,1,2
}

func (x *UserAccountAdminListReq) Reset() {
	*x = UserAccountAdminListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountAdminListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountAdminListReq) ProtoMessage() {}

func (x *UserAccountAdminListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountAdminListReq.ProtoReflect.Descriptor instead.
func (*UserAccountAdminListReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{37}
}

func (x *UserAccountAdminListReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserAccountAdminListReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserAccountAdminListReq) GetCertifyAuditStatus() string {
	if x != nil {
		return x.CertifyAuditStatus
	}
	return ""
}

func (x *UserAccountAdminListReq) GetCreatorAuditStatus() string {
	if x != nil {
		return x.CreatorAuditStatus
	}
	return ""
}

func (x *UserAccountAdminListReq) GetMerchantStatus() string {
	if x != nil {
		return x.MerchantStatus
	}
	return ""
}

func (x *UserAccountAdminListReq) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *UserAccountAdminListReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *UserAccountAdminListReq) GetCreateTimeStart() uint32 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *UserAccountAdminListReq) GetCreateTimeEnd() uint32 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *UserAccountAdminListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserAccountAdminListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserAccountAdminListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserAccountAdminListReq) GetDeveloperAuditStatusList() string {
	if x != nil {
		return x.DeveloperAuditStatusList
	}
	return ""
}

type UserAccountAdminListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserAccountAdminListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAccountAdminListResp) Reset() {
	*x = UserAccountAdminListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountAdminListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountAdminListResp) ProtoMessage() {}

func (x *UserAccountAdminListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountAdminListResp.ProtoReflect.Descriptor instead.
func (*UserAccountAdminListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{38}
}

func (x *UserAccountAdminListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAccountAdminListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserAccountAdminListResp) GetData() *UserAccountAdminListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAccountAdminInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId               uint32                 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountType             uint32                 `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	AppNo                   string                 `protobuf:"bytes,3,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	Mobile                  string                 `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email                   string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	CertifyAuditStatus      uint32                 `protobuf:"varint,6,opt,name=certify_audit_status,json=certifyAuditStatus,proto3" json:"certify_audit_status,omitempty"`
	CreatorAuditStatus      uint32                 `protobuf:"varint,7,opt,name=creator_audit_status,json=creatorAuditStatus,proto3" json:"creator_audit_status,omitempty"`
	MerchantStatus          uint32                 `protobuf:"varint,8,opt,name=merchant_status,json=merchantStatus,proto3" json:"merchant_status,omitempty"`
	DeveloperAuditStatus    uint32                 `protobuf:"varint,20,opt,name=developer_audit_status,json=developerAuditStatus,proto3" json:"developer_audit_status,omitempty"`   // 开发者认证状态, 0-待认证；1-已认证；2-认证未通过；3-认证中
	DeveloperRejectReason   string                 `protobuf:"bytes,21,opt,name=developer_reject_reason,json=developerRejectReason,proto3" json:"developer_reject_reason,omitempty"` // 开发者认证审核不通过原因
	DeveloperAuditTime      uint32                 `protobuf:"varint,22,opt,name=developer_audit_time,json=developerAuditTime,proto3" json:"developer_audit_time,omitempty"`         // 开发者认证审核时间
	CapitalBalance          uint32                 `protobuf:"varint,9,opt,name=capital_balance,json=capitalBalance,proto3" json:"capital_balance,omitempty"`
	PresentBalance          uint32                 `protobuf:"varint,30,opt,name=present_balance,json=presentBalance,proto3" json:"present_balance,omitempty"`
	FrozenPaidAmount        uint32                 `protobuf:"varint,31,opt,name=frozen_paid_amount,json=frozenPaidAmount,proto3" json:"frozen_paid_amount,omitempty"`
	FrozenPresentAmount     uint32                 `protobuf:"varint,32,opt,name=frozen_present_amount,json=frozenPresentAmount,proto3" json:"frozen_present_amount,omitempty"`
	CredentialChainPrice    uint32                 `protobuf:"varint,11,opt,name=credential_chain_price,json=credentialChainPrice,proto3" json:"credential_chain_price,omitempty"`
	CollectionCastingPrice  uint32                 `protobuf:"varint,12,opt,name=collection_casting_price,json=collectionCastingPrice,proto3" json:"collection_casting_price,omitempty"`
	CollectionOnlinePrice   uint32                 `protobuf:"varint,13,opt,name=collection_online_price,json=collectionOnlinePrice,proto3" json:"collection_online_price,omitempty"`
	CollectionOfflinePrice  uint32                 `protobuf:"varint,14,opt,name=collection_offline_price,json=collectionOfflinePrice,proto3" json:"collection_offline_price,omitempty"`
	CollectionTransferPrice uint32                 `protobuf:"varint,15,opt,name=collection_transfer_price,json=collectionTransferPrice,proto3" json:"collection_transfer_price,omitempty"`
	ApiCallPrice            uint32                 `protobuf:"varint,16,opt,name=api_call_price,json=apiCallPrice,proto3" json:"api_call_price,omitempty"`
	Status                  uint32                 `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime              uint32                 `protobuf:"varint,18,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CertInfo                *UserCertificationInfo `protobuf:"bytes,1001,opt,name=cert_info,json=certInfo,proto3" json:"cert_info,omitempty"` // 认证信息
}

func (x *UserAccountAdminInfo) Reset() {
	*x = UserAccountAdminInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountAdminInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountAdminInfo) ProtoMessage() {}

func (x *UserAccountAdminInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountAdminInfo.ProtoReflect.Descriptor instead.
func (*UserAccountAdminInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{39}
}

func (x *UserAccountAdminInfo) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserAccountAdminInfo) GetAccountType() uint32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *UserAccountAdminInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *UserAccountAdminInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserAccountAdminInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserAccountAdminInfo) GetCertifyAuditStatus() uint32 {
	if x != nil {
		return x.CertifyAuditStatus
	}
	return 0
}

func (x *UserAccountAdminInfo) GetCreatorAuditStatus() uint32 {
	if x != nil {
		return x.CreatorAuditStatus
	}
	return 0
}

func (x *UserAccountAdminInfo) GetMerchantStatus() uint32 {
	if x != nil {
		return x.MerchantStatus
	}
	return 0
}

func (x *UserAccountAdminInfo) GetDeveloperAuditStatus() uint32 {
	if x != nil {
		return x.DeveloperAuditStatus
	}
	return 0
}

func (x *UserAccountAdminInfo) GetDeveloperRejectReason() string {
	if x != nil {
		return x.DeveloperRejectReason
	}
	return ""
}

func (x *UserAccountAdminInfo) GetDeveloperAuditTime() uint32 {
	if x != nil {
		return x.DeveloperAuditTime
	}
	return 0
}

func (x *UserAccountAdminInfo) GetCapitalBalance() uint32 {
	if x != nil {
		return x.CapitalBalance
	}
	return 0
}

func (x *UserAccountAdminInfo) GetPresentBalance() uint32 {
	if x != nil {
		return x.PresentBalance
	}
	return 0
}

func (x *UserAccountAdminInfo) GetFrozenPaidAmount() uint32 {
	if x != nil {
		return x.FrozenPaidAmount
	}
	return 0
}

func (x *UserAccountAdminInfo) GetFrozenPresentAmount() uint32 {
	if x != nil {
		return x.FrozenPresentAmount
	}
	return 0
}

func (x *UserAccountAdminInfo) GetCredentialChainPrice() uint32 {
	if x != nil {
		return x.CredentialChainPrice
	}
	return 0
}

func (x *UserAccountAdminInfo) GetCollectionCastingPrice() uint32 {
	if x != nil {
		return x.CollectionCastingPrice
	}
	return 0
}

func (x *UserAccountAdminInfo) GetCollectionOnlinePrice() uint32 {
	if x != nil {
		return x.CollectionOnlinePrice
	}
	return 0
}

func (x *UserAccountAdminInfo) GetCollectionOfflinePrice() uint32 {
	if x != nil {
		return x.CollectionOfflinePrice
	}
	return 0
}

func (x *UserAccountAdminInfo) GetCollectionTransferPrice() uint32 {
	if x != nil {
		return x.CollectionTransferPrice
	}
	return 0
}

func (x *UserAccountAdminInfo) GetApiCallPrice() uint32 {
	if x != nil {
		return x.ApiCallPrice
	}
	return 0
}

func (x *UserAccountAdminInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserAccountAdminInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserAccountAdminInfo) GetCertInfo() *UserCertificationInfo {
	if x != nil {
		return x.CertInfo
	}
	return nil
}

type UserIndexStatisticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserIndexStatisticsReq) Reset() {
	*x = UserIndexStatisticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIndexStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIndexStatisticsReq) ProtoMessage() {}

func (x *UserIndexStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIndexStatisticsReq.ProtoReflect.Descriptor instead.
func (*UserIndexStatisticsReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{40}
}

type UserIndexStatisticsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserIndexStatisticsResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserIndexStatisticsResp) Reset() {
	*x = UserIndexStatisticsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIndexStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIndexStatisticsResp) ProtoMessage() {}

func (x *UserIndexStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIndexStatisticsResp.ProtoReflect.Descriptor instead.
func (*UserIndexStatisticsResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{41}
}

func (x *UserIndexStatisticsResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserIndexStatisticsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserIndexStatisticsResp) GetData() *UserIndexStatisticsResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserCapitalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserCapitalReq) Reset() {
	*x = UserCapitalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalReq) ProtoMessage() {}

func (x *UserCapitalReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalReq.ProtoReflect.Descriptor instead.
func (*UserCapitalReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{42}
}

type UserCapitalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserCapitalResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserCapitalResp) Reset() {
	*x = UserCapitalResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalResp) ProtoMessage() {}

func (x *UserCapitalResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalResp.ProtoReflect.Descriptor instead.
func (*UserCapitalResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{43}
}

func (x *UserCapitalResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserCapitalResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserCapitalResp) GetData() *UserCapitalResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserCapitalListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                   // (搜索)(可选项)账号ID
	TradeNo         string `protobuf:"bytes,2,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`                          // 交易流水号
	TransactionType uint32 `protobuf:"varint,3,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"` // 交易类型, 0-全部;1-充值;2-消费
	Status          uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                                          // 订单状态,0所用状态;1交易成功;2交易中;3交易失败
	Page            uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`                                              // 页数,默认1
	Limit           uint32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`                                            // 条数,默认20
	TransactionMode uint32 `protobuf:"varint,7,opt,name=transaction_mode,json=transactionMode,proto3" json:"transaction_mode,omitempty"`
}

func (x *UserCapitalListReq) Reset() {
	*x = UserCapitalListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalListReq) ProtoMessage() {}

func (x *UserCapitalListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalListReq.ProtoReflect.Descriptor instead.
func (*UserCapitalListReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{44}
}

func (x *UserCapitalListReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserCapitalListReq) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *UserCapitalListReq) GetTransactionType() uint32 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *UserCapitalListReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserCapitalListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserCapitalListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserCapitalListReq) GetTransactionMode() uint32 {
	if x != nil {
		return x.TransactionMode
	}
	return 0
}

type UserCapitalListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserCapitalListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserCapitalListResp) Reset() {
	*x = UserCapitalListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalListResp) ProtoMessage() {}

func (x *UserCapitalListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalListResp.ProtoReflect.Descriptor instead.
func (*UserCapitalListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{45}
}

func (x *UserCapitalListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserCapitalListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserCapitalListResp) GetData() *UserCapitalListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserCapitalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionType uint32 `protobuf:"varint,1,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	TradeNo         string `protobuf:"bytes,2,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	Status          uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime      uint32 `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	PaidAmount      uint32 `protobuf:"varint,6,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount,omitempty"`
	PresentAmount   uint32 `protobuf:"varint,7,opt,name=present_amount,json=presentAmount,proto3" json:"present_amount,omitempty"`
	TransactionMode uint32 `protobuf:"varint,8,opt,name=transaction_mode,json=transactionMode,proto3" json:"transaction_mode,omitempty"`
}

func (x *UserCapitalInfo) Reset() {
	*x = UserCapitalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalInfo) ProtoMessage() {}

func (x *UserCapitalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalInfo.ProtoReflect.Descriptor instead.
func (*UserCapitalInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{46}
}

func (x *UserCapitalInfo) GetTransactionType() uint32 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *UserCapitalInfo) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *UserCapitalInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserCapitalInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserCapitalInfo) GetPaidAmount() uint32 {
	if x != nil {
		return x.PaidAmount
	}
	return 0
}

func (x *UserCapitalInfo) GetPresentAmount() uint32 {
	if x != nil {
		return x.PresentAmount
	}
	return 0
}

func (x *UserCapitalInfo) GetTransactionMode() uint32 {
	if x != nil {
		return x.TransactionMode
	}
	return 0
}

type UserCapitalAllListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile          string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email           string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	TradeNo         string `protobuf:"bytes,3,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	TransactionType uint32 `protobuf:"varint,4,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Status          uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Page            uint32 `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	TransactionMode uint32 `protobuf:"varint,8,opt,name=transaction_mode,json=transactionMode,proto3" json:"transaction_mode,omitempty"`
}

func (x *UserCapitalAllListReq) Reset() {
	*x = UserCapitalAllListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalAllListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalAllListReq) ProtoMessage() {}

func (x *UserCapitalAllListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalAllListReq.ProtoReflect.Descriptor instead.
func (*UserCapitalAllListReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{47}
}

func (x *UserCapitalAllListReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserCapitalAllListReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserCapitalAllListReq) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *UserCapitalAllListReq) GetTransactionType() uint32 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *UserCapitalAllListReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserCapitalAllListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserCapitalAllListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserCapitalAllListReq) GetTransactionMode() uint32 {
	if x != nil {
		return x.TransactionMode
	}
	return 0
}

type UserCapitalAllListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserCapitalAllListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserCapitalAllListResp) Reset() {
	*x = UserCapitalAllListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalAllListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalAllListResp) ProtoMessage() {}

func (x *UserCapitalAllListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalAllListResp.ProtoReflect.Descriptor instead.
func (*UserCapitalAllListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{48}
}

func (x *UserCapitalAllListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserCapitalAllListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserCapitalAllListResp) GetData() *UserCapitalAllListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserCapitalAllInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionType uint32 `protobuf:"varint,1,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	TradeNo         string `protobuf:"bytes,2,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	Mobile          string `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email           string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	PaidAmount      uint32 `protobuf:"varint,20,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount,omitempty"`
	PresentAmount   uint32 `protobuf:"varint,21,opt,name=present_amount,json=presentAmount,proto3" json:"present_amount,omitempty"`
	Status          uint32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime      uint32 `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	TransactionMode uint32 `protobuf:"varint,8,opt,name=transaction_mode,json=transactionMode,proto3" json:"transaction_mode,omitempty"`
}

func (x *UserCapitalAllInfo) Reset() {
	*x = UserCapitalAllInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalAllInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalAllInfo) ProtoMessage() {}

func (x *UserCapitalAllInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalAllInfo.ProtoReflect.Descriptor instead.
func (*UserCapitalAllInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{49}
}

func (x *UserCapitalAllInfo) GetTransactionType() uint32 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *UserCapitalAllInfo) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *UserCapitalAllInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserCapitalAllInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserCapitalAllInfo) GetPaidAmount() uint32 {
	if x != nil {
		return x.PaidAmount
	}
	return 0
}

func (x *UserCapitalAllInfo) GetPresentAmount() uint32 {
	if x != nil {
		return x.PresentAmount
	}
	return 0
}

func (x *UserCapitalAllInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserCapitalAllInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserCapitalAllInfo) GetTransactionMode() uint32 {
	if x != nil {
		return x.TransactionMode
	}
	return 0
}

// UserFrozenCapitalItem 资金冻结信息
type UserFrozenCapitalItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrozenCapitalType uint32 `protobuf:"varint,1,opt,name=frozen_capital_type,json=frozenCapitalType,proto3" json:"frozen_capital_type,omitempty"` // 冻结资金类型, 0存证上链价格; 1藏品铸造上链价格; 2藏品链上上架价格; 3藏品链上下架价格; 4藏品转让上链价格; 5其它API调用价格
	CalledApi         string `protobuf:"bytes,2,opt,name=called_api,json=calledApi,proto3" json:"called_api,omitempty"`                            // 交易API名称
	CalledNum         uint32 `protobuf:"varint,3,opt,name=called_num,json=calledNum,proto3" json:"called_num,omitempty"`                           // API调用次数,默认值1
}

func (x *UserFrozenCapitalItem) Reset() {
	*x = UserFrozenCapitalItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFrozenCapitalItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFrozenCapitalItem) ProtoMessage() {}

func (x *UserFrozenCapitalItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFrozenCapitalItem.ProtoReflect.Descriptor instead.
func (*UserFrozenCapitalItem) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{50}
}

func (x *UserFrozenCapitalItem) GetFrozenCapitalType() uint32 {
	if x != nil {
		return x.FrozenCapitalType
	}
	return 0
}

func (x *UserFrozenCapitalItem) GetCalledApi() string {
	if x != nil {
		return x.CalledApi
	}
	return ""
}

func (x *UserFrozenCapitalItem) GetCalledNum() uint32 {
	if x != nil {
		return x.CalledNum
	}
	return 0
}

// UserFrozenCapitalReq 资金冻结-请求参数
type UserFrozenCapitalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint32                   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // 调用者账户ID
	Items     []*UserFrozenCapitalItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`                           // 资金冻结信息条目
	Checking  bool                     `protobuf:"varint,3,opt,name=checking,proto3" json:"checking,omitempty"`                    // 检测是否可冻结(仅检测,不发生真正冻结行为)
	AppNo     string                   `protobuf:"bytes,4,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`              // 应用编号(从此应用编号绑定的管理员账户冻结资金)
}

func (x *UserFrozenCapitalReq) Reset() {
	*x = UserFrozenCapitalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFrozenCapitalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFrozenCapitalReq) ProtoMessage() {}

func (x *UserFrozenCapitalReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFrozenCapitalReq.ProtoReflect.Descriptor instead.
func (*UserFrozenCapitalReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{51}
}

func (x *UserFrozenCapitalReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserFrozenCapitalReq) GetItems() []*UserFrozenCapitalItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UserFrozenCapitalReq) GetChecking() bool {
	if x != nil {
		return x.Checking
	}
	return false
}

func (x *UserFrozenCapitalReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

// UserFrozenCapitalResultItem 资金冻结结果信息
type UserFrozenCapitalResultItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId     uint32 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`               // 交易id
	TradeNo           string `protobuf:"bytes,2,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`                                  // 订单号
	FrozenCapitalType uint32 `protobuf:"varint,3,opt,name=frozen_capital_type,json=frozenCapitalType,proto3" json:"frozen_capital_type,omitempty"` // 冻结资金类型, 0存证上链价格; 1藏品铸造上链价格; 2藏品链上上架价格; 3藏品链上下架价格; 4藏品转让上链价格; 5其它API调用价格
	CalledApi         string `protobuf:"bytes,4,opt,name=called_api,json=calledApi,proto3" json:"called_api,omitempty"`                            // 交易api
	CalledNum         uint32 `protobuf:"varint,5,opt,name=called_num,json=calledNum,proto3" json:"called_num,omitempty"`                           // API调用次数
}

func (x *UserFrozenCapitalResultItem) Reset() {
	*x = UserFrozenCapitalResultItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFrozenCapitalResultItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFrozenCapitalResultItem) ProtoMessage() {}

func (x *UserFrozenCapitalResultItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFrozenCapitalResultItem.ProtoReflect.Descriptor instead.
func (*UserFrozenCapitalResultItem) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{52}
}

func (x *UserFrozenCapitalResultItem) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *UserFrozenCapitalResultItem) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *UserFrozenCapitalResultItem) GetFrozenCapitalType() uint32 {
	if x != nil {
		return x.FrozenCapitalType
	}
	return 0
}

func (x *UserFrozenCapitalResultItem) GetCalledApi() string {
	if x != nil {
		return x.CalledApi
	}
	return ""
}

func (x *UserFrozenCapitalResultItem) GetCalledNum() uint32 {
	if x != nil {
		return x.CalledNum
	}
	return 0
}

type UserFrozenCapitalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserFrozenCapitalResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 结果data
}

func (x *UserFrozenCapitalResp) Reset() {
	*x = UserFrozenCapitalResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFrozenCapitalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFrozenCapitalResp) ProtoMessage() {}

func (x *UserFrozenCapitalResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFrozenCapitalResp.ProtoReflect.Descriptor instead.
func (*UserFrozenCapitalResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{53}
}

func (x *UserFrozenCapitalResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserFrozenCapitalResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserFrozenCapitalResp) GetData() *UserFrozenCapitalResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// UserChainItem 上链信息
type UserChainItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrozenCapitalType uint32 `protobuf:"varint,1,opt,name=frozen_capital_type,json=frozenCapitalType,proto3" json:"frozen_capital_type,omitempty"` // 冻结资金类型, 0存证上链价格; 1藏品铸造上链价格; 2藏品链上上架价格; 3藏品链上下架价格; 4藏品转让上链价格; 5其它API调用价格
	CalledNum         uint32 `protobuf:"varint,3,opt,name=called_num,json=calledNum,proto3" json:"called_num,omitempty"`                           // API调用次数,默认值1
}

func (x *UserChainItem) Reset() {
	*x = UserChainItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainItem) ProtoMessage() {}

func (x *UserChainItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainItem.ProtoReflect.Descriptor instead.
func (*UserChainItem) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{54}
}

func (x *UserChainItem) GetFrozenCapitalType() uint32 {
	if x != nil {
		return x.FrozenCapitalType
	}
	return 0
}

func (x *UserChainItem) GetCalledNum() uint32 {
	if x != nil {
		return x.CalledNum
	}
	return 0
}

// UserChainCost 查询上链预算费用-请求参数
type UserChainCostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNo string           `protobuf:"bytes,1,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"` // 应用编号(从此应用编号绑定的管理员账户冻结资金)
	Items []*UserChainItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`              // 上链信息条目
}

func (x *UserChainCostReq) Reset() {
	*x = UserChainCostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainCostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainCostReq) ProtoMessage() {}

func (x *UserChainCostReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainCostReq.ProtoReflect.Descriptor instead.
func (*UserChainCostReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{55}
}

func (x *UserChainCostReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *UserChainCostReq) GetItems() []*UserChainItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// UserChainCost 查询上链预算费用-参数响应
type UserChainCostResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserChainCostResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 结果data
}

func (x *UserChainCostResp) Reset() {
	*x = UserChainCostResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainCostResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainCostResp) ProtoMessage() {}

func (x *UserChainCostResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainCostResp.ProtoReflect.Descriptor instead.
func (*UserChainCostResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{56}
}

func (x *UserChainCostResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserChainCostResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserChainCostResp) GetData() *UserChainCostResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserChargeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // 账号ID
	Amount    uint32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`                        // 到账金额,单位:分
}

func (x *UserChargeReq) Reset() {
	*x = UserChargeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChargeReq) ProtoMessage() {}

func (x *UserChargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChargeReq.ProtoReflect.Descriptor instead.
func (*UserChargeReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{57}
}

func (x *UserChargeReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserChargeReq) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type UserChargeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserChargeResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserChargeResp) Reset() {
	*x = UserChargeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChargeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChargeResp) ProtoMessage() {}

func (x *UserChargeResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChargeResp.ProtoReflect.Descriptor instead.
func (*UserChargeResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{58}
}

func (x *UserChargeResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserChargeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserChargeResp) GetData() *UserChargeResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserChargeChangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeNo       string `protobuf:"bytes,1,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`                    // 订单号,没有订单号的时候生成订单,有订单号修改订单状态
	Status        uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                                    // 交易状态, 1交易成功; 3:交易失败
	PresentAmount uint32 `protobuf:"varint,3,opt,name=present_amount,json=presentAmount,proto3" json:"present_amount,omitempty"` // 赠送金额,单位:分
}

func (x *UserChargeChangeReq) Reset() {
	*x = UserChargeChangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChargeChangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChargeChangeReq) ProtoMessage() {}

func (x *UserChargeChangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChargeChangeReq.ProtoReflect.Descriptor instead.
func (*UserChargeChangeReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{59}
}

func (x *UserChargeChangeReq) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *UserChargeChangeReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserChargeChangeReq) GetPresentAmount() uint32 {
	if x != nil {
		return x.PresentAmount
	}
	return 0
}

type UserChargeStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId uint32 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // 交易记录表id, 有id,id优先查询
	TradeNo       string `protobuf:"bytes,2,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`                    // 订单号,没有订单号的时候生成订单,有订单号修改订单状态
}

func (x *UserChargeStatusReq) Reset() {
	*x = UserChargeStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChargeStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChargeStatusReq) ProtoMessage() {}

func (x *UserChargeStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChargeStatusReq.ProtoReflect.Descriptor instead.
func (*UserChargeStatusReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{60}
}

func (x *UserChargeStatusReq) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *UserChargeStatusReq) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

type UserChargeStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserChargeStatusResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserChargeStatusResp) Reset() {
	*x = UserChargeStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChargeStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChargeStatusResp) ProtoMessage() {}

func (x *UserChargeStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChargeStatusResp.ProtoReflect.Descriptor instead.
func (*UserChargeStatusResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{61}
}

func (x *UserChargeStatusResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserChargeStatusResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserChargeStatusResp) GetData() *UserChargeStatusResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserUnFrozenCapitalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId uint32 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Status        uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UserUnFrozenCapitalReq) Reset() {
	*x = UserUnFrozenCapitalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUnFrozenCapitalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUnFrozenCapitalReq) ProtoMessage() {}

func (x *UserUnFrozenCapitalReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUnFrozenCapitalReq.ProtoReflect.Descriptor instead.
func (*UserUnFrozenCapitalReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{62}
}

func (x *UserUnFrozenCapitalReq) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *UserUnFrozenCapitalReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UserAccountChangePriceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId               uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CredentialChainPrice    uint32 `protobuf:"varint,2,opt,name=credential_chain_price,json=credentialChainPrice,proto3" json:"credential_chain_price,omitempty"`
	CollectionCastingPrice  uint32 `protobuf:"varint,3,opt,name=collection_casting_price,json=collectionCastingPrice,proto3" json:"collection_casting_price,omitempty"`
	CollectionOnlinePrice   uint32 `protobuf:"varint,4,opt,name=collection_online_price,json=collectionOnlinePrice,proto3" json:"collection_online_price,omitempty"`
	CollectionOfflinePrice  uint32 `protobuf:"varint,5,opt,name=collection_offline_price,json=collectionOfflinePrice,proto3" json:"collection_offline_price,omitempty"`
	CollectionTransferPrice uint32 `protobuf:"varint,6,opt,name=collection_transfer_price,json=collectionTransferPrice,proto3" json:"collection_transfer_price,omitempty"`
	ApiCallPrice            uint32 `protobuf:"varint,7,opt,name=api_call_price,json=apiCallPrice,proto3" json:"api_call_price,omitempty"`
}

func (x *UserAccountChangePriceReq) Reset() {
	*x = UserAccountChangePriceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountChangePriceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountChangePriceReq) ProtoMessage() {}

func (x *UserAccountChangePriceReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountChangePriceReq.ProtoReflect.Descriptor instead.
func (*UserAccountChangePriceReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{63}
}

func (x *UserAccountChangePriceReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserAccountChangePriceReq) GetCredentialChainPrice() uint32 {
	if x != nil {
		return x.CredentialChainPrice
	}
	return 0
}

func (x *UserAccountChangePriceReq) GetCollectionCastingPrice() uint32 {
	if x != nil {
		return x.CollectionCastingPrice
	}
	return 0
}

func (x *UserAccountChangePriceReq) GetCollectionOnlinePrice() uint32 {
	if x != nil {
		return x.CollectionOnlinePrice
	}
	return 0
}

func (x *UserAccountChangePriceReq) GetCollectionOfflinePrice() uint32 {
	if x != nil {
		return x.CollectionOfflinePrice
	}
	return 0
}

func (x *UserAccountChangePriceReq) GetCollectionTransferPrice() uint32 {
	if x != nil {
		return x.CollectionTransferPrice
	}
	return 0
}

func (x *UserAccountChangePriceReq) GetApiCallPrice() uint32 {
	if x != nil {
		return x.ApiCallPrice
	}
	return 0
}

type UserAccountInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"` // 用户手机号,与用户Email互斥
	Email  string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`   // 用户Email,与用户手机号互斥
}

func (x *UserAccountInfoReq) Reset() {
	*x = UserAccountInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountInfoReq) ProtoMessage() {}

func (x *UserAccountInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountInfoReq.ProtoReflect.Descriptor instead.
func (*UserAccountInfoReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{64}
}

func (x *UserAccountInfoReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserAccountInfoReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type UserAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId               uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                              // 账户ID
	AccountType             uint32 `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`                                        // 账号类型：1-个人;2-企业;3-个体工商户
	AppNo                   string `protobuf:"bytes,3,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`                                                           // 注册该账号的应用编号
	Mobile                  string `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`                                                                      // 手机号码
	Email                   string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`                                                                        // (登录账号)邮件地址
	PwdQuestion             string `protobuf:"bytes,7,opt,name=pwd_question,json=pwdQuestion,proto3" json:"pwd_question,omitempty"`                                         // 密保问题
	PwdAnswer               string `protobuf:"bytes,8,opt,name=pwd_answer,json=pwdAnswer,proto3" json:"pwd_answer,omitempty"`                                               // 密保答案
	CertifyAuditStatus      uint32 `protobuf:"varint,9,opt,name=certify_audit_status,json=certifyAuditStatus,proto3" json:"certify_audit_status,omitempty"`                 // 实名认证审核状态：0-待认证；1-审核通过；2-审核未通过；3-审核中
	CreatorAuditStatus      uint32 `protobuf:"varint,10,opt,name=creator_audit_status,json=creatorAuditStatus,proto3" json:"creator_audit_status,omitempty"`                // 创作人审核状态：0-未申请；1-审核通过；2-审核未通过；3-审核中
	MerchantStatus          uint32 `protobuf:"varint,11,opt,name=merchant_status,json=merchantStatus,proto3" json:"merchant_status,omitempty"`                              // 商户签约状态：0-待签约；1-已签约；2-签约失败
	CapitalBalance          uint32 `protobuf:"varint,12,opt,name=capital_balance,json=capitalBalance,proto3" json:"capital_balance,omitempty"`                              // 资金余额
	PresentBalance          uint32 `protobuf:"varint,13,opt,name=present_balance,json=presentBalance,proto3" json:"present_balance,omitempty"`                              // 充值赠送金额
	FrozenPaidAmount        uint32 `protobuf:"varint,14,opt,name=frozen_paid_amount,json=frozenPaidAmount,proto3" json:"frozen_paid_amount,omitempty"`                      // 冻结充值的金额，单位：分
	FrozenPresentAmount     uint32 `protobuf:"varint,15,opt,name=frozen_present_amount,json=frozenPresentAmount,proto3" json:"frozen_present_amount,omitempty"`             // 冻结赠送的金额，单位：分
	CredentialChainPrice    uint32 `protobuf:"varint,16,opt,name=credential_chain_price,json=credentialChainPrice,proto3" json:"credential_chain_price,omitempty"`          // 存证上链价格（单位：分/次）
	CollectionCastingPrice  uint32 `protobuf:"varint,17,opt,name=collection_casting_price,json=collectionCastingPrice,proto3" json:"collection_casting_price,omitempty"`    // 藏品铸造上链价格（单位：分/次）
	CollectionOnlinePrice   uint32 `protobuf:"varint,18,opt,name=collection_online_price,json=collectionOnlinePrice,proto3" json:"collection_online_price,omitempty"`       // 藏品链上上架价格（单位：分/次）
	CollectionOfflinePrice  uint32 `protobuf:"varint,19,opt,name=collection_offline_price,json=collectionOfflinePrice,proto3" json:"collection_offline_price,omitempty"`    // 藏品链上下架价格（单位：分/次）
	CollectionTransferPrice uint32 `protobuf:"varint,20,opt,name=collection_transfer_price,json=collectionTransferPrice,proto3" json:"collection_transfer_price,omitempty"` // 藏品转让上链价格（单位：分/次）
	ApiCallPrice            uint32 `protobuf:"varint,21,opt,name=api_call_price,json=apiCallPrice,proto3" json:"api_call_price,omitempty"`                                  // 其它API调用价格（单位：分/次）
	DeletedAt               uint32 `protobuf:"varint,22,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`                                             // 账户删除时间
	Status                  uint32 `protobuf:"varint,23,opt,name=status,proto3" json:"status,omitempty"`                                                                    // 有效状态：0-删除；1-有效；2-禁用
	ModifyTime              uint32 `protobuf:"varint,24,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`                                          // 修改时间
	CreateTime              uint32 `protobuf:"varint,25,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                          // 注册时间
}

func (x *UserAccountInfo) Reset() {
	*x = UserAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountInfo) ProtoMessage() {}

func (x *UserAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountInfo.ProtoReflect.Descriptor instead.
func (*UserAccountInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{65}
}

func (x *UserAccountInfo) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserAccountInfo) GetAccountType() uint32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *UserAccountInfo) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *UserAccountInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserAccountInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserAccountInfo) GetPwdQuestion() string {
	if x != nil {
		return x.PwdQuestion
	}
	return ""
}

func (x *UserAccountInfo) GetPwdAnswer() string {
	if x != nil {
		return x.PwdAnswer
	}
	return ""
}

func (x *UserAccountInfo) GetCertifyAuditStatus() uint32 {
	if x != nil {
		return x.CertifyAuditStatus
	}
	return 0
}

func (x *UserAccountInfo) GetCreatorAuditStatus() uint32 {
	if x != nil {
		return x.CreatorAuditStatus
	}
	return 0
}

func (x *UserAccountInfo) GetMerchantStatus() uint32 {
	if x != nil {
		return x.MerchantStatus
	}
	return 0
}

func (x *UserAccountInfo) GetCapitalBalance() uint32 {
	if x != nil {
		return x.CapitalBalance
	}
	return 0
}

func (x *UserAccountInfo) GetPresentBalance() uint32 {
	if x != nil {
		return x.PresentBalance
	}
	return 0
}

func (x *UserAccountInfo) GetFrozenPaidAmount() uint32 {
	if x != nil {
		return x.FrozenPaidAmount
	}
	return 0
}

func (x *UserAccountInfo) GetFrozenPresentAmount() uint32 {
	if x != nil {
		return x.FrozenPresentAmount
	}
	return 0
}

func (x *UserAccountInfo) GetCredentialChainPrice() uint32 {
	if x != nil {
		return x.CredentialChainPrice
	}
	return 0
}

func (x *UserAccountInfo) GetCollectionCastingPrice() uint32 {
	if x != nil {
		return x.CollectionCastingPrice
	}
	return 0
}

func (x *UserAccountInfo) GetCollectionOnlinePrice() uint32 {
	if x != nil {
		return x.CollectionOnlinePrice
	}
	return 0
}

func (x *UserAccountInfo) GetCollectionOfflinePrice() uint32 {
	if x != nil {
		return x.CollectionOfflinePrice
	}
	return 0
}

func (x *UserAccountInfo) GetCollectionTransferPrice() uint32 {
	if x != nil {
		return x.CollectionTransferPrice
	}
	return 0
}

func (x *UserAccountInfo) GetApiCallPrice() uint32 {
	if x != nil {
		return x.ApiCallPrice
	}
	return 0
}

func (x *UserAccountInfo) GetDeletedAt() uint32 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *UserAccountInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserAccountInfo) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *UserAccountInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type UserAccountInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserAccountInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 账户信息
}

func (x *UserAccountInfoResp) Reset() {
	*x = UserAccountInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountInfoResp) ProtoMessage() {}

func (x *UserAccountInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountInfoResp.ProtoReflect.Descriptor instead.
func (*UserAccountInfoResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{66}
}

func (x *UserAccountInfoResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAccountInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserAccountInfoResp) GetData() *UserAccountInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAdminDeveloperAuditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // 账户ID
	Status    uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                        // 审核状态,11审核通过;2审核驳回
	Reason    string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`                         // 开发者认证审核不通过原因,审核驳回时必填
}

func (x *UserAdminDeveloperAuditReq) Reset() {
	*x = UserAdminDeveloperAuditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminDeveloperAuditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminDeveloperAuditReq) ProtoMessage() {}

func (x *UserAdminDeveloperAuditReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminDeveloperAuditReq.ProtoReflect.Descriptor instead.
func (*UserAdminDeveloperAuditReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{67}
}

func (x *UserAdminDeveloperAuditReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserAdminDeveloperAuditReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserAdminDeveloperAuditReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ChangePwdNewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`      // 账户ID
	OldPassword string `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"` // 旧密码6-16位
	Password    string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                          // 新密码6-16位
}

func (x *ChangePwdNewReq) Reset() {
	*x = ChangePwdNewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePwdNewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePwdNewReq) ProtoMessage() {}

func (x *ChangePwdNewReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePwdNewReq.ProtoReflect.Descriptor instead.
func (*ChangePwdNewReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{68}
}

func (x *ChangePwdNewReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ChangePwdNewReq) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePwdNewReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RealNameNewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       uint32         `protobuf:"varint,30,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // 账户ID
	AccountType     uint32         `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	RealName        string         `protobuf:"bytes,2,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	ShortName       string         `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	IdNo            string         `protobuf:"bytes,4,opt,name=id_no,json=idNo,proto3" json:"id_no,omitempty"`
	IdPhone         string         `protobuf:"bytes,5,opt,name=id_phone,json=idPhone,proto3" json:"id_phone,omitempty"`
	IdPhoneCode     uint32         `protobuf:"varint,6,opt,name=id_phone_code,json=idPhoneCode,proto3" json:"id_phone_code,omitempty"`
	IdPicFront      string         `protobuf:"bytes,7,opt,name=id_pic_front,json=idPicFront,proto3" json:"id_pic_front,omitempty"`
	IdPicBack       string         `protobuf:"bytes,8,opt,name=id_pic_back,json=idPicBack,proto3" json:"id_pic_back,omitempty"`
	IdPicHand       string         `protobuf:"bytes,9,opt,name=id_pic_hand,json=idPicHand,proto3" json:"id_pic_hand,omitempty"`
	LicenseNo       string         `protobuf:"bytes,10,opt,name=license_no,json=licenseNo,proto3" json:"license_no,omitempty"`
	LicensePic      string         `protobuf:"bytes,11,opt,name=license_pic,json=licensePic,proto3" json:"license_pic,omitempty"`
	LegalPersonName string         `protobuf:"bytes,12,opt,name=legal_person_name,json=legalPersonName,proto3" json:"legal_person_name,omitempty"`
	ContactName     string         `protobuf:"bytes,13,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	ContactPhone    string         `protobuf:"bytes,14,opt,name=contact_phone,json=contactPhone,proto3" json:"contact_phone,omitempty"`
	ContactAddress  string         `protobuf:"bytes,15,opt,name=contact_address,json=contactAddress,proto3" json:"contact_address,omitempty"`
	Logo            string         `protobuf:"bytes,16,opt,name=logo,proto3" json:"logo,omitempty"`
	Claim           *RealNameClaim `protobuf:"bytes,17,opt,name=claim,proto3" json:"claim,omitempty"`
	DeveloperFlag   bool           `protobuf:"varint,20,opt,name=developer_flag,json=developerFlag,proto3" json:"developer_flag,omitempty"` // 是否申请成为开发者
}

func (x *RealNameNewReq) Reset() {
	*x = RealNameNewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealNameNewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealNameNewReq) ProtoMessage() {}

func (x *RealNameNewReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealNameNewReq.ProtoReflect.Descriptor instead.
func (*RealNameNewReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{69}
}

func (x *RealNameNewReq) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *RealNameNewReq) GetAccountType() uint32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *RealNameNewReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *RealNameNewReq) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *RealNameNewReq) GetIdNo() string {
	if x != nil {
		return x.IdNo
	}
	return ""
}

func (x *RealNameNewReq) GetIdPhone() string {
	if x != nil {
		return x.IdPhone
	}
	return ""
}

func (x *RealNameNewReq) GetIdPhoneCode() uint32 {
	if x != nil {
		return x.IdPhoneCode
	}
	return 0
}

func (x *RealNameNewReq) GetIdPicFront() string {
	if x != nil {
		return x.IdPicFront
	}
	return ""
}

func (x *RealNameNewReq) GetIdPicBack() string {
	if x != nil {
		return x.IdPicBack
	}
	return ""
}

func (x *RealNameNewReq) GetIdPicHand() string {
	if x != nil {
		return x.IdPicHand
	}
	return ""
}

func (x *RealNameNewReq) GetLicenseNo() string {
	if x != nil {
		return x.LicenseNo
	}
	return ""
}

func (x *RealNameNewReq) GetLicensePic() string {
	if x != nil {
		return x.LicensePic
	}
	return ""
}

func (x *RealNameNewReq) GetLegalPersonName() string {
	if x != nil {
		return x.LegalPersonName
	}
	return ""
}

func (x *RealNameNewReq) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *RealNameNewReq) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *RealNameNewReq) GetContactAddress() string {
	if x != nil {
		return x.ContactAddress
	}
	return ""
}

func (x *RealNameNewReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *RealNameNewReq) GetClaim() *RealNameClaim {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *RealNameNewReq) GetDeveloperFlag() bool {
	if x != nil {
		return x.DeveloperFlag
	}
	return false
}

type RealNameNewResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *RealNameNewResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RealNameNewResp) Reset() {
	*x = RealNameNewResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealNameNewResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealNameNewResp) ProtoMessage() {}

func (x *RealNameNewResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealNameNewResp.ProtoReflect.Descriptor instead.
func (*RealNameNewResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{70}
}

func (x *RealNameNewResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RealNameNewResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RealNameNewResp) GetData() *RealNameNewResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInvoiceListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit     uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	StartDate uint64 `protobuf:"varint,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   uint64 `protobuf:"varint,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // 结束日期
}

func (x *UserInvoiceListReq) Reset() {
	*x = UserInvoiceListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceListReq) ProtoMessage() {}

func (x *UserInvoiceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceListReq.ProtoReflect.Descriptor instead.
func (*UserInvoiceListReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{71}
}

func (x *UserInvoiceListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserInvoiceListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserInvoiceListReq) GetStartDate() uint64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *UserInvoiceListReq) GetEndDate() uint64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

type UserInvoiceListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserInvoiceListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInvoiceListResp) Reset() {
	*x = UserInvoiceListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceListResp) ProtoMessage() {}

func (x *UserInvoiceListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceListResp.ProtoReflect.Descriptor instead.
func (*UserInvoiceListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{72}
}

func (x *UserInvoiceListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserInvoiceListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserInvoiceListResp) GetData() *UserInvoiceListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInvoiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date          string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Amount        uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Progress      uint32 `protobuf:"varint,4,opt,name=progress,proto3" json:"progress,omitempty"`
	InvoiceInfoId uint32 `protobuf:"varint,5,opt,name=invoice_info_id,json=invoiceInfoId,proto3" json:"invoice_info_id,omitempty"`
}

func (x *UserInvoiceInfo) Reset() {
	*x = UserInvoiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceInfo) ProtoMessage() {}

func (x *UserInvoiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceInfo.ProtoReflect.Descriptor instead.
func (*UserInvoiceInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{73}
}

func (x *UserInvoiceInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInvoiceInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UserInvoiceInfo) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserInvoiceInfo) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *UserInvoiceInfo) GetInvoiceInfoId() uint32 {
	if x != nil {
		return x.InvoiceInfoId
	}
	return 0
}

type UserInvoicedListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate uint64 `protobuf:"varint,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   uint64 `protobuf:"varint,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // 结束日期
	Page      uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit     uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UserInvoicedListReq) Reset() {
	*x = UserInvoicedListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoicedListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoicedListReq) ProtoMessage() {}

func (x *UserInvoicedListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoicedListReq.ProtoReflect.Descriptor instead.
func (*UserInvoicedListReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{74}
}

func (x *UserInvoicedListReq) GetStartDate() uint64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *UserInvoicedListReq) GetEndDate() uint64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *UserInvoicedListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserInvoicedListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UserInvoicedListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserInvoicedListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInvoicedListResp) Reset() {
	*x = UserInvoicedListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoicedListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoicedListResp) ProtoMessage() {}

func (x *UserInvoicedListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoicedListResp.ProtoReflect.Descriptor instead.
func (*UserInvoicedListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{75}
}

func (x *UserInvoicedListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserInvoicedListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserInvoicedListResp) GetData() *UserInvoicedListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInvoicedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplyInvoiceId uint32 `protobuf:"varint,2,opt,name=apply_invoice_id,json=applyInvoiceId,proto3" json:"apply_invoice_id,omitempty"`
	Amount         uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	InvoiceNumber  string `protobuf:"bytes,4,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	ApplyDate      uint32 `protobuf:"varint,5,opt,name=apply_date,json=applyDate,proto3" json:"apply_date,omitempty"` // 创建时间
	ActualDate     uint32 `protobuf:"varint,6,opt,name=actual_date,json=actualDate,proto3" json:"actual_date,omitempty"`
	InclusiveMonth uint32 `protobuf:"varint,7,opt,name=inclusive_month,json=inclusiveMonth,proto3" json:"inclusive_month,omitempty"`
}

func (x *UserInvoicedInfo) Reset() {
	*x = UserInvoicedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoicedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoicedInfo) ProtoMessage() {}

func (x *UserInvoicedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoicedInfo.ProtoReflect.Descriptor instead.
func (*UserInvoicedInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{76}
}

func (x *UserInvoicedInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInvoicedInfo) GetApplyInvoiceId() uint32 {
	if x != nil {
		return x.ApplyInvoiceId
	}
	return 0
}

func (x *UserInvoicedInfo) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserInvoicedInfo) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *UserInvoicedInfo) GetApplyDate() uint32 {
	if x != nil {
		return x.ApplyDate
	}
	return 0
}

func (x *UserInvoicedInfo) GetActualDate() uint32 {
	if x != nil {
		return x.ActualDate
	}
	return 0
}

func (x *UserInvoicedInfo) GetInclusiveMonth() uint32 {
	if x != nil {
		return x.InclusiveMonth
	}
	return 0
}

type UserInvoicedInclusiveMonthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Page  uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UserInvoicedInclusiveMonthReq) Reset() {
	*x = UserInvoicedInclusiveMonthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoicedInclusiveMonthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoicedInclusiveMonthReq) ProtoMessage() {}

func (x *UserInvoicedInclusiveMonthReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoicedInclusiveMonthReq.ProtoReflect.Descriptor instead.
func (*UserInvoicedInclusiveMonthReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{77}
}

func (x *UserInvoicedInclusiveMonthReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInvoicedInclusiveMonthReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserInvoicedInclusiveMonthReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UserInvoicedInclusiveMonthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserInvoicedInclusiveMonthResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInvoicedInclusiveMonthResp) Reset() {
	*x = UserInvoicedInclusiveMonthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoicedInclusiveMonthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoicedInclusiveMonthResp) ProtoMessage() {}

func (x *UserInvoicedInclusiveMonthResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoicedInclusiveMonthResp.ProtoReflect.Descriptor instead.
func (*UserInvoicedInclusiveMonthResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{78}
}

func (x *UserInvoicedInclusiveMonthResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserInvoicedInclusiveMonthResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserInvoicedInclusiveMonthResp) GetData() *UserInvoicedInclusiveMonthResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInvoiceInclusiveMonthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date   string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Amount uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UserInvoiceInclusiveMonthInfo) Reset() {
	*x = UserInvoiceInclusiveMonthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceInclusiveMonthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceInclusiveMonthInfo) ProtoMessage() {}

func (x *UserInvoiceInclusiveMonthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceInclusiveMonthInfo.ProtoReflect.Descriptor instead.
func (*UserInvoiceInclusiveMonthInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{79}
}

func (x *UserInvoiceInclusiveMonthInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInvoiceInclusiveMonthInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UserInvoiceInclusiveMonthInfo) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type UserInvoiceGetInfoByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *UserInvoiceGetInfoByIdReq) Reset() {
	*x = UserInvoiceGetInfoByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceGetInfoByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceGetInfoByIdReq) ProtoMessage() {}

func (x *UserInvoiceGetInfoByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceGetInfoByIdReq.ProtoReflect.Descriptor instead.
func (*UserInvoiceGetInfoByIdReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{80}
}

func (x *UserInvoiceGetInfoByIdReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInvoiceGetInfoByIdReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type UserInvoiceGetInfoByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserAdminInvoiceGetInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInvoiceGetInfoByIdResp) Reset() {
	*x = UserInvoiceGetInfoByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceGetInfoByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceGetInfoByIdResp) ProtoMessage() {}

func (x *UserInvoiceGetInfoByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceGetInfoByIdResp.ProtoReflect.Descriptor instead.
func (*UserInvoiceGetInfoByIdResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{81}
}

func (x *UserInvoiceGetInfoByIdResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserInvoiceGetInfoByIdResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserInvoiceGetInfoByIdResp) GetData() *UserAdminInvoiceGetInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInvoiceConsumptiveDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 账户ID
	Page  uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UserInvoiceConsumptiveDetailReq) Reset() {
	*x = UserInvoiceConsumptiveDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceConsumptiveDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceConsumptiveDetailReq) ProtoMessage() {}

func (x *UserInvoiceConsumptiveDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceConsumptiveDetailReq.ProtoReflect.Descriptor instead.
func (*UserInvoiceConsumptiveDetailReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{82}
}

func (x *UserInvoiceConsumptiveDetailReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInvoiceConsumptiveDetailReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserInvoiceConsumptiveDetailReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UserInvoiceConsumptiveDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserInvoiceConsumptiveDetailResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInvoiceConsumptiveDetailResp) Reset() {
	*x = UserInvoiceConsumptiveDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceConsumptiveDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceConsumptiveDetailResp) ProtoMessage() {}

func (x *UserInvoiceConsumptiveDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceConsumptiveDetailResp.ProtoReflect.Descriptor instead.
func (*UserInvoiceConsumptiveDetailResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{83}
}

func (x *UserInvoiceConsumptiveDetailResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserInvoiceConsumptiveDetailResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserInvoiceConsumptiveDetailResp) GetData() *UserInvoiceConsumptiveDetailResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserCapitalAllDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionType uint32 `protobuf:"varint,1,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	TradeNo         string `protobuf:"bytes,2,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	PaidAmount      uint32 `protobuf:"varint,3,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount,omitempty"`
	PresentAmount   uint32 `protobuf:"varint,4,opt,name=present_amount,json=presentAmount,proto3" json:"present_amount,omitempty"`
	Status          uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime      uint32 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UserCapitalAllDetail) Reset() {
	*x = UserCapitalAllDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalAllDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalAllDetail) ProtoMessage() {}

func (x *UserCapitalAllDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalAllDetail.ProtoReflect.Descriptor instead.
func (*UserCapitalAllDetail) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{84}
}

func (x *UserCapitalAllDetail) GetTransactionType() uint32 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *UserCapitalAllDetail) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *UserCapitalAllDetail) GetPaidAmount() uint32 {
	if x != nil {
		return x.PaidAmount
	}
	return 0
}

func (x *UserCapitalAllDetail) GetPresentAmount() uint32 {
	if x != nil {
		return x.PresentAmount
	}
	return 0
}

func (x *UserCapitalAllDetail) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserCapitalAllDetail) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ConsumptiveDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealType      uint32 `protobuf:"varint,1,opt,name=deal_type,json=dealType,proto3" json:"deal_type,omitempty"`
	SerialNumber  string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	ConsumeAmount uint32 `protobuf:"varint,3,opt,name=consume_amount,json=consumeAmount,proto3" json:"consume_amount,omitempty"`
	GiveGas       uint32 `protobuf:"varint,4,opt,name=give_gas,json=giveGas,proto3" json:"give_gas,omitempty"`
	Status        uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    uint32 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
}

func (x *ConsumptiveDetailInfo) Reset() {
	*x = ConsumptiveDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumptiveDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumptiveDetailInfo) ProtoMessage() {}

func (x *ConsumptiveDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumptiveDetailInfo.ProtoReflect.Descriptor instead.
func (*ConsumptiveDetailInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{85}
}

func (x *ConsumptiveDetailInfo) GetDealType() uint32 {
	if x != nil {
		return x.DealType
	}
	return 0
}

func (x *ConsumptiveDetailInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ConsumptiveDetailInfo) GetConsumeAmount() uint32 {
	if x != nil {
		return x.ConsumeAmount
	}
	return 0
}

func (x *ConsumptiveDetailInfo) GetGiveGas() uint32 {
	if x != nil {
		return x.GiveGas
	}
	return 0
}

func (x *ConsumptiveDetailInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ConsumptiveDetailInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type UserInvoiceApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	// uint32 id = 1 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "可开发票表id"}];
	Type                  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Amount                uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	PersonalName          string `protobuf:"bytes,4,opt,name=personal_name,json=personalName,proto3" json:"personal_name,omitempty"`
	CompanyName           string `protobuf:"bytes,5,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	BusinessLicenseNumber string `protobuf:"bytes,6,opt,name=business_license_number,json=businessLicenseNumber,proto3" json:"business_license_number,omitempty"`
	RegisteredAddress     string `protobuf:"bytes,7,opt,name=registered_address,json=registeredAddress,proto3" json:"registered_address,omitempty"`
	Telephone             string `protobuf:"bytes,8,opt,name=telephone,proto3" json:"telephone,omitempty"`
	BankAccount           string `protobuf:"bytes,9,opt,name=bank_account,json=bankAccount,proto3" json:"bank_account,omitempty"`
	CreditCardNumbers     string `protobuf:"bytes,10,opt,name=credit_card_numbers,json=creditCardNumbers,proto3" json:"credit_card_numbers,omitempty"`
	Name                  string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Mobile                string `protobuf:"bytes,12,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Area                  string `protobuf:"bytes,13,opt,name=area,proto3" json:"area,omitempty"`
	Address               string `protobuf:"bytes,14,opt,name=address,proto3" json:"address,omitempty"`
	Account               string `protobuf:"bytes,15,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *UserInvoiceApplyReq) Reset() {
	*x = UserInvoiceApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceApplyReq) ProtoMessage() {}

func (x *UserInvoiceApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceApplyReq.ProtoReflect.Descriptor instead.
func (*UserInvoiceApplyReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{86}
}

func (x *UserInvoiceApplyReq) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UserInvoiceApplyReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UserInvoiceApplyReq) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserInvoiceApplyReq) GetPersonalName() string {
	if x != nil {
		return x.PersonalName
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetBusinessLicenseNumber() string {
	if x != nil {
		return x.BusinessLicenseNumber
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetRegisteredAddress() string {
	if x != nil {
		return x.RegisteredAddress
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetCreditCardNumbers() string {
	if x != nil {
		return x.CreditCardNumbers
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserInvoiceApplyReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type UserInvoiceApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
}

func (x *UserInvoiceApplyResp) Reset() {
	*x = UserInvoiceApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceApplyResp) ProtoMessage() {}

func (x *UserInvoiceApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceApplyResp.ProtoReflect.Descriptor instead.
func (*UserInvoiceApplyResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{87}
}

func (x *UserInvoiceApplyResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserInvoiceApplyResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UserAdminInvoiceSetInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InvoiceNumber  string `protobuf:"bytes,2,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	TrackingNumber string `protobuf:"bytes,3,opt,name=tracking_number,json=trackingNumber,proto3" json:"tracking_number,omitempty"`
}

func (x *UserAdminInvoiceSetInfoReq) Reset() {
	*x = UserAdminInvoiceSetInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceSetInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceSetInfoReq) ProtoMessage() {}

func (x *UserAdminInvoiceSetInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceSetInfoReq.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceSetInfoReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{88}
}

func (x *UserAdminInvoiceSetInfoReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAdminInvoiceSetInfoReq) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *UserAdminInvoiceSetInfoReq) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

type UserAdminInvoiceSetInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
}

func (x *UserAdminInvoiceSetInfoResp) Reset() {
	*x = UserAdminInvoiceSetInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceSetInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceSetInfoResp) ProtoMessage() {}

func (x *UserAdminInvoiceSetInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceSetInfoResp.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceSetInfoResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{89}
}

func (x *UserAdminInvoiceSetInfoResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAdminInvoiceSetInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UserAdminInvoiceListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account   string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	StartDate uint32 `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   uint32 `protobuf:"varint,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // 结束日期
	Progress  uint32 `protobuf:"varint,4,opt,name=progress,proto3" json:"progress,omitempty"`
	ApplyDate uint32 `protobuf:"varint,5,opt,name=applyDate,proto3" json:"applyDate,omitempty"`
	Page      uint32 `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Limit     uint32 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UserAdminInvoiceListReq) Reset() {
	*x = UserAdminInvoiceListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceListReq) ProtoMessage() {}

func (x *UserAdminInvoiceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceListReq.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceListReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{90}
}

func (x *UserAdminInvoiceListReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserAdminInvoiceListReq) GetStartDate() uint32 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *UserAdminInvoiceListReq) GetEndDate() uint32 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *UserAdminInvoiceListReq) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *UserAdminInvoiceListReq) GetApplyDate() uint32 {
	if x != nil {
		return x.ApplyDate
	}
	return 0
}

func (x *UserAdminInvoiceListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserAdminInvoiceListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UserAdminInvoiceListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserAdminInvoiceListResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAdminInvoiceListResp) Reset() {
	*x = UserAdminInvoiceListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceListResp) ProtoMessage() {}

func (x *UserAdminInvoiceListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceListResp.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceListResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{91}
}

func (x *UserAdminInvoiceListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAdminInvoiceListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserAdminInvoiceListResp) GetData() *UserAdminInvoiceListResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAdminInvoiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Account   string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Amount    uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	ApplyDate uint32 `protobuf:"varint,4,opt,name=apply_date,json=applyDate,proto3" json:"apply_date,omitempty"`
	Progress  uint32 `protobuf:"varint,5,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *UserAdminInvoiceInfo) Reset() {
	*x = UserAdminInvoiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceInfo) ProtoMessage() {}

func (x *UserAdminInvoiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceInfo.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{92}
}

func (x *UserAdminInvoiceInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAdminInvoiceInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserAdminInvoiceInfo) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserAdminInvoiceInfo) GetApplyDate() uint32 {
	if x != nil {
		return x.ApplyDate
	}
	return 0
}

func (x *UserAdminInvoiceInfo) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type UserAdminInvoiceGetInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserAdminInvoiceGetInfoReq) Reset() {
	*x = UserAdminInvoiceGetInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceGetInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceGetInfoReq) ProtoMessage() {}

func (x *UserAdminInvoiceGetInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceGetInfoReq.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceGetInfoReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{93}
}

func (x *UserAdminInvoiceGetInfoReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UserAdminInvoiceGetInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserAdminInvoiceGetInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAdminInvoiceGetInfoResp) Reset() {
	*x = UserAdminInvoiceGetInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceGetInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceGetInfoResp) ProtoMessage() {}

func (x *UserAdminInvoiceGetInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceGetInfoResp.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceGetInfoResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{94}
}

func (x *UserAdminInvoiceGetInfoResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAdminInvoiceGetInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserAdminInvoiceGetInfoResp) GetData() *UserAdminInvoiceGetInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAdminInvoiceGetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                uint32 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Progress              uint32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	Type                  uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	PersonalName          string `protobuf:"bytes,4,opt,name=personal_name,json=personalName,proto3" json:"personal_name,omitempty"`
	CompanyName           string `protobuf:"bytes,5,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	BusinessLicenseNumber string `protobuf:"bytes,6,opt,name=business_license_number,json=businessLicenseNumber,proto3" json:"business_license_number,omitempty"`
	RegisteredAddress     string `protobuf:"bytes,7,opt,name=registered_address,json=registeredAddress,proto3" json:"registered_address,omitempty"`
	Telephone             string `protobuf:"bytes,8,opt,name=telephone,proto3" json:"telephone,omitempty"`
	BankAccount           string `protobuf:"bytes,9,opt,name=bank_account,json=bankAccount,proto3" json:"bank_account,omitempty"`
	CreditCardNumbers     string `protobuf:"bytes,10,opt,name=credit_card_numbers,json=creditCardNumbers,proto3" json:"credit_card_numbers,omitempty"`
	Name                  string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Mobile                string `protobuf:"bytes,12,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Area                  string `protobuf:"bytes,13,opt,name=area,proto3" json:"area,omitempty"`
	Address               string `protobuf:"bytes,14,opt,name=address,proto3" json:"address,omitempty"`
	Account               string `protobuf:"bytes,15,opt,name=account,proto3" json:"account,omitempty"`
	InvoiceNumber         string `protobuf:"bytes,16,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	TrackingNumber        string `protobuf:"bytes,17,opt,name=tracking_number,json=trackingNumber,proto3" json:"tracking_number,omitempty"`
}

func (x *UserAdminInvoiceGetInfo) Reset() {
	*x = UserAdminInvoiceGetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceGetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceGetInfo) ProtoMessage() {}

func (x *UserAdminInvoiceGetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceGetInfo.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceGetInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{95}
}

func (x *UserAdminInvoiceGetInfo) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserAdminInvoiceGetInfo) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *UserAdminInvoiceGetInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UserAdminInvoiceGetInfo) GetPersonalName() string {
	if x != nil {
		return x.PersonalName
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetBusinessLicenseNumber() string {
	if x != nil {
		return x.BusinessLicenseNumber
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetRegisteredAddress() string {
	if x != nil {
		return x.RegisteredAddress
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetCreditCardNumbers() string {
	if x != nil {
		return x.CreditCardNumbers
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *UserAdminInvoiceGetInfo) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

type UserAdminInvoiceGetMonthsInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Page  uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UserAdminInvoiceGetMonthsInfoReq) Reset() {
	*x = UserAdminInvoiceGetMonthsInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceGetMonthsInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceGetMonthsInfoReq) ProtoMessage() {}

func (x *UserAdminInvoiceGetMonthsInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceGetMonthsInfoReq.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceGetMonthsInfoReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{96}
}

func (x *UserAdminInvoiceGetMonthsInfoReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAdminInvoiceGetMonthsInfoReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserAdminInvoiceGetMonthsInfoReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UserAdminInvoiceGetMonthsInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserAdminInvoiceGetMonthsInfoResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAdminInvoiceGetMonthsInfoResp) Reset() {
	*x = UserAdminInvoiceGetMonthsInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceGetMonthsInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceGetMonthsInfoResp) ProtoMessage() {}

func (x *UserAdminInvoiceGetMonthsInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceGetMonthsInfoResp.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceGetMonthsInfoResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{97}
}

func (x *UserAdminInvoiceGetMonthsInfoResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAdminInvoiceGetMonthsInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserAdminInvoiceGetMonthsInfoResp) GetData() *UserAdminInvoiceGetMonthsInfoResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAdminInvoiceGetMonthsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date   string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Amount uint32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UserAdminInvoiceGetMonthsInfo) Reset() {
	*x = UserAdminInvoiceGetMonthsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceGetMonthsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceGetMonthsInfo) ProtoMessage() {}

func (x *UserAdminInvoiceGetMonthsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceGetMonthsInfo.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceGetMonthsInfo) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{98}
}

func (x *UserAdminInvoiceGetMonthsInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAdminInvoiceGetMonthsInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UserAdminInvoiceGetMonthsInfo) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type UserAdminGetConsumptiveDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID
	Page  uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UserAdminGetConsumptiveDetailReq) Reset() {
	*x = UserAdminGetConsumptiveDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminGetConsumptiveDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminGetConsumptiveDetailReq) ProtoMessage() {}

func (x *UserAdminGetConsumptiveDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminGetConsumptiveDetailReq.ProtoReflect.Descriptor instead.
func (*UserAdminGetConsumptiveDetailReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{99}
}

func (x *UserAdminGetConsumptiveDetailReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAdminGetConsumptiveDetailReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserAdminGetConsumptiveDetailReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UserAdminGetConsumptiveDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string                                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *UserAdminGetConsumptiveDetailResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAdminGetConsumptiveDetailResp) Reset() {
	*x = UserAdminGetConsumptiveDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminGetConsumptiveDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminGetConsumptiveDetailResp) ProtoMessage() {}

func (x *UserAdminGetConsumptiveDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminGetConsumptiveDetailResp.ProtoReflect.Descriptor instead.
func (*UserAdminGetConsumptiveDetailResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{100}
}

func (x *UserAdminGetConsumptiveDetailResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAdminGetConsumptiveDetailResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserAdminGetConsumptiveDetailResp) GetData() *UserAdminGetConsumptiveDetailResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAdminGetConsumptiveDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionType uint32 `protobuf:"varint,1,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	TradeNo         string `protobuf:"bytes,2,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	PaidAmount      uint32 `protobuf:"varint,3,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount,omitempty"`
	PresentAmount   uint32 `protobuf:"varint,4,opt,name=present_amount,json=presentAmount,proto3" json:"present_amount,omitempty"`
	Status          uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime      uint32 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UserAdminGetConsumptiveDetail) Reset() {
	*x = UserAdminGetConsumptiveDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminGetConsumptiveDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminGetConsumptiveDetail) ProtoMessage() {}

func (x *UserAdminGetConsumptiveDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminGetConsumptiveDetail.ProtoReflect.Descriptor instead.
func (*UserAdminGetConsumptiveDetail) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{101}
}

func (x *UserAdminGetConsumptiveDetail) GetTransactionType() uint32 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *UserAdminGetConsumptiveDetail) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *UserAdminGetConsumptiveDetail) GetPaidAmount() uint32 {
	if x != nil {
		return x.PaidAmount
	}
	return 0
}

func (x *UserAdminGetConsumptiveDetail) GetPresentAmount() uint32 {
	if x != nil {
		return x.PresentAmount
	}
	return 0
}

func (x *UserAdminGetConsumptiveDetail) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserAdminGetConsumptiveDetail) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type UserAdminPresentByAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Amount  uint32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Remark  string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"` // ID
}

func (x *UserAdminPresentByAccountReq) Reset() {
	*x = UserAdminPresentByAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminPresentByAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminPresentByAccountReq) ProtoMessage() {}

func (x *UserAdminPresentByAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminPresentByAccountReq.ProtoReflect.Descriptor instead.
func (*UserAdminPresentByAccountReq) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{102}
}

func (x *UserAdminPresentByAccountReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserAdminPresentByAccountReq) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserAdminPresentByAccountReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type UserAdminPresentByAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
}

func (x *UserAdminPresentByAccountResp) Reset() {
	*x = UserAdminPresentByAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminPresentByAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminPresentByAccountResp) ProtoMessage() {}

func (x *UserAdminPresentByAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminPresentByAccountResp.ProtoReflect.Descriptor instead.
func (*UserAdminPresentByAccountResp) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{103}
}

func (x *UserAdminPresentByAccountResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAdminPresentByAccountResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type LoginResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo   *UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Token      string    `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ExpiresIn  uint32    `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	PwdExpired bool      `protobuf:"varint,4,opt,name=pwd_expired,json=pwdExpired,proto3" json:"pwd_expired,omitempty"` // 密码是否过期,true表示密码已过期;false表示密码未过期
}

func (x *LoginResp_Data) Reset() {
	*x = LoginResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp_Data) ProtoMessage() {}

func (x *LoginResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp_Data.ProtoReflect.Descriptor instead.
func (*LoginResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{3, 0}
}

func (x *LoginResp_Data) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *LoginResp_Data) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginResp_Data) GetExpiresIn() uint32 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *LoginResp_Data) GetPwdExpired() bool {
	if x != nil {
		return x.PwdExpired
	}
	return false
}

type RealNameResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialId       uint32 `protobuf:"varint,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	Credential         string `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
	CertifyAuditStatus uint32 `protobuf:"varint,11,opt,name=certify_audit_status,json=certifyAuditStatus,proto3" json:"certify_audit_status,omitempty"`
}

func (x *RealNameResp_Data) Reset() {
	*x = RealNameResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealNameResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealNameResp_Data) ProtoMessage() {}

func (x *RealNameResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealNameResp_Data.ProtoReflect.Descriptor instead.
func (*RealNameResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{13, 0}
}

func (x *RealNameResp_Data) GetCredentialId() uint32 {
	if x != nil {
		return x.CredentialId
	}
	return 0
}

func (x *RealNameResp_Data) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *RealNameResp_Data) GetCertifyAuditStatus() uint32 {
	if x != nil {
		return x.CertifyAuditStatus
	}
	return 0
}

type UserServiceBaseListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserBaseInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserServiceBaseListResp_Data) Reset() {
	*x = UserServiceBaseListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserServiceBaseListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServiceBaseListResp_Data) ProtoMessage() {}

func (x *UserServiceBaseListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServiceBaseListResp_Data.ProtoReflect.Descriptor instead.
func (*UserServiceBaseListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{16, 0}
}

func (x *UserServiceBaseListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserServiceBaseListResp_Data) GetData() []*UserBaseInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32      `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserListResp_Data) Reset() {
	*x = UserListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListResp_Data) ProtoMessage() {}

func (x *UserListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListResp_Data.ProtoReflect.Descriptor instead.
func (*UserListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{17, 0}
}

func (x *UserListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserListResp_Data) GetData() []*UserInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreatorApplyResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreatorApplyResp_Data) Reset() {
	*x = CreatorApplyResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatorApplyResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorApplyResp_Data) ProtoMessage() {}

func (x *CreatorApplyResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorApplyResp_Data.ProtoReflect.Descriptor instead.
func (*CreatorApplyResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CreatorApplyResp_Data) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CreatorListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32             `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*CreatorUserInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CreatorListResp_Data) Reset() {
	*x = CreatorListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatorListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorListResp_Data) ProtoMessage() {}

func (x *CreatorListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorListResp_Data.ProtoReflect.Descriptor instead.
func (*CreatorListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{31, 0}
}

func (x *CreatorListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CreatorListResp_Data) GetData() []*CreatorUserInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAdminListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserAdminInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAdminListResp_Data) Reset() {
	*x = UserAdminListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminListResp_Data) ProtoMessage() {}

func (x *UserAdminListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminListResp_Data.ProtoReflect.Descriptor instead.
func (*UserAdminListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{35, 0}
}

func (x *UserAdminListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserAdminListResp_Data) GetData() []*UserAdminInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAccountAdminListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserAccountAdminInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAccountAdminListResp_Data) Reset() {
	*x = UserAccountAdminListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountAdminListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountAdminListResp_Data) ProtoMessage() {}

func (x *UserAccountAdminListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountAdminListResp_Data.ProtoReflect.Descriptor instead.
func (*UserAccountAdminListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{38, 0}
}

func (x *UserAccountAdminListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserAccountAdminListResp_Data) GetData() []*UserAccountAdminInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserIndexStatisticsResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompositionNum      uint32 `protobuf:"varint,1,opt,name=composition_num,json=compositionNum,proto3" json:"composition_num,omitempty"`
	CopyrightNum        uint32 `protobuf:"varint,2,opt,name=copyright_num,json=copyrightNum,proto3" json:"copyright_num,omitempty"`
	CollectionNum       uint32 `protobuf:"varint,3,opt,name=collection_num,json=collectionNum,proto3" json:"collection_num,omitempty"`
	HoldCollectionNum   uint32 `protobuf:"varint,4,opt,name=hold_collection_num,json=holdCollectionNum,proto3" json:"hold_collection_num,omitempty"`
	CapitalBalance      uint32 `protobuf:"varint,5,opt,name=capital_balance,json=capitalBalance,proto3" json:"capital_balance,omitempty"`
	PresentBalance      uint32 `protobuf:"varint,30,opt,name=present_balance,json=presentBalance,proto3" json:"present_balance,omitempty"`
	FrozenPaidAmount    uint32 `protobuf:"varint,31,opt,name=frozen_paid_amount,json=frozenPaidAmount,proto3" json:"frozen_paid_amount,omitempty"`
	FrozenPresentAmount uint32 `protobuf:"varint,32,opt,name=frozen_present_amount,json=frozenPresentAmount,proto3" json:"frozen_present_amount,omitempty"`
	ChargeNum           uint32 `protobuf:"varint,7,opt,name=charge_num,json=chargeNum,proto3" json:"charge_num,omitempty"`
	PresentChargeNum    uint32 `protobuf:"varint,27,opt,name=present_charge_num,json=presentChargeNum,proto3" json:"present_charge_num,omitempty"`
	ExpendNum           uint32 `protobuf:"varint,8,opt,name=expend_num,json=expendNum,proto3" json:"expend_num,omitempty"`
	PresentExpendNum    uint32 `protobuf:"varint,28,opt,name=present_expend_num,json=presentExpendNum,proto3" json:"present_expend_num,omitempty"`
	DealAmount          uint32 `protobuf:"varint,9,opt,name=deal_amount,json=dealAmount,proto3" json:"deal_amount,omitempty"`
	DealNum             uint32 `protobuf:"varint,10,opt,name=deal_num,json=dealNum,proto3" json:"deal_num,omitempty"`
	RefundAmount        uint32 `protobuf:"varint,11,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
	RefundNum           uint32 `protobuf:"varint,12,opt,name=refund_num,json=refundNum,proto3" json:"refund_num,omitempty"`
}

func (x *UserIndexStatisticsResp_Data) Reset() {
	*x = UserIndexStatisticsResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIndexStatisticsResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIndexStatisticsResp_Data) ProtoMessage() {}

func (x *UserIndexStatisticsResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIndexStatisticsResp_Data.ProtoReflect.Descriptor instead.
func (*UserIndexStatisticsResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{41, 0}
}

func (x *UserIndexStatisticsResp_Data) GetCompositionNum() uint32 {
	if x != nil {
		return x.CompositionNum
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetCopyrightNum() uint32 {
	if x != nil {
		return x.CopyrightNum
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetCollectionNum() uint32 {
	if x != nil {
		return x.CollectionNum
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetHoldCollectionNum() uint32 {
	if x != nil {
		return x.HoldCollectionNum
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetCapitalBalance() uint32 {
	if x != nil {
		return x.CapitalBalance
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetPresentBalance() uint32 {
	if x != nil {
		return x.PresentBalance
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetFrozenPaidAmount() uint32 {
	if x != nil {
		return x.FrozenPaidAmount
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetFrozenPresentAmount() uint32 {
	if x != nil {
		return x.FrozenPresentAmount
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetChargeNum() uint32 {
	if x != nil {
		return x.ChargeNum
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetPresentChargeNum() uint32 {
	if x != nil {
		return x.PresentChargeNum
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetExpendNum() uint32 {
	if x != nil {
		return x.ExpendNum
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetPresentExpendNum() uint32 {
	if x != nil {
		return x.PresentExpendNum
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetDealAmount() uint32 {
	if x != nil {
		return x.DealAmount
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetDealNum() uint32 {
	if x != nil {
		return x.DealNum
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetRefundAmount() uint32 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *UserIndexStatisticsResp_Data) GetRefundNum() uint32 {
	if x != nil {
		return x.RefundNum
	}
	return 0
}

type UserCapitalResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CapitalBalance      uint32 `protobuf:"varint,1,opt,name=capital_balance,json=capitalBalance,proto3" json:"capital_balance,omitempty"`                   // 资金余额(分)
	PresentBalance      uint32 `protobuf:"varint,30,opt,name=present_balance,json=presentBalance,proto3" json:"present_balance,omitempty"`                  // 赠送资金余额(分)
	FrozenPaidAmount    uint32 `protobuf:"varint,31,opt,name=frozen_paid_amount,json=frozenPaidAmount,proto3" json:"frozen_paid_amount,omitempty"`          // 冻结充值的金额(分)
	FrozenPresentAmount uint32 `protobuf:"varint,32,opt,name=frozen_present_amount,json=frozenPresentAmount,proto3" json:"frozen_present_amount,omitempty"` // 冻结赠送的金额(分)
}

func (x *UserCapitalResp_Data) Reset() {
	*x = UserCapitalResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalResp_Data) ProtoMessage() {}

func (x *UserCapitalResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalResp_Data.ProtoReflect.Descriptor instead.
func (*UserCapitalResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{43, 0}
}

func (x *UserCapitalResp_Data) GetCapitalBalance() uint32 {
	if x != nil {
		return x.CapitalBalance
	}
	return 0
}

func (x *UserCapitalResp_Data) GetPresentBalance() uint32 {
	if x != nil {
		return x.PresentBalance
	}
	return 0
}

func (x *UserCapitalResp_Data) GetFrozenPaidAmount() uint32 {
	if x != nil {
		return x.FrozenPaidAmount
	}
	return 0
}

func (x *UserCapitalResp_Data) GetFrozenPresentAmount() uint32 {
	if x != nil {
		return x.FrozenPresentAmount
	}
	return 0
}

type UserCapitalListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32             `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserCapitalInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserCapitalListResp_Data) Reset() {
	*x = UserCapitalListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalListResp_Data) ProtoMessage() {}

func (x *UserCapitalListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalListResp_Data.ProtoReflect.Descriptor instead.
func (*UserCapitalListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{45, 0}
}

func (x *UserCapitalListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserCapitalListResp_Data) GetData() []*UserCapitalInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserCapitalAllListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserCapitalAllInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserCapitalAllListResp_Data) Reset() {
	*x = UserCapitalAllListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapitalAllListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapitalAllListResp_Data) ProtoMessage() {}

func (x *UserCapitalAllListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapitalAllListResp_Data.ProtoReflect.Descriptor instead.
func (*UserCapitalAllListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{48, 0}
}

func (x *UserCapitalAllListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserCapitalAllListResp_Data) GetData() []*UserCapitalAllInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserFrozenCapitalResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*UserFrozenCapitalResultItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"` // 资金冻结结果信息条目
}

func (x *UserFrozenCapitalResp_Data) Reset() {
	*x = UserFrozenCapitalResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFrozenCapitalResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFrozenCapitalResp_Data) ProtoMessage() {}

func (x *UserFrozenCapitalResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFrozenCapitalResp_Data.ProtoReflect.Descriptor instead.
func (*UserFrozenCapitalResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{53, 0}
}

func (x *UserFrozenCapitalResp_Data) GetItems() []*UserFrozenCapitalResultItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type UserChainCostResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost uint32 `protobuf:"varint,1,opt,name=cost,proto3" json:"cost,omitempty"` // 上链预算费用
	Can  bool   `protobuf:"varint,2,opt,name=can,proto3" json:"can,omitempty"`   // 是否可以上链, true表明费用充足, false表示费用不足
}

func (x *UserChainCostResp_Data) Reset() {
	*x = UserChainCostResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChainCostResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChainCostResp_Data) ProtoMessage() {}

func (x *UserChainCostResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChainCostResp_Data.ProtoReflect.Descriptor instead.
func (*UserChainCostResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{56, 0}
}

func (x *UserChainCostResp_Data) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *UserChainCostResp_Data) GetCan() bool {
	if x != nil {
		return x.Can
	}
	return false
}

type UserChargeResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId uint32 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TradeNo       string `protobuf:"bytes,2,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
}

func (x *UserChargeResp_Data) Reset() {
	*x = UserChargeResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChargeResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChargeResp_Data) ProtoMessage() {}

func (x *UserChargeResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChargeResp_Data.ProtoReflect.Descriptor instead.
func (*UserChargeResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{58, 0}
}

func (x *UserChargeResp_Data) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *UserChargeResp_Data) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

type UserChargeStatusResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 交易状态, 1-交易成功;2-交易中;3-交易失败
}

func (x *UserChargeStatusResp_Data) Reset() {
	*x = UserChargeStatusResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChargeStatusResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChargeStatusResp_Data) ProtoMessage() {}

func (x *UserChargeStatusResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChargeStatusResp_Data.ProtoReflect.Descriptor instead.
func (*UserChargeStatusResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{61, 0}
}

func (x *UserChargeStatusResp_Data) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type RealNameNewResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialId       uint32 `protobuf:"varint,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	Credential         string `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
	CertifyAuditStatus uint32 `protobuf:"varint,11,opt,name=certify_audit_status,json=certifyAuditStatus,proto3" json:"certify_audit_status,omitempty"`
}

func (x *RealNameNewResp_Data) Reset() {
	*x = RealNameNewResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealNameNewResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealNameNewResp_Data) ProtoMessage() {}

func (x *RealNameNewResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealNameNewResp_Data.ProtoReflect.Descriptor instead.
func (*RealNameNewResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{70, 0}
}

func (x *RealNameNewResp_Data) GetCredentialId() uint32 {
	if x != nil {
		return x.CredentialId
	}
	return 0
}

func (x *RealNameNewResp_Data) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *RealNameNewResp_Data) GetCertifyAuditStatus() uint32 {
	if x != nil {
		return x.CertifyAuditStatus
	}
	return 0
}

type UserInvoiceListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32             `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserInvoiceInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInvoiceListResp_Data) Reset() {
	*x = UserInvoiceListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceListResp_Data) ProtoMessage() {}

func (x *UserInvoiceListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceListResp_Data.ProtoReflect.Descriptor instead.
func (*UserInvoiceListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{72, 0}
}

func (x *UserInvoiceListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserInvoiceListResp_Data) GetData() []*UserInvoiceInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInvoicedListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32              `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserInvoicedInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInvoicedListResp_Data) Reset() {
	*x = UserInvoicedListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoicedListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoicedListResp_Data) ProtoMessage() {}

func (x *UserInvoicedListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoicedListResp_Data.ProtoReflect.Descriptor instead.
func (*UserInvoicedListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{75, 0}
}

func (x *UserInvoicedListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserInvoicedListResp_Data) GetData() []*UserInvoicedInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInvoicedInclusiveMonthResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserInvoiceInclusiveMonthInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInvoicedInclusiveMonthResp_Data) Reset() {
	*x = UserInvoicedInclusiveMonthResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoicedInclusiveMonthResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoicedInclusiveMonthResp_Data) ProtoMessage() {}

func (x *UserInvoicedInclusiveMonthResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoicedInclusiveMonthResp_Data.ProtoReflect.Descriptor instead.
func (*UserInvoicedInclusiveMonthResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{78, 0}
}

func (x *UserInvoicedInclusiveMonthResp_Data) GetData() []*UserInvoiceInclusiveMonthInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInvoiceConsumptiveDetailResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserCapitalAllDetail `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInvoiceConsumptiveDetailResp_Data) Reset() {
	*x = UserInvoiceConsumptiveDetailResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvoiceConsumptiveDetailResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvoiceConsumptiveDetailResp_Data) ProtoMessage() {}

func (x *UserInvoiceConsumptiveDetailResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvoiceConsumptiveDetailResp_Data.ProtoReflect.Descriptor instead.
func (*UserInvoiceConsumptiveDetailResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{83, 0}
}

func (x *UserInvoiceConsumptiveDetailResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserInvoiceConsumptiveDetailResp_Data) GetData() []*UserCapitalAllDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAdminInvoiceListResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserAdminInvoiceInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAdminInvoiceListResp_Data) Reset() {
	*x = UserAdminInvoiceListResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceListResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceListResp_Data) ProtoMessage() {}

func (x *UserAdminInvoiceListResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceListResp_Data.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceListResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{91, 0}
}

func (x *UserAdminInvoiceListResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserAdminInvoiceListResp_Data) GetData() []*UserAdminInvoiceInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAdminInvoiceGetMonthsInfoResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserAdminInvoiceGetMonthsInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAdminInvoiceGetMonthsInfoResp_Data) Reset() {
	*x = UserAdminInvoiceGetMonthsInfoResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminInvoiceGetMonthsInfoResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminInvoiceGetMonthsInfoResp_Data) ProtoMessage() {}

func (x *UserAdminInvoiceGetMonthsInfoResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminInvoiceGetMonthsInfoResp_Data.ProtoReflect.Descriptor instead.
func (*UserAdminInvoiceGetMonthsInfoResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{97, 0}
}

func (x *UserAdminInvoiceGetMonthsInfoResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserAdminInvoiceGetMonthsInfoResp_Data) GetData() []*UserAdminInvoiceGetMonthsInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAdminGetConsumptiveDetailResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data  []*UserAdminGetConsumptiveDetail `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAdminGetConsumptiveDetailResp_Data) Reset() {
	*x = UserAdminGetConsumptiveDetailResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_userpb_user_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdminGetConsumptiveDetailResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdminGetConsumptiveDetailResp_Data) ProtoMessage() {}

func (x *UserAdminGetConsumptiveDetailResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_userpb_user_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdminGetConsumptiveDetailResp_Data.ProtoReflect.Descriptor instead.
func (*UserAdminGetConsumptiveDetailResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_userpb_user_proto_rawDescGZIP(), []int{100, 0}
}

func (x *UserAdminGetConsumptiveDetailResp_Data) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserAdminGetConsumptiveDetailResp_Data) GetData() []*UserAdminGetConsumptiveDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pb_userpb_user_proto protoreflect.FileDescriptor

var file_pb_userpb_user_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x62, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x3a,
	0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe9,
	0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x15, 0x32,
	0x13, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x36, 0x2d, 0x31,
	0x36, 0xe4, 0xbd, 0x8d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x06, 0x18, 0x10,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe5,
	0x9b, 0x9b, 0xe4, 0xbd, 0x8d, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf,
	0x81, 0xe7, 0xa0, 0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x10, 0x8f, 0x4e, 0x20,
	0xe8, 0x07, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x0c, 0x41, 0x75, 0x74,
	0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1e, 0x32,
	0x1c, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x3a, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f,
	0xb7, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0xba, 0x01, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xa5, 0x01, 0x92, 0x41, 0x97, 0x01, 0x32, 0x94, 0x01, 0xe5, 0xb0, 0x86, 0x61, 0x70, 0x70, 0x69,
	0x64, 0xe3, 0x80, 0x81, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0xe5, 0x92, 0x8c, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x28, 0xe5, 0x9c, 0xa8, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe8,
	0x80, 0x85, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x90, 0x8e, 0xe5, 0x8f, 0xb0, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x90, 0x8e, 0xe5, 0xbe, 0x97,
	0xe5, 0x88, 0xb0, 0x29, 0xe6, 0x8c, 0x89, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0xe6, 0x8b, 0xbc,
	0xe6, 0x8e, 0xa5, 0xe6, 0x88, 0x90, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe5, 0x90, 0x8e, 0xef, 0xbc, 0x8c, 0xe5, 0x86, 0x8d, 0xe7, 0x94,
	0xa8, 0x6d, 0x64, 0x35, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90,
	0xe7, 0x9a, 0x84, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x68, 0x61, 0x73, 0x68, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x43, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x20, 0x32, 0x1e, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0xb0, 0xe7,
	0x9a, 0x84, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8,
	0xb2, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x45, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x3a, 0xe6, 0x89,
	0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe9, 0x82, 0xae,
	0xe7, 0xae, 0xb1, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xe8,
	0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x36, 0x2d, 0x31, 0x36, 0xe4,
	0xbd, 0x8d, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x28, 0x32,
	0x26, 0x31, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf,
	0x81, 0xe7, 0xa0, 0x81, 0x32, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0xaf, 0x86, 0xe7, 0xa0,
	0x81, 0xe7, 0x99, 0xbb, 0xe9, 0x99, 0x86, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x10,
	0x03, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0xe5, 0x9b,
	0x9b, 0xe4, 0xbd, 0x8d, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0x28, 0x31, 0x30, 0x30, 0x30, 0x2d,
	0x39, 0x39, 0x39, 0x39, 0x29, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe5, 0x90, 0x97, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3,
	0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0,
	0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x94, 0x02, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa4, 0xb1,
	0xe6, 0x95, 0x88, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x49, 0x6e, 0x12, 0x6d, 0x0a, 0x0b, 0x70, 0x77, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x47,
	0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8, 0xbf, 0x87, 0xe6,
	0x9c, 0x9f, 0x2c, 0x74, 0x72, 0x75, 0x65, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xaf, 0x86,
	0xe7, 0xa0, 0x81, 0xe5, 0xb7, 0xb2, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0x3b, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe6, 0x9c,
	0xaa, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0x52, 0x0a, 0x70, 0x77, 0x64, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x45, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x3a, 0xe6, 0x89,
	0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe9, 0x82, 0xae,
	0xe7, 0xae, 0xb1, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x33, 0x92, 0x41, 0x22, 0x32, 0x20, 0xe5, 0x9b, 0x9b, 0xe4, 0xbd,
	0x8d, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0x28, 0x31, 0x30, 0x30, 0x30, 0x2d, 0x39, 0x39, 0x39,
	0x39, 0x29, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe5, 0x90, 0x97, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x08, 0x2a, 0x06, 0x10, 0x8f, 0x4e, 0x20, 0xe8, 0x07, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x93, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x44, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe6, 0x97, 0xa7,
	0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x36, 0x2d, 0x31, 0x32, 0xe4, 0xbd, 0x8d, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x06, 0x18, 0x10, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe6,
	0x96, 0xb0, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x36, 0x2d, 0x31, 0x32, 0xe4, 0xbd, 0x8d, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x06, 0x18, 0x10, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65,
	0x74, 0x50, 0x77, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x5a, 0x0a, 0x09, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3d,
	0x92, 0x41, 0x2e, 0x32, 0x2c, 0x30, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe6, 0x89, 0x8b, 0xe6,
	0x9c, 0xba, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0x31, 0xe5, 0x8f, 0x91, 0xe9,
	0x80, 0x81, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0,
	0x81, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x01, 0x28, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0x92, 0x41,
	0x1d, 0x32, 0x1b, 0xe7, 0x9f, 0xad, 0xe4, 0xbf, 0xa1, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x30,
	0x3a, 0x44, 0x41, 0x4f, 0x50, 0x2c, 0x31, 0x3a, 0xe5, 0x93, 0x88, 0xe7, 0xa8, 0x80, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc6, 0x01,
	0x0a, 0x09, 0x53, 0x65, 0x74, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0x92, 0x41, 0x17, 0x32, 0x15,
	0xe5, 0x9b, 0x9b, 0xe4, 0xbd, 0x8d, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe9, 0xaa, 0x8c, 0xe8,
	0xaf, 0x81, 0xe5, 0x90, 0x97, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x10, 0x8f, 0x4e,
	0x20, 0xe8, 0x07, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41,
	0x10, 0x32, 0x0e, 0x30, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0x31, 0xe9, 0x82, 0xae, 0xe7, 0xae,
	0xb1, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x01, 0x28, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x12, 0x32, 0x10,
	0xe6, 0x96, 0xb0, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x36, 0x2d, 0x31, 0x32, 0xe4, 0xbd, 0x8d,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x06, 0x18, 0x10, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x30,
	0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0x31, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28,
	0x92, 0x41, 0x17, 0x32, 0x15, 0xe5, 0x9b, 0x9b, 0xe4, 0xbd, 0x8d, 0xe6, 0x95, 0xb0, 0xe5, 0xad,
	0x97, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe5, 0x90, 0x97, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x08,
	0x2a, 0x06, 0x10, 0x8f, 0x4e, 0x20, 0xe8, 0x07, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3d,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe6, 0x96, 0xb0, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81,
	0x36, 0x2d, 0x31, 0x32, 0xe4, 0xbd, 0x8d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x06, 0x18, 0x10, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x36, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0x69, 0x64, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x12, 0x32,
	0x10, 0xe6, 0x96, 0xb0, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x36, 0x2d, 0x31, 0x32, 0xe4, 0xbd,
	0x8d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x06, 0x18, 0x10, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x64, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x1c,
	0x32, 0x1a, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x31, 0x2d, 0xe6, 0x9c, 0x89,
	0xe6, 0x95, 0x88, 0x3b, 0x32, 0x2d, 0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x06, 0x2a, 0x04, 0x18, 0x02, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x97, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32, 0x08,
	0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x69, 0x64, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x28, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x3a, 0xe6,
	0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe9, 0x82,
	0xae, 0xe7, 0xae, 0xb1, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xcf, 0x0b, 0x0a, 0x0b, 0x52,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x34, 0x92, 0x41, 0x25, 0x32, 0x23, 0x31, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x3b,
	0x32, 0x2d, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0x3b, 0x33, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xbd,
	0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06,
	0x2a, 0x04, 0x10, 0x03, 0x20, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe7, 0x9c, 0x9f,
	0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x28, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5, 0xa7, 0x93,
	0xe5, 0x90, 0x8d, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41,
	0x22, 0x32, 0x20, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0xae, 0x80, 0xe7, 0xa7, 0xb0, 0x28,
	0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0x80, 0x82, 0xe7,
	0x94, 0xa8, 0x29, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7a,
	0x0a, 0x05, 0x69, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x92,
	0x41, 0x58, 0x32, 0x56, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6,
	0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x28, 0xe9, 0x9d, 0x9e, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8,
	0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8,
	0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xaa,
	0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x69, 0x64, 0x4e, 0x6f, 0x12, 0x49, 0x0a, 0x08, 0x69, 0x64,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41,
	0x2b, 0x32, 0x29, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x28, 0xe8, 0xba, 0xab,
	0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe7,
	0x9a, 0x84, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x29, 0x52, 0x07, 0x69, 0x64,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x69, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x32, 0x09, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0x52, 0x0b, 0x69, 0x64,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x7d, 0x0a, 0x0c, 0x69, 0x64, 0x5f,
	0x70, 0x69, 0x63, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x5b, 0x92, 0x41, 0x58, 0x32, 0x56, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe4,
	0xbb, 0xb6, 0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0xe6, 0xad, 0xa3, 0xe9, 0x9d, 0xa2, 0x28, 0xe9,
	0x9d, 0x9e, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8,
	0xba, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe4,
	0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0x29, 0x52, 0x0a, 0x69, 0x64,
	0x50, 0x69, 0x63, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x70,
	0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92,
	0x41, 0x58, 0x32, 0x56, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6,
	0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0xe8, 0x83, 0x8c, 0xe9, 0x9d, 0xa2, 0x28, 0xe9, 0x9d, 0x9e,
	0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe6,
	0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8,
	0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xaa,
	0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0x29, 0x52, 0x09, 0x69, 0x64, 0x50, 0x69,
	0x63, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x70, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x32,
	0x4b, 0xe9, 0x9d, 0x9e, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe4, 0xb8, 0xba, 0xe6, 0x89, 0x8b, 0xe6, 0x8c, 0x81, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6,
	0x89, 0xa7, 0xe7, 0x85, 0xa7, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe6, 0x89, 0x8b, 0xe6, 0x8c, 0x81, 0xe8, 0xba, 0xab,
	0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0x52, 0x09, 0x69, 0x64,
	0x50, 0x69, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x32, 0x18, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89,
	0xa7, 0xe7, 0x85, 0xa7, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x3e, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x70, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32,
	0x18, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7,
	0xe7, 0x85, 0xa7, 0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x50, 0x69, 0x63, 0x12, 0x43, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe6, 0xb3, 0x95,
	0xe4, 0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe4, 0xba, 0xba,
	0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x81, 0x94, 0xe7, 0xb3,
	0xbb, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0xe5, 0x85, 0xac, 0xe5,
	0x8f, 0xb8, 0x4c, 0x4f, 0x47, 0x4f, 0xe6, 0x88, 0x96, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe5,
	0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x4a, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0,
	0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x32, 0x1b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x88,
	0x90, 0xe4, 0xb8, 0xba, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0x52, 0x0d, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xd4, 0x03, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47,
	0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30,
	0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5,
	0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e,
	0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x86, 0x02, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x69, 0x64, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad,
	0x98, 0xe8, 0xaf, 0x81, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x90, 0x01, 0x0a, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x5e, 0x92, 0x41, 0x5b, 0x32, 0x59, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8,
	0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc,
	0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x31,
	0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b,
	0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf,
	0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52,
	0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x73, 0x0a, 0x08, 0x64, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x92, 0x41, 0x4b, 0x32, 0x49, 0xe4, 0xb8,
	0xaa, 0xe4, 0xba, 0xba, 0x3a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x3b, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0x3a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x3b, 0xe4, 0xb8, 0xaa, 0xe4, 0xbd, 0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95,
	0x86, 0xe6, 0x88, 0xb7, 0x3a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x64, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe7, 0xae, 0x80,
	0xe4, 0xbb, 0x8b, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x32, 0x06, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x32, 0x1f,
	0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x32, 0x30, 0x32, 0x32,
	0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x20, 0x31, 0x31, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33,
	0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0x6a, 0x73, 0x6f, 0x6e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x28, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e, 0xe6,
	0x80, 0xa7, 0x29, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcd,
	0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a,
	0x32, 0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20,
	0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0xe5, 0x85, 0xa8, 0xe9,
	0x83, 0xa8, 0x52, 0x05, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1,
	0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc7,
	0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x49, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x45, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x13, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08,
	0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x69, 0x64, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31,
	0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x3b, 0x32, 0x2d, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a,
	0x3b, 0x33, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xbd, 0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95, 0x86, 0xe6,
	0x88, 0xb7, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e,
	0x6f, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f,
	0xb7, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9,
	0x82, 0xae, 0xe7, 0xae, 0xb1, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x68, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4b, 0x92, 0x41, 0x48, 0x32, 0x46, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x28, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4,
	0xb8, 0xba, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc,
	0x8c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba,
	0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32,
	0x20, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0xae, 0x80, 0xe7, 0xa7, 0xb0, 0x28, 0xe4, 0xbc,
	0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8,
	0x29, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x12,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe5,
	0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe7, 0x94, 0xb3, 0xe8, 0xaf,
	0xb7, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe5, 0xae, 0x9e, 0xe5,
	0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x32, 0x59, 0xe5, 0xae, 0x9e, 0xe5,
	0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe8, 0xae, 0xa4, 0xe8,
	0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a,
	0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c,
	0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe5,
	0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0,
	0xb8, 0xe6, 0x8b, 0x92, 0xe7, 0xbb, 0x9d, 0xe7, 0x90, 0x86, 0xe7, 0x94, 0xb1, 0x52, 0x13, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe8, 0xae,
	0xa4, 0xe8, 0xaf, 0x81, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe8, 0xae,
	0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x32, 0x56, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba,
	0xba, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a,
	0x30, 0x2d, 0xe6, 0x9c, 0xaa, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xef, 0xbc, 0x9b, 0x31, 0x2d,
	0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32,
	0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87,
	0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x5a, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba,
	0xba, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x8b, 0x92,
	0xe7, 0xbb, 0x9d, 0xe7, 0x90, 0x86, 0xe7, 0x94, 0xb1, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x6d,
	0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x3f, 0xe5, 0x95,
	0x86, 0xe6, 0x88, 0xb7, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xef, 0xbc,
	0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xef, 0xbc, 0x9b, 0x32,
	0x2d, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x0e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe4, 0xb8,
	0x8a, 0xe9, 0x93, 0xbe, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe4, 0xb8, 0x8a, 0xe9,
	0x93, 0xbe, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe5, 0xa4, 0xb1,
	0xe8, 0xb4, 0xa5, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x36, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xb8, 0x8a, 0xe9, 0x93,
	0xbe, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xb8, 0x8a, 0xe9,
	0x93, 0xbe, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x11,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x9c, 0xa8, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe7, 0x9a, 0x84,
	0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe7, 0xa7, 0x81, 0xe9, 0x92, 0xa5, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x75, 0x69, 0x64,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a,
	0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3b, 0x32, 0x2d, 0xe9, 0x94, 0x81, 0xe5, 0xae,
	0x9a, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4c, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc,
	0x9a, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3b, 0x32, 0x2d, 0xe9, 0x94, 0x81, 0xe5,
	0xae, 0x9a, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xae, 0x9e, 0xe5,
	0x90, 0x8d, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x47, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x8e, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x58, 0x92, 0x41, 0x55, 0x32, 0x53,
	0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe8, 0xae, 0xa4,
	0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe8, 0xae, 0xa4, 0xe8, 0xaf,
	0x81, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0xaa, 0xe9,
	0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xe4, 0xb8, 0xad, 0x52, 0x14, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32,
	0x24, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe5,
	0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x15, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x12,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5,
	0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0x8d,
	0x8f, 0xe8, 0xae, 0xae, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0x52, 0x11, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x87, 0x0e,
	0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x70, 0x0a, 0x05, 0x69, 0x64, 0x5f, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x32, 0x56, 0xe8, 0xba, 0xab,
	0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x28,
	0xe9, 0x9d, 0x9e, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4,
	0xb8, 0xba, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf,
	0x81, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4,
	0xbb, 0xb6, 0x29, 0x52, 0x04, 0x69, 0x64, 0x4e, 0x6f, 0x12, 0x7c, 0x0a, 0x0c, 0x69, 0x64, 0x5f,
	0x70, 0x69, 0x63, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x5a, 0x92, 0x41, 0x57, 0x32, 0x55, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe4,
	0xbb, 0xb6, 0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0xe6, 0xad, 0xa3, 0xe9, 0x9d, 0xa2, 0x28, 0xe9,
	0x9d, 0x9e, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8,
	0xba, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe4,
	0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x69, 0x64, 0x50,
	0x69, 0x63, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x70, 0x69,
	0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0x92, 0x41,
	0x57, 0x32, 0x55, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe7,
	0x85, 0xa7, 0xe7, 0x89, 0x87, 0xe8, 0x83, 0x8c, 0xe9, 0x9d, 0xa2, 0x28, 0xe9, 0x9d, 0x9e, 0xe4,
	0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe6, 0xb3,
	0x95, 0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa,
	0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xaa, 0xe4,
	0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0x52, 0x09, 0x69, 0x64, 0x50, 0x69, 0x63, 0x42,
	0x61, 0x63, 0x6b, 0x12, 0x70, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0xe9,
	0x9d, 0x9e, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8,
	0xba, 0xe6, 0x89, 0x8b, 0xe6, 0x8c, 0x81, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7,
	0xe7, 0x85, 0xa7, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe6, 0x89, 0x8b, 0xe6, 0x8c, 0x81, 0xe8, 0xba, 0xab, 0xe4, 0xbb,
	0xbd, 0xe8, 0xaf, 0x81, 0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0x52, 0x09, 0x69, 0x64, 0x50, 0x69,
	0x63, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18,
	0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7,
	0x85, 0xa7, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4e, 0x6f, 0x12, 0x3e, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6,
	0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7, 0x85,
	0xa7, 0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x50, 0x69, 0x63, 0x12, 0x43, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe6, 0xb3, 0x95, 0xe4, 0xba,
	0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4,
	0xe8, 0xaf, 0x81, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x9d, 0x90, 0xe6, 0x96, 0x99, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x37,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe7, 0xb3,
	0xbb, 0xe4, 0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe7, 0x94, 0xb5, 0xe8, 0xaf,
	0x9d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x3a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8,
	0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25,
	0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0x4c, 0x4f, 0x47, 0x4f, 0xe6, 0x88, 0x96, 0xe4, 0xb8, 0xaa,
	0xe4, 0xba, 0xba, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x69,
	0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x32, 0x0f, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba,
	0xe5, 0x8f, 0xb7, 0x52, 0x07, 0x69, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x5a, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba,
	0x3b, 0x32, 0x2d, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0x3b, 0x33, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4,
	0xbd, 0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x48,
	0x32, 0x46, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x28, 0xe4,
	0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe5, 0x85,
	0xac, 0xe5, 0x8f, 0xb8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa,
	0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe7, 0x9c, 0x9f, 0xe5,
	0xae, 0x9e, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0xe4, 0xbc, 0x81,
	0xe4, 0xb8, 0x9a, 0xe7, 0xae, 0x80, 0xe7, 0xa7, 0xb0, 0x28, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8, 0x29, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x32, 0x18, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe7,
	0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32,
	0x18, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1,
	0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5e, 0x92, 0x41, 0x5b,
	0x32, 0x59, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae,
	0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5,
	0xbe, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1,
	0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae,
	0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b,
	0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8,
	0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x8b, 0x92, 0xe7, 0xbb, 0x9d, 0xe7, 0x90,
	0x86, 0xe7, 0x94, 0xb1, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0xe5, 0x8e, 0x9f,
	0xe5, 0xa7, 0x8b, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe5,
	0xad, 0x98, 0xe8, 0xaf, 0x81, 0x44, 0x49, 0x44, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x47,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xad,
	0x98, 0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0x3f, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x30, 0xe6,
	0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8f, 0x90, 0xe7, 0xa4,
	0xba, 0xe8, 0xaf, 0xad, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x57, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2c, 0xe5, 0xbd, 0x93, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0x69, 0x64, 0xe6, 0x97, 0xb6, 0xe4,
	0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x69, 0x64, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x4e, 0x6f, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2c, 0xe4, 0xb8, 0x8e, 0xe5, 0x85, 0xb6, 0xe5, 0xae,
	0x83, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0x52, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0xe4, 0xb8, 0x8e, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x30, 0xe6, 0x88,
	0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba,
	0xe8, 0xaf, 0xad, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x25, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x13, 0x92,
	0x41, 0x10, 0x32, 0x0e, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe5,
	0xbd, 0x93, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0x69, 0x64, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x98,
	0xe5, 0x85, 0x88, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x69, 0x64, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x30,
	0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe5, 0xa4, 0xb1, 0xe8,
	0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x8f, 0x90, 0xe7,
	0xa4, 0xba, 0xe8, 0xaf, 0xad, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xc1, 0x0d, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5,
	0x8f, 0xb7, 0x69, 0x64, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x5a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe4, 0xb8, 0xaa,
	0xe4, 0xba, 0xba, 0x3b, 0x32, 0x2d, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0x3b, 0x33, 0x2d, 0xe4,
	0xb8, 0xaa, 0xe4, 0xbd, 0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x32, 0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x26, 0x0a,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82, 0xae, 0xe7, 0xae,
	0xb1, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x68, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x48,
	0x32, 0x46, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x28, 0xe4,
	0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe5, 0x85,
	0xac, 0xe5, 0x8f, 0xb8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa,
	0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe7, 0x9c, 0x9f, 0xe5,
	0xae, 0x9e, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0xe4, 0xbc, 0x81,
	0xe4, 0xb8, 0x9a, 0xe7, 0xae, 0x80, 0xe7, 0xa7, 0xb0, 0x28, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8, 0x29, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe5, 0xae, 0x9e, 0xe5, 0x90,
	0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae,
	0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x32, 0x59, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae,
	0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xef, 0xbc,
	0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef,
	0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a,
	0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8,
	0xad, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe5, 0xae, 0x9e, 0xe5, 0x90,
	0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x8b, 0x92,
	0xe7, 0xbb, 0x9d, 0xe7, 0x90, 0x86, 0xe7, 0x94, 0xb1, 0x52, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4e,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32,
	0x1b, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x10, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32,
	0x1b, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x10, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8d,
	0x01, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5b, 0x92,
	0x41, 0x58, 0x32, 0x56, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0xae, 0xa1,
	0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe6, 0x9c,
	0xaa, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1,
	0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33,
	0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a,
	0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0xae, 0xa1,
	0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x8b, 0x92, 0xe7, 0xbb, 0x9d, 0xe7,
	0x90, 0x86, 0xe7, 0x94, 0xb1, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x0f, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x3f, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7,
	0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30,
	0x2d, 0xe5, 0xbe, 0x85, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5,
	0xb7, 0xb2, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0xad, 0xbe,
	0xe7, 0xba, 0xa6, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x9c, 0xa8, 0xe9,
	0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe7, 0x9a, 0x84, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3b, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xa7, 0x81, 0xe9, 0x92, 0xa5, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x52,
	0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8f, 0xb7, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef,
	0xbc, 0x9a, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3b, 0x32, 0x2d, 0xe9, 0x94, 0x81,
	0xe5, 0xae, 0x9a, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3b, 0x32, 0x2d, 0xe9, 0x94,
	0x81, 0xe5, 0xae, 0x9a, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x32, 0x13, 0x30, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x85, 0xb6, 0xe4,
	0xbb, 0x96, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x32, 0x09, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe8, 0xaf, 0xad, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x6b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x58, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x27,
	0x32, 0x25, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xe7, 0x94, 0xb3, 0xe8, 0xaf,
	0xb7, 0xe6, 0x9d, 0x90, 0xe6, 0x96, 0x99, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x20, 0xe5, 0xad, 0x97,
	0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x29, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xd0, 0x02,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3,
	0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0,
	0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x7b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x73, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5b, 0x92, 0x41, 0x58,
	0x32, 0x56, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xb3, 0xe8, 0xaf,
	0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe6, 0x9c, 0xaa, 0xe7,
	0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8,
	0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0,
	0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5,
	0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xb8, 0x06, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0x69, 0x64, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe4,
	0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x3b, 0x32, 0x2d, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0x3b, 0x33,
	0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xbd, 0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82, 0xae, 0xe7, 0xae,
	0xb1, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x70, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d,
	0x92, 0x41, 0x4a, 0x32, 0x48, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0xae,
	0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe5,
	0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d,
	0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef,
	0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x0b, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x63, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe5, 0x88, 0x9b, 0xe4, 0xbd,
	0x9c, 0xe4, 0xba, 0xba, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe6, 0x88, 0xb3, 0x28, 0x31, 0x36, 0x36, 0x34, 0x36, 0x30, 0x33, 0x34, 0x30, 0x30, 0x29, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x5f, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe5, 0x88,
	0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe7, 0x94, 0xb3,
	0xe8, 0xaf, 0xb7, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x28, 0x31, 0x36, 0x36, 0x34, 0x36, 0x30, 0x33, 0x34, 0x30,
	0x30, 0x29, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x63, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32,
	0x34, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0xe7, 0xa7, 0x92,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x28, 0x31, 0x36, 0x36, 0x34, 0x36, 0x30,
	0x33, 0x34, 0x30, 0x30, 0x29, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x5f, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x39, 0x92,
	0x41, 0x36, 0x32, 0x34, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe8, 0xae, 0xa4,
	0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20,
	0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x28, 0x31, 0x36, 0x36,
	0x34, 0x36, 0x30, 0x33, 0x34, 0x30, 0x30, 0x29, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95,
	0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x97, 0x06, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x69, 0x64, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x3b, 0x32,
	0x2d, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0x3b, 0x33, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xbd, 0x93,
	0xe5, 0xb7, 0xa5, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b,
	0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x32, 0x06, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x68, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x32, 0x46, 0xe7, 0x9c, 0x9f, 0xe5, 0xae,
	0x9e, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x28, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5, 0xa7, 0x93, 0xe5, 0x90,
	0x8d, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0xae, 0x80, 0xe7,
	0xa7, 0xb0, 0x28, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9,
	0x80, 0x82, 0xe7, 0x94, 0xa8, 0x29, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x88, 0x9b, 0xe4,
	0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe7, 0x94, 0xb3, 0xe8, 0xaf,
	0xb7, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x88, 0x9b,
	0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x32, 0x48,
	0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8,
	0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0,
	0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5,
	0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x32, 0x1e, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b,
	0xa0, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe5, 0x88,
	0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x9d, 0x90,
	0xe6, 0x96, 0x99, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x22, 0xd6, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1e, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x64, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x31, 0x92, 0x41, 0x22, 0x32, 0x20, 0x31, 0x2d, 0xe5,
	0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x3b, 0x32, 0x2d, 0xe5, 0xae,
	0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x02, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0xe5,
	0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8,
	0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x0c, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x81, 0x04, 0x0a, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x26, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7,
	0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82,
	0xae, 0xe7, 0xae, 0xb1, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x32, 0x0d, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x4e, 0x6f, 0x12, 0x56, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a,
	0x92, 0x41, 0x27, 0x32, 0x25, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x20, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x28, 0x31,
	0x36, 0x36, 0x34, 0x36, 0x30, 0x33, 0x34, 0x30, 0x30, 0x29, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0xe6, 0xb3, 0xa8, 0xe5, 0x86,
	0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe6, 0x88, 0xb3, 0x28, 0x31, 0x36, 0x36, 0x34, 0x36, 0x30, 0x33, 0x34, 0x30, 0x30, 0x29,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12,
	0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xef, 0xbc, 0x9a, 0xe7, 0xa9, 0xba, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x20, 0x31,
	0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0xa6, 0x81, 0xe7,
	0x94, 0xa8, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9,
	0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0xbc, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x4a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe9,
	0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0x69, 0x64, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f,
	0x12, 0x26, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7,
	0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82,
	0xae, 0xe7, 0xae, 0xb1, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x32, 0x0d, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0x31, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0x32, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x09, 0x0a, 0x17, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b,
	0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x32, 0x06, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x9a, 0x01, 0x0a, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x68, 0x92, 0x41, 0x65, 0x32, 0x63, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8, 0xae, 0xa4,
	0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef,
	0xbc, 0x9a, 0xe7, 0xa9, 0xba, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x20, 0x30, 0x2d, 0xe5, 0xbe,
	0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1,
	0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33,
	0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x97,
	0x01, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x92,
	0x41, 0x62, 0x32, 0x60, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0xae, 0xa1,
	0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0xe7, 0xa9, 0xba, 0xe5,
	0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x20, 0x30, 0x2d, 0xe6, 0x9c, 0xaa, 0xe7, 0x94, 0xb3, 0xe8, 0xaf,
	0xb7, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa,
	0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0,
	0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x77, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x32, 0x49, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7, 0xe7, 0xad,
	0xbe, 0xe7, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0xe7, 0xa9, 0xba,
	0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x20, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe7, 0xad, 0xbe, 0xe7,
	0xba, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6,
	0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x64, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0xe7, 0xa9, 0xba,
	0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x20, 0x31, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x3b,
	0x32, 0x2d, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0x3b, 0x33, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xbd,
	0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e,
	0x6f, 0x12, 0x56, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0x92, 0x41,
	0x27, 0x32, 0x25, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20,
	0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x28, 0x31, 0x36, 0x36,
	0x34, 0x36, 0x30, 0x33, 0x34, 0x30, 0x30, 0x29, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x20, 0xe7, 0xa7, 0x92, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6,
	0x88, 0xb3, 0x28, 0x31, 0x36, 0x36, 0x34, 0x36, 0x30, 0x33, 0x34, 0x30, 0x30, 0x29, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x49, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92,
	0x41, 0x2e, 0x32, 0x2c, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xef, 0xbc, 0x9a, 0xe7, 0xa9, 0xba, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x20, 0x31, 0x2d, 0xe6,
	0x9c, 0x89, 0xe6, 0x95, 0x88, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe9, 0xa1, 0xb5,
	0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0xaa, 0x01,
	0x0a, 0x1b, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x6b, 0x92, 0x41, 0x68, 0x32, 0x66, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91,
	0xe8, 0x80, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe9,
	0x9b, 0x86, 0xe5, 0x90, 0x88, 0x2c, 0x20, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe8, 0xae, 0xa4, 0xe8,
	0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0xaa, 0xe9, 0x80,
	0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe4,
	0xb8, 0xad, 0x2c, 0x20, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0x3a, 0x30, 0x2c, 0x31, 0x2c, 0x32,
	0x52, 0x18, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x18, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x51, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcc,
	0x10, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a,
	0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x69, 0x64, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34,
	0x32, 0x32, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x9a, 0x31, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x3b, 0x32, 0x2d, 0xe4, 0xbc, 0x81, 0xe4,
	0xb8, 0x9a, 0x3b, 0x33, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xbd, 0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95,
	0x86, 0xe6, 0x88, 0xb7, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc,
	0x96, 0xe5, 0x8f, 0xb7, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x32, 0x59, 0xe5, 0xae, 0x9e, 0xe5,
	0x90, 0x8d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe8, 0xae, 0xa4, 0xe8,
	0xaf, 0x81, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a,
	0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c,
	0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x32, 0x56, 0xe5,
	0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe6, 0x9c, 0xaa, 0xe7, 0x94, 0xb3, 0xe8,
	0xaf, 0xb7, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a,
	0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c,
	0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6d, 0x0a, 0x0f, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x3f, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7, 0xe7,
	0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d,
	0xe5, 0xbe, 0x85, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7,
	0xb2, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0xad, 0xbe, 0xe7,
	0xba, 0xa6, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51,
	0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf,
	0x81, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xef,
	0xbc, 0x9b, 0x32, 0x2d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a,
	0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe4, 0xb8,
	0xad, 0x52, 0x14, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0xe5,
	0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae,
	0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe5, 0x8e, 0x9f,
	0xe5, 0x9b, 0xa0, 0x52, 0x15, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x14, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5,
	0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae,
	0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x12, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x0f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0xe5, 0x85,
	0x85, 0xe5, 0x80, 0xbc, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe4, 0xbd, 0x99, 0xe9, 0xa2, 0x9d,
	0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x32, 0x17, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe8, 0xb5, 0x84, 0xe9, 0x87,
	0x91, 0xe4, 0xbd, 0x99, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x12,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe5,
	0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc, 0xe7, 0x9a, 0x84, 0xe9, 0x87,
	0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32,
	0x1a, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe7, 0x9a, 0x84,
	0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x13, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x63, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe4, 0xb8, 0x8a,
	0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4,
	0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0x52,
	0x14, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97,
	0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe,
	0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef,
	0xbc, 0x9a, 0xe5, 0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0x52, 0x16, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb,
	0xb7, 0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a,
	0xe5, 0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x6d, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81,
	0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb, 0xb7, 0xe6,
	0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88,
	0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x6f, 0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81,
	0xe8, 0xbd, 0xac, 0xe8, 0xae, 0xa9, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6,
	0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88,
	0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0x52, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b,
	0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0x41, 0x50, 0x49, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4,
	0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc,
	0x9a, 0xe5, 0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0x52, 0x0c, 0x61, 0x70, 0x69,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0x31, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0x32, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x0a,
	0x16, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x22, 0xdf, 0x09, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb,
	0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8,
	0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97,
	0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xfb, 0x07, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe7, 0x99,
	0xbb, 0xe8, 0xae, 0xb0, 0xe7, 0x89, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0x52, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x3e,
	0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe9, 0x93, 0xb8,
	0xe9, 0x80, 0xa0, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x44,
	0x0a, 0x13, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe6, 0x95,
	0xb0, 0x52, 0x11, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x32, 0x11, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe4, 0xbd, 0x99, 0xe9, 0xa2, 0x9d,
	0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x32, 0x17, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe8, 0xb5, 0x84, 0xe9, 0x87,
	0x91, 0xe4, 0xbd, 0x99, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x12,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe5,
	0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc, 0xe7, 0x9a, 0x84, 0xe9, 0x87,
	0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32,
	0x1a, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe7, 0x9a, 0x84,
	0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x13, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85, 0x85, 0xe5, 0x80,
	0xbc, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x32, 0x14, 0x28, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0x29, 0xe5, 0x85, 0x85,
	0xe5, 0x80, 0xbc, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x94, 0xaf, 0xe5, 0x87, 0xba, 0xe9, 0x87, 0x91, 0xe9,
	0xa2, 0x9d, 0x52, 0x09, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x47, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14,
	0x28, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0x29, 0xe6, 0x94, 0xaf, 0xe5, 0x87, 0xba, 0xe9, 0x87,
	0x91, 0xe9, 0xa2, 0x9d, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13,
	0x32, 0x11, 0xe6, 0x88, 0x90, 0xe4, 0xba, 0xa4, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5,
	0x88, 0x86, 0x29, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x88, 0x90, 0xe4, 0xba, 0xa4, 0xe6, 0x95,
	0xb0, 0x52, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe9, 0x80, 0x80, 0xe6, 0xac, 0xbe, 0xe9, 0x87,
	0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe9, 0x80, 0x80, 0xe6, 0xac, 0xbe, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x22, 0x86, 0x04, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92,
	0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81,
	0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88,
	0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6,
	0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xb2, 0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe4, 0xbd,
	0x99, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe8,
	0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe4, 0xbd, 0x99, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x4d, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x32, 0x1a, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc, 0xe7,
	0x9a, 0x84, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x10, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x53, 0x0a, 0x15, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe8, 0xb5, 0xa0, 0xe9, 0x80,
	0x81, 0xe7, 0x9a, 0x84, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52,
	0x13, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xff, 0x03, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0xb5, 0x81, 0xe6, 0xb0, 0xb4, 0xe5, 0x8f,
	0xb7, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x63, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x92, 0x41, 0x2a, 0x32, 0x28, 0xe4, 0xba, 0xa4, 0xe6, 0x98,
	0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0x30, 0x2d, 0xe5, 0x85, 0xa8, 0xe9, 0x83,
	0xa8, 0x3b, 0x31, 0x2d, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc, 0x3b, 0x32, 0x2d, 0xe6, 0xb6, 0x88,
	0xe8, 0xb4, 0xb9, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x6b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x53, 0x92, 0x41, 0x43, 0x32, 0x41, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x2c, 0x30, 0xe6, 0x89, 0x80, 0xe7, 0x94, 0xa8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x3b, 0x31, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x3b, 0x32,
	0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe4, 0xb8, 0xad, 0x3b, 0x33, 0xe4, 0xba, 0xa4, 0xe6, 0x98,
	0x93, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xfa, 0x42, 0x0a, 0x2a, 0x08, 0x30, 0x00, 0x30, 0x01,
	0x30, 0x02, 0x30, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32,
	0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6, 0x95,
	0xb0, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x63, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x92, 0x41, 0x2a,
	0x32, 0x28, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20,
	0x30, 0x2d, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x3b, 0x31, 0x2d, 0xe7, 0xba, 0xbf, 0xe4, 0xb8,
	0x8a, 0x3b, 0x32, 0x2d, 0xe7, 0xba, 0xbf, 0xe4, 0xb8, 0x8b, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x30,
	0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41,
	0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c,
	0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90,
	0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5,
	0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xe2, 0x03, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27,
	0x92, 0x41, 0x24, 0x32, 0x22, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x9b, 0x32,
	0x2d, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0xb5, 0x81, 0xe6, 0xb0, 0xb4, 0xe5, 0x8f, 0xb7,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d,
	0x31, 0x2d, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc,
	0x9b, 0x32, 0x2d, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x33,
	0x2d, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x94, 0xaf, 0xe4, 0xbb, 0x98, 0xe9, 0x87, 0x91, 0xe9, 0xa2,
	0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32,
	0x11, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88,
	0x86, 0x29, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x52, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24,
	0x32, 0x22, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x9a, 0x31, 0x2d, 0xe7, 0xba, 0xbf, 0xe4, 0xb8, 0x8a, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0xba,
	0xbf, 0xe4, 0xb8, 0x8b, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x04, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82, 0xae,
	0xe7, 0xae, 0xb1, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x32, 0x0f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0xb5, 0x81, 0xe6, 0xb0, 0xb4, 0xe5,
	0x8f, 0xb7, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x66, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3b, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0xe4, 0xba, 0xa4, 0xe6,
	0x98, 0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x30, 0x20, 0xe5, 0x85, 0xa8,
	0xe9, 0x83, 0xa8, 0x3b, 0x31, 0x2d, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x9b, 0x32,
	0x2d, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x30, 0x00, 0x30, 0x01,
	0x30, 0x02, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x50, 0x92, 0x41, 0x40, 0x32, 0x3e, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x30, 0xe6, 0x89, 0x80, 0xe7, 0x94, 0xa8, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x31, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x88, 0x90, 0xe5, 0x8a,
	0x9f, 0x32, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe4, 0xb8, 0xad, 0x33, 0xe4, 0xba, 0xa4, 0xe6,
	0x98, 0x93, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xfa, 0x42, 0x0a, 0x2a, 0x08, 0x30, 0x00, 0x30,
	0x01, 0x30, 0x02, 0x30, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x32, 0x0e, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x9d, 0xa1, 0xe6,
	0x95, 0xb0, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x66, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3b, 0x92, 0x41,
	0x2d, 0x32, 0x2b, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x9a, 0x30, 0x20, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x3b, 0x31, 0x2d, 0xe7, 0xba, 0xbf,
	0xe4, 0xb8, 0x8a, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0xba, 0xbf, 0xe4, 0xb8, 0x8b, 0xfa, 0x42,
	0x08, 0x2a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x16, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88,
	0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f,
	0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4f, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x04,
	0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27,
	0x92, 0x41, 0x24, 0x32, 0x22, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x9b, 0x32,
	0x2d, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0xb5, 0x81, 0xe6, 0xb0, 0xb4, 0xe5, 0x8f, 0xb7,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11,
	0xe6, 0x94, 0xaf, 0xe4, 0xbb, 0x98, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86,
	0x29, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe8, 0xb5, 0xa0, 0xe9,
	0x80, 0x81, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x92, 0x41,
	0x2f, 0x32, 0x2d, 0x31, 0x2d, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x88, 0x90, 0xe5, 0x8a,
	0x9f, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe4, 0xb8, 0xad, 0xef,
	0xbc, 0x9b, 0x33, 0x2d, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe7, 0xba,
	0xbf, 0xe4, 0xb8, 0x8a, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0xba, 0xbf, 0xe4, 0xb8, 0x8b, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0xf5, 0x02, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0xe3, 0x01, 0x0a, 0x13, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xb2, 0x01, 0x92, 0x41, 0xae, 0x01, 0x32,
	0xab, 0x01, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0x30, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe4, 0xb8, 0x8a,
	0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x31, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb,
	0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x32, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xbe,
	0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b,
	0x20, 0x33, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8,
	0x8b, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x34, 0xe8, 0x97, 0x8f,
	0xe5, 0x93, 0x81, 0xe8, 0xbd, 0xac, 0xe8, 0xae, 0xa9, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4,
	0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x35, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0x41, 0x50,
	0x49, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x11, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe4, 0xba, 0xa4, 0xe6, 0x98,
	0x93, 0x41, 0x50, 0x49, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x41, 0x70, 0x69, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1a,
	0x41, 0x50, 0x49, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x2c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x31, 0x3a, 0x01, 0x31, 0x52, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0xf5, 0x02, 0x0a, 0x14, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe8, 0xb0, 0x83, 0xe7,
	0x94, 0xa8, 0xe8, 0x80, 0x85, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x58, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91,
	0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9d, 0xa1, 0xe7,
	0x9b, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5d, 0x0a, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x41,
	0x92, 0x41, 0x3e, 0x32, 0x3c, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x8f, 0xaf, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0x28, 0xe4, 0xbb, 0x85, 0xe6, 0xa3,
	0x80, 0xe6, 0xb5, 0x8b, 0x2c, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x91, 0xe7, 0x94, 0x9f, 0xe7, 0x9c,
	0x9f, 0xe6, 0xad, 0xa3, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba,
	0x29, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x46,
	0x32, 0x44, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x28, 0xe4,
	0xbb, 0x8e, 0xe6, 0xad, 0xa4, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f,
	0xb7, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86,
	0xe5, 0x91, 0x98, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe8,
	0xb5, 0x84, 0xe9, 0x87, 0x91, 0x29, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f,
	0x22, 0xcb, 0x03, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x34, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe4,
	0xba, 0xa4, 0xe6, 0x98, 0x93, 0x69, 0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8,
	0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xb7, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x12, 0xe3, 0x01, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0xb2, 0x01, 0x92, 0x41, 0xae, 0x01, 0x32, 0xab, 0x01, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe8,
	0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0x30, 0xe5, 0xad,
	0x98, 0xe8, 0xaf, 0x81, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc,
	0x3b, 0x20, 0x31, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4,
	0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x32, 0xe8, 0x97,
	0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6,
	0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x33, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9,
	0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0,
	0xbc, 0x3b, 0x20, 0x34, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe8, 0xbd, 0xac, 0xe8, 0xae, 0xa9,
	0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x35, 0xe5,
	0x85, 0xb6, 0xe5, 0xae, 0x83, 0x41, 0x50, 0x49, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xbb,
	0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x32, 0x09, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x61, 0x70, 0x69, 0x52, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x41, 0x70, 0x69, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32,
	0x0f, 0x41, 0x50, 0x49, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0,
	0x3a, 0x01, 0x31, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0xc8,
	0x02, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90,
	0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6,
	0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x69,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x23, 0x92,
	0x41, 0x20, 0x32, 0x1e, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9d, 0xa1, 0xe7,
	0x9b, 0xae, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0xe3, 0x01, 0x0a, 0x13,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xb2, 0x01, 0x92, 0x41, 0xae, 0x01,
	0x32, 0xab, 0x01, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0x30, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe4, 0xb8,
	0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x31, 0xe8, 0x97, 0x8f,
	0xe5, 0x93, 0x81, 0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4,
	0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x32, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93,
	0xbe, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc,
	0x3b, 0x20, 0x33, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe4,
	0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x34, 0xe8, 0x97,
	0x8f, 0xe5, 0x93, 0x81, 0xe8, 0xbd, 0xac, 0xe8, 0xae, 0xa9, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe,
	0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x3b, 0x20, 0x35, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0x41,
	0x50, 0x49, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x11,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1a, 0x41, 0x50, 0x49, 0xe8,
	0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x2c, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x31, 0x3a, 0x01, 0x31, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x22, 0xc3, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x63, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x46, 0x32, 0x44,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x28, 0xe4, 0xbb, 0x8e,
	0xe6, 0xad, 0xa4, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0xe7,
	0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91,
	0x98, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe8, 0xb5, 0x84,
	0xe9, 0x87, 0x91, 0x29, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x4a,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xb8,
	0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9d, 0xa1, 0xe7, 0x9b, 0xae,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d,
	0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0,
	0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6,
	0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac,
	0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x8f, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12,
	0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe9, 0xa2, 0x84, 0xe7, 0xae, 0x97, 0xe8, 0xb4, 0xb9, 0xe7,
	0x94, 0xa8, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x03, 0x63, 0x61, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x48, 0x92, 0x41, 0x45, 0x32, 0x43, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0x2c, 0x20,
	0x74, 0x72, 0x75, 0x65, 0xe8, 0xa1, 0xa8, 0xe6, 0x98, 0x8e, 0xe8, 0xb4, 0xb9, 0xe7, 0x94, 0xa8,
	0xe5, 0x85, 0x85, 0xe8, 0xb6, 0xb3, 0x2c, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe8, 0xa1, 0xa8,
	0xe7, 0xa4, 0xba, 0xe8, 0xb4, 0xb9, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8d, 0xe8, 0xb6, 0xb3, 0x52,
	0x03, 0x63, 0x61, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26,
	0x92, 0x41, 0x19, 0x32, 0x17, 0xe5, 0x88, 0xb0, 0xe8, 0xb4, 0xa6, 0xe9, 0x87, 0x91, 0xe9, 0xa2,
	0x9d, 0x2c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x3a, 0xe5, 0x88, 0x86, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8,
	0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7,
	0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1,
	0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8,
	0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7,
	0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x67, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x69, 0x64, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xb7,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22, 0x93, 0x02, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x6d, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x52, 0x92, 0x41, 0x4f, 0x32, 0x4d, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95,
	0xe5, 0x8f, 0xb7, 0x2c, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95,
	0xe5, 0x8f, 0xb7, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe7, 0x94, 0x9f, 0xe6,
	0x88, 0x90, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x2c, 0xe6, 0x9c, 0x89, 0xe8, 0xae, 0xa2, 0xe5,
	0x8d, 0x95, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe8, 0xae, 0xa2, 0xe5, 0x8d,
	0x95, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f,
	0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x2c, 0x20, 0x31, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x88, 0x90, 0xe5,
	0x8a, 0x9f, 0x3b, 0x20, 0x33, 0x3a, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0xa4, 0xb1, 0xe8,
	0xb4, 0xa5, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe9,
	0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x2c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x3a, 0xe5, 0x88, 0x86,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xdd, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x53, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe8, 0xae, 0xb0, 0xe5,
	0xbd, 0x95, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0x2c, 0x20, 0xe6, 0x9c, 0x89, 0x69, 0x64, 0x2c, 0x69,
	0x64, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56,
	0x92, 0x41, 0x53, 0x32, 0x51, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xb7, 0xef, 0xbc,
	0x8c, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xb7,
	0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0xe8,
	0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x89, 0xe8, 0xae, 0xa2, 0xe5, 0x8d,
	0x95, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22,
	0xb9, 0x02, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90,
	0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6,
	0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5c, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x37, 0xe4, 0xba, 0xa4, 0xe6,
	0x98, 0x93, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x20, 0x31, 0x2d, 0xe4, 0xba, 0xa4, 0xe6,
	0x98, 0x93, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x3b, 0x32, 0x2d, 0xe4, 0xba, 0xa4, 0xe6, 0x98,
	0x93, 0xe4, 0xb8, 0xad, 0x3b, 0x33, 0x2d, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0xa4, 0xb1,
	0xe8, 0xb4, 0xa5, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x16,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x69, 0x64, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x20, 0x31, 0xe6, 0x88, 0x90, 0xe5, 0x8a,
	0x9f, 0x33, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xde, 0x05, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5,
	0x8f, 0xb7, 0x69, 0x64, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x16, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x92, 0x41, 0x2a, 0x32, 0x28,
	0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6,
	0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88,
	0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x70, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81,
	0xe9, 0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6,
	0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88,
	0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0xe0, 0x41, 0x02, 0x52, 0x16, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb, 0xb7,
	0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5,
	0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0xe0, 0x41, 0x02, 0x52, 0x15, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97, 0x8f, 0xe5,
	0x93, 0x81, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb,
	0xb7, 0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a,
	0xe5, 0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0xe0, 0x41, 0x02, 0x52, 0x16, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8,
	0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe8, 0xbd, 0xac, 0xe8, 0xae, 0xa9, 0xe4, 0xb8, 0x8a, 0xe9, 0x93,
	0xbe, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d,
	0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0xe0, 0x41, 0x02,
	0x52, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x33, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0x41, 0x50,
	0x49, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88,
	0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1,
	0xef, 0xbc, 0x89, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26,
	0x32, 0x24, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f,
	0xb7, 0x2c, 0xe4, 0xb8, 0x8e, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x3f,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92,
	0x41, 0x26, 0x32, 0x24, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x2c,
	0xe4, 0xb8, 0x8e, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5,
	0x8f, 0xb7, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0xce, 0x0f, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4,
	0xa6, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe4,
	0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x3b, 0x32, 0x2d, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0x3b, 0x33,
	0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xbd, 0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92,
	0x41, 0x20, 0x32, 0x1e, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe8, 0xaf, 0xa5, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8f, 0xb7, 0xe7, 0x9a, 0x84, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5,
	0x8f, 0xb7, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x29, 0x0a, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x28, 0xe7, 0x99, 0xbb, 0xe5, 0xbd,
	0x95, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x29, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x70,
	0x77, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xaf, 0x86, 0xe4, 0xbf, 0x9d, 0xe9, 0x97,
	0xae, 0xe9, 0xa2, 0x98, 0x52, 0x0b, 0x70, 0x77, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x77, 0x64, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xaf, 0x86, 0xe4,
	0xbf, 0x9d, 0xe7, 0xad, 0x94, 0xe6, 0xa1, 0x88, 0x52, 0x09, 0x70, 0x77, 0x64, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x32, 0x59, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe8,
	0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xef,
	0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87,
	0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80,
	0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4,
	0xb8, 0xad, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x32, 0x56, 0xe5, 0x88, 0x9b, 0xe4,
	0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe6, 0x9c, 0xaa, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xef,
	0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87,
	0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9, 0x80,
	0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4,
	0xb8, 0xad, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6d, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x44, 0x92, 0x41, 0x41, 0x32, 0x3f, 0xe5, 0x95, 0x86, 0xe6, 0x88, 0xb7, 0xe7, 0xad, 0xbe, 0xe7,
	0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85,
	0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe7, 0xad,
	0xbe, 0xe7, 0xba, 0xa6, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe4, 0xbd, 0x99, 0xe9, 0xa2,
	0x9d, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32,
	0x12, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe9, 0x87, 0x91,
	0xe9, 0xa2, 0x9d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe5, 0x85, 0x85, 0xe5,
	0x80, 0xbc, 0xe7, 0x9a, 0x84, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0xef, 0xbc, 0x8c, 0xe5, 0x8d,
	0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x15,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0x92, 0x41, 0x26,
	0x32, 0x24, 0xe5, 0x86, 0xbb, 0xe7, 0xbb, 0x93, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe7, 0x9a,
	0x84, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d,
	0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86, 0x52, 0x13, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x16, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d, 0x92, 0x41, 0x2a,
	0x32, 0x28, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb,
	0xb7, 0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a,
	0xe5, 0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0x52, 0x14, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x6d, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9,
	0x93, 0xb8, 0xe9, 0x80, 0xa0, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0,
	0xbc, 0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86,
	0x2f, 0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x6b, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xbe,
	0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xef,
	0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86, 0x2f, 0xe6,
	0xac, 0xa1, 0xef, 0xbc, 0x89, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x18,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x33,
	0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe9, 0x93, 0xbe, 0xe4, 0xb8,
	0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88,
	0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1,
	0xef, 0xbc, 0x89, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x19, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x33,
	0x92, 0x41, 0x30, 0x32, 0x2e, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe8, 0xbd, 0xac, 0xe8, 0xae,
	0xa9, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xef, 0xbc, 0x88,
	0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86, 0x2f, 0xe6, 0xac, 0xa1,
	0xef, 0xbc, 0x89, 0x52, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0xe5, 0x85, 0xb6, 0xe5, 0xae,
	0x83, 0x41, 0x50, 0x49, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc,
	0xef, 0xbc, 0x88, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x88, 0x86, 0x2f,
	0xe6, 0xac, 0xa1, 0xef, 0xbc, 0x89, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8,
	0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x92, 0x41,
	0x2f, 0x32, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef,
	0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe6,
	0x9c, 0x89, 0xe6, 0x95, 0x88, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xd0, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90,
	0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6,
	0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xe3, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6,
	0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x39, 0x92, 0x41, 0x2a, 0x32, 0x28, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x31, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80,
	0x9a, 0xe8, 0xbf, 0x87, 0x3b, 0x32, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0xa9, 0xb3, 0xe5,
	0x9b, 0x9e, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0xe5, 0xbc, 0x80,
	0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b,
	0xa0, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x0f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x77, 0x64, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0x49, 0x44,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x12,
	0x32, 0x10, 0xe6, 0x97, 0xa7, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x36, 0x2d, 0x31, 0x36, 0xe4,
	0xbd, 0x8d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x06, 0x18, 0x10, 0x52, 0x0b,
	0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92,
	0x41, 0x12, 0x32, 0x10, 0xe6, 0x96, 0xb0, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x36, 0x2d, 0x31,
	0x36, 0xe4, 0xbd, 0x8d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x06, 0x18, 0x10,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x8d, 0x0c, 0x0a, 0x0e, 0x52,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0x49, 0x44,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x34, 0x92, 0x41, 0x25,
	0x32, 0x23, 0x31, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x3b, 0x32, 0x2d, 0xe4, 0xbc, 0x81,
	0xe4, 0xb8, 0x9a, 0x3b, 0x33, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xbd, 0x93, 0xe5, 0xb7, 0xa5, 0xe5,
	0x95, 0x86, 0xe6, 0x88, 0xb7, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x10, 0x03, 0x20,
	0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x73,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x56, 0x92, 0x41, 0x49, 0x32, 0x47, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x28, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4,
	0xb8, 0xba, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x29, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0xe4, 0xbc,
	0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0xae, 0x80, 0xe7, 0xa7, 0xb0, 0x28, 0xe4, 0xbc, 0x81, 0xe4, 0xb8,
	0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8, 0x29, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x05, 0x69, 0x64, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x92, 0x41, 0x58, 0x32, 0x56, 0xe8,
	0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0,
	0x81, 0x28, 0xe9, 0x9d, 0x9e, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe4, 0xb8, 0xba, 0xe6, 0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd,
	0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe8, 0xaf,
	0x81, 0xe4, 0xbb, 0xb6, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x69, 0x64, 0x4e, 0x6f, 0x12, 0x4c, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2b, 0x32, 0x29, 0xe6, 0x89,
	0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x28, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf,
	0x81, 0xe5, 0x8f, 0xb7, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x8b,
	0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x29, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x69, 0x64, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x69, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32,
	0x09, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0x52, 0x0b, 0x69, 0x64, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x7d, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x70, 0x69,
	0x63, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92,
	0x41, 0x58, 0x32, 0x56, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6,
	0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0xe6, 0xad, 0xa3, 0xe9, 0x9d, 0xa2, 0x28, 0xe9, 0x9d, 0x9e,
	0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe6,
	0xb3, 0x95, 0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8,
	0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xaa,
	0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0x29, 0x52, 0x0a, 0x69, 0x64, 0x50, 0x69,
	0x63, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x63,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x58,
	0x32, 0x56, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe7, 0x85,
	0xa7, 0xe7, 0x89, 0x87, 0xe8, 0x83, 0x8c, 0xe9, 0x9d, 0xa2, 0x28, 0xe9, 0x9d, 0x9e, 0xe4, 0xb8,
	0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe6, 0xb3, 0x95,
	0xe4, 0xba, 0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa, 0xe4,
	0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xaa, 0xe4, 0xba,
	0xba, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0x29, 0x52, 0x09, 0x69, 0x64, 0x50, 0x69, 0x63, 0x42,
	0x61, 0x63, 0x6b, 0x12, 0x70, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0xe9,
	0x9d, 0x9e, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8,
	0xba, 0xe6, 0x89, 0x8b, 0xe6, 0x8c, 0x81, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7,
	0xe7, 0x85, 0xa7, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe4, 0xb8, 0xba, 0xe6, 0x89, 0x8b, 0xe6, 0x8c, 0x81, 0xe8, 0xba, 0xab, 0xe4, 0xbb,
	0xbd, 0xe8, 0xaf, 0x81, 0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0x52, 0x09, 0x69, 0x64, 0x50, 0x69,
	0x63, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18,
	0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7,
	0x85, 0xa7, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4e, 0x6f, 0x12, 0x3e, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6,
	0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7, 0x85,
	0xa7, 0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x50, 0x69, 0x63, 0x12, 0x43, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe6, 0xb3, 0x95, 0xe4, 0xba,
	0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe4, 0xba, 0xba, 0xe5, 0xa7,
	0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8,
	0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8,
	0x4c, 0x4f, 0x47, 0x4f, 0xe6, 0x88, 0x96, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe5, 0xa4, 0xb4,
	0xe5, 0x83, 0x8f, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x4a, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x1a,
	0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0xe5, 0xa3, 0xb0, 0xe6, 0x98,
	0x8e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x88, 0x90, 0xe4,
	0xb8, 0xba, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0x52, 0x0d, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xda, 0x03, 0x0a, 0x0f, 0x52,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41,
	0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c,
	0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90,
	0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5,
	0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x86,
	0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x69, 0x64, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xba, 0xab, 0xe4,
	0xbb, 0xbd, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0x81, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x32, 0x59, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d,
	0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xef, 0xbc, 0x9a, 0x30, 0x2d, 0xe5, 0xbe, 0x85, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe9, 0x80, 0x9a, 0xe8, 0xbf,
	0x87, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x9c, 0xaa, 0xe9,
	0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8,
	0xe4, 0xb8, 0xad, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x27,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41,
	0x06, 0x32, 0x04, 0x70, 0x61, 0x67, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20,
	0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x07, 0x32, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xbc,
	0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0xbb,
	0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f,
	0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6,
	0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41,
	0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x4c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x02,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x92,
	0x41, 0x04, 0x32, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6,
	0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x30,
	0x2d, 0xe6, 0x9c, 0xaa, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5,
	0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xbc, 0x80,
	0xe7, 0xa5, 0xa8, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41,
	0x13, 0x32, 0x11, 0xe5, 0x8f, 0x91, 0xe6, 0xa0, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8,
	0xa1, 0xa8, 0x69, 0x64, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xa5, 0xe6,
	0x9c, 0x9f, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xa5, 0xe6,
	0x9c, 0x9f, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x06, 0x32, 0x04,
	0x70, 0x61, 0x67, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x07, 0x32, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xaa, 0x02, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5,
	0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4,
	0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4d,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x03,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07,
	0x92, 0x41, 0x04, 0x32, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe6, 0xb5, 0x81, 0xe6,
	0xb0, 0xb4, 0xe5, 0x8f, 0xb7, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe7,
	0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe6, 0x97, 0xa5, 0xe6, 0x9c,
	0x9f, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xae, 0x9e, 0xe9, 0x99, 0x85, 0xe5, 0xbc,
	0x80, 0xe7, 0xa5, 0xa8, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe6, 0x9c, 0x88, 0xe4,
	0xbb, 0xbd, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x22, 0x9f, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe5, 0x8f, 0xaf, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91,
	0xe7, 0xa5, 0xa8, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92,
	0x41, 0x06, 0x32, 0x04, 0x70, 0x61, 0x67, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x07, 0x32, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6,
	0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2,
	0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95,
	0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x44, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x01, 0x0a,
	0x1d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x92, 0x41, 0x04, 0x32,
	0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x97, 0xa5, 0xe6,
	0x9c, 0x9f, 0xe6, 0x9c, 0x88, 0xe4, 0xbb, 0xbd, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe9, 0x87, 0x91, 0xe9, 0xa2,
	0x9d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0xe5, 0xb7, 0xb2, 0xe5, 0xae, 0x8c,
	0xe6, 0x88, 0x90, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe8, 0xa1, 0xa8, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x31, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x32, 0xe4, 0xbc,
	0x81, 0xe4, 0xb8, 0x9a, 0x33, 0xe4, 0xb8, 0xaa, 0xe4, 0xbd, 0x93, 0xe5, 0xb7, 0xa5, 0xe5, 0x95,
	0x86, 0xe6, 0x88, 0xb7, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x1a, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5,
	0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4,
	0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x8f, 0x91,
	0xe7, 0xa5, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xa1, 0x01, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe5, 0x8f, 0xaf, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe7,
	0xa5, 0xa8, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41,
	0x06, 0x32, 0x04, 0x70, 0x61, 0x67, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20,
	0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x07, 0x32, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xc6, 0x02, 0x0a, 0x20, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90,
	0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6,
	0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x51, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x93, 0x03, 0x0a,
	0x14, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x52, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x9b,
	0x32, 0x2d, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0xb5, 0x81, 0xe6, 0xb0, 0xb4, 0xe5, 0x8f,
	0xb7, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x94, 0xaf, 0xe4, 0xbb, 0x98, 0xe9, 0x87, 0x91, 0xe9,
	0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13,
	0x32, 0x11, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5,
	0x88, 0x86, 0x29, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x31, 0x2d, 0xe4, 0xba, 0xa4, 0xe6, 0x98,
	0x93, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xba, 0xa4, 0xe6,
	0x98, 0x93, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xfc, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09,
	0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8,
	0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe6, 0xb5, 0x81, 0xe6,
	0xb0, 0xb4, 0xe5, 0x8f, 0xb7, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe6, 0x94, 0xaf, 0xe4, 0xbb, 0x98, 0xe9, 0x87,
	0x91, 0xe9, 0xa2, 0x9d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0xb5, 0xa0, 0xe9,
	0x80, 0x81, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x07, 0x67, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x30, 0x2d, 0xe6, 0x9c, 0xaa,
	0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5, 0xbc, 0x80, 0xe7, 0xa5,
	0xa8, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe5,
	0xae, 0x8c, 0xe6, 0x88, 0x90, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xc6, 0x06, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe5, 0x8f, 0xaf, 0xe5,
	0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0xe0, 0x41, 0x02,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe9, 0x87, 0x91, 0xe9, 0xa2,
	0x9d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe4, 0xb8, 0xba,
	0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe5, 0xa7, 0x93, 0xe5,
	0x90, 0x8d, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbc, 0x81,
	0xe4, 0xb8, 0x9a, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe4, 0xbc,
	0x81, 0xe4, 0xb8, 0x9a, 0xe8, 0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7, 0x85, 0xa7,
	0xe5, 0x8f, 0xb7, 0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x12, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xbc, 0x81,
	0xe4, 0xb8, 0x9a, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52,
	0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbc, 0x81, 0xe4,
	0xb8, 0x9a, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0xe5, 0xbc, 0x80, 0xe6, 0x88, 0xb7, 0xe8, 0xa1, 0x8c, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x93, 0xb6, 0xe8, 0xa1, 0x8c,
	0xe5, 0x8d, 0xa1, 0xe5, 0x8f, 0xb7, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x94,
	0xb6, 0xe4, 0xbb, 0xb6, 0xe4, 0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe6, 0x94, 0xb6, 0xe4, 0xbb, 0xb6,
	0xe4, 0xba, 0xba, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0x52,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x94, 0xb6, 0xe4,
	0xbb, 0xb6, 0xe4, 0xba, 0xba, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0x52, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x94, 0xb6, 0xe4, 0xbb, 0xb6, 0xe4,
	0xba, 0xba, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6,
	0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe6, 0x88, 0x96, 0xe9, 0x82, 0xae, 0xe7, 0xae,
	0xb1, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb,
	0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8,
	0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97,
	0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc3,
	0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x19, 0x32, 0x17,
	0xe5, 0x8f, 0xaf, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe8, 0xa1, 0xa8, 0xe5,
	0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe5, 0x8f, 0x91,
	0xe7, 0xa5, 0xa8, 0xe5, 0x8f, 0xb7, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe7, 0x89, 0xa9, 0xe6, 0xb5, 0x81, 0xe5, 0x8f,
	0xb7, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99,
	0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6,
	0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0xe1, 0x02, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41,
	0x08, 0x32, 0x06, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xbc, 0x80,
	0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0xbb, 0x93,
	0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x8f, 0x91, 0xe7, 0xa5,
	0xa8, 0xe8, 0xbf, 0x9b, 0xe5, 0xba, 0xa6, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe7, 0x94, 0xb3, 0xe8, 0xaf,
	0xb7, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xa5,
	0xe6, 0x9c, 0x9f, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41,
	0x06, 0x32, 0x04, 0x70, 0x61, 0x67, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20,
	0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x07, 0x32, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d,
	0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0,
	0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6,
	0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac,
	0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x51, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x84, 0x02, 0x0a,
	0x14, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0x92, 0x41, 0x04, 0x32, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x44, 0x41, 0x4f, 0x50, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe9, 0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7,
	0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x30,
	0x2d, 0xe6, 0x9c, 0xaa, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xef, 0xbc, 0x9b, 0x31, 0x2d, 0xe5,
	0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe5, 0xbc, 0x80,
	0xe7, 0xa5, 0xa8, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x32, 0x14, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf3, 0x01, 0x0a,
	0x1b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32,
	0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8,
	0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a,
	0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b,
	0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xf2, 0x07, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe9, 0x87, 0x91, 0xe9, 0xa2,
	0x9d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0x92, 0x41, 0x2c,
	0x32, 0x2a, 0x30, 0x2d, 0xe6, 0x9c, 0xaa, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xef, 0xbc, 0x9b,
	0x31, 0x2d, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x32, 0x2d,
	0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x31, 0x2d, 0xe4, 0xbc, 0x81,
	0xe4, 0xb8, 0x9a, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x32, 0x1b, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xaa, 0xe4, 0xba,
	0xba, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x0c, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x52, 0x0a, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe8,
	0x90, 0xa5, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xa7, 0xe7, 0x85, 0xa7, 0xe5, 0x8f, 0xb7, 0x52, 0x15,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe6, 0xb3,
	0xa8, 0xe5, 0x86, 0x8c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a,
	0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x94, 0xb5,
	0xe8, 0xaf, 0x9d, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x31,
	0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe5, 0xbc, 0x80, 0xe6, 0x88,
	0xb7, 0xe8, 0xa1, 0x8c, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x41, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x93, 0xb6, 0xe8, 0xa1, 0x8c, 0xe5, 0x8d, 0xa1, 0xe5, 0x8f,
	0xb7, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x94, 0xb6, 0xe4, 0xbb, 0xb6, 0xe4,
	0xba, 0xba, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x32, 0x15, 0xe6, 0x94, 0xb6, 0xe4, 0xbb, 0xb6, 0xe4, 0xba, 0xba, 0xe8, 0x81,
	0x94, 0xe7, 0xb3, 0xbb, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x94, 0xb6, 0xe4, 0xbb, 0xb6, 0xe4, 0xba, 0xba,
	0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x34, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x32, 0x15, 0xe6, 0x94, 0xb6, 0xe4, 0xbb, 0xb6, 0xe4, 0xba, 0xba, 0xe8, 0xaf, 0xa6,
	0xe7, 0xbb, 0x86, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7,
	0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe6, 0x88, 0x96, 0xe9, 0x82, 0xae, 0xe7,
	0xae, 0xb1, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8,
	0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xb7, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe7, 0x89, 0xa9, 0xe6, 0xb5,
	0x81, 0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xb7, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x20, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe5,
	0x8f, 0xaf, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe8, 0xa1, 0xa8, 0x69, 0x64,
	0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x06, 0x32, 0x04, 0x70, 0x61, 0x67, 0x65,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x14, 0x92, 0x41, 0x07, 0x32, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd1, 0x02, 0x0a,
	0x21, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3,
	0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0,
	0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x45, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x5a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07,
	0x92, 0x41, 0x04, 0x32, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0xe6, 0x9c, 0x88, 0xe4, 0xbb, 0xbd, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0xe9,
	0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01,
	0x0a, 0x20, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0x92, 0x41, 0x13, 0x32, 0x11, 0xe5, 0x8f, 0xaf, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe7, 0xa5,
	0xa8, 0xe8, 0xa1, 0xa8, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x06,
	0x32, 0x04, 0x70, 0x61, 0x67, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x07, 0x32, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xd1, 0x02, 0x0a, 0x21, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90,
	0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6,
	0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5a, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x03, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x52, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x31, 0x2d, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc,
	0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0xb5, 0x81, 0xe6, 0xb0,
	0xb4, 0xe5, 0x8f, 0xb7, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x37, 0x0a,
	0x0b, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x94, 0xaf, 0xe4, 0xbb, 0x98, 0xe9,
	0x87, 0x91, 0xe9, 0xa2, 0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0x92, 0x41, 0x13, 0x32, 0x11, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe9, 0x87, 0x91, 0xe9, 0xa2,
	0x9d, 0x28, 0xe5, 0x88, 0x86, 0x29, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x31, 0x2d, 0xe4, 0xba,
	0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0x32, 0x2d, 0xe4,
	0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x33, 0x2d, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0x92,
	0x41, 0x11, 0x32, 0x0f, 0xe8, 0xb5, 0xa0, 0xe9, 0x80, 0x81, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f,
	0xe5, 0x80, 0xbc, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6,
	0xb3, 0xa8, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xaa, 0x01, 0x0a, 0x1d, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32,
	0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8,
	0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a,
	0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0, 0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b,
	0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xf7, 0x39, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x2a, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0xb3,
	0xa8, 0xe5, 0x86, 0x8c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a,
	0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x27, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x99,
	0xbb, 0xe5, 0xbd, 0x95, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x6e, 0x0a, 0x09, 0x41, 0x75,
	0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x32, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x99, 0xbb, 0xe9, 0x99, 0x86, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x5d, 0x0a, 0x04, 0x42, 0x69,
	0x6e, 0x64, 0x12, 0x12, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2c, 0x92, 0x41, 0x14,
	0x12, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x67, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x77, 0x64, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x2c, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe4, 0xbf, 0xae, 0xe6, 0x94,
	0xb9, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a,
	0x22, 0x10, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x70,
	0x77, 0x64, 0x12, 0x71, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x77, 0x64, 0x4e,
	0x65, 0x77, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x77, 0x64, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x30, 0x92, 0x41, 0x13, 0x12, 0x11, 0x28, 0xe6, 0x96, 0xb0, 0x29, 0xe4,
	0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x77, 0x64, 0x12, 0x67, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x77, 0x64, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x46,
	0x6f, 0x72, 0x67, 0x65, 0x74, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x2c, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe5, 0xbf, 0x98, 0xe8, 0xae, 0xb0, 0xe5, 0xaf, 0x86,
	0xe7, 0xa0, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x77, 0x64, 0x12, 0x5e,
	0x0a, 0x06, 0x53, 0x65, 0x74, 0x50, 0x77, 0x64, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x29, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe9, 0x87, 0x8d, 0xe7, 0xbd, 0xae,
	0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22,
	0x0d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x74, 0x2f, 0x70, 0x77, 0x64, 0x12, 0x85,
	0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x77, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x77, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x40, 0x92, 0x41, 0x1d, 0x12, 0x1b, 0xe5, 0x8f, 0x91, 0xe9, 0x80,
	0x81, 0xe9, 0x87, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe9, 0xaa, 0x8c,
	0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22,
	0x15, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x65, 0x74, 0x70,
	0x77, 0x64, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x92, 0x41, 0x14,
	0x12, 0x12, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x12, 0x94, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4c, 0x92,
	0x41, 0x14, 0x12, 0x12, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22,
	0x1a, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x17,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3e, 0x92, 0x41, 0x12, 0x12, 0x10,
	0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x75, 0x75, 0x69, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xa0, 0x01, 0x0a, 0x1b, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x50, 0x92, 0x41, 0x20, 0x12,
	0x1e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x95, 0x86,
	0xe6, 0x88, 0xb7, 0xe7, 0xad, 0xbe, 0xe7, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7b, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x32, 0x92, 0x41, 0x11, 0x12, 0x0f, 0xe7, 0x94, 0xb3, 0xe8,
	0xaf, 0xb7, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x73, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x32, 0x92, 0x41, 0x11, 0x12,
	0x0f, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x77,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x31, 0x92, 0x41, 0x11, 0x12, 0x0f, 0xe5, 0x88, 0x9b, 0xe4, 0xbd,
	0x9c, 0xe8, 0x80, 0x85, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x2b, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a,
	0x22, 0x0f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x75, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x65, 0x77,
	0x12, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x92, 0x41, 0x13, 0x12, 0x11, 0x28, 0xe6,
	0x96, 0xb0, 0x29, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0xae, 0x9e, 0xe5, 0x90, 0x8d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x6b,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2c, 0x92,
	0x41, 0x14, 0x12, 0x12, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x6d, 0x79, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x78, 0x0a, 0x0f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x38, 0x92, 0x41, 0x14,
	0x12, 0x12, 0xe6, 0xb3, 0xa8, 0xe9, 0x94, 0x80, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x79, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x3b, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe9, 0xa6, 0x96, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x9f,
	0xe8, 0xae, 0xa1, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x93, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x35, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12,
	0x16, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x26, 0x92,
	0x41, 0x0e, 0x12, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x31, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe6, 0x98, 0x8e, 0xe7, 0xbb,
	0x86, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4a, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0x8a, 0xe9, 0x93, 0xbe, 0xe8, 0xb4, 0xb9, 0xe7, 0x94,
	0xa8, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x92, 0x41, 0x17, 0x12, 0x15, 0xe7, 0x94,
	0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0xe8, 0xae, 0xa4,
	0xe8, 0xaf, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x70, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x92, 0x41,
	0x14, 0x12, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x5e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x21, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x92, 0x41, 0x1a,
	0x12, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a,
	0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x64, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x21, 0x92,
	0x41, 0x0e, 0x12, 0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x12, 0x82, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x85, 0x85, 0xe5, 0x80, 0xbc, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x76, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d,
	0x92, 0x41, 0x1a, 0x12, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x85, 0x85, 0xe5, 0x80,
	0xbc, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x7f, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x2d, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x7f,
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe5, 0x86, 0xbb,
	0xe7, 0xbb, 0x93, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xbd, 0x99, 0xe9, 0xa2, 0x9d, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12,
	0x76, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27,
	0x92, 0x41, 0x14, 0x12, 0x12, 0xe8, 0xa7, 0xa3, 0xe5, 0x86, 0xbb, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe4, 0xbd, 0x99, 0xe9, 0xa2, 0x9d, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4c, 0x92, 0x41, 0x2c, 0x12,
	0x2a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8f, 0xaf, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91,
	0xe7, 0xa5, 0xa8, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x88, 0xe4, 0xbb, 0xbd, 0xe5, 0x92, 0x8c, 0xe9,
	0xa2, 0x9d, 0xe5, 0xba, 0xa6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x45,
	0x92, 0x41, 0x1d, 0x12, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xb7, 0xb2, 0xe5, 0xbc,
	0x80, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x64, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xbd, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x29,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4a, 0x92, 0x41, 0x20, 0x12, 0x1e,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xb7, 0xb2, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe7,
	0xa5, 0xa8, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe6, 0x9c, 0x88, 0xe4, 0xbb, 0xbd, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0xc0, 0x01, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x47, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b, 0xe5, 0xbd, 0x93, 0xe6,
	0x9c, 0x88, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe6, 0x98, 0x8e, 0xe7, 0xbb, 0x86, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x84, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f,
	0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xbc, 0x80, 0xe7, 0xa5,
	0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x9c, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x35, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe7, 0x94,
	0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xbc, 0x80, 0xe7, 0xa5, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x79, 0x69, 0x64, 0x12, 0x73,
	0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x77, 0x64, 0x12, 0x19, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x74, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x34, 0x92,
	0x41, 0x13, 0x12, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe9, 0x87, 0x8d, 0xe7, 0xbd, 0xae, 0xe5,
	0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x2f,
	0x70, 0x77, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x34, 0x92, 0x41, 0x19, 0x12, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4a, 0x92, 0x41, 0x28, 0x12, 0x26, 0x28,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x29, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x92, 0x41, 0x14, 0x12,
	0x12, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbb, 0xb7,
	0xe6, 0xa0, 0xbc, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x3c, 0x92, 0x41, 0x19, 0x12, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe6, 0x98, 0x8e, 0xe7, 0xbb, 0x86,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x96, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x25, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3f, 0x92, 0x41, 0x16, 0x12, 0x14, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91,
	0xe8, 0x80, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0xb9, 0x01, 0x0a, 0x17, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x4f, 0x92, 0x41, 0x1f, 0x12, 0x1d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe7, 0x9b, 0xb8, 0xe5,
	0x85, 0xb3, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01,
	0x2a, 0x22, 0x22, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xb3, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x52, 0x92, 0x41, 0x25, 0x12, 0x23, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5,
	0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xb2, 0x01, 0x0a, 0x17,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x48, 0x92, 0x41, 0x1f, 0x12, 0x1d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe5, 0x86,
	0x85, 0xe5, 0xae, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0xd3, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x2c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x57, 0x92,
	0x41, 0x28, 0x12, 0x26, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b, 0xe5,
	0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7, 0x9a, 0x84, 0xe6, 0x9c,
	0x88, 0xe4, 0xbb, 0xbd, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xd1, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x55, 0x92, 0x41, 0x1f, 0x12, 0x1d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe6,
	0x9f, 0xa5, 0xe7, 0x9c, 0x8b, 0xe5, 0xbd, 0x93, 0xe6, 0x9c, 0x88, 0xe6, 0xb6, 0x88, 0xe8, 0xb4,
	0xb9, 0xe6, 0x98, 0x8e, 0xe7, 0xbb, 0x86, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a,
	0x22, 0x28, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0xc4, 0x01, 0x0a, 0x19, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x54, 0x92, 0x41, 0x22,
	0x12, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0xb4, 0xa6,
	0xe6, 0x88, 0xb7, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe8, 0x83, 0xbd, 0xe9, 0x87, 0x8f, 0xe5,
	0x80, 0xbc, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x62, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x12, 0x5a, 0x10, 0x70, 0x62, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x70, 0x62, 0x3b, 0x75,
	0x73, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_userpb_user_proto_rawDescOnce sync.Once
	file_pb_userpb_user_proto_rawDescData = file_pb_userpb_user_proto_rawDesc
)

func file_pb_userpb_user_proto_rawDescGZIP() []byte {
	file_pb_userpb_user_proto_rawDescOnce.Do(func() {
		file_pb_userpb_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_userpb_user_proto_rawDescData)
	})
	return file_pb_userpb_user_proto_rawDescData
}

var file_pb_userpb_user_proto_msgTypes = make([]protoimpl.MessageInfo, 128)
var file_pb_userpb_user_proto_goTypes = []interface{}{
	(*RegisterReq)(nil),                            // 0: daop.user.RegisterReq
	(*AuthLoginReq)(nil),                           // 1: daop.user.AuthLoginReq
	(*LoginReq)(nil),                               // 2: daop.user.LoginReq
	(*LoginResp)(nil),                              // 3: daop.user.LoginResp
	(*BindReq)(nil),                                // 4: daop.user.BindReq
	(*ChangePwdReq)(nil),                           // 5: daop.user.ChangePwdReq
	(*SendSetPwdCodeReq)(nil),                      // 6: daop.user.SendSetPwdCodeReq
	(*SetPwdReq)(nil),                              // 7: daop.user.SetPwdReq
	(*ForgetPwdReq)(nil),                           // 8: daop.user.ForgetPwdReq
	(*AdminSetPwdReq)(nil),                         // 9: daop.user.AdminSetPwdReq
	(*ChangeStatusReq)(nil),                        // 10: daop.user.ChangeStatusReq
	(*ChangeCredential)(nil),                       // 11: daop.user.ChangeCredential
	(*RealNameReq)(nil),                            // 12: daop.user.RealNameReq
	(*RealNameResp)(nil),                           // 13: daop.user.RealNameResp
	(*RealNameClaim)(nil),                          // 14: daop.user.RealNameClaim
	(*UserServiceBaseListReq)(nil),                 // 15: daop.user.UserServiceBaseListReq
	(*UserServiceBaseListResp)(nil),                // 16: daop.user.UserServiceBaseListResp
	(*UserListResp)(nil),                           // 17: daop.user.UserListResp
	(*UserInfo)(nil),                               // 18: daop.user.UserInfo
	(*UserCertificationInfo)(nil),                  // 19: daop.user.UserCertificationInfo
	(*UserInfoReq)(nil),                            // 20: daop.user.UserInfoReq
	(*UserInfoResp)(nil),                           // 21: daop.user.UserInfoResp
	(*UserBaseInfoReq)(nil),                        // 22: daop.user.UserBaseInfoReq
	(*UserBaseInfoResp)(nil),                       // 23: daop.user.UserBaseInfoResp
	(*UserBaseInfoListReq)(nil),                    // 24: daop.user.UserBaseInfoListReq
	(*UserBaseInfoListResp)(nil),                   // 25: daop.user.UserBaseInfoListResp
	(*UserBaseInfo)(nil),                           // 26: daop.user.UserBaseInfo
	(*UserResp)(nil),                               // 27: daop.user.UserResp
	(*CreatorApplyReq)(nil),                        // 28: daop.user.CreatorApplyReq
	(*CreatorApplyResp)(nil),                       // 29: daop.user.CreatorApplyResp
	(*CreatorListReq)(nil),                         // 30: daop.user.CreatorListReq
	(*CreatorListResp)(nil),                        // 31: daop.user.CreatorListResp
	(*CreatorUserInfo)(nil),                        // 32: daop.user.CreatorUserInfo
	(*CreatorAuditReq)(nil),                        // 33: daop.user.CreatorAuditReq
	(*UserAdminListReq)(nil),                       // 34: daop.user.UserAdminListReq
	(*UserAdminListResp)(nil),                      // 35: daop.user.UserAdminListResp
	(*UserAdminInfo)(nil),                          // 36: daop.user.UserAdminInfo
	(*UserAccountAdminListReq)(nil),                // 37: daop.user.UserAccountAdminListReq
	(*UserAccountAdminListResp)(nil),               // 38: daop.user.UserAccountAdminListResp
	(*UserAccountAdminInfo)(nil),                   // 39: daop.user.UserAccountAdminInfo
	(*UserIndexStatisticsReq)(nil),                 // 40: daop.user.UserIndexStatisticsReq
	(*UserIndexStatisticsResp)(nil),                // 41: daop.user.UserIndexStatisticsResp
	(*UserCapitalReq)(nil),                         // 42: daop.user.UserCapitalReq
	(*UserCapitalResp)(nil),                        // 43: daop.user.UserCapitalResp
	(*UserCapitalListReq)(nil),                     // 44: daop.user.UserCapitalListReq
	(*UserCapitalListResp)(nil),                    // 45: daop.user.UserCapitalListResp
	(*UserCapitalInfo)(nil),                        // 46: daop.user.UserCapitalInfo
	(*UserCapitalAllListReq)(nil),                  // 47: daop.user.UserCapitalAllListReq
	(*UserCapitalAllListResp)(nil),                 // 48: daop.user.UserCapitalAllListResp
	(*UserCapitalAllInfo)(nil),                     // 49: daop.user.UserCapitalAllInfo
	(*UserFrozenCapitalItem)(nil),                  // 50: daop.user.UserFrozenCapitalItem
	(*UserFrozenCapitalReq)(nil),                   // 51: daop.user.UserFrozenCapitalReq
	(*UserFrozenCapitalResultItem)(nil),            // 52: daop.user.UserFrozenCapitalResultItem
	(*UserFrozenCapitalResp)(nil),                  // 53: daop.user.UserFrozenCapitalResp
	(*UserChainItem)(nil),                          // 54: daop.user.UserChainItem
	(*UserChainCostReq)(nil),                       // 55: daop.user.UserChainCostReq
	(*UserChainCostResp)(nil),                      // 56: daop.user.UserChainCostResp
	(*UserChargeReq)(nil),                          // 57: daop.user.UserChargeReq
	(*UserChargeResp)(nil),                         // 58: daop.user.UserChargeResp
	(*UserChargeChangeReq)(nil),                    // 59: daop.user.UserChargeChangeReq
	(*UserChargeStatusReq)(nil),                    // 60: daop.user.UserChargeStatusReq
	(*UserChargeStatusResp)(nil),                   // 61: daop.user.UserChargeStatusResp
	(*UserUnFrozenCapitalReq)(nil),                 // 62: daop.user.UserUnFrozenCapitalReq
	(*UserAccountChangePriceReq)(nil),              // 63: daop.user.UserAccountChangePriceReq
	(*UserAccountInfoReq)(nil),                     // 64: daop.user.UserAccountInfoReq
	(*UserAccountInfo)(nil),                        // 65: daop.user.UserAccountInfo
	(*UserAccountInfoResp)(nil),                    // 66: daop.user.UserAccountInfoResp
	(*UserAdminDeveloperAuditReq)(nil),             // 67: daop.user.UserAdminDeveloperAuditReq
	(*ChangePwdNewReq)(nil),                        // 68: daop.user.ChangePwdNewReq
	(*RealNameNewReq)(nil),                         // 69: daop.user.RealNameNewReq
	(*RealNameNewResp)(nil),                        // 70: daop.user.RealNameNewResp
	(*UserInvoiceListReq)(nil),                     // 71: daop.user.UserInvoiceListReq
	(*UserInvoiceListResp)(nil),                    // 72: daop.user.UserInvoiceListResp
	(*UserInvoiceInfo)(nil),                        // 73: daop.user.UserInvoiceInfo
	(*UserInvoicedListReq)(nil),                    // 74: daop.user.UserInvoicedListReq
	(*UserInvoicedListResp)(nil),                   // 75: daop.user.UserInvoicedListResp
	(*UserInvoicedInfo)(nil),                       // 76: daop.user.UserInvoicedInfo
	(*UserInvoicedInclusiveMonthReq)(nil),          // 77: daop.user.UserInvoicedInclusiveMonthReq
	(*UserInvoicedInclusiveMonthResp)(nil),         // 78: daop.user.UserInvoicedInclusiveMonthResp
	(*UserInvoiceInclusiveMonthInfo)(nil),          // 79: daop.user.UserInvoiceInclusiveMonthInfo
	(*UserInvoiceGetInfoByIdReq)(nil),              // 80: daop.user.UserInvoiceGetInfoByIdReq
	(*UserInvoiceGetInfoByIdResp)(nil),             // 81: daop.user.UserInvoiceGetInfoByIdResp
	(*UserInvoiceConsumptiveDetailReq)(nil),        // 82: daop.user.UserInvoiceConsumptiveDetailReq
	(*UserInvoiceConsumptiveDetailResp)(nil),       // 83: daop.user.UserInvoiceConsumptiveDetailResp
	(*UserCapitalAllDetail)(nil),                   // 84: daop.user.UserCapitalAllDetail
	(*ConsumptiveDetailInfo)(nil),                  // 85: daop.user.ConsumptiveDetailInfo
	(*UserInvoiceApplyReq)(nil),                    // 86: daop.user.UserInvoiceApplyReq
	(*UserInvoiceApplyResp)(nil),                   // 87: daop.user.UserInvoiceApplyResp
	(*UserAdminInvoiceSetInfoReq)(nil),             // 88: daop.user.UserAdminInvoiceSetInfoReq
	(*UserAdminInvoiceSetInfoResp)(nil),            // 89: daop.user.UserAdminInvoiceSetInfoResp
	(*UserAdminInvoiceListReq)(nil),                // 90: daop.user.UserAdminInvoiceListReq
	(*UserAdminInvoiceListResp)(nil),               // 91: daop.user.UserAdminInvoiceListResp
	(*UserAdminInvoiceInfo)(nil),                   // 92: daop.user.UserAdminInvoiceInfo
	(*UserAdminInvoiceGetInfoReq)(nil),             // 93: daop.user.UserAdminInvoiceGetInfoReq
	(*UserAdminInvoiceGetInfoResp)(nil),            // 94: daop.user.UserAdminInvoiceGetInfoResp
	(*UserAdminInvoiceGetInfo)(nil),                // 95: daop.user.UserAdminInvoiceGetInfo
	(*UserAdminInvoiceGetMonthsInfoReq)(nil),       // 96: daop.user.UserAdminInvoiceGetMonthsInfoReq
	(*UserAdminInvoiceGetMonthsInfoResp)(nil),      // 97: daop.user.UserAdminInvoiceGetMonthsInfoResp
	(*UserAdminInvoiceGetMonthsInfo)(nil),          // 98: daop.user.UserAdminInvoiceGetMonthsInfo
	(*UserAdminGetConsumptiveDetailReq)(nil),       // 99: daop.user.UserAdminGetConsumptiveDetailReq
	(*UserAdminGetConsumptiveDetailResp)(nil),      // 100: daop.user.UserAdminGetConsumptiveDetailResp
	(*UserAdminGetConsumptiveDetail)(nil),          // 101: daop.user.UserAdminGetConsumptiveDetail
	(*UserAdminPresentByAccountReq)(nil),           // 102: daop.user.UserAdminPresentByAccountReq
	(*UserAdminPresentByAccountResp)(nil),          // 103: daop.user.UserAdminPresentByAccountResp
	(*LoginResp_Data)(nil),                         // 104: daop.user.LoginResp.Data
	(*RealNameResp_Data)(nil),                      // 105: daop.user.RealNameResp.Data
	(*UserServiceBaseListResp_Data)(nil),           // 106: daop.user.UserServiceBaseListResp.Data
	(*UserListResp_Data)(nil),                      // 107: daop.user.UserListResp.Data
	(*CreatorApplyResp_Data)(nil),                  // 108: daop.user.CreatorApplyResp.Data
	(*CreatorListResp_Data)(nil),                   // 109: daop.user.CreatorListResp.Data
	(*UserAdminListResp_Data)(nil),                 // 110: daop.user.UserAdminListResp.Data
	(*UserAccountAdminListResp_Data)(nil),          // 111: daop.user.UserAccountAdminListResp.Data
	(*UserIndexStatisticsResp_Data)(nil),           // 112: daop.user.UserIndexStatisticsResp.Data
	(*UserCapitalResp_Data)(nil),                   // 113: daop.user.UserCapitalResp.Data
	(*UserCapitalListResp_Data)(nil),               // 114: daop.user.UserCapitalListResp.Data
	(*UserCapitalAllListResp_Data)(nil),            // 115: daop.user.UserCapitalAllListResp.Data
	(*UserFrozenCapitalResp_Data)(nil),             // 116: daop.user.UserFrozenCapitalResp.Data
	(*UserChainCostResp_Data)(nil),                 // 117: daop.user.UserChainCostResp.Data
	(*UserChargeResp_Data)(nil),                    // 118: daop.user.UserChargeResp.Data
	(*UserChargeStatusResp_Data)(nil),              // 119: daop.user.UserChargeStatusResp.Data
	(*RealNameNewResp_Data)(nil),                   // 120: daop.user.RealNameNewResp.Data
	(*UserInvoiceListResp_Data)(nil),               // 121: daop.user.UserInvoiceListResp.Data
	(*UserInvoicedListResp_Data)(nil),              // 122: daop.user.UserInvoicedListResp.Data
	(*UserInvoicedInclusiveMonthResp_Data)(nil),    // 123: daop.user.UserInvoicedInclusiveMonthResp.Data
	(*UserInvoiceConsumptiveDetailResp_Data)(nil),  // 124: daop.user.UserInvoiceConsumptiveDetailResp.Data
	(*UserAdminInvoiceListResp_Data)(nil),          // 125: daop.user.UserAdminInvoiceListResp.Data
	(*UserAdminInvoiceGetMonthsInfoResp_Data)(nil), // 126: daop.user.UserAdminInvoiceGetMonthsInfoResp.Data
	(*UserAdminGetConsumptiveDetailResp_Data)(nil), // 127: daop.user.UserAdminGetConsumptiveDetailResp.Data
	(*emptypb.Empty)(nil),                          // 128: google.protobuf.Empty
}
var file_pb_userpb_user_proto_depIdxs = []int32{
	104, // 0: daop.user.LoginResp.data:type_name -> daop.user.LoginResp.Data
	14,  // 1: daop.user.RealNameReq.claim:type_name -> daop.user.RealNameClaim
	105, // 2: daop.user.RealNameResp.data:type_name -> daop.user.RealNameResp.Data
	106, // 3: daop.user.UserServiceBaseListResp.data:type_name -> daop.user.UserServiceBaseListResp.Data
	107, // 4: daop.user.UserListResp.data:type_name -> daop.user.UserListResp.Data
	19,  // 5: daop.user.UserInfo.user_certification_info:type_name -> daop.user.UserCertificationInfo
	14,  // 6: daop.user.UserInfo.claim:type_name -> daop.user.RealNameClaim
	14,  // 7: daop.user.UserCertificationInfo.claim:type_name -> daop.user.RealNameClaim
	18,  // 8: daop.user.UserInfoResp.data:type_name -> daop.user.UserInfo
	26,  // 9: daop.user.UserBaseInfoResp.data:type_name -> daop.user.UserBaseInfo
	26,  // 10: daop.user.UserBaseInfoListResp.data:type_name -> daop.user.UserBaseInfo
	108, // 11: daop.user.CreatorApplyResp.data:type_name -> daop.user.CreatorApplyResp.Data
	109, // 12: daop.user.CreatorListResp.data:type_name -> daop.user.CreatorListResp.Data
	110, // 13: daop.user.UserAdminListResp.data:type_name -> daop.user.UserAdminListResp.Data
	111, // 14: daop.user.UserAccountAdminListResp.data:type_name -> daop.user.UserAccountAdminListResp.Data
	19,  // 15: daop.user.UserAccountAdminInfo.cert_info:type_name -> daop.user.UserCertificationInfo
	112, // 16: daop.user.UserIndexStatisticsResp.data:type_name -> daop.user.UserIndexStatisticsResp.Data
	113, // 17: daop.user.UserCapitalResp.data:type_name -> daop.user.UserCapitalResp.Data
	114, // 18: daop.user.UserCapitalListResp.data:type_name -> daop.user.UserCapitalListResp.Data
	115, // 19: daop.user.UserCapitalAllListResp.data:type_name -> daop.user.UserCapitalAllListResp.Data
	50,  // 20: daop.user.UserFrozenCapitalReq.items:type_name -> daop.user.UserFrozenCapitalItem
	116, // 21: daop.user.UserFrozenCapitalResp.data:type_name -> daop.user.UserFrozenCapitalResp.Data
	54,  // 22: daop.user.UserChainCostReq.items:type_name -> daop.user.UserChainItem
	117, // 23: daop.user.UserChainCostResp.data:type_name -> daop.user.UserChainCostResp.Data
	118, // 24: daop.user.UserChargeResp.data:type_name -> daop.user.UserChargeResp.Data
	119, // 25: daop.user.UserChargeStatusResp.data:type_name -> daop.user.UserChargeStatusResp.Data
	65,  // 26: daop.user.UserAccountInfoResp.data:type_name -> daop.user.UserAccountInfo
	14,  // 27: daop.user.RealNameNewReq.claim:type_name -> daop.user.RealNameClaim
	120, // 28: daop.user.RealNameNewResp.data:type_name -> daop.user.RealNameNewResp.Data
	121, // 29: daop.user.UserInvoiceListResp.data:type_name -> daop.user.UserInvoiceListResp.Data
	122, // 30: daop.user.UserInvoicedListResp.data:type_name -> daop.user.UserInvoicedListResp.Data
	123, // 31: daop.user.UserInvoicedInclusiveMonthResp.data:type_name -> daop.user.UserInvoicedInclusiveMonthResp.Data
	95,  // 32: daop.user.UserInvoiceGetInfoByIdResp.data:type_name -> daop.user.UserAdminInvoiceGetInfo
	124, // 33: daop.user.UserInvoiceConsumptiveDetailResp.data:type_name -> daop.user.UserInvoiceConsumptiveDetailResp.Data
	125, // 34: daop.user.UserAdminInvoiceListResp.data:type_name -> daop.user.UserAdminInvoiceListResp.Data
	95,  // 35: daop.user.UserAdminInvoiceGetInfoResp.data:type_name -> daop.user.UserAdminInvoiceGetInfo
	126, // 36: daop.user.UserAdminInvoiceGetMonthsInfoResp.data:type_name -> daop.user.UserAdminInvoiceGetMonthsInfoResp.Data
	127, // 37: daop.user.UserAdminGetConsumptiveDetailResp.data:type_name -> daop.user.UserAdminGetConsumptiveDetailResp.Data
	18,  // 38: daop.user.LoginResp.Data.user_info:type_name -> daop.user.UserInfo
	26,  // 39: daop.user.UserServiceBaseListResp.Data.data:type_name -> daop.user.UserBaseInfo
	18,  // 40: daop.user.UserListResp.Data.data:type_name -> daop.user.UserInfo
	32,  // 41: daop.user.CreatorListResp.Data.data:type_name -> daop.user.CreatorUserInfo
	36,  // 42: daop.user.UserAdminListResp.Data.data:type_name -> daop.user.UserAdminInfo
	39,  // 43: daop.user.UserAccountAdminListResp.Data.data:type_name -> daop.user.UserAccountAdminInfo
	46,  // 44: daop.user.UserCapitalListResp.Data.data:type_name -> daop.user.UserCapitalInfo
	49,  // 45: daop.user.UserCapitalAllListResp.Data.data:type_name -> daop.user.UserCapitalAllInfo
	52,  // 46: daop.user.UserFrozenCapitalResp.Data.items:type_name -> daop.user.UserFrozenCapitalResultItem
	73,  // 47: daop.user.UserInvoiceListResp.Data.data:type_name -> daop.user.UserInvoiceInfo
	76,  // 48: daop.user.UserInvoicedListResp.Data.data:type_name -> daop.user.UserInvoicedInfo
	79,  // 49: daop.user.UserInvoicedInclusiveMonthResp.Data.data:type_name -> daop.user.UserInvoiceInclusiveMonthInfo
	84,  // 50: daop.user.UserInvoiceConsumptiveDetailResp.Data.data:type_name -> daop.user.UserCapitalAllDetail
	92,  // 51: daop.user.UserAdminInvoiceListResp.Data.data:type_name -> daop.user.UserAdminInvoiceInfo
	98,  // 52: daop.user.UserAdminInvoiceGetMonthsInfoResp.Data.data:type_name -> daop.user.UserAdminInvoiceGetMonthsInfo
	101, // 53: daop.user.UserAdminGetConsumptiveDetailResp.Data.data:type_name -> daop.user.UserAdminGetConsumptiveDetail
	0,   // 54: daop.user.UserService.Register:input_type -> daop.user.RegisterReq
	2,   // 55: daop.user.UserService.Login:input_type -> daop.user.LoginReq
	1,   // 56: daop.user.UserService.AuthLogin:input_type -> daop.user.AuthLoginReq
	4,   // 57: daop.user.UserService.Bind:input_type -> daop.user.BindReq
	5,   // 58: daop.user.UserService.ChangePwd:input_type -> daop.user.ChangePwdReq
	68,  // 59: daop.user.UserService.ChangePwdNew:input_type -> daop.user.ChangePwdNewReq
	8,   // 60: daop.user.UserService.ForgetPwd:input_type -> daop.user.ForgetPwdReq
	7,   // 61: daop.user.UserService.SetPwd:input_type -> daop.user.SetPwdReq
	6,   // 62: daop.user.UserService.SendSetPwdCode:input_type -> daop.user.SendSetPwdCodeReq
	10,  // 63: daop.user.UserService.ChangeUserStatus:input_type -> daop.user.ChangeStatusReq
	10,  // 64: daop.user.UserService.ChangeAccountStatus:input_type -> daop.user.ChangeStatusReq
	11,  // 65: daop.user.UserService.ChangeAccountCredential:input_type -> daop.user.ChangeCredential
	10,  // 66: daop.user.UserService.ChangeAccountMerchantStatus:input_type -> daop.user.ChangeStatusReq
	28,  // 67: daop.user.UserService.CreatorApply:input_type -> daop.user.CreatorApplyReq
	33,  // 68: daop.user.UserService.CreatorAudit:input_type -> daop.user.CreatorAuditReq
	30,  // 69: daop.user.UserService.CreatorList:input_type -> daop.user.CreatorListReq
	12,  // 70: daop.user.UserService.RealName:input_type -> daop.user.RealNameReq
	69,  // 71: daop.user.UserService.RealNameNew:input_type -> daop.user.RealNameNewReq
	20,  // 72: daop.user.UserService.UserValidity:input_type -> daop.user.UserInfoReq
	128, // 73: daop.user.UserService.UserMyInfo:input_type -> google.protobuf.Empty
	128, // 74: daop.user.UserService.CancelMyAccount:input_type -> google.protobuf.Empty
	40,  // 75: daop.user.UserService.UserIndexStatistics:input_type -> daop.user.UserIndexStatisticsReq
	15,  // 76: daop.user.UserService.UserServiceBaseList:input_type -> daop.user.UserServiceBaseListReq
	42,  // 77: daop.user.UserService.UserCapital:input_type -> daop.user.UserCapitalReq
	44,  // 78: daop.user.UserService.UserCapitalList:input_type -> daop.user.UserCapitalListReq
	55,  // 79: daop.user.UserService.UserChainCost:input_type -> daop.user.UserChainCostReq
	128, // 80: daop.user.UserService.UserDeveloperApply:input_type -> google.protobuf.Empty
	22,  // 81: daop.user.UserService.UserBaseInfo:input_type -> daop.user.UserBaseInfoReq
	20,  // 82: daop.user.UserService.UserInfo:input_type -> daop.user.UserInfoReq
	24,  // 83: daop.user.UserService.UserBaseInfoList:input_type -> daop.user.UserBaseInfoListReq
	57,  // 84: daop.user.UserService.UserCharge:input_type -> daop.user.UserChargeReq
	60,  // 85: daop.user.UserService.UserChargeStatus:input_type -> daop.user.UserChargeStatusReq
	59,  // 86: daop.user.UserService.UserChargeChange:input_type -> daop.user.UserChargeChangeReq
	64,  // 87: daop.user.UserService.UserAccountInfo:input_type -> daop.user.UserAccountInfoReq
	51,  // 88: daop.user.UserService.UserFrozenCapital:input_type -> daop.user.UserFrozenCapitalReq
	62,  // 89: daop.user.UserService.UserUnFrozenCapital:input_type -> daop.user.UserUnFrozenCapitalReq
	71,  // 90: daop.user.UserService.UserInvoiceList:input_type -> daop.user.UserInvoiceListReq
	74,  // 91: daop.user.UserService.UserInvoicedList:input_type -> daop.user.UserInvoicedListReq
	77,  // 92: daop.user.UserService.UserInvoicedInclusiveMonth:input_type -> daop.user.UserInvoicedInclusiveMonthReq
	82,  // 93: daop.user.UserService.UserInvoiceConsumptiveDetail:input_type -> daop.user.UserInvoiceConsumptiveDetailReq
	86,  // 94: daop.user.UserService.UserInvoiceApply:input_type -> daop.user.UserInvoiceApplyReq
	80,  // 95: daop.user.UserService.UserInvoiceGetInfoById:input_type -> daop.user.UserInvoiceGetInfoByIdReq
	9,   // 96: daop.user.UserService.AdminSetPwd:input_type -> daop.user.AdminSetPwdReq
	34,  // 97: daop.user.UserService.UserAdminList:input_type -> daop.user.UserAdminListReq
	37,  // 98: daop.user.UserService.UserAccountAdminList:input_type -> daop.user.UserAccountAdminListReq
	63,  // 99: daop.user.UserService.UserAccountChangePrice:input_type -> daop.user.UserAccountChangePriceReq
	47,  // 100: daop.user.UserService.UserCapitalAllList:input_type -> daop.user.UserCapitalAllListReq
	67,  // 101: daop.user.UserService.UserAdminDeveloperAudit:input_type -> daop.user.UserAdminDeveloperAuditReq
	88,  // 102: daop.user.UserService.UserAdminInvoiceSetInfo:input_type -> daop.user.UserAdminInvoiceSetInfoReq
	90,  // 103: daop.user.UserService.UserAdminInvoiceList:input_type -> daop.user.UserAdminInvoiceListReq
	93,  // 104: daop.user.UserService.UserAdminInvoiceGetInfo:input_type -> daop.user.UserAdminInvoiceGetInfoReq
	96,  // 105: daop.user.UserService.UserAdminInvoiceGetMonthsInfo:input_type -> daop.user.UserAdminInvoiceGetMonthsInfoReq
	99,  // 106: daop.user.UserService.UserAdminGetConsumptiveDetail:input_type -> daop.user.UserAdminGetConsumptiveDetailReq
	102, // 107: daop.user.UserService.UserAdminPresentByAccount:input_type -> daop.user.UserAdminPresentByAccountReq
	3,   // 108: daop.user.UserService.Register:output_type -> daop.user.LoginResp
	3,   // 109: daop.user.UserService.Login:output_type -> daop.user.LoginResp
	3,   // 110: daop.user.UserService.AuthLogin:output_type -> daop.user.LoginResp
	27,  // 111: daop.user.UserService.Bind:output_type -> daop.user.UserResp
	27,  // 112: daop.user.UserService.ChangePwd:output_type -> daop.user.UserResp
	27,  // 113: daop.user.UserService.ChangePwdNew:output_type -> daop.user.UserResp
	27,  // 114: daop.user.UserService.ForgetPwd:output_type -> daop.user.UserResp
	27,  // 115: daop.user.UserService.SetPwd:output_type -> daop.user.UserResp
	27,  // 116: daop.user.UserService.SendSetPwdCode:output_type -> daop.user.UserResp
	27,  // 117: daop.user.UserService.ChangeUserStatus:output_type -> daop.user.UserResp
	27,  // 118: daop.user.UserService.ChangeAccountStatus:output_type -> daop.user.UserResp
	27,  // 119: daop.user.UserService.ChangeAccountCredential:output_type -> daop.user.UserResp
	27,  // 120: daop.user.UserService.ChangeAccountMerchantStatus:output_type -> daop.user.UserResp
	29,  // 121: daop.user.UserService.CreatorApply:output_type -> daop.user.CreatorApplyResp
	27,  // 122: daop.user.UserService.CreatorAudit:output_type -> daop.user.UserResp
	31,  // 123: daop.user.UserService.CreatorList:output_type -> daop.user.CreatorListResp
	13,  // 124: daop.user.UserService.RealName:output_type -> daop.user.RealNameResp
	70,  // 125: daop.user.UserService.RealNameNew:output_type -> daop.user.RealNameNewResp
	27,  // 126: daop.user.UserService.UserValidity:output_type -> daop.user.UserResp
	21,  // 127: daop.user.UserService.UserMyInfo:output_type -> daop.user.UserInfoResp
	27,  // 128: daop.user.UserService.CancelMyAccount:output_type -> daop.user.UserResp
	41,  // 129: daop.user.UserService.UserIndexStatistics:output_type -> daop.user.UserIndexStatisticsResp
	16,  // 130: daop.user.UserService.UserServiceBaseList:output_type -> daop.user.UserServiceBaseListResp
	43,  // 131: daop.user.UserService.UserCapital:output_type -> daop.user.UserCapitalResp
	45,  // 132: daop.user.UserService.UserCapitalList:output_type -> daop.user.UserCapitalListResp
	56,  // 133: daop.user.UserService.UserChainCost:output_type -> daop.user.UserChainCostResp
	27,  // 134: daop.user.UserService.UserDeveloperApply:output_type -> daop.user.UserResp
	23,  // 135: daop.user.UserService.UserBaseInfo:output_type -> daop.user.UserBaseInfoResp
	21,  // 136: daop.user.UserService.UserInfo:output_type -> daop.user.UserInfoResp
	25,  // 137: daop.user.UserService.UserBaseInfoList:output_type -> daop.user.UserBaseInfoListResp
	58,  // 138: daop.user.UserService.UserCharge:output_type -> daop.user.UserChargeResp
	61,  // 139: daop.user.UserService.UserChargeStatus:output_type -> daop.user.UserChargeStatusResp
	27,  // 140: daop.user.UserService.UserChargeChange:output_type -> daop.user.UserResp
	66,  // 141: daop.user.UserService.UserAccountInfo:output_type -> daop.user.UserAccountInfoResp
	53,  // 142: daop.user.UserService.UserFrozenCapital:output_type -> daop.user.UserFrozenCapitalResp
	27,  // 143: daop.user.UserService.UserUnFrozenCapital:output_type -> daop.user.UserResp
	72,  // 144: daop.user.UserService.UserInvoiceList:output_type -> daop.user.UserInvoiceListResp
	75,  // 145: daop.user.UserService.UserInvoicedList:output_type -> daop.user.UserInvoicedListResp
	78,  // 146: daop.user.UserService.UserInvoicedInclusiveMonth:output_type -> daop.user.UserInvoicedInclusiveMonthResp
	83,  // 147: daop.user.UserService.UserInvoiceConsumptiveDetail:output_type -> daop.user.UserInvoiceConsumptiveDetailResp
	87,  // 148: daop.user.UserService.UserInvoiceApply:output_type -> daop.user.UserInvoiceApplyResp
	81,  // 149: daop.user.UserService.UserInvoiceGetInfoById:output_type -> daop.user.UserInvoiceGetInfoByIdResp
	27,  // 150: daop.user.UserService.AdminSetPwd:output_type -> daop.user.UserResp
	35,  // 151: daop.user.UserService.UserAdminList:output_type -> daop.user.UserAdminListResp
	38,  // 152: daop.user.UserService.UserAccountAdminList:output_type -> daop.user.UserAccountAdminListResp
	27,  // 153: daop.user.UserService.UserAccountChangePrice:output_type -> daop.user.UserResp
	48,  // 154: daop.user.UserService.UserCapitalAllList:output_type -> daop.user.UserCapitalAllListResp
	27,  // 155: daop.user.UserService.UserAdminDeveloperAudit:output_type -> daop.user.UserResp
	89,  // 156: daop.user.UserService.UserAdminInvoiceSetInfo:output_type -> daop.user.UserAdminInvoiceSetInfoResp
	91,  // 157: daop.user.UserService.UserAdminInvoiceList:output_type -> daop.user.UserAdminInvoiceListResp
	94,  // 158: daop.user.UserService.UserAdminInvoiceGetInfo:output_type -> daop.user.UserAdminInvoiceGetInfoResp
	97,  // 159: daop.user.UserService.UserAdminInvoiceGetMonthsInfo:output_type -> daop.user.UserAdminInvoiceGetMonthsInfoResp
	100, // 160: daop.user.UserService.UserAdminGetConsumptiveDetail:output_type -> daop.user.UserAdminGetConsumptiveDetailResp
	103, // 161: daop.user.UserService.UserAdminPresentByAccount:output_type -> daop.user.UserAdminPresentByAccountResp
	108, // [108:162] is the sub-list for method output_type
	54,  // [54:108] is the sub-list for method input_type
	54,  // [54:54] is the sub-list for extension type_name
	54,  // [54:54] is the sub-list for extension extendee
	0,   // [0:54] is the sub-list for field type_name
}

func init() { file_pb_userpb_user_proto_init() }
func file_pb_userpb_user_proto_init() {
	if File_pb_userpb_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_userpb_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePwdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSetPwdCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPwdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForgetPwdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminSetPwdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealNameClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserServiceBaseListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserServiceBaseListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCertificationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseInfoListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatorApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatorApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatorListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatorListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatorUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatorAuditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountAdminListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountAdminListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountAdminInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIndexStatisticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIndexStatisticsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalAllListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalAllListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalAllInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFrozenCapitalItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFrozenCapitalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFrozenCapitalResultItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFrozenCapitalResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainCostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainCostResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChargeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChargeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChargeChangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChargeStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChargeStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUnFrozenCapitalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountChangePriceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminDeveloperAuditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePwdNewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealNameNewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealNameNewResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoicedListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoicedListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoicedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoicedInclusiveMonthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoicedInclusiveMonthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceInclusiveMonthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceGetInfoByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceGetInfoByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceConsumptiveDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceConsumptiveDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalAllDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumptiveDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceSetInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceSetInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceGetInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceGetInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceGetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceGetMonthsInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceGetMonthsInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceGetMonthsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminGetConsumptiveDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminGetConsumptiveDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminGetConsumptiveDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminPresentByAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminPresentByAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealNameResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserServiceBaseListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatorApplyResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatorListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountAdminListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIndexStatisticsResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapitalAllListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFrozenCapitalResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChainCostResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChargeResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChargeStatusResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealNameNewResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoicedListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoicedInclusiveMonthResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvoiceConsumptiveDetailResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceListResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminInvoiceGetMonthsInfoResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_userpb_user_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdminGetConsumptiveDetailResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_userpb_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   128,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_userpb_user_proto_goTypes,
		DependencyIndexes: file_pb_userpb_user_proto_depIdxs,
		MessageInfos:      file_pb_userpb_user_proto_msgTypes,
	}.Build()
	File_pb_userpb_user_proto = out.File
	file_pb_userpb_user_proto_rawDesc = nil
	file_pb_userpb_user_proto_goTypes = nil
	file_pb_userpb_user_proto_depIdxs = nil
}
