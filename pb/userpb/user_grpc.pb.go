// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/userpb/user.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_Register_FullMethodName                      = "/daop.user.UserService/Register"
	UserService_Login_FullMethodName                         = "/daop.user.UserService/Login"
	UserService_AuthLogin_FullMethodName                     = "/daop.user.UserService/AuthLogin"
	UserService_Bind_FullMethodName                          = "/daop.user.UserService/Bind"
	UserService_ChangePwd_FullMethodName                     = "/daop.user.UserService/ChangePwd"
	UserService_ChangePwdNew_FullMethodName                  = "/daop.user.UserService/ChangePwdNew"
	UserService_ForgetPwd_FullMethodName                     = "/daop.user.UserService/ForgetPwd"
	UserService_SetPwd_FullMethodName                        = "/daop.user.UserService/SetPwd"
	UserService_SendSetPwdCode_FullMethodName                = "/daop.user.UserService/SendSetPwdCode"
	UserService_ChangeUserStatus_FullMethodName              = "/daop.user.UserService/ChangeUserStatus"
	UserService_ChangeAccountStatus_FullMethodName           = "/daop.user.UserService/ChangeAccountStatus"
	UserService_ChangeAccountCredential_FullMethodName       = "/daop.user.UserService/ChangeAccountCredential"
	UserService_ChangeAccountMerchantStatus_FullMethodName   = "/daop.user.UserService/ChangeAccountMerchantStatus"
	UserService_CreatorApply_FullMethodName                  = "/daop.user.UserService/CreatorApply"
	UserService_CreatorAudit_FullMethodName                  = "/daop.user.UserService/CreatorAudit"
	UserService_CreatorList_FullMethodName                   = "/daop.user.UserService/CreatorList"
	UserService_RealName_FullMethodName                      = "/daop.user.UserService/RealName"
	UserService_RealNameNew_FullMethodName                   = "/daop.user.UserService/RealNameNew"
	UserService_UserValidity_FullMethodName                  = "/daop.user.UserService/UserValidity"
	UserService_UserMyInfo_FullMethodName                    = "/daop.user.UserService/UserMyInfo"
	UserService_CancelMyAccount_FullMethodName               = "/daop.user.UserService/CancelMyAccount"
	UserService_UserIndexStatistics_FullMethodName           = "/daop.user.UserService/UserIndexStatistics"
	UserService_UserServiceBaseList_FullMethodName           = "/daop.user.UserService/UserServiceBaseList"
	UserService_UserCapital_FullMethodName                   = "/daop.user.UserService/UserCapital"
	UserService_UserCapitalList_FullMethodName               = "/daop.user.UserService/UserCapitalList"
	UserService_UserChainCost_FullMethodName                 = "/daop.user.UserService/UserChainCost"
	UserService_UserDeveloperApply_FullMethodName            = "/daop.user.UserService/UserDeveloperApply"
	UserService_UserBaseInfo_FullMethodName                  = "/daop.user.UserService/UserBaseInfo"
	UserService_UserInfo_FullMethodName                      = "/daop.user.UserService/UserInfo"
	UserService_UserBaseInfoList_FullMethodName              = "/daop.user.UserService/UserBaseInfoList"
	UserService_UserCharge_FullMethodName                    = "/daop.user.UserService/UserCharge"
	UserService_UserChargeStatus_FullMethodName              = "/daop.user.UserService/UserChargeStatus"
	UserService_UserChargeChange_FullMethodName              = "/daop.user.UserService/UserChargeChange"
	UserService_UserAccountInfo_FullMethodName               = "/daop.user.UserService/UserAccountInfo"
	UserService_UserFrozenCapital_FullMethodName             = "/daop.user.UserService/UserFrozenCapital"
	UserService_UserUnFrozenCapital_FullMethodName           = "/daop.user.UserService/UserUnFrozenCapital"
	UserService_UserInvoiceList_FullMethodName               = "/daop.user.UserService/UserInvoiceList"
	UserService_UserInvoicedList_FullMethodName              = "/daop.user.UserService/UserInvoicedList"
	UserService_UserInvoicedInclusiveMonth_FullMethodName    = "/daop.user.UserService/UserInvoicedInclusiveMonth"
	UserService_UserInvoiceConsumptiveDetail_FullMethodName  = "/daop.user.UserService/UserInvoiceConsumptiveDetail"
	UserService_UserInvoiceApply_FullMethodName              = "/daop.user.UserService/UserInvoiceApply"
	UserService_UserInvoiceGetInfoById_FullMethodName        = "/daop.user.UserService/UserInvoiceGetInfoById"
	UserService_AdminSetPwd_FullMethodName                   = "/daop.user.UserService/AdminSetPwd"
	UserService_UserAdminList_FullMethodName                 = "/daop.user.UserService/UserAdminList"
	UserService_UserAccountAdminList_FullMethodName          = "/daop.user.UserService/UserAccountAdminList"
	UserService_UserAccountChangePrice_FullMethodName        = "/daop.user.UserService/UserAccountChangePrice"
	UserService_UserCapitalAllList_FullMethodName            = "/daop.user.UserService/UserCapitalAllList"
	UserService_UserAdminDeveloperAudit_FullMethodName       = "/daop.user.UserService/UserAdminDeveloperAudit"
	UserService_UserAdminInvoiceSetInfo_FullMethodName       = "/daop.user.UserService/UserAdminInvoiceSetInfo"
	UserService_UserAdminInvoiceList_FullMethodName          = "/daop.user.UserService/UserAdminInvoiceList"
	UserService_UserAdminInvoiceGetInfo_FullMethodName       = "/daop.user.UserService/UserAdminInvoiceGetInfo"
	UserService_UserAdminInvoiceGetMonthsInfo_FullMethodName = "/daop.user.UserService/UserAdminInvoiceGetMonthsInfo"
	UserService_UserAdminGetConsumptiveDetail_FullMethodName = "/daop.user.UserService/UserAdminGetConsumptiveDetail"
	UserService_UserAdminPresentByAccount_FullMethodName     = "/daop.user.UserService/UserAdminPresentByAccount"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Register 用户注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error)
	// Login 用户登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// AuthLogin 用户授权登陆
	AuthLogin(ctx context.Context, in *AuthLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// Bind 用户绑定账号
	Bind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*UserResp, error)
	// ChangePwd 修改密码
	ChangePwd(ctx context.Context, in *ChangePwdReq, opts ...grpc.CallOption) (*UserResp, error)
	// ChangePwdNew 修改密码
	//   - version: v2
	ChangePwdNew(ctx context.Context, in *ChangePwdNewReq, opts ...grpc.CallOption) (*UserResp, error)
	// ForgetPwd 忘记密码
	ForgetPwd(ctx context.Context, in *ForgetPwdReq, opts ...grpc.CallOption) (*UserResp, error)
	// SetPwd 重置密码
	SetPwd(ctx context.Context, in *SetPwdReq, opts ...grpc.CallOption) (*UserResp, error)
	// SendSetPwdCode 发送重置密码验证码
	SendSetPwdCode(ctx context.Context, in *SendSetPwdCodeReq, opts ...grpc.CallOption) (*UserResp, error)
	// ChangeUserStatus 修改用户状态
	ChangeUserStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*UserResp, error)
	// ChangeAccountStatus 修改账号状态
	ChangeAccountStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*UserResp, error)
	// ChangeAccountCredential 修改账号uuid
	ChangeAccountCredential(ctx context.Context, in *ChangeCredential, opts ...grpc.CallOption) (*UserResp, error)
	// ChangeAccountMerchantStatus 修改账号商户签约状态
	ChangeAccountMerchantStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*UserResp, error)
	// CreatorApply 申请创作者
	CreatorApply(ctx context.Context, in *CreatorApplyReq, opts ...grpc.CallOption) (*CreatorApplyResp, error)
	// CreatorAudit 创作者审核
	CreatorAudit(ctx context.Context, in *CreatorAuditReq, opts ...grpc.CallOption) (*UserResp, error)
	// CreatorList 创作者列表
	CreatorList(ctx context.Context, in *CreatorListReq, opts ...grpc.CallOption) (*CreatorListResp, error)
	// RealName 用户实名
	RealName(ctx context.Context, in *RealNameReq, opts ...grpc.CallOption) (*RealNameResp, error)
	// RealNameNew (新)用户实名
	//   - version: v2
	RealNameNew(ctx context.Context, in *RealNameNewReq, opts ...grpc.CallOption) (*RealNameNewResp, error)
	// UserValidity 用户是否可用
	UserValidity(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserResp, error)
	// UserMyInfo 我的用户信息
	UserMyInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserInfoResp, error)
	// CancelMyAccount 注销我的账号
	CancelMyAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserResp, error)
	// UserIndexStatistics (商户后台)用户首页数据统计
	UserIndexStatistics(ctx context.Context, in *UserIndexStatisticsReq, opts ...grpc.CallOption) (*UserIndexStatisticsResp, error)
	// UserServiceBaseList 获取用户列表
	UserServiceBaseList(ctx context.Context, in *UserServiceBaseListReq, opts ...grpc.CallOption) (*UserServiceBaseListResp, error)
	// UserCapital 用户资金
	UserCapital(ctx context.Context, in *UserCapitalReq, opts ...grpc.CallOption) (*UserCapitalResp, error)
	// UserCapitalList 用户资金明细
	UserCapitalList(ctx context.Context, in *UserCapitalListReq, opts ...grpc.CallOption) (*UserCapitalListResp, error)
	// UserChainCost 查询上链预算费用
	UserChainCost(ctx context.Context, in *UserChainCostReq, opts ...grpc.CallOption) (*UserChainCostResp, error)
	// UserDeveloperApply 申请开发者认证
	UserDeveloperApply(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserResp, error)
	// UserBaseInfo 用户基础详情
	UserBaseInfo(ctx context.Context, in *UserBaseInfoReq, opts ...grpc.CallOption) (*UserBaseInfoResp, error)
	// UserInfo 用户详情
	UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	// UserBaseInfoList 用户基础信息列表
	UserBaseInfoList(ctx context.Context, in *UserBaseInfoListReq, opts ...grpc.CallOption) (*UserBaseInfoListResp, error)
	// UserCharge 用户充值
	UserCharge(ctx context.Context, in *UserChargeReq, opts ...grpc.CallOption) (*UserChargeResp, error)
	// UserChargeStatus 获取用户充值状态
	UserChargeStatus(ctx context.Context, in *UserChargeStatusReq, opts ...grpc.CallOption) (*UserChargeStatusResp, error)
	// UserChargeChange 用户充值状态修改
	UserChargeChange(ctx context.Context, in *UserChargeChangeReq, opts ...grpc.CallOption) (*UserResp, error)
	// UserAccountInfo 查询用户账户信息
	UserAccountInfo(ctx context.Context, in *UserAccountInfoReq, opts ...grpc.CallOption) (*UserAccountInfoResp, error)
	// UserFrozenCapital 冻结用户余额
	UserFrozenCapital(ctx context.Context, in *UserFrozenCapitalReq, opts ...grpc.CallOption) (*UserFrozenCapitalResp, error)
	// UserUnFrozenCapital 解冻用户余额
	UserUnFrozenCapital(ctx context.Context, in *UserUnFrozenCapitalReq, opts ...grpc.CallOption) (*UserResp, error)
	// UserInvoiceList 查询可开发票的列表
	UserInvoiceList(ctx context.Context, in *UserInvoiceListReq, opts ...grpc.CallOption) (*UserInvoiceListResp, error)
	// UserInvoicedlist 查看已经开过的发票列表
	UserInvoicedList(ctx context.Context, in *UserInvoicedListReq, opts ...grpc.CallOption) (*UserInvoicedListResp, error)
	// UserInvoicedInclusiveMonth  查看已经开票包含的月份
	UserInvoicedInclusiveMonth(ctx context.Context, in *UserInvoicedInclusiveMonthReq, opts ...grpc.CallOption) (*UserInvoicedInclusiveMonthResp, error)
	// UserInvoiceConsumptiveDetail 查看水月消费明细
	UserInvoiceConsumptiveDetail(ctx context.Context, in *UserInvoiceConsumptiveDetailReq, opts ...grpc.CallOption) (*UserInvoiceConsumptiveDetailResp, error)
	// UserInvoiceApply 申请开发票
	UserInvoiceApply(ctx context.Context, in *UserInvoiceApplyReq, opts ...grpc.CallOption) (*UserInvoiceApplyResp, error)
	// UserInvoiceGetInfoById 查看发票信息
	UserInvoiceGetInfoById(ctx context.Context, in *UserInvoiceGetInfoByIdReq, opts ...grpc.CallOption) (*UserInvoiceGetInfoByIdResp, error)
	// AdminSetPwd admin重置密码
	AdminSetPwd(ctx context.Context, in *AdminSetPwdReq, opts ...grpc.CallOption) (*UserResp, error)
	// UserAdminList (manager)admin获取用户列表
	UserAdminList(ctx context.Context, in *UserAdminListReq, opts ...grpc.CallOption) (*UserAdminListResp, error)
	// UserAccountAdminList admin获取用户账号列表
	UserAccountAdminList(ctx context.Context, in *UserAccountAdminListReq, opts ...grpc.CallOption) (*UserAccountAdminListResp, error)
	// UserAccountChangePrice 修改账号价格
	UserAccountChangePrice(ctx context.Context, in *UserAccountChangePriceReq, opts ...grpc.CallOption) (*UserResp, error)
	// UserCapitalAllList admin用户资金明细
	UserCapitalAllList(ctx context.Context, in *UserCapitalAllListReq, opts ...grpc.CallOption) (*UserCapitalAllListResp, error)
	// UserAdminDeveloperAudit admin审核开发者
	UserAdminDeveloperAudit(ctx context.Context, in *UserAdminDeveloperAuditReq, opts ...grpc.CallOption) (*UserResp, error)
	// UserAdminInvoiceSetInfo (运营后台)更新发票相关信息
	UserAdminInvoiceSetInfo(ctx context.Context, in *UserAdminInvoiceSetInfoReq, opts ...grpc.CallOption) (*UserAdminInvoiceSetInfoResp, error)
	// UserAdminInvoiceList (运营后台)查询申请开发票的列表
	UserAdminInvoiceList(ctx context.Context, in *UserAdminInvoiceListReq, opts ...grpc.CallOption) (*UserAdminInvoiceListResp, error)
	// UserAdminInvoiceGetInfo (运营后台)查看发票内容信息
	UserAdminInvoiceGetInfo(ctx context.Context, in *UserAdminInvoiceGetInfoReq, opts ...grpc.CallOption) (*UserAdminInvoiceGetInfoResp, error)
	// UserAdminInvoiceGetMonthsInfo (运营后台)查看发票包含的月份信息
	UserAdminInvoiceGetMonthsInfo(ctx context.Context, in *UserAdminInvoiceGetMonthsInfoReq, opts ...grpc.CallOption) (*UserAdminInvoiceGetMonthsInfoResp, error)
	// UserAdminGetConsumptiveDetail (运营后台)查看当月消费明细
	UserAdminGetConsumptiveDetail(ctx context.Context, in *UserAdminGetConsumptiveDetailReq, opts ...grpc.CallOption) (*UserAdminGetConsumptiveDetailResp, error)
	// UserAdminPresentByAccount (运营后台)指定账户增加
	UserAdminPresentByAccount(ctx context.Context, in *UserAdminPresentByAccountReq, opts ...grpc.CallOption) (*UserAdminPresentByAccountResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AuthLogin(ctx context.Context, in *AuthLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserService_AuthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Bind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_Bind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePwd(ctx context.Context, in *ChangePwdReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_ChangePwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePwdNew(ctx context.Context, in *ChangePwdNewReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_ChangePwdNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ForgetPwd(ctx context.Context, in *ForgetPwdReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_ForgetPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetPwd(ctx context.Context, in *SetPwdReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_SetPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendSetPwdCode(ctx context.Context, in *SendSetPwdCodeReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_SendSetPwdCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeAccountStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_ChangeAccountStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeAccountCredential(ctx context.Context, in *ChangeCredential, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_ChangeAccountCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeAccountMerchantStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_ChangeAccountMerchantStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatorApply(ctx context.Context, in *CreatorApplyReq, opts ...grpc.CallOption) (*CreatorApplyResp, error) {
	out := new(CreatorApplyResp)
	err := c.cc.Invoke(ctx, UserService_CreatorApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatorAudit(ctx context.Context, in *CreatorAuditReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_CreatorAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatorList(ctx context.Context, in *CreatorListReq, opts ...grpc.CallOption) (*CreatorListResp, error) {
	out := new(CreatorListResp)
	err := c.cc.Invoke(ctx, UserService_CreatorList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RealName(ctx context.Context, in *RealNameReq, opts ...grpc.CallOption) (*RealNameResp, error) {
	out := new(RealNameResp)
	err := c.cc.Invoke(ctx, UserService_RealName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RealNameNew(ctx context.Context, in *RealNameNewReq, opts ...grpc.CallOption) (*RealNameNewResp, error) {
	out := new(RealNameNewResp)
	err := c.cc.Invoke(ctx, UserService_RealNameNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserValidity(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_UserValidity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserMyInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, UserService_UserMyInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CancelMyAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_CancelMyAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserIndexStatistics(ctx context.Context, in *UserIndexStatisticsReq, opts ...grpc.CallOption) (*UserIndexStatisticsResp, error) {
	out := new(UserIndexStatisticsResp)
	err := c.cc.Invoke(ctx, UserService_UserIndexStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserServiceBaseList(ctx context.Context, in *UserServiceBaseListReq, opts ...grpc.CallOption) (*UserServiceBaseListResp, error) {
	out := new(UserServiceBaseListResp)
	err := c.cc.Invoke(ctx, UserService_UserServiceBaseList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserCapital(ctx context.Context, in *UserCapitalReq, opts ...grpc.CallOption) (*UserCapitalResp, error) {
	out := new(UserCapitalResp)
	err := c.cc.Invoke(ctx, UserService_UserCapital_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserCapitalList(ctx context.Context, in *UserCapitalListReq, opts ...grpc.CallOption) (*UserCapitalListResp, error) {
	out := new(UserCapitalListResp)
	err := c.cc.Invoke(ctx, UserService_UserCapitalList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserChainCost(ctx context.Context, in *UserChainCostReq, opts ...grpc.CallOption) (*UserChainCostResp, error) {
	out := new(UserChainCostResp)
	err := c.cc.Invoke(ctx, UserService_UserChainCost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserDeveloperApply(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_UserDeveloperApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserBaseInfo(ctx context.Context, in *UserBaseInfoReq, opts ...grpc.CallOption) (*UserBaseInfoResp, error) {
	out := new(UserBaseInfoResp)
	err := c.cc.Invoke(ctx, UserService_UserBaseInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, UserService_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserBaseInfoList(ctx context.Context, in *UserBaseInfoListReq, opts ...grpc.CallOption) (*UserBaseInfoListResp, error) {
	out := new(UserBaseInfoListResp)
	err := c.cc.Invoke(ctx, UserService_UserBaseInfoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserCharge(ctx context.Context, in *UserChargeReq, opts ...grpc.CallOption) (*UserChargeResp, error) {
	out := new(UserChargeResp)
	err := c.cc.Invoke(ctx, UserService_UserCharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserChargeStatus(ctx context.Context, in *UserChargeStatusReq, opts ...grpc.CallOption) (*UserChargeStatusResp, error) {
	out := new(UserChargeStatusResp)
	err := c.cc.Invoke(ctx, UserService_UserChargeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserChargeChange(ctx context.Context, in *UserChargeChangeReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_UserChargeChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAccountInfo(ctx context.Context, in *UserAccountInfoReq, opts ...grpc.CallOption) (*UserAccountInfoResp, error) {
	out := new(UserAccountInfoResp)
	err := c.cc.Invoke(ctx, UserService_UserAccountInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserFrozenCapital(ctx context.Context, in *UserFrozenCapitalReq, opts ...grpc.CallOption) (*UserFrozenCapitalResp, error) {
	out := new(UserFrozenCapitalResp)
	err := c.cc.Invoke(ctx, UserService_UserFrozenCapital_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserUnFrozenCapital(ctx context.Context, in *UserUnFrozenCapitalReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_UserUnFrozenCapital_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInvoiceList(ctx context.Context, in *UserInvoiceListReq, opts ...grpc.CallOption) (*UserInvoiceListResp, error) {
	out := new(UserInvoiceListResp)
	err := c.cc.Invoke(ctx, UserService_UserInvoiceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInvoicedList(ctx context.Context, in *UserInvoicedListReq, opts ...grpc.CallOption) (*UserInvoicedListResp, error) {
	out := new(UserInvoicedListResp)
	err := c.cc.Invoke(ctx, UserService_UserInvoicedList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInvoicedInclusiveMonth(ctx context.Context, in *UserInvoicedInclusiveMonthReq, opts ...grpc.CallOption) (*UserInvoicedInclusiveMonthResp, error) {
	out := new(UserInvoicedInclusiveMonthResp)
	err := c.cc.Invoke(ctx, UserService_UserInvoicedInclusiveMonth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInvoiceConsumptiveDetail(ctx context.Context, in *UserInvoiceConsumptiveDetailReq, opts ...grpc.CallOption) (*UserInvoiceConsumptiveDetailResp, error) {
	out := new(UserInvoiceConsumptiveDetailResp)
	err := c.cc.Invoke(ctx, UserService_UserInvoiceConsumptiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInvoiceApply(ctx context.Context, in *UserInvoiceApplyReq, opts ...grpc.CallOption) (*UserInvoiceApplyResp, error) {
	out := new(UserInvoiceApplyResp)
	err := c.cc.Invoke(ctx, UserService_UserInvoiceApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInvoiceGetInfoById(ctx context.Context, in *UserInvoiceGetInfoByIdReq, opts ...grpc.CallOption) (*UserInvoiceGetInfoByIdResp, error) {
	out := new(UserInvoiceGetInfoByIdResp)
	err := c.cc.Invoke(ctx, UserService_UserInvoiceGetInfoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminSetPwd(ctx context.Context, in *AdminSetPwdReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_AdminSetPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAdminList(ctx context.Context, in *UserAdminListReq, opts ...grpc.CallOption) (*UserAdminListResp, error) {
	out := new(UserAdminListResp)
	err := c.cc.Invoke(ctx, UserService_UserAdminList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAccountAdminList(ctx context.Context, in *UserAccountAdminListReq, opts ...grpc.CallOption) (*UserAccountAdminListResp, error) {
	out := new(UserAccountAdminListResp)
	err := c.cc.Invoke(ctx, UserService_UserAccountAdminList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAccountChangePrice(ctx context.Context, in *UserAccountChangePriceReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_UserAccountChangePrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserCapitalAllList(ctx context.Context, in *UserCapitalAllListReq, opts ...grpc.CallOption) (*UserCapitalAllListResp, error) {
	out := new(UserCapitalAllListResp)
	err := c.cc.Invoke(ctx, UserService_UserCapitalAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAdminDeveloperAudit(ctx context.Context, in *UserAdminDeveloperAuditReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserService_UserAdminDeveloperAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAdminInvoiceSetInfo(ctx context.Context, in *UserAdminInvoiceSetInfoReq, opts ...grpc.CallOption) (*UserAdminInvoiceSetInfoResp, error) {
	out := new(UserAdminInvoiceSetInfoResp)
	err := c.cc.Invoke(ctx, UserService_UserAdminInvoiceSetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAdminInvoiceList(ctx context.Context, in *UserAdminInvoiceListReq, opts ...grpc.CallOption) (*UserAdminInvoiceListResp, error) {
	out := new(UserAdminInvoiceListResp)
	err := c.cc.Invoke(ctx, UserService_UserAdminInvoiceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAdminInvoiceGetInfo(ctx context.Context, in *UserAdminInvoiceGetInfoReq, opts ...grpc.CallOption) (*UserAdminInvoiceGetInfoResp, error) {
	out := new(UserAdminInvoiceGetInfoResp)
	err := c.cc.Invoke(ctx, UserService_UserAdminInvoiceGetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAdminInvoiceGetMonthsInfo(ctx context.Context, in *UserAdminInvoiceGetMonthsInfoReq, opts ...grpc.CallOption) (*UserAdminInvoiceGetMonthsInfoResp, error) {
	out := new(UserAdminInvoiceGetMonthsInfoResp)
	err := c.cc.Invoke(ctx, UserService_UserAdminInvoiceGetMonthsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAdminGetConsumptiveDetail(ctx context.Context, in *UserAdminGetConsumptiveDetailReq, opts ...grpc.CallOption) (*UserAdminGetConsumptiveDetailResp, error) {
	out := new(UserAdminGetConsumptiveDetailResp)
	err := c.cc.Invoke(ctx, UserService_UserAdminGetConsumptiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAdminPresentByAccount(ctx context.Context, in *UserAdminPresentByAccountReq, opts ...grpc.CallOption) (*UserAdminPresentByAccountResp, error) {
	out := new(UserAdminPresentByAccountResp)
	err := c.cc.Invoke(ctx, UserService_UserAdminPresentByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// Register 用户注册
	Register(context.Context, *RegisterReq) (*LoginResp, error)
	// Login 用户登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// AuthLogin 用户授权登陆
	AuthLogin(context.Context, *AuthLoginReq) (*LoginResp, error)
	// Bind 用户绑定账号
	Bind(context.Context, *BindReq) (*UserResp, error)
	// ChangePwd 修改密码
	ChangePwd(context.Context, *ChangePwdReq) (*UserResp, error)
	// ChangePwdNew 修改密码
	//   - version: v2
	ChangePwdNew(context.Context, *ChangePwdNewReq) (*UserResp, error)
	// ForgetPwd 忘记密码
	ForgetPwd(context.Context, *ForgetPwdReq) (*UserResp, error)
	// SetPwd 重置密码
	SetPwd(context.Context, *SetPwdReq) (*UserResp, error)
	// SendSetPwdCode 发送重置密码验证码
	SendSetPwdCode(context.Context, *SendSetPwdCodeReq) (*UserResp, error)
	// ChangeUserStatus 修改用户状态
	ChangeUserStatus(context.Context, *ChangeStatusReq) (*UserResp, error)
	// ChangeAccountStatus 修改账号状态
	ChangeAccountStatus(context.Context, *ChangeStatusReq) (*UserResp, error)
	// ChangeAccountCredential 修改账号uuid
	ChangeAccountCredential(context.Context, *ChangeCredential) (*UserResp, error)
	// ChangeAccountMerchantStatus 修改账号商户签约状态
	ChangeAccountMerchantStatus(context.Context, *ChangeStatusReq) (*UserResp, error)
	// CreatorApply 申请创作者
	CreatorApply(context.Context, *CreatorApplyReq) (*CreatorApplyResp, error)
	// CreatorAudit 创作者审核
	CreatorAudit(context.Context, *CreatorAuditReq) (*UserResp, error)
	// CreatorList 创作者列表
	CreatorList(context.Context, *CreatorListReq) (*CreatorListResp, error)
	// RealName 用户实名
	RealName(context.Context, *RealNameReq) (*RealNameResp, error)
	// RealNameNew (新)用户实名
	//   - version: v2
	RealNameNew(context.Context, *RealNameNewReq) (*RealNameNewResp, error)
	// UserValidity 用户是否可用
	UserValidity(context.Context, *UserInfoReq) (*UserResp, error)
	// UserMyInfo 我的用户信息
	UserMyInfo(context.Context, *emptypb.Empty) (*UserInfoResp, error)
	// CancelMyAccount 注销我的账号
	CancelMyAccount(context.Context, *emptypb.Empty) (*UserResp, error)
	// UserIndexStatistics (商户后台)用户首页数据统计
	UserIndexStatistics(context.Context, *UserIndexStatisticsReq) (*UserIndexStatisticsResp, error)
	// UserServiceBaseList 获取用户列表
	UserServiceBaseList(context.Context, *UserServiceBaseListReq) (*UserServiceBaseListResp, error)
	// UserCapital 用户资金
	UserCapital(context.Context, *UserCapitalReq) (*UserCapitalResp, error)
	// UserCapitalList 用户资金明细
	UserCapitalList(context.Context, *UserCapitalListReq) (*UserCapitalListResp, error)
	// UserChainCost 查询上链预算费用
	UserChainCost(context.Context, *UserChainCostReq) (*UserChainCostResp, error)
	// UserDeveloperApply 申请开发者认证
	UserDeveloperApply(context.Context, *emptypb.Empty) (*UserResp, error)
	// UserBaseInfo 用户基础详情
	UserBaseInfo(context.Context, *UserBaseInfoReq) (*UserBaseInfoResp, error)
	// UserInfo 用户详情
	UserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error)
	// UserBaseInfoList 用户基础信息列表
	UserBaseInfoList(context.Context, *UserBaseInfoListReq) (*UserBaseInfoListResp, error)
	// UserCharge 用户充值
	UserCharge(context.Context, *UserChargeReq) (*UserChargeResp, error)
	// UserChargeStatus 获取用户充值状态
	UserChargeStatus(context.Context, *UserChargeStatusReq) (*UserChargeStatusResp, error)
	// UserChargeChange 用户充值状态修改
	UserChargeChange(context.Context, *UserChargeChangeReq) (*UserResp, error)
	// UserAccountInfo 查询用户账户信息
	UserAccountInfo(context.Context, *UserAccountInfoReq) (*UserAccountInfoResp, error)
	// UserFrozenCapital 冻结用户余额
	UserFrozenCapital(context.Context, *UserFrozenCapitalReq) (*UserFrozenCapitalResp, error)
	// UserUnFrozenCapital 解冻用户余额
	UserUnFrozenCapital(context.Context, *UserUnFrozenCapitalReq) (*UserResp, error)
	// UserInvoiceList 查询可开发票的列表
	UserInvoiceList(context.Context, *UserInvoiceListReq) (*UserInvoiceListResp, error)
	// UserInvoicedlist 查看已经开过的发票列表
	UserInvoicedList(context.Context, *UserInvoicedListReq) (*UserInvoicedListResp, error)
	// UserInvoicedInclusiveMonth  查看已经开票包含的月份
	UserInvoicedInclusiveMonth(context.Context, *UserInvoicedInclusiveMonthReq) (*UserInvoicedInclusiveMonthResp, error)
	// UserInvoiceConsumptiveDetail 查看水月消费明细
	UserInvoiceConsumptiveDetail(context.Context, *UserInvoiceConsumptiveDetailReq) (*UserInvoiceConsumptiveDetailResp, error)
	// UserInvoiceApply 申请开发票
	UserInvoiceApply(context.Context, *UserInvoiceApplyReq) (*UserInvoiceApplyResp, error)
	// UserInvoiceGetInfoById 查看发票信息
	UserInvoiceGetInfoById(context.Context, *UserInvoiceGetInfoByIdReq) (*UserInvoiceGetInfoByIdResp, error)
	// AdminSetPwd admin重置密码
	AdminSetPwd(context.Context, *AdminSetPwdReq) (*UserResp, error)
	// UserAdminList (manager)admin获取用户列表
	UserAdminList(context.Context, *UserAdminListReq) (*UserAdminListResp, error)
	// UserAccountAdminList admin获取用户账号列表
	UserAccountAdminList(context.Context, *UserAccountAdminListReq) (*UserAccountAdminListResp, error)
	// UserAccountChangePrice 修改账号价格
	UserAccountChangePrice(context.Context, *UserAccountChangePriceReq) (*UserResp, error)
	// UserCapitalAllList admin用户资金明细
	UserCapitalAllList(context.Context, *UserCapitalAllListReq) (*UserCapitalAllListResp, error)
	// UserAdminDeveloperAudit admin审核开发者
	UserAdminDeveloperAudit(context.Context, *UserAdminDeveloperAuditReq) (*UserResp, error)
	// UserAdminInvoiceSetInfo (运营后台)更新发票相关信息
	UserAdminInvoiceSetInfo(context.Context, *UserAdminInvoiceSetInfoReq) (*UserAdminInvoiceSetInfoResp, error)
	// UserAdminInvoiceList (运营后台)查询申请开发票的列表
	UserAdminInvoiceList(context.Context, *UserAdminInvoiceListReq) (*UserAdminInvoiceListResp, error)
	// UserAdminInvoiceGetInfo (运营后台)查看发票内容信息
	UserAdminInvoiceGetInfo(context.Context, *UserAdminInvoiceGetInfoReq) (*UserAdminInvoiceGetInfoResp, error)
	// UserAdminInvoiceGetMonthsInfo (运营后台)查看发票包含的月份信息
	UserAdminInvoiceGetMonthsInfo(context.Context, *UserAdminInvoiceGetMonthsInfoReq) (*UserAdminInvoiceGetMonthsInfoResp, error)
	// UserAdminGetConsumptiveDetail (运营后台)查看当月消费明细
	UserAdminGetConsumptiveDetail(context.Context, *UserAdminGetConsumptiveDetailReq) (*UserAdminGetConsumptiveDetailResp, error)
	// UserAdminPresentByAccount (运营后台)指定账户增加
	UserAdminPresentByAccount(context.Context, *UserAdminPresentByAccountReq) (*UserAdminPresentByAccountResp, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Register(context.Context, *RegisterReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) AuthLogin(context.Context, *AuthLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}
func (UnimplementedUserServiceServer) Bind(context.Context, *BindReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedUserServiceServer) ChangePwd(context.Context, *ChangePwdReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePwd not implemented")
}
func (UnimplementedUserServiceServer) ChangePwdNew(context.Context, *ChangePwdNewReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePwdNew not implemented")
}
func (UnimplementedUserServiceServer) ForgetPwd(context.Context, *ForgetPwdReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPwd not implemented")
}
func (UnimplementedUserServiceServer) SetPwd(context.Context, *SetPwdReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPwd not implemented")
}
func (UnimplementedUserServiceServer) SendSetPwdCode(context.Context, *SendSetPwdCodeReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSetPwdCode not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserStatus(context.Context, *ChangeStatusReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserStatus not implemented")
}
func (UnimplementedUserServiceServer) ChangeAccountStatus(context.Context, *ChangeStatusReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountStatus not implemented")
}
func (UnimplementedUserServiceServer) ChangeAccountCredential(context.Context, *ChangeCredential) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountCredential not implemented")
}
func (UnimplementedUserServiceServer) ChangeAccountMerchantStatus(context.Context, *ChangeStatusReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountMerchantStatus not implemented")
}
func (UnimplementedUserServiceServer) CreatorApply(context.Context, *CreatorApplyReq) (*CreatorApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatorApply not implemented")
}
func (UnimplementedUserServiceServer) CreatorAudit(context.Context, *CreatorAuditReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatorAudit not implemented")
}
func (UnimplementedUserServiceServer) CreatorList(context.Context, *CreatorListReq) (*CreatorListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatorList not implemented")
}
func (UnimplementedUserServiceServer) RealName(context.Context, *RealNameReq) (*RealNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealName not implemented")
}
func (UnimplementedUserServiceServer) RealNameNew(context.Context, *RealNameNewReq) (*RealNameNewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealNameNew not implemented")
}
func (UnimplementedUserServiceServer) UserValidity(context.Context, *UserInfoReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserValidity not implemented")
}
func (UnimplementedUserServiceServer) UserMyInfo(context.Context, *emptypb.Empty) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMyInfo not implemented")
}
func (UnimplementedUserServiceServer) CancelMyAccount(context.Context, *emptypb.Empty) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMyAccount not implemented")
}
func (UnimplementedUserServiceServer) UserIndexStatistics(context.Context, *UserIndexStatisticsReq) (*UserIndexStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIndexStatistics not implemented")
}
func (UnimplementedUserServiceServer) UserServiceBaseList(context.Context, *UserServiceBaseListReq) (*UserServiceBaseListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserServiceBaseList not implemented")
}
func (UnimplementedUserServiceServer) UserCapital(context.Context, *UserCapitalReq) (*UserCapitalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCapital not implemented")
}
func (UnimplementedUserServiceServer) UserCapitalList(context.Context, *UserCapitalListReq) (*UserCapitalListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCapitalList not implemented")
}
func (UnimplementedUserServiceServer) UserChainCost(context.Context, *UserChainCostReq) (*UserChainCostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChainCost not implemented")
}
func (UnimplementedUserServiceServer) UserDeveloperApply(context.Context, *emptypb.Empty) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeveloperApply not implemented")
}
func (UnimplementedUserServiceServer) UserBaseInfo(context.Context, *UserBaseInfoReq) (*UserBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBaseInfo not implemented")
}
func (UnimplementedUserServiceServer) UserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserServiceServer) UserBaseInfoList(context.Context, *UserBaseInfoListReq) (*UserBaseInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBaseInfoList not implemented")
}
func (UnimplementedUserServiceServer) UserCharge(context.Context, *UserChargeReq) (*UserChargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCharge not implemented")
}
func (UnimplementedUserServiceServer) UserChargeStatus(context.Context, *UserChargeStatusReq) (*UserChargeStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChargeStatus not implemented")
}
func (UnimplementedUserServiceServer) UserChargeChange(context.Context, *UserChargeChangeReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChargeChange not implemented")
}
func (UnimplementedUserServiceServer) UserAccountInfo(context.Context, *UserAccountInfoReq) (*UserAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAccountInfo not implemented")
}
func (UnimplementedUserServiceServer) UserFrozenCapital(context.Context, *UserFrozenCapitalReq) (*UserFrozenCapitalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFrozenCapital not implemented")
}
func (UnimplementedUserServiceServer) UserUnFrozenCapital(context.Context, *UserUnFrozenCapitalReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUnFrozenCapital not implemented")
}
func (UnimplementedUserServiceServer) UserInvoiceList(context.Context, *UserInvoiceListReq) (*UserInvoiceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInvoiceList not implemented")
}
func (UnimplementedUserServiceServer) UserInvoicedList(context.Context, *UserInvoicedListReq) (*UserInvoicedListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInvoicedList not implemented")
}
func (UnimplementedUserServiceServer) UserInvoicedInclusiveMonth(context.Context, *UserInvoicedInclusiveMonthReq) (*UserInvoicedInclusiveMonthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInvoicedInclusiveMonth not implemented")
}
func (UnimplementedUserServiceServer) UserInvoiceConsumptiveDetail(context.Context, *UserInvoiceConsumptiveDetailReq) (*UserInvoiceConsumptiveDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInvoiceConsumptiveDetail not implemented")
}
func (UnimplementedUserServiceServer) UserInvoiceApply(context.Context, *UserInvoiceApplyReq) (*UserInvoiceApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInvoiceApply not implemented")
}
func (UnimplementedUserServiceServer) UserInvoiceGetInfoById(context.Context, *UserInvoiceGetInfoByIdReq) (*UserInvoiceGetInfoByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInvoiceGetInfoById not implemented")
}
func (UnimplementedUserServiceServer) AdminSetPwd(context.Context, *AdminSetPwdReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetPwd not implemented")
}
func (UnimplementedUserServiceServer) UserAdminList(context.Context, *UserAdminListReq) (*UserAdminListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdminList not implemented")
}
func (UnimplementedUserServiceServer) UserAccountAdminList(context.Context, *UserAccountAdminListReq) (*UserAccountAdminListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAccountAdminList not implemented")
}
func (UnimplementedUserServiceServer) UserAccountChangePrice(context.Context, *UserAccountChangePriceReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAccountChangePrice not implemented")
}
func (UnimplementedUserServiceServer) UserCapitalAllList(context.Context, *UserCapitalAllListReq) (*UserCapitalAllListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCapitalAllList not implemented")
}
func (UnimplementedUserServiceServer) UserAdminDeveloperAudit(context.Context, *UserAdminDeveloperAuditReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdminDeveloperAudit not implemented")
}
func (UnimplementedUserServiceServer) UserAdminInvoiceSetInfo(context.Context, *UserAdminInvoiceSetInfoReq) (*UserAdminInvoiceSetInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdminInvoiceSetInfo not implemented")
}
func (UnimplementedUserServiceServer) UserAdminInvoiceList(context.Context, *UserAdminInvoiceListReq) (*UserAdminInvoiceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdminInvoiceList not implemented")
}
func (UnimplementedUserServiceServer) UserAdminInvoiceGetInfo(context.Context, *UserAdminInvoiceGetInfoReq) (*UserAdminInvoiceGetInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdminInvoiceGetInfo not implemented")
}
func (UnimplementedUserServiceServer) UserAdminInvoiceGetMonthsInfo(context.Context, *UserAdminInvoiceGetMonthsInfoReq) (*UserAdminInvoiceGetMonthsInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdminInvoiceGetMonthsInfo not implemented")
}
func (UnimplementedUserServiceServer) UserAdminGetConsumptiveDetail(context.Context, *UserAdminGetConsumptiveDetailReq) (*UserAdminGetConsumptiveDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdminGetConsumptiveDetail not implemented")
}
func (UnimplementedUserServiceServer) UserAdminPresentByAccount(context.Context, *UserAdminPresentByAccountReq) (*UserAdminPresentByAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdminPresentByAccount not implemented")
}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AuthLogin(ctx, req.(*AuthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Bind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Bind(ctx, req.(*BindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangePwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePwd(ctx, req.(*ChangePwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePwdNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePwdNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePwdNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangePwdNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePwdNew(ctx, req.(*ChangePwdNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ForgetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ForgetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ForgetPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ForgetPwd(ctx, req.(*ForgetPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetPwd(ctx, req.(*SetPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendSetPwdCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSetPwdCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendSetPwdCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendSetPwdCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendSetPwdCode(ctx, req.(*SendSetPwdCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeAccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeAccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeAccountStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeAccountStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeAccountCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeAccountCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeAccountCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeAccountCredential(ctx, req.(*ChangeCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeAccountMerchantStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeAccountMerchantStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeAccountMerchantStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeAccountMerchantStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatorApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatorApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatorApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreatorApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatorApply(ctx, req.(*CreatorApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatorAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatorAuditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatorAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreatorAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatorAudit(ctx, req.(*CreatorAuditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreatorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatorList(ctx, req.(*CreatorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RealName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RealName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RealName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RealName(ctx, req.(*RealNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RealNameNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealNameNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RealNameNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RealNameNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RealNameNew(ctx, req.(*RealNameNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserValidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserValidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserValidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserValidity(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserMyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserMyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserMyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserMyInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CancelMyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CancelMyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CancelMyAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CancelMyAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserIndexStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIndexStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserIndexStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserIndexStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserIndexStatistics(ctx, req.(*UserIndexStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserServiceBaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceBaseListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserServiceBaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserServiceBaseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserServiceBaseList(ctx, req.(*UserServiceBaseListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserCapital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCapitalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCapital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserCapital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCapital(ctx, req.(*UserCapitalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserCapitalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCapitalListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCapitalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserCapitalList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCapitalList(ctx, req.(*UserCapitalListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserChainCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChainCostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserChainCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserChainCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserChainCost(ctx, req.(*UserChainCostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserDeveloperApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserDeveloperApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserDeveloperApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserDeveloperApply(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserBaseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserBaseInfo(ctx, req.(*UserBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserBaseInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBaseInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserBaseInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserBaseInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserBaseInfoList(ctx, req.(*UserBaseInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserCharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCharge(ctx, req.(*UserChargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserChargeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChargeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserChargeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserChargeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserChargeStatus(ctx, req.(*UserChargeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserChargeChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChargeChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserChargeChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserChargeChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserChargeChange(ctx, req.(*UserChargeChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAccountInfo(ctx, req.(*UserAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserFrozenCapital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFrozenCapitalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserFrozenCapital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserFrozenCapital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserFrozenCapital(ctx, req.(*UserFrozenCapitalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserUnFrozenCapital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUnFrozenCapitalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserUnFrozenCapital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserUnFrozenCapital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserUnFrozenCapital(ctx, req.(*UserUnFrozenCapitalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInvoiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInvoiceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInvoiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInvoiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInvoiceList(ctx, req.(*UserInvoiceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInvoicedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInvoicedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInvoicedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInvoicedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInvoicedList(ctx, req.(*UserInvoicedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInvoicedInclusiveMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInvoicedInclusiveMonthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInvoicedInclusiveMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInvoicedInclusiveMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInvoicedInclusiveMonth(ctx, req.(*UserInvoicedInclusiveMonthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInvoiceConsumptiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInvoiceConsumptiveDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInvoiceConsumptiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInvoiceConsumptiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInvoiceConsumptiveDetail(ctx, req.(*UserInvoiceConsumptiveDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInvoiceApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInvoiceApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInvoiceApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInvoiceApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInvoiceApply(ctx, req.(*UserInvoiceApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInvoiceGetInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInvoiceGetInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInvoiceGetInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInvoiceGetInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInvoiceGetInfoById(ctx, req.(*UserInvoiceGetInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminSetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminSetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminSetPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminSetPwd(ctx, req.(*AdminSetPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAdminList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAdminList(ctx, req.(*UserAdminListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAccountAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountAdminListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAccountAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAccountAdminList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAccountAdminList(ctx, req.(*UserAccountAdminListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAccountChangePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountChangePriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAccountChangePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAccountChangePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAccountChangePrice(ctx, req.(*UserAccountChangePriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserCapitalAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCapitalAllListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCapitalAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserCapitalAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCapitalAllList(ctx, req.(*UserCapitalAllListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAdminDeveloperAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminDeveloperAuditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAdminDeveloperAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAdminDeveloperAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAdminDeveloperAudit(ctx, req.(*UserAdminDeveloperAuditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAdminInvoiceSetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminInvoiceSetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAdminInvoiceSetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAdminInvoiceSetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAdminInvoiceSetInfo(ctx, req.(*UserAdminInvoiceSetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAdminInvoiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminInvoiceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAdminInvoiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAdminInvoiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAdminInvoiceList(ctx, req.(*UserAdminInvoiceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAdminInvoiceGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminInvoiceGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAdminInvoiceGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAdminInvoiceGetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAdminInvoiceGetInfo(ctx, req.(*UserAdminInvoiceGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAdminInvoiceGetMonthsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminInvoiceGetMonthsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAdminInvoiceGetMonthsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAdminInvoiceGetMonthsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAdminInvoiceGetMonthsInfo(ctx, req.(*UserAdminInvoiceGetMonthsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAdminGetConsumptiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminGetConsumptiveDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAdminGetConsumptiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAdminGetConsumptiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAdminGetConsumptiveDetail(ctx, req.(*UserAdminGetConsumptiveDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAdminPresentByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminPresentByAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAdminPresentByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAdminPresentByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAdminPresentByAccount(ctx, req.(*UserAdminPresentByAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daop.user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "AuthLogin",
			Handler:    _UserService_AuthLogin_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _UserService_Bind_Handler,
		},
		{
			MethodName: "ChangePwd",
			Handler:    _UserService_ChangePwd_Handler,
		},
		{
			MethodName: "ChangePwdNew",
			Handler:    _UserService_ChangePwdNew_Handler,
		},
		{
			MethodName: "ForgetPwd",
			Handler:    _UserService_ForgetPwd_Handler,
		},
		{
			MethodName: "SetPwd",
			Handler:    _UserService_SetPwd_Handler,
		},
		{
			MethodName: "SendSetPwdCode",
			Handler:    _UserService_SendSetPwdCode_Handler,
		},
		{
			MethodName: "ChangeUserStatus",
			Handler:    _UserService_ChangeUserStatus_Handler,
		},
		{
			MethodName: "ChangeAccountStatus",
			Handler:    _UserService_ChangeAccountStatus_Handler,
		},
		{
			MethodName: "ChangeAccountCredential",
			Handler:    _UserService_ChangeAccountCredential_Handler,
		},
		{
			MethodName: "ChangeAccountMerchantStatus",
			Handler:    _UserService_ChangeAccountMerchantStatus_Handler,
		},
		{
			MethodName: "CreatorApply",
			Handler:    _UserService_CreatorApply_Handler,
		},
		{
			MethodName: "CreatorAudit",
			Handler:    _UserService_CreatorAudit_Handler,
		},
		{
			MethodName: "CreatorList",
			Handler:    _UserService_CreatorList_Handler,
		},
		{
			MethodName: "RealName",
			Handler:    _UserService_RealName_Handler,
		},
		{
			MethodName: "RealNameNew",
			Handler:    _UserService_RealNameNew_Handler,
		},
		{
			MethodName: "UserValidity",
			Handler:    _UserService_UserValidity_Handler,
		},
		{
			MethodName: "UserMyInfo",
			Handler:    _UserService_UserMyInfo_Handler,
		},
		{
			MethodName: "CancelMyAccount",
			Handler:    _UserService_CancelMyAccount_Handler,
		},
		{
			MethodName: "UserIndexStatistics",
			Handler:    _UserService_UserIndexStatistics_Handler,
		},
		{
			MethodName: "UserServiceBaseList",
			Handler:    _UserService_UserServiceBaseList_Handler,
		},
		{
			MethodName: "UserCapital",
			Handler:    _UserService_UserCapital_Handler,
		},
		{
			MethodName: "UserCapitalList",
			Handler:    _UserService_UserCapitalList_Handler,
		},
		{
			MethodName: "UserChainCost",
			Handler:    _UserService_UserChainCost_Handler,
		},
		{
			MethodName: "UserDeveloperApply",
			Handler:    _UserService_UserDeveloperApply_Handler,
		},
		{
			MethodName: "UserBaseInfo",
			Handler:    _UserService_UserBaseInfo_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _UserService_UserInfo_Handler,
		},
		{
			MethodName: "UserBaseInfoList",
			Handler:    _UserService_UserBaseInfoList_Handler,
		},
		{
			MethodName: "UserCharge",
			Handler:    _UserService_UserCharge_Handler,
		},
		{
			MethodName: "UserChargeStatus",
			Handler:    _UserService_UserChargeStatus_Handler,
		},
		{
			MethodName: "UserChargeChange",
			Handler:    _UserService_UserChargeChange_Handler,
		},
		{
			MethodName: "UserAccountInfo",
			Handler:    _UserService_UserAccountInfo_Handler,
		},
		{
			MethodName: "UserFrozenCapital",
			Handler:    _UserService_UserFrozenCapital_Handler,
		},
		{
			MethodName: "UserUnFrozenCapital",
			Handler:    _UserService_UserUnFrozenCapital_Handler,
		},
		{
			MethodName: "UserInvoiceList",
			Handler:    _UserService_UserInvoiceList_Handler,
		},
		{
			MethodName: "UserInvoicedList",
			Handler:    _UserService_UserInvoicedList_Handler,
		},
		{
			MethodName: "UserInvoicedInclusiveMonth",
			Handler:    _UserService_UserInvoicedInclusiveMonth_Handler,
		},
		{
			MethodName: "UserInvoiceConsumptiveDetail",
			Handler:    _UserService_UserInvoiceConsumptiveDetail_Handler,
		},
		{
			MethodName: "UserInvoiceApply",
			Handler:    _UserService_UserInvoiceApply_Handler,
		},
		{
			MethodName: "UserInvoiceGetInfoById",
			Handler:    _UserService_UserInvoiceGetInfoById_Handler,
		},
		{
			MethodName: "AdminSetPwd",
			Handler:    _UserService_AdminSetPwd_Handler,
		},
		{
			MethodName: "UserAdminList",
			Handler:    _UserService_UserAdminList_Handler,
		},
		{
			MethodName: "UserAccountAdminList",
			Handler:    _UserService_UserAccountAdminList_Handler,
		},
		{
			MethodName: "UserAccountChangePrice",
			Handler:    _UserService_UserAccountChangePrice_Handler,
		},
		{
			MethodName: "UserCapitalAllList",
			Handler:    _UserService_UserCapitalAllList_Handler,
		},
		{
			MethodName: "UserAdminDeveloperAudit",
			Handler:    _UserService_UserAdminDeveloperAudit_Handler,
		},
		{
			MethodName: "UserAdminInvoiceSetInfo",
			Handler:    _UserService_UserAdminInvoiceSetInfo_Handler,
		},
		{
			MethodName: "UserAdminInvoiceList",
			Handler:    _UserService_UserAdminInvoiceList_Handler,
		},
		{
			MethodName: "UserAdminInvoiceGetInfo",
			Handler:    _UserService_UserAdminInvoiceGetInfo_Handler,
		},
		{
			MethodName: "UserAdminInvoiceGetMonthsInfo",
			Handler:    _UserService_UserAdminInvoiceGetMonthsInfo_Handler,
		},
		{
			MethodName: "UserAdminGetConsumptiveDetail",
			Handler:    _UserService_UserAdminGetConsumptiveDetail_Handler,
		},
		{
			MethodName: "UserAdminPresentByAccount",
			Handler:    _UserService_UserAdminPresentByAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/userpb/user.proto",
}
