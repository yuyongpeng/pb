// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pb/rbacpb/rbac.proto

package rbacpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GatewayMiddilewareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	AppNo       string `protobuf:"bytes,2,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	AccessToken string `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	UserToken   string `protobuf:"bytes,4,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
	Version     string `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GatewayMiddilewareReq) Reset() {
	*x = GatewayMiddilewareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMiddilewareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMiddilewareReq) ProtoMessage() {}

func (x *GatewayMiddilewareReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMiddilewareReq.ProtoReflect.Descriptor instead.
func (*GatewayMiddilewareReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayMiddilewareReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GatewayMiddilewareReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *GatewayMiddilewareReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *GatewayMiddilewareReq) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *GatewayMiddilewareReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GatewayMiddilewareResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GatewayMiddilewareResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GatewayMiddilewareResp) Reset() {
	*x = GatewayMiddilewareResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMiddilewareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMiddilewareResp) ProtoMessage() {}

func (x *GatewayMiddilewareResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMiddilewareResp.ProtoReflect.Descriptor instead.
func (*GatewayMiddilewareResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayMiddilewareResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GatewayMiddilewareResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GatewayMiddilewareResp) GetData() *GatewayMiddilewareResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// 空参数请求
type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R *emptypb.Empty `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *EmptyReq) GetR() *emptypb.Empty {
	if x != nil {
		return x.R
	}
	return nil
}

// 返回的基础结构类型
type BaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *structpb.Value `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BaseResp) Reset() {
	*x = BaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResp) ProtoMessage() {}

func (x *BaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResp.ProtoReflect.Descriptor instead.
func (*BaseResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *BaseResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BaseResp) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

// 更新数据状态请求
type UpStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpStatusReq) Reset() {
	*x = UpStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpStatusReq) ProtoMessage() {}

func (x *UpStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpStatusReq.ProtoReflect.Descriptor instead.
func (*UpStatusReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *UpStatusReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpStatusReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 审核请求
type AuditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AuditStatus  uint32 `protobuf:"varint,2,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	RejectReason string `protobuf:"bytes,3,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
}

func (x *AuditReq) Reset() {
	*x = AuditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditReq) ProtoMessage() {}

func (x *AuditReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditReq.ProtoReflect.Descriptor instead.
func (*AuditReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{5}
}

func (x *AuditReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AuditReq) GetAuditStatus() uint32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *AuditReq) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

// 绑定应用管理者账号
type BindAdministratorAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNo  string `protobuf:"bytes,1,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	Mobile string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email  string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *BindAdministratorAccountReq) Reset() {
	*x = BindAdministratorAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindAdministratorAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindAdministratorAccountReq) ProtoMessage() {}

func (x *BindAdministratorAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindAdministratorAccountReq.ProtoReflect.Descriptor instead.
func (*BindAdministratorAccountReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{6}
}

func (x *BindAdministratorAccountReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *BindAdministratorAccountReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *BindAdministratorAccountReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// 绑定应用使用的藏品合约
type BindContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           uint32 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (x *BindContractReq) Reset() {
	*x = BindContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindContractReq) ProtoMessage() {}

func (x *BindContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindContractReq.ProtoReflect.Descriptor instead.
func (*BindContractReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{7}
}

func (x *BindContractReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *BindContractReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

// 获取 access token请求参数
type GetAccessTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Sign  string `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	Alg   string `protobuf:"bytes,3,opt,name=alg,proto3" json:"alg,omitempty"`
}

func (x *GetAccessTokenReq) Reset() {
	*x = GetAccessTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessTokenReq) ProtoMessage() {}

func (x *GetAccessTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessTokenReq.ProtoReflect.Descriptor instead.
func (*GetAccessTokenReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{8}
}

func (x *GetAccessTokenReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *GetAccessTokenReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *GetAccessTokenReq) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

// 获取 access token响应数据
type AccessTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ExpiresIn uint32 `protobuf:"varint,2,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (x *AccessTokenData) Reset() {
	*x = AccessTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTokenData) ProtoMessage() {}

func (x *AccessTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTokenData.ProtoReflect.Descriptor instead.
func (*AccessTokenData) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{9}
}

func (x *AccessTokenData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AccessTokenData) GetExpiresIn() uint32 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

type GetAccessTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码,0表示业务成功,否则表示错误
	Msg  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误信息
	Data *AccessTokenData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 响应数据
}

func (x *GetAccessTokenResp) Reset() {
	*x = GetAccessTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessTokenResp) ProtoMessage() {}

func (x *GetAccessTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessTokenResp.ProtoReflect.Descriptor instead.
func (*GetAccessTokenResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{10}
}

func (x *GetAccessTokenResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAccessTokenResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAccessTokenResp) GetData() *AccessTokenData {
	if x != nil {
		return x.Data
	}
	return nil
}

// API分组数据结构
type ApiGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName  string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	ParentId   uint32 `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ParentName string `protobuf:"bytes,4,opt,name=parent_name,json=parentName,proto3" json:"parent_name,omitempty"`
	Remarks    string `protobuf:"bytes,5,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CreateTime uint32 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime uint32 `protobuf:"varint,7,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status     uint32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ApiGroup) Reset() {
	*x = ApiGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiGroup) ProtoMessage() {}

func (x *ApiGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiGroup.ProtoReflect.Descriptor instead.
func (*ApiGroup) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{11}
}

func (x *ApiGroup) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ApiGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ApiGroup) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ApiGroup) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *ApiGroup) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ApiGroup) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ApiGroup) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *ApiGroup) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 添加/编辑API分组请求
type HandleApiGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action uint32    `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	Group  *ApiGroup `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *HandleApiGroupReq) Reset() {
	*x = HandleApiGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleApiGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleApiGroupReq) ProtoMessage() {}

func (x *HandleApiGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleApiGroupReq.ProtoReflect.Descriptor instead.
func (*HandleApiGroupReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{12}
}

func (x *HandleApiGroupReq) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *HandleApiGroupReq) GetGroup() *ApiGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// 取API分组列表请求
type GetApiGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetApiGroupListReq) Reset() {
	*x = GetApiGroupListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiGroupListReq) ProtoMessage() {}

func (x *GetApiGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiGroupListReq.ProtoReflect.Descriptor instead.
func (*GetApiGroupListReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{13}
}

func (x *GetApiGroupListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetApiGroupListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// 取API分组列表返回数据结构
type GetApiGroupListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*ApiGroup `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetApiGroupListResp) Reset() {
	*x = GetApiGroupListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiGroupListResp) ProtoMessage() {}

func (x *GetApiGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiGroupListResp.ProtoReflect.Descriptor instead.
func (*GetApiGroupListResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{14}
}

func (x *GetApiGroupListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetApiGroupListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetApiGroupListResp) GetData() []*ApiGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

// API数据结构
type Api struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId         uint32 `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiGroupId    uint32 `protobuf:"varint,2,opt,name=api_group_id,json=apiGroupId,proto3" json:"api_group_id,omitempty"`
	ApiGroupName  string `protobuf:"bytes,16,opt,name=api_group_name,json=apiGroupName,proto3" json:"api_group_name,omitempty"`
	ShowNameCn    string `protobuf:"bytes,3,opt,name=show_name_cn,json=showNameCn,proto3" json:"show_name_cn,omitempty"`
	ShowNameEn    string `protobuf:"bytes,4,opt,name=show_name_en,json=showNameEn,proto3" json:"show_name_en,omitempty"`
	RouterUri     string `protobuf:"bytes,5,opt,name=router_uri,json=routerUri,proto3" json:"router_uri,omitempty"`
	Icon          string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	Ranking       uint32 `protobuf:"varint,7,opt,name=ranking,proto3" json:"ranking,omitempty"`
	IsPublic      uint32 `protobuf:"varint,8,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	NeedLogin     uint32 `protobuf:"varint,9,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	NeedAuthorise uint32 `protobuf:"varint,10,opt,name=need_authorise,json=needAuthorise,proto3" json:"need_authorise,omitempty"`
	InitState     uint32 `protobuf:"varint,11,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	Remarks       string `protobuf:"bytes,12,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CreateTime    uint32 `protobuf:"varint,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime    uint32 `protobuf:"varint,14,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status        uint32 `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"` // uint32 need_user_authorise = 20 [(validate.rules).uint32 = {in:[2,1]}, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "是否需要应用授权后才能访问(user authorized token), 2-不需要;1-需要"}];
}

func (x *Api) Reset() {
	*x = Api{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Api) ProtoMessage() {}

func (x *Api) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Api.ProtoReflect.Descriptor instead.
func (*Api) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{15}
}

func (x *Api) GetApiId() uint32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *Api) GetApiGroupId() uint32 {
	if x != nil {
		return x.ApiGroupId
	}
	return 0
}

func (x *Api) GetApiGroupName() string {
	if x != nil {
		return x.ApiGroupName
	}
	return ""
}

func (x *Api) GetShowNameCn() string {
	if x != nil {
		return x.ShowNameCn
	}
	return ""
}

func (x *Api) GetShowNameEn() string {
	if x != nil {
		return x.ShowNameEn
	}
	return ""
}

func (x *Api) GetRouterUri() string {
	if x != nil {
		return x.RouterUri
	}
	return ""
}

func (x *Api) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Api) GetRanking() uint32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *Api) GetIsPublic() uint32 {
	if x != nil {
		return x.IsPublic
	}
	return 0
}

func (x *Api) GetNeedLogin() uint32 {
	if x != nil {
		return x.NeedLogin
	}
	return 0
}

func (x *Api) GetNeedAuthorise() uint32 {
	if x != nil {
		return x.NeedAuthorise
	}
	return 0
}

func (x *Api) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *Api) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Api) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Api) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *Api) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 添加/编辑API请求
type HandleApiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action uint32 `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	Api    *Api   `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`
}

func (x *HandleApiReq) Reset() {
	*x = HandleApiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleApiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleApiReq) ProtoMessage() {}

func (x *HandleApiReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleApiReq.ProtoReflect.Descriptor instead.
func (*HandleApiReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{16}
}

func (x *HandleApiReq) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *HandleApiReq) GetApi() *Api {
	if x != nil {
		return x.Api
	}
	return nil
}

// 取API列表请求
type GetApiListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiGroupId    uint32 `protobuf:"varint,3,opt,name=api_group_id,json=apiGroupId,proto3" json:"api_group_id,omitempty"`
	RouterUri     string `protobuf:"bytes,4,opt,name=router_uri,json=routerUri,proto3" json:"router_uri,omitempty"`
	IsPublic      uint32 `protobuf:"varint,8,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	NeedLogin     uint32 `protobuf:"varint,9,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	NeedAuthorise uint32 `protobuf:"varint,10,opt,name=need_authorise,json=needAuthorise,proto3" json:"need_authorise,omitempty"`
	InitState     uint32 `protobuf:"varint,11,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	CreateTime    uint32 `protobuf:"varint,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime    uint32 `protobuf:"varint,14,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status        uint32 `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	Page          uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit         uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetApiListReq) Reset() {
	*x = GetApiListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiListReq) ProtoMessage() {}

func (x *GetApiListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiListReq.ProtoReflect.Descriptor instead.
func (*GetApiListReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{17}
}

func (x *GetApiListReq) GetApiGroupId() uint32 {
	if x != nil {
		return x.ApiGroupId
	}
	return 0
}

func (x *GetApiListReq) GetRouterUri() string {
	if x != nil {
		return x.RouterUri
	}
	return ""
}

func (x *GetApiListReq) GetIsPublic() uint32 {
	if x != nil {
		return x.IsPublic
	}
	return 0
}

func (x *GetApiListReq) GetNeedLogin() uint32 {
	if x != nil {
		return x.NeedLogin
	}
	return 0
}

func (x *GetApiListReq) GetNeedAuthorise() uint32 {
	if x != nil {
		return x.NeedAuthorise
	}
	return 0
}

func (x *GetApiListReq) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *GetApiListReq) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetApiListReq) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *GetApiListReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetApiListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetApiListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// 取API返回数据结构
type GetApiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *Api   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetApiResp) Reset() {
	*x = GetApiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiResp) ProtoMessage() {}

func (x *GetApiResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiResp.ProtoReflect.Descriptor instead.
func (*GetApiResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{18}
}

func (x *GetApiResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetApiResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetApiResp) GetData() *Api {
	if x != nil {
		return x.Data
	}
	return nil
}

// 取API列表返回数据结构
type GetApiListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*Api `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetApiListResp) Reset() {
	*x = GetApiListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiListResp) ProtoMessage() {}

func (x *GetApiListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiListResp.ProtoReflect.Descriptor instead.
func (*GetApiListResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{19}
}

func (x *GetApiListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetApiListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetApiListResp) GetData() []*Api {
	if x != nil {
		return x.Data
	}
	return nil
}

// 通过Uri取API信息请求
type GetApiByUriReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *GetApiByUriReq) Reset() {
	*x = GetApiByUriReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiByUriReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiByUriReq) ProtoMessage() {}

func (x *GetApiByUriReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiByUriReq.ProtoReflect.Descriptor instead.
func (*GetApiByUriReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{20}
}

func (x *GetApiByUriReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// 检查应用对API对访问权限请求
type CheckApiAccessOfAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppGroupId uint32 `protobuf:"varint,1,opt,name=app_group_id,json=appGroupId,proto3" json:"app_group_id,omitempty"`
	AppId      uint32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ApiId      uint32 `protobuf:"varint,3,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
}

func (x *CheckApiAccessOfAppReq) Reset() {
	*x = CheckApiAccessOfAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckApiAccessOfAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckApiAccessOfAppReq) ProtoMessage() {}

func (x *CheckApiAccessOfAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckApiAccessOfAppReq.ProtoReflect.Descriptor instead.
func (*CheckApiAccessOfAppReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{21}
}

func (x *CheckApiAccessOfAppReq) GetAppGroupId() uint32 {
	if x != nil {
		return x.AppGroupId
	}
	return 0
}

func (x *CheckApiAccessOfAppReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CheckApiAccessOfAppReq) GetApiId() uint32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

// 应用分组数据结构
type AppGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName     string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	IsSelfSupport uint32 `protobuf:"varint,6,opt,name=is_self_support,json=isSelfSupport,proto3" json:"is_self_support,omitempty"`
	CreateTime    uint32 `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime    uint32 `protobuf:"varint,4,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status        uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AppGroup) Reset() {
	*x = AppGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGroup) ProtoMessage() {}

func (x *AppGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGroup.ProtoReflect.Descriptor instead.
func (*AppGroup) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{22}
}

func (x *AppGroup) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AppGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *AppGroup) GetIsSelfSupport() uint32 {
	if x != nil {
		return x.IsSelfSupport
	}
	return 0
}

func (x *AppGroup) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AppGroup) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *AppGroup) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 添加/编辑应用分组请求
type HandleAppGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action uint32    `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	Group  *AppGroup `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *HandleAppGroupReq) Reset() {
	*x = HandleAppGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleAppGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleAppGroupReq) ProtoMessage() {}

func (x *HandleAppGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleAppGroupReq.ProtoReflect.Descriptor instead.
func (*HandleAppGroupReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{23}
}

func (x *HandleAppGroupReq) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *HandleAppGroupReq) GetGroup() *AppGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// 取应用分组列表请求
type GetAppGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetAppGroupListReq) Reset() {
	*x = GetAppGroupListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGroupListReq) ProtoMessage() {}

func (x *GetAppGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGroupListReq.ProtoReflect.Descriptor instead.
func (*GetAppGroupListReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{24}
}

func (x *GetAppGroupListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAppGroupListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// 取应用分组列表返回数据结构
type GetAppGroupListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*AppGroup `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppGroupListResp) Reset() {
	*x = GetAppGroupListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGroupListResp) ProtoMessage() {}

func (x *GetAppGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGroupListResp.ProtoReflect.Descriptor instead.
func (*GetAppGroupListResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{25}
}

func (x *GetAppGroupListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAppGroupListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAppGroupListResp) GetData() []*AppGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

// App应用数据结构
type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                  uint32 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppGroupId             uint32 `protobuf:"varint,2,opt,name=app_group_id,json=appGroupId,proto3" json:"app_group_id,omitempty"`
	AppGroupName           string `protobuf:"bytes,36,opt,name=app_group_name,json=appGroupName,proto3" json:"app_group_name,omitempty"`
	AppNo                  string `protobuf:"bytes,3,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	AppName                string `protobuf:"bytes,4,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	AppLogo                string `protobuf:"bytes,5,opt,name=app_logo,json=appLogo,proto3" json:"app_logo,omitempty"`
	AppType                uint32 `protobuf:"varint,7,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	AppUrl                 string `protobuf:"bytes,6,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	GatewayUrl             string `protobuf:"bytes,8,opt,name=gateway_url,json=gatewayUrl,proto3" json:"gateway_url,omitempty"`
	Oauth2Url              string `protobuf:"bytes,9,opt,name=oauth2_url,json=oauth2Url,proto3" json:"oauth2_url,omitempty"`
	EncryptType            uint32 `protobuf:"varint,10,opt,name=encrypt_type,json=encryptType,proto3" json:"encrypt_type,omitempty"`
	JwtSecretKey           string `protobuf:"bytes,11,opt,name=jwt_secret_key,json=jwtSecretKey,proto3" json:"jwt_secret_key,omitempty"`
	RsaPublicKey           string `protobuf:"bytes,12,opt,name=rsa_public_key,json=rsaPublicKey,proto3" json:"rsa_public_key,omitempty"`
	AesCipher              string `protobuf:"bytes,13,opt,name=aes_cipher,json=aesCipher,proto3" json:"aes_cipher,omitempty"`
	ClientType             uint32 `protobuf:"varint,14,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	Version                string `protobuf:"bytes,15,opt,name=version,proto3" json:"version,omitempty"`
	AccessIp               string `protobuf:"bytes,16,opt,name=access_ip,json=accessIp,proto3" json:"access_ip,omitempty"`
	Remarks                string `protobuf:"bytes,17,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CreatorAccountId       uint32 `protobuf:"varint,18,opt,name=creator_account_id,json=creatorAccountId,proto3" json:"creator_account_id,omitempty"`
	AdministratorAccountId uint32 `protobuf:"varint,19,opt,name=administrator_account_id,json=administratorAccountId,proto3" json:"administrator_account_id,omitempty"`
	ContractAddress        string `protobuf:"bytes,21,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ApplyTime              uint32 `protobuf:"varint,26,opt,name=apply_time,json=applyTime,proto3" json:"apply_time,omitempty"`
	ApplicationMaterial    string `protobuf:"bytes,27,opt,name=application_material,json=applicationMaterial,proto3" json:"application_material,omitempty"`
	AuditStatus            uint32 `protobuf:"varint,28,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	IsOnline               uint32 `protobuf:"varint,22,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	AuditTime              uint32 `protobuf:"varint,23,opt,name=audit_time,json=auditTime,proto3" json:"audit_time,omitempty"`
	OperatorAccountId      uint32 `protobuf:"varint,30,opt,name=operator_account_id,json=operatorAccountId,proto3" json:"operator_account_id,omitempty"`
	RejectReason           string `protobuf:"bytes,31,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	InitState              uint32 `protobuf:"varint,32,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	CreateTime             uint32 `protobuf:"varint,33,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime             uint32 `protobuf:"varint,34,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status                 uint32 `protobuf:"varint,35,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{26}
}

func (x *App) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *App) GetAppGroupId() uint32 {
	if x != nil {
		return x.AppGroupId
	}
	return 0
}

func (x *App) GetAppGroupName() string {
	if x != nil {
		return x.AppGroupName
	}
	return ""
}

func (x *App) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *App) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *App) GetAppLogo() string {
	if x != nil {
		return x.AppLogo
	}
	return ""
}

func (x *App) GetAppType() uint32 {
	if x != nil {
		return x.AppType
	}
	return 0
}

func (x *App) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *App) GetGatewayUrl() string {
	if x != nil {
		return x.GatewayUrl
	}
	return ""
}

func (x *App) GetOauth2Url() string {
	if x != nil {
		return x.Oauth2Url
	}
	return ""
}

func (x *App) GetEncryptType() uint32 {
	if x != nil {
		return x.EncryptType
	}
	return 0
}

func (x *App) GetJwtSecretKey() string {
	if x != nil {
		return x.JwtSecretKey
	}
	return ""
}

func (x *App) GetRsaPublicKey() string {
	if x != nil {
		return x.RsaPublicKey
	}
	return ""
}

func (x *App) GetAesCipher() string {
	if x != nil {
		return x.AesCipher
	}
	return ""
}

func (x *App) GetClientType() uint32 {
	if x != nil {
		return x.ClientType
	}
	return 0
}

func (x *App) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *App) GetAccessIp() string {
	if x != nil {
		return x.AccessIp
	}
	return ""
}

func (x *App) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *App) GetCreatorAccountId() uint32 {
	if x != nil {
		return x.CreatorAccountId
	}
	return 0
}

func (x *App) GetAdministratorAccountId() uint32 {
	if x != nil {
		return x.AdministratorAccountId
	}
	return 0
}

func (x *App) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *App) GetApplyTime() uint32 {
	if x != nil {
		return x.ApplyTime
	}
	return 0
}

func (x *App) GetApplicationMaterial() string {
	if x != nil {
		return x.ApplicationMaterial
	}
	return ""
}

func (x *App) GetAuditStatus() uint32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *App) GetIsOnline() uint32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *App) GetAuditTime() uint32 {
	if x != nil {
		return x.AuditTime
	}
	return 0
}

func (x *App) GetOperatorAccountId() uint32 {
	if x != nil {
		return x.OperatorAccountId
	}
	return 0
}

func (x *App) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *App) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *App) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *App) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *App) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 添加/编辑应用请求
type HandleAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action uint32 `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	App    *App   `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *HandleAppReq) Reset() {
	*x = HandleAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleAppReq) ProtoMessage() {}

func (x *HandleAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleAppReq.ProtoReflect.Descriptor instead.
func (*HandleAppReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{27}
}

func (x *HandleAppReq) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *HandleAppReq) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

// 取应用列表请求
type GetAppListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppGroupId             uint32 `protobuf:"varint,3,opt,name=app_group_id,json=appGroupId,proto3" json:"app_group_id,omitempty"`
	AppType                uint32 `protobuf:"varint,7,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	ClientType             uint32 `protobuf:"varint,14,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	CreatorAccountId       uint32 `protobuf:"varint,18,opt,name=creator_account_id,json=creatorAccountId,proto3" json:"creator_account_id,omitempty"`
	AdministratorAccountId uint32 `protobuf:"varint,19,opt,name=administrator_account_id,json=administratorAccountId,proto3" json:"administrator_account_id,omitempty"`
	ApplyTime              uint32 `protobuf:"varint,26,opt,name=apply_time,json=applyTime,proto3" json:"apply_time,omitempty"`
	AuditStatus            uint32 `protobuf:"varint,28,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	AuditTime              uint32 `protobuf:"varint,29,opt,name=audit_time,json=auditTime,proto3" json:"audit_time,omitempty"`
	OperatorAccountId      uint32 `protobuf:"varint,30,opt,name=operator_account_id,json=operatorAccountId,proto3" json:"operator_account_id,omitempty"`
	InitState              uint32 `protobuf:"varint,32,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	CreateTime             uint32 `protobuf:"varint,33,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime             uint32 `protobuf:"varint,34,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status                 uint32 `protobuf:"varint,35,opt,name=status,proto3" json:"status,omitempty"`
	Page                   uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit                  uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetAppListReq) Reset() {
	*x = GetAppListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppListReq) ProtoMessage() {}

func (x *GetAppListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppListReq.ProtoReflect.Descriptor instead.
func (*GetAppListReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{28}
}

func (x *GetAppListReq) GetAppGroupId() uint32 {
	if x != nil {
		return x.AppGroupId
	}
	return 0
}

func (x *GetAppListReq) GetAppType() uint32 {
	if x != nil {
		return x.AppType
	}
	return 0
}

func (x *GetAppListReq) GetClientType() uint32 {
	if x != nil {
		return x.ClientType
	}
	return 0
}

func (x *GetAppListReq) GetCreatorAccountId() uint32 {
	if x != nil {
		return x.CreatorAccountId
	}
	return 0
}

func (x *GetAppListReq) GetAdministratorAccountId() uint32 {
	if x != nil {
		return x.AdministratorAccountId
	}
	return 0
}

func (x *GetAppListReq) GetApplyTime() uint32 {
	if x != nil {
		return x.ApplyTime
	}
	return 0
}

func (x *GetAppListReq) GetAuditStatus() uint32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *GetAppListReq) GetAuditTime() uint32 {
	if x != nil {
		return x.AuditTime
	}
	return 0
}

func (x *GetAppListReq) GetOperatorAccountId() uint32 {
	if x != nil {
		return x.OperatorAccountId
	}
	return 0
}

func (x *GetAppListReq) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *GetAppListReq) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetAppListReq) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *GetAppListReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetAppListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAppListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// 取应用密钥请求
type GetAppKeyByAppNoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNo    string `protobuf:"bytes,1,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	Mobile   string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Code     uint32 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	CodeType uint32 `protobuf:"varint,4,opt,name=code_type,json=codeType,proto3" json:"code_type,omitempty"`
}

func (x *GetAppKeyByAppNoReq) Reset() {
	*x = GetAppKeyByAppNoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppKeyByAppNoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppKeyByAppNoReq) ProtoMessage() {}

func (x *GetAppKeyByAppNoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppKeyByAppNoReq.ProtoReflect.Descriptor instead.
func (*GetAppKeyByAppNoReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{29}
}

func (x *GetAppKeyByAppNoReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *GetAppKeyByAppNoReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *GetAppKeyByAppNoReq) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAppKeyByAppNoReq) GetCodeType() uint32 {
	if x != nil {
		return x.CodeType
	}
	return 0
}

// 通过应用编号取应用信息请求
type GetAppByAppNoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNo string `protobuf:"bytes,1,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
}

func (x *GetAppByAppNoReq) Reset() {
	*x = GetAppByAppNoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppByAppNoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppByAppNoReq) ProtoMessage() {}

func (x *GetAppByAppNoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppByAppNoReq.ProtoReflect.Descriptor instead.
func (*GetAppByAppNoReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{30}
}

func (x *GetAppByAppNoReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

// 应用上线申请请求
type ApplyOnlineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId               uint32 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ApplicationMaterial string `protobuf:"bytes,2,opt,name=application_material,json=applicationMaterial,proto3" json:"application_material,omitempty"`
}

func (x *ApplyOnlineReq) Reset() {
	*x = ApplyOnlineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOnlineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOnlineReq) ProtoMessage() {}

func (x *ApplyOnlineReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOnlineReq.ProtoReflect.Descriptor instead.
func (*ApplyOnlineReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{31}
}

func (x *ApplyOnlineReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ApplyOnlineReq) GetApplicationMaterial() string {
	if x != nil {
		return x.ApplicationMaterial
	}
	return ""
}

// 取应用返回数据结构
type GetAppResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *App   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppResp) Reset() {
	*x = GetAppResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppResp) ProtoMessage() {}

func (x *GetAppResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppResp.ProtoReflect.Descriptor instead.
func (*GetAppResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{32}
}

func (x *GetAppResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAppResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAppResp) GetData() *App {
	if x != nil {
		return x.Data
	}
	return nil
}

// 取应用列表返回数据结构
type GetAppListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*App `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppListResp) Reset() {
	*x = GetAppListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppListResp) ProtoMessage() {}

func (x *GetAppListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppListResp.ProtoReflect.Descriptor instead.
func (*GetAppListResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{33}
}

func (x *GetAppListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAppListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAppListResp) GetData() []*App {
	if x != nil {
		return x.Data
	}
	return nil
}

// 应用分组和API关系数据结构
type AppGroupApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AppGroupId uint32 `protobuf:"varint,2,opt,name=app_group_id,json=appGroupId,proto3" json:"app_group_id,omitempty"`
	ApiId      uint32 `protobuf:"varint,3,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	CreateTime uint32 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime uint32 `protobuf:"varint,5,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status     uint32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AppGroupApi) Reset() {
	*x = AppGroupApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppGroupApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGroupApi) ProtoMessage() {}

func (x *AppGroupApi) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGroupApi.ProtoReflect.Descriptor instead.
func (*AppGroupApi) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{34}
}

func (x *AppGroupApi) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AppGroupApi) GetAppGroupId() uint32 {
	if x != nil {
		return x.AppGroupId
	}
	return 0
}

func (x *AppGroupApi) GetApiId() uint32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *AppGroupApi) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AppGroupApi) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *AppGroupApi) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 应用和API关系数据结构
type AppApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AppNo      string `protobuf:"bytes,2,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	ApiId      uint32 `protobuf:"varint,3,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	CreateTime uint32 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime uint32 `protobuf:"varint,5,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status     uint32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AppApi) Reset() {
	*x = AppApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppApi) ProtoMessage() {}

func (x *AppApi) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppApi.ProtoReflect.Descriptor instead.
func (*AppApi) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{35}
}

func (x *AppApi) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AppApi) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *AppApi) GetApiId() uint32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *AppApi) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AppApi) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *AppApi) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// Api分组及其下属的Api(包括Api分组信息或应用分组是否已经获得授权的状态)
type ApplicableApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId         uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName       string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupParentId   uint32 `protobuf:"varint,3,opt,name=group_parent_id,json=groupParentId,proto3" json:"group_parent_id,omitempty"`
	GroupParentName string `protobuf:"bytes,4,opt,name=group_parent_name,json=groupParentName,proto3" json:"group_parent_name,omitempty"`
	ApiId           uint32 `protobuf:"varint,5,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ShowNameCn      string `protobuf:"bytes,6,opt,name=show_name_cn,json=showNameCn,proto3" json:"show_name_cn,omitempty"`
	ShowNameEn      string `protobuf:"bytes,7,opt,name=show_name_en,json=showNameEn,proto3" json:"show_name_en,omitempty"`
	RouterUri       string `protobuf:"bytes,8,opt,name=router_uri,json=routerUri,proto3" json:"router_uri,omitempty"`
	Icon            string `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`
	Ranking         uint32 `protobuf:"varint,10,opt,name=ranking,proto3" json:"ranking,omitempty"`
	IsPublic        uint32 `protobuf:"varint,11,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	NeedLogin       uint32 `protobuf:"varint,12,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	NeedAuthorise   uint32 `protobuf:"varint,13,opt,name=need_authorise,json=needAuthorise,proto3" json:"need_authorise,omitempty"`
	InitState       uint32 `protobuf:"varint,14,opt,name=init_state,json=initState,proto3" json:"init_state,omitempty"`
	Status          uint32 `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ApplicableApi) Reset() {
	*x = ApplicableApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicableApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicableApi) ProtoMessage() {}

func (x *ApplicableApi) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicableApi.ProtoReflect.Descriptor instead.
func (*ApplicableApi) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{36}
}

func (x *ApplicableApi) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ApplicableApi) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ApplicableApi) GetGroupParentId() uint32 {
	if x != nil {
		return x.GroupParentId
	}
	return 0
}

func (x *ApplicableApi) GetGroupParentName() string {
	if x != nil {
		return x.GroupParentName
	}
	return ""
}

func (x *ApplicableApi) GetApiId() uint32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *ApplicableApi) GetShowNameCn() string {
	if x != nil {
		return x.ShowNameCn
	}
	return ""
}

func (x *ApplicableApi) GetShowNameEn() string {
	if x != nil {
		return x.ShowNameEn
	}
	return ""
}

func (x *ApplicableApi) GetRouterUri() string {
	if x != nil {
		return x.RouterUri
	}
	return ""
}

func (x *ApplicableApi) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ApplicableApi) GetRanking() uint32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *ApplicableApi) GetIsPublic() uint32 {
	if x != nil {
		return x.IsPublic
	}
	return 0
}

func (x *ApplicableApi) GetNeedLogin() uint32 {
	if x != nil {
		return x.NeedLogin
	}
	return 0
}

func (x *ApplicableApi) GetNeedAuthorise() uint32 {
	if x != nil {
		return x.NeedAuthorise
	}
	return 0
}

func (x *ApplicableApi) GetInitState() uint32 {
	if x != nil {
		return x.InitState
	}
	return 0
}

func (x *ApplicableApi) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 取出可授权给应用分组或应用的Api列表返回数据结构
type GetApplicableApiListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*ApplicableApi `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetApplicableApiListResp) Reset() {
	*x = GetApplicableApiListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicableApiListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicableApiListResp) ProtoMessage() {}

func (x *GetApplicableApiListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicableApiListResp.ProtoReflect.Descriptor instead.
func (*GetApplicableApiListResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{37}
}

func (x *GetApplicableApiListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetApplicableApiListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetApplicableApiListResp) GetData() []*ApplicableApi {
	if x != nil {
		return x.Data
	}
	return nil
}

// 取出可授权给应用分组的Api列表请求
type GetApplicableApiOfAppGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GetApplicableApiOfAppGroupReq) Reset() {
	*x = GetApplicableApiOfAppGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicableApiOfAppGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicableApiOfAppGroupReq) ProtoMessage() {}

func (x *GetApplicableApiOfAppGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicableApiOfAppGroupReq.ProtoReflect.Descriptor instead.
func (*GetApplicableApiOfAppGroupReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{38}
}

func (x *GetApplicableApiOfAppGroupReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// 授权Api访问权限给应用分组请求
type AuthoriseApiToAppGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint32   `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Apis    []uint32 `protobuf:"varint,2,rep,packed,name=apis,proto3" json:"apis,omitempty"`
}

func (x *AuthoriseApiToAppGroupReq) Reset() {
	*x = AuthoriseApiToAppGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthoriseApiToAppGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthoriseApiToAppGroupReq) ProtoMessage() {}

func (x *AuthoriseApiToAppGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthoriseApiToAppGroupReq.ProtoReflect.Descriptor instead.
func (*AuthoriseApiToAppGroupReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{39}
}

func (x *AuthoriseApiToAppGroupReq) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AuthoriseApiToAppGroupReq) GetApis() []uint32 {
	if x != nil {
		return x.Apis
	}
	return nil
}

// 取出可授权给应用的Api列表请求
type GetApplicableApiOfAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNo string `protobuf:"bytes,1,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
}

func (x *GetApplicableApiOfAppReq) Reset() {
	*x = GetApplicableApiOfAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicableApiOfAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicableApiOfAppReq) ProtoMessage() {}

func (x *GetApplicableApiOfAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicableApiOfAppReq.ProtoReflect.Descriptor instead.
func (*GetApplicableApiOfAppReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{40}
}

func (x *GetApplicableApiOfAppReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

// 授权Api访问权限给应用请求
type AuthoriseApiToAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNo string   `protobuf:"bytes,1,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	Apis  []uint32 `protobuf:"varint,2,rep,packed,name=apis,proto3" json:"apis,omitempty"`
}

func (x *AuthoriseApiToAppReq) Reset() {
	*x = AuthoriseApiToAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthoriseApiToAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthoriseApiToAppReq) ProtoMessage() {}

func (x *AuthoriseApiToAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthoriseApiToAppReq.ProtoReflect.Descriptor instead.
func (*AuthoriseApiToAppReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{41}
}

func (x *AuthoriseApiToAppReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *AuthoriseApiToAppReq) GetApis() []uint32 {
	if x != nil {
		return x.Apis
	}
	return nil
}

// 保存应用接口授权请求
type AuditApiAccessApplicationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNo        string `protobuf:"bytes,1,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	ApiId        uint32 `protobuf:"varint,2,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	AuditStatus  uint32 `protobuf:"varint,3,opt,name=audit_status,json=auditStatus,proto3" json:"audit_status,omitempty"`
	RejectReason string `protobuf:"bytes,4,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
}

func (x *AuditApiAccessApplicationReq) Reset() {
	*x = AuditApiAccessApplicationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditApiAccessApplicationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditApiAccessApplicationReq) ProtoMessage() {}

func (x *AuditApiAccessApplicationReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditApiAccessApplicationReq.ProtoReflect.Descriptor instead.
func (*AuditApiAccessApplicationReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{42}
}

func (x *AuditApiAccessApplicationReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *AuditApiAccessApplicationReq) GetApiId() uint32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *AuditApiAccessApplicationReq) GetAuditStatus() uint32 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *AuditApiAccessApplicationReq) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

// 获取应用申请的Api访问授权列表请求
type GetApiAccessApplicationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppNo      string `protobuf:"bytes,3,opt,name=app_no,json=appNo,proto3" json:"app_no,omitempty"`
	CreateTime uint32 `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime uint32 `protobuf:"varint,9,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	Status     uint32 `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	Page       uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit      uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetApiAccessApplicationListReq) Reset() {
	*x = GetApiAccessApplicationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiAccessApplicationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiAccessApplicationListReq) ProtoMessage() {}

func (x *GetApiAccessApplicationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiAccessApplicationListReq.ProtoReflect.Descriptor instead.
func (*GetApiAccessApplicationListReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{43}
}

func (x *GetApiAccessApplicationListReq) GetAppNo() string {
	if x != nil {
		return x.AppNo
	}
	return ""
}

func (x *GetApiAccessApplicationListReq) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetApiAccessApplicationListReq) GetModifyTime() uint32 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *GetApiAccessApplicationListReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetApiAccessApplicationListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetApiAccessApplicationListReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// 获取应用申请的Api访问授权的返回数据结构
type GetApiAccessApplicationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*AppApi `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetApiAccessApplicationListResp) Reset() {
	*x = GetApiAccessApplicationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiAccessApplicationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiAccessApplicationListResp) ProtoMessage() {}

func (x *GetApiAccessApplicationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiAccessApplicationListResp.ProtoReflect.Descriptor instead.
func (*GetApiAccessApplicationListResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{44}
}

func (x *GetApiAccessApplicationListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetApiAccessApplicationListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetApiAccessApplicationListResp) GetData() []*AppApi {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAuthorizeAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              uint32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                        // 授权人用户ID
	AuthorizationId     uint32 `protobuf:"varint,5,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`             // 授权ID, 撤销授权时必填
	Type                uint32 `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`                                                          // 授权操作类型, 0=授权;1=禁用/启用授权
	AuthorizationStatus uint32 `protobuf:"varint,7,opt,name=authorization_status,json=authorizationStatus,proto3" json:"authorization_status,omitempty"` // 授权类型值, 0=禁用;1=启用, type=1时适用
}

func (x *UserAuthorizeAppReq) Reset() {
	*x = UserAuthorizeAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthorizeAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthorizeAppReq) ProtoMessage() {}

func (x *UserAuthorizeAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthorizeAppReq.ProtoReflect.Descriptor instead.
func (*UserAuthorizeAppReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{45}
}

func (x *UserAuthorizeAppReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAuthorizeAppReq) GetAuthorizationId() uint32 {
	if x != nil {
		return x.AuthorizationId
	}
	return 0
}

func (x *UserAuthorizeAppReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UserAuthorizeAppReq) GetAuthorizationStatus() uint32 {
	if x != nil {
		return x.AuthorizationStatus
	}
	return 0
}

type UserAuthorizeAppResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserAuthorizeAppResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserAuthorizeAppResp) Reset() {
	*x = UserAuthorizeAppResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthorizeAppResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthorizeAppResp) ProtoMessage() {}

func (x *UserAuthorizeAppResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthorizeAppResp.ProtoReflect.Descriptor instead.
func (*UserAuthorizeAppResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{46}
}

func (x *UserAuthorizeAppResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAuthorizeAppResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserAuthorizeAppResp) GetData() *UserAuthorizeAppResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AppAuthorizedTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 获取授权token的code
}

func (x *AppAuthorizedTokenReq) Reset() {
	*x = AppAuthorizedTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppAuthorizedTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppAuthorizedTokenReq) ProtoMessage() {}

func (x *AppAuthorizedTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppAuthorizedTokenReq.ProtoReflect.Descriptor instead.
func (*AppAuthorizedTokenReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{47}
}

func (x *AppAuthorizedTokenReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type AppAuthorizedTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *AppAuthorizedTokenResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AppAuthorizedTokenResp) Reset() {
	*x = AppAuthorizedTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppAuthorizedTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppAuthorizedTokenResp) ProtoMessage() {}

func (x *AppAuthorizedTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppAuthorizedTokenResp.ProtoReflect.Descriptor instead.
func (*AppAuthorizedTokenResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{48}
}

func (x *AppAuthorizedTokenResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AppAuthorizedTokenResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AppAuthorizedTokenResp) GetData() *AppAuthorizedTokenResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUserAuthorizationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                // 授权人用户ID
	PageCurrent uint32 `protobuf:"varint,7,opt,name=page_current,json=pageCurrent,proto3" json:"page_current,omitempty"` // 当前页码
	PageSize    uint32 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`          // 每页显示数.默认值:10
}

func (x *GetUserAuthorizationsReq) Reset() {
	*x = GetUserAuthorizationsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAuthorizationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAuthorizationsReq) ProtoMessage() {}

func (x *GetUserAuthorizationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAuthorizationsReq.ProtoReflect.Descriptor instead.
func (*GetUserAuthorizationsReq) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{49}
}

func (x *GetUserAuthorizationsReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserAuthorizationsReq) GetPageCurrent() uint32 {
	if x != nil {
		return x.PageCurrent
	}
	return 0
}

func (x *GetUserAuthorizationsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type UserAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationId     uint32 `protobuf:"varint,1,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`             // 授权ID
	AccountId           uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                               // 授权人账户ID
	UserId              uint32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                        // 授权人用户ID
	Token               string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`                                                         // 授权token
	ExpiredAt           uint32 `protobuf:"varint,6,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`                               // 授权token过期时间
	AuthorizationStatus uint32 `protobuf:"varint,8,opt,name=authorization_status,json=authorizationStatus,proto3" json:"authorization_status,omitempty"` // 授权状态, 0-禁用;1-启用
	Status              uint32 `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                                      // 数据有效状态, 0-删除;1-有效
	ModifiedAt          uint32 `protobuf:"varint,20,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`                           // 授权人用户ID
	CreatedAt           uint32 `protobuf:"varint,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                              // 授权人用户ID
}

func (x *UserAuthorization) Reset() {
	*x = UserAuthorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthorization) ProtoMessage() {}

func (x *UserAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthorization.ProtoReflect.Descriptor instead.
func (*UserAuthorization) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{50}
}

func (x *UserAuthorization) GetAuthorizationId() uint32 {
	if x != nil {
		return x.AuthorizationId
	}
	return 0
}

func (x *UserAuthorization) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UserAuthorization) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAuthorization) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserAuthorization) GetExpiredAt() uint32 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *UserAuthorization) GetAuthorizationStatus() uint32 {
	if x != nil {
		return x.AuthorizationStatus
	}
	return 0
}

func (x *UserAuthorization) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserAuthorization) GetModifiedAt() uint32 {
	if x != nil {
		return x.ModifiedAt
	}
	return 0
}

func (x *UserAuthorization) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type GetUserAuthorizationsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetUserAuthorizationsResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUserAuthorizationsResp) Reset() {
	*x = GetUserAuthorizationsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAuthorizationsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAuthorizationsResp) ProtoMessage() {}

func (x *GetUserAuthorizationsResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAuthorizationsResp.ProtoReflect.Descriptor instead.
func (*GetUserAuthorizationsResp) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{51}
}

func (x *GetUserAuthorizationsResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserAuthorizationsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserAuthorizationsResp) GetData() *GetUserAuthorizationsResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GatewayMiddilewareResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPublic          bool   `protobuf:"varint,1,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`                              // 应用编号
	NeedAuthorise     bool   `protobuf:"varint,2,opt,name=need_authorise,json=needAuthorise,proto3" json:"need_authorise,omitempty"`               // 是否需要access token
	NeedUserAuthorise bool   `protobuf:"varint,3,opt,name=need_user_authorise,json=needUserAuthorise,proto3" json:"need_user_authorise,omitempty"` // 是否需要用户授权
	NeedLogin         bool   `protobuf:"varint,4,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`                           // 是否需要用户登录
	AccountId         uint32 `protobuf:"varint,10,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                          // 账户ID
	UserId            uint32 `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                   // 用户ID
}

func (x *GatewayMiddilewareResp_Data) Reset() {
	*x = GatewayMiddilewareResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMiddilewareResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMiddilewareResp_Data) ProtoMessage() {}

func (x *GatewayMiddilewareResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMiddilewareResp_Data.ProtoReflect.Descriptor instead.
func (*GatewayMiddilewareResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GatewayMiddilewareResp_Data) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *GatewayMiddilewareResp_Data) GetNeedAuthorise() bool {
	if x != nil {
		return x.NeedAuthorise
	}
	return false
}

func (x *GatewayMiddilewareResp_Data) GetNeedUserAuthorise() bool {
	if x != nil {
		return x.NeedUserAuthorise
	}
	return false
}

func (x *GatewayMiddilewareResp_Data) GetNeedLogin() bool {
	if x != nil {
		return x.NeedLogin
	}
	return false
}

func (x *GatewayMiddilewareResp_Data) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *GatewayMiddilewareResp_Data) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserAuthorizeAppResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 获取授权token的code
}

func (x *UserAuthorizeAppResp_Data) Reset() {
	*x = UserAuthorizeAppResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthorizeAppResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthorizeAppResp_Data) ProtoMessage() {}

func (x *UserAuthorizeAppResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthorizeAppResp_Data.ProtoReflect.Descriptor instead.
func (*UserAuthorizeAppResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{46, 0}
}

func (x *UserAuthorizeAppResp_Data) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type AppAuthorizedTokenResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // 授权token
}

func (x *AppAuthorizedTokenResp_Data) Reset() {
	*x = AppAuthorizedTokenResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppAuthorizedTokenResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppAuthorizedTokenResp_Data) ProtoMessage() {}

func (x *AppAuthorizedTokenResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppAuthorizedTokenResp_Data.ProtoReflect.Descriptor instead.
func (*AppAuthorizedTokenResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{48, 0}
}

func (x *AppAuthorizedTokenResp_Data) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetUserAuthorizationsResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*UserAuthorization `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total    uint32               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 数据总数
	PageSize uint32               `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页显示数
}

func (x *GetUserAuthorizationsResp_Data) Reset() {
	*x = GetUserAuthorizationsResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rbacpb_rbac_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAuthorizationsResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAuthorizationsResp_Data) ProtoMessage() {}

func (x *GetUserAuthorizationsResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rbacpb_rbac_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAuthorizationsResp_Data.ProtoReflect.Descriptor instead.
func (*GetUserAuthorizationsResp_Data) Descriptor() ([]byte, []int) {
	return file_pb_rbacpb_rbac_proto_rawDescGZIP(), []int{51, 0}
}

func (x *GetUserAuthorizationsResp_Data) GetList() []*UserAuthorization {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetUserAuthorizationsResp_Data) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetUserAuthorizationsResp_Data) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

var File_pb_rbacpb_rbac_proto protoreflect.FileDescriptor

var file_pb_rbacpb_rbac_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x62, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2f, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8a, 0x02, 0x0a, 0x15, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x64, 0x64,
	0x69, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x68,
	0x74, 0x74, 0x70, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x3a, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x32, 0x11, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0xbd, 0x91, 0xe5, 0x85, 0xb3, 0xe7, 0x89,
	0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x03,
	0x0a, 0x16, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x64, 0x64, 0x69, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x64, 0x64, 0x69, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xdf, 0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x52, 0x08,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80,
	0xe8, 0xa6, 0x81, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0d, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x32, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x52, 0x11, 0x6e, 0x65, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c,
	0x80, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95,
	0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x30, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a,
	0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x01, 0x72, 0x22, 0x5c, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92,
	0x41, 0x0a, 0x32, 0x08, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x31,
	0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x2e, 0x2e, 0x2e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x13, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x14, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x49, 0x44, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2b, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x31,
	0x2d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x3b, 0x34, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a,
	0xe8, 0xbf, 0x87, 0x3b, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x01, 0x30, 0x04, 0x52, 0x0b, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x8b, 0x92, 0xe7, 0xbb, 0x9d, 0xe9, 0x80,
	0x9a, 0xe8, 0xbf, 0x87, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x19, 0x92, 0x41, 0x16, 0x0a, 0x14, 0xd2,
	0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1b, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x00, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe7, 0xae, 0xa1, 0xe7,
	0x90, 0x86, 0xe8, 0x80, 0x85, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0,
	0x81, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe7,
	0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe8, 0x80, 0x85, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x6e, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x88, 0xe7, 0xba,
	0xa6, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x21, 0x92, 0x41, 0x1e, 0x0a, 0x1c, 0xd2,
	0x01, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe9, 0x9a, 0x8f, 0xe6, 0x9c, 0xba, 0xe6, 0x95, 0xb0,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92,
	0x41, 0x08, 0x32, 0x06, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0,
	0x01, 0x00, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x36, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x17, 0xe7, 0xad, 0xbe, 0xe5,
	0x90, 0x8d, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0x3a, 0x6d, 0x64, 0x35, 0x2c, 0x73, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x3a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x52, 0x03, 0x61, 0x6c, 0x67,
	0x3a, 0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f, 0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0xd2,
	0x01, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x73, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe7,
	0x94, 0x9f, 0xe6, 0x88, 0x90, 0xe7, 0x9a, 0x84, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0xea, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x33, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbb, 0xa3,
	0xe7, 0xa0, 0x81, 0x2c, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x2c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xa2, 0x02, 0x0f, 0xe6, 0x97, 0xa0,
	0xe7, 0xac, 0xa6, 0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x49, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x14, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x04, 0x0a, 0x08, 0x41, 0x70, 0x69,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0x41, 0x50,
	0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xa2, 0x9e,
	0x49, 0x44, 0x29, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe7,
	0x88, 0xb6, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf,
	0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x1f, 0x32, 0x1a, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x20, 0x31,
	0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30,
	0x00, 0x30, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x5a, 0x92, 0x41, 0x57,
	0x0a, 0x55, 0x2a, 0x15, 0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0x32, 0x15, 0x41, 0x50, 0x49, 0xe5, 0x88,
	0x86, 0xe7, 0xbb, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84,
	0xd2, 0x01, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92,
	0x41, 0x22, 0x32, 0x20, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x3a, 0x20, 0x31, 0x2d, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x3b, 0x20, 0x32, 0x2d, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x02, 0x30, 0x01, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x16, 0x92, 0x41, 0x13,
	0x0a, 0x11, 0xd2, 0x01, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x68, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x06, 0xe9, 0xa1,
	0xb5, 0xe7, 0xa0, 0x81, 0x3a, 0x01, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x32, 0x0f, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6,
	0x95, 0xb0, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc0, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x3b, 0x20, 0xe5,
	0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x42, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x41, 0x50, 0x49, 0xe5, 0x88,
	0x86, 0xe7, 0xbb, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xc4, 0x09, 0x0a, 0x03, 0x41, 0x70, 0x69, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x41,
	0x50, 0x49, 0x20, 0x49, 0x44, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xa2, 0x9e, 0x49, 0x44, 0x29, 0x52,
	0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41,
	0x0d, 0x32, 0x0b, 0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x11, 0x32, 0x0f,
	0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x0b, 0x32,
	0x09, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12, 0x30, 0x0a,
	0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87,
	0xe5, 0x90, 0x8d, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12,
	0x37, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe9, 0xa1, 0xb5,
	0xe9, 0x9d, 0xa2, 0xe6, 0x88, 0x96, 0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe7, 0x9a, 0x84, 0xe5,
	0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41,
	0x23, 0x32, 0x21, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe6, 0x97, 0xb6, 0xe6, 0x8e, 0x92, 0xe5, 0x88, 0x97, 0xe4, 0xbd,
	0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x5d, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x40, 0x92, 0x41, 0x34, 0x32, 0x2f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf,
	0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x80, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a, 0x84, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0x3a, 0x20, 0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe6, 0x98, 0xaf, 0x3b,
	0x20, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x3a, 0x01, 0x32, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x02,
	0x30, 0x01, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x65, 0x0a, 0x0a,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x46, 0x92, 0x41, 0x3a, 0x32, 0x38, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80,
	0xe8, 0xa6, 0x81, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8,
	0x83, 0xbd, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0x3a, 0x20, 0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9,
	0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3b, 0x20, 0x31, 0x2d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xfa,
	0x42, 0x06, 0x2a, 0x04, 0x30, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x6d, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x46, 0x92, 0x41, 0x3a,
	0x32, 0x38, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8e,
	0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbf,
	0xe9, 0x97, 0xae, 0x3a, 0x20, 0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81,
	0x3b, 0x20, 0x31, 0x2d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30,
	0x02, 0x30, 0x01, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4c, 0x92, 0x41, 0x40, 0x32, 0x3b, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x31, 0x2d, 0xe7, 0xb3, 0xbb,
	0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x3b,
	0x20, 0x32, 0x2d, 0xe9, 0x9d, 0x9e, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5,
	0xa7, 0x8b, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x06, 0x2a, 0x04,
	0x30, 0x01, 0x30, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x1f, 0x32, 0x1a, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x20, 0x31, 0x2d, 0xe6,
	0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x7c, 0x92, 0x41, 0x79, 0x0a, 0x77,
	0x2a, 0x0f, 0x41, 0x50, 0x49, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x84, 0x32, 0x0f, 0x41, 0x50, 0x49, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x84, 0xd2, 0x01, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0xd2, 0x01, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e,
	0xd2, 0x01, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0xd2, 0x01, 0x09,
	0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xd2, 0x01, 0x0a, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0xd2, 0x01, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x22, 0x32, 0x20, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe6,
	0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x3b, 0x20, 0x32, 0x2d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xfa,
	0x42, 0x06, 0x2a, 0x04, 0x30, 0x02, 0x30, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41,
	0x70, 0x69, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x41, 0x50, 0x49, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x03, 0x61, 0x70, 0x69, 0x3a, 0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f, 0xd2, 0x01,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x03, 0x61, 0x70, 0x69, 0x22, 0xf1, 0x05,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x32, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x41, 0x50, 0x49, 0xe5,
	0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xb7,
	0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x54, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x2f, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x80, 0xe8, 0xae,
	0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a, 0x84, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x3a, 0x20, 0x32,
	0x2d, 0xe4, 0xb8, 0x8d, 0xe6, 0x98, 0xaf, 0x3b, 0x20, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x3a, 0x01,
	0x32, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x5c, 0x0a, 0x0a, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x3d, 0x92, 0x41, 0x3a, 0x32, 0x38, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80, 0xe8,
	0xa6, 0x81, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8, 0x83,
	0xbd, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0x3a, 0x20, 0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x9c,
	0x80, 0xe8, 0xa6, 0x81, 0x3b, 0x20, 0x31, 0x2d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x52, 0x09,
	0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x64, 0x0a, 0x0e, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x38, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c,
	0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d,
	0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0x3a, 0x20, 0x32, 0x2d, 0xe4, 0xb8, 0x8d,
	0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3b, 0x20, 0x31, 0x2d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81,
	0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x12,
	0x62, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32, 0x3b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x31, 0x2d, 0xe9, 0x9d, 0x9e, 0xe7, 0xb3, 0xbb,
	0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0x3b,
	0x20, 0x32, 0x2d, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8,
	0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0x3a, 0x01, 0x31, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1a, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20,
	0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x20, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6,
	0x95, 0x88, 0x3a, 0x01, 0x31, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0x3a, 0x01, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x0f, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe8, 0xae, 0xb0,
	0xe5, 0xbd, 0x95, 0xe6, 0x95, 0xb0, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c,
	0x92, 0x41, 0x29, 0x32, 0x27, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x3a, 0x20,
	0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x3b, 0x20, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83,
	0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8,
	0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32,
	0x09, 0x41, 0x50, 0x49, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x3b, 0x20, 0xe5, 0x85, 0xb6,
	0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0x41, 0x50, 0x49, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x42, 0x79, 0x55,
	0x72, 0x69, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x69, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5,
	0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0x49, 0x44, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x70, 0x69,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x32, 0x05,
	0x41, 0x70, 0x69, 0x49, 0x44, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x22, 0xca, 0x03, 0x0a,
	0x08, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x32, 0x18, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44,
	0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xa2, 0x9e, 0x49, 0x44, 0x29, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x32, 0x1a, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8, 0x87, 0xaa, 0xe8, 0x90, 0xa5, 0x3a, 0x20,
	0x30, 0x2d, 0xe5, 0x90, 0xa6, 0x3b, 0x20, 0x31, 0x2d, 0xe6, 0x98, 0xaf, 0x3a, 0x01, 0x30, 0x52,
	0x0d, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c,
	0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41,
	0x1f, 0x32, 0x1a, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0x3b, 0x20, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3a, 0x01, 0x31,
	0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x18, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x84, 0x32, 0x18, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xd2, 0x01, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x46, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x2e, 0x92, 0x41, 0x22, 0x32, 0x20, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x3b, 0x20, 0x32, 0x2d,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x02, 0x30, 0x01, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86,
	0xe7, 0xbb, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x3a, 0x16, 0x92, 0x41, 0x13, 0x0a, 0x11, 0xd2, 0x01, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0xd2, 0x01, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x68, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x22,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0x3a, 0x01, 0x31, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x0f, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe8, 0xae,
	0xb0, 0xe5, 0xbd, 0x95, 0xe6, 0x95, 0xb0, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5,
	0x8a, 0x9f, 0x3b, 0x20, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9b, 0x14, 0x0a, 0x03, 0x41, 0x70, 0x70,
	0x12, 0x2e, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x49, 0x44, 0x28,
	0xe8, 0x87, 0xaa, 0xe5, 0xa2, 0x9e, 0x49, 0x44, 0x29, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x44,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x33,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0x4c, 0x4f, 0x47, 0x4f, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe9, 0x93, 0xbe, 0xe6,
	0x8e, 0xa5, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x67, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4c, 0x92,
	0x41, 0x38, 0x32, 0x33, 0x61, 0x70, 0x70, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20,
	0x31, 0x2d, 0x77, 0x65, 0x62, 0x3b, 0x20, 0x32, 0x2d, 0x61, 0x70, 0x70, 0x3b, 0x20, 0x33, 0x2d,
	0x48, 0x35, 0x3b, 0x20, 0x34, 0x2d, 0xe5, 0xb0, 0x8f, 0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0x8f, 0x3b,
	0x20, 0x35, 0x2d, 0x64, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x0e, 0x2a, 0x0c, 0x30,
	0x00, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x30, 0x04, 0x30, 0x05, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xbd, 0x91, 0xe7, 0xab, 0x99, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x32, 0x15, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xbd,
	0x91, 0xe5, 0x85, 0xb3, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x0a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32,
	0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x9b, 0x9e,
	0xe8, 0xb0, 0x83, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x32, 0x55, 0x72, 0x6c, 0x12, 0x6f, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4c, 0x92, 0x41, 0x3c, 0x32,
	0x37, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe5, 0x8a, 0xa0, 0xe5, 0xaf, 0x86, 0xe6, 0x96, 0xb9,
	0xe5, 0xbc, 0x8f, 0x3a, 0x20, 0x31, 0x2d, 0x4a, 0x57, 0x54, 0x3b, 0x20, 0x32, 0x2d, 0x52, 0x53,
	0x41, 0x3b, 0x20, 0x33, 0x2d, 0x45, 0x43, 0x44, 0x53, 0x41, 0x28, 0xe6, 0xa4, 0xad, 0xe5, 0x9c,
	0x86, 0xe6, 0x9b, 0xb2, 0xe7, 0xba, 0xbf, 0x29, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x0a, 0x2a, 0x08,
	0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6a, 0x77, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x4a, 0x57, 0x54, 0xe7, 0xad, 0xbe,
	0xe5, 0x90, 0x8d, 0xe7, 0x9a, 0x84, 0xe7, 0xa7, 0x81, 0xe9, 0x92, 0xa5, 0x52, 0x0c, 0x6a, 0x77,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x73,
	0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe5,
	0x8a, 0xa0, 0xe5, 0xaf, 0x86, 0x52, 0x53, 0x41, 0xe5, 0x85, 0xac, 0xe9, 0x92, 0xa5, 0x52, 0x0c,
	0x72, 0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a,
	0x61, 0x65, 0x73, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x41, 0x45, 0x53,
	0xe5, 0x8a, 0xa0, 0xe5, 0xaf, 0x86, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0x52, 0x09, 0x61, 0x65,
	0x73, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4f, 0x92, 0x41,
	0x3d, 0x32, 0x38, 0xe7, 0xbb, 0x88, 0xe7, 0xab, 0xaf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a,
	0x20, 0x31, 0x2d, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0x3b, 0x32, 0x2d, 0xe4,
	0xb8, 0x80, 0xe4, 0xbd, 0x93, 0xe6, 0x9c, 0xba, 0x3b, 0x20, 0x33, 0x2d, 0xe5, 0xb1, 0x8f, 0x3b,
	0x20, 0x34, 0x2d, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0x3b, 0x20, 0x3a, 0x01, 0x31, 0xfa, 0x42,
	0x0c, 0x2a, 0x0a, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x30, 0x04, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x8f, 0xb7,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41,
	0x4d, 0x32, 0x4b, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0x20, 0x41, 0x50, 0x50, 0x20, 0xe6, 0x9d,
	0xa5, 0xe8, 0xae, 0xbf, 0xe7, 0x9a, 0x84, 0x20, 0x69, 0x70, 0x20, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0xe7, 0x99, 0xbd, 0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x86,
	0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0x9a, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0x20, 0x35, 0x20, 0xe4, 0xb8, 0xaa, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xaf,
	0xa5, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7,
	0x49, 0x44, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x63, 0x92, 0x41, 0x60, 0x32, 0x5e, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8f, 0xb7, 0x49, 0x44, 0x28, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xaf, 0xb9, 0xe8,
	0xaf, 0xa5, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c,
	0x89, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe6, 0x88, 0x96,
	0xe6, 0x8c, 0x81, 0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe8,
	0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x29, 0x52, 0x16, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x92, 0x41, 0x23, 0x32, 0x21, 0xe9, 0x93, 0xbe, 0xe4, 0xb8, 0x8a, 0xe5, 0xad, 0x98, 0xe5, 0x82,
	0xa8, 0xe8, 0x97, 0x8f, 0xe5, 0x93, 0x81, 0xe7, 0x9a, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x32, 0x18, 0xe4, 0xb8, 0x8a, 0xe7, 0xba, 0xbf, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xae,
	0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0xe4, 0xb8, 0x8a, 0xe7, 0xba, 0xbf,
	0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe6, 0x9d, 0x90, 0xe6, 0x96, 0x99, 0xef, 0xbc, 0x88, 0xe6,
	0x9d, 0x90, 0xe6, 0x96, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe5, 0xbe, 0x85, 0xe5, 0xae,
	0x9a, 0xef, 0xbc, 0x89, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x65, 0x92, 0x41, 0x53, 0x32, 0x4e, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x3a, 0x20, 0x31, 0x2d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x3b, 0x20, 0x32,
	0x2d, 0xe5, 0xbe, 0x85, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8,
	0x28, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe4, 0xb8, 0xad, 0x29, 0x3b, 0x20, 0x33, 0x2d, 0xe5,
	0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x3b, 0x20, 0x34, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9,
	0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x3a, 0x01, 0x32, 0xfa, 0x42, 0x0c, 0x2a, 0x0a, 0x30, 0x00, 0x30,
	0x01, 0x30, 0x02, 0x30, 0x03, 0x30, 0x04, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x2b, 0x32, 0x26, 0xe4, 0xb8,
	0x8a, 0xe7, 0xba, 0xbf, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe5, 0xbe,
	0x85, 0xe4, 0xb8, 0x8a, 0xe7, 0xba, 0xbf, 0x3b, 0x20, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe4, 0xb8,
	0x8a, 0xe7, 0xba, 0xbf, 0x3a, 0x01, 0x30, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01,
	0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x13,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe5, 0x91, 0x98, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x11, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe5, 0xae,
	0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe5, 0x8e, 0x9f,
	0xe5, 0x9b, 0xa0, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6c, 0x92, 0x41, 0x5c, 0x32, 0x57, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0xbc, 0x80,
	0xe5, 0x8f, 0x91, 0xe8, 0x80, 0x85, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0x3b, 0x20, 0x32, 0x2d, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5,
	0xa7, 0x8b, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x3b, 0x20, 0x33, 0x2d, 0xe7, 0xae, 0xa1, 0xe7,
	0x90, 0x86, 0xe5, 0x90, 0x8e, 0xe5, 0x8f, 0xb0, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x0a, 0x2a, 0x08, 0x30, 0x00, 0x30, 0x01,
	0x30, 0x02, 0x30, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6,
	0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3f, 0x92,
	0x41, 0x31, 0x32, 0x2c, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x3a, 0x20, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x20, 0x31, 0x2d, 0xe6, 0x9c,
	0x89, 0xe6, 0x95, 0x88, 0x3b, 0x20, 0x32, 0x2d, 0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0x3b, 0x20,
	0x3a, 0x01, 0x31, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x5e, 0x92, 0x41, 0x5b, 0x0a, 0x59, 0x2a, 0x15, 0x41,
	0x70, 0x70, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x84, 0x32, 0x15, 0x41, 0x70, 0x70, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xd2, 0x01, 0x0c, 0x61, 0x70,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x61, 0x70, 0x70,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x08, 0x61, 0x70,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x22, 0x32, 0x20, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe6, 0xb7,
	0xbb, 0xe5, 0x8a, 0xa0, 0x3b, 0x20, 0x32, 0x2d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xfa, 0x42,
	0x06, 0x2a, 0x04, 0x30, 0x02, 0x30, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x61, 0x70, 0x70, 0x3a, 0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f,
	0xd2, 0x01, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x03, 0x61, 0x70, 0x70, 0x22,
	0x86, 0x0a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4a, 0x92, 0x41, 0x38, 0x32,
	0x33, 0x61, 0x70, 0x70, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0x77,
	0x65, 0x62, 0x3b, 0x20, 0x32, 0x2d, 0x61, 0x70, 0x70, 0x3b, 0x20, 0x33, 0x2d, 0x48, 0x35, 0x3b,
	0x20, 0x34, 0x2d, 0xe5, 0xb0, 0x8f, 0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0x8f, 0x3b, 0x20, 0x35, 0x2d,
	0x64, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x0c, 0x2a, 0x0a, 0x30, 0x00, 0x30, 0x01,
	0x30, 0x02, 0x30, 0x03, 0x30, 0x04, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x70, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x4f, 0x92, 0x41, 0x3d, 0x32, 0x38, 0xe7, 0xbb, 0x88, 0xe7, 0xab,
	0xaf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x31, 0x2d, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe5, 0x99, 0xa8, 0x3b, 0x32, 0x2d, 0xe4, 0xb8, 0x80, 0xe4, 0xbd, 0x93, 0xe6, 0x9c, 0xba,
	0x3b, 0x20, 0x33, 0x2d, 0xe5, 0xb1, 0x8f, 0x3b, 0x20, 0x34, 0x2d, 0xe6, 0x89, 0x8b, 0xe6, 0x9c,
	0xba, 0x3b, 0x20, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x0c, 0x2a, 0x0a, 0x30, 0x00, 0x30, 0x01, 0x30,
	0x02, 0x30, 0x03, 0x30, 0x04, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x32, 0x1a, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xaf, 0xa5, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0x52, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x9d, 0x01, 0x0a, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x63, 0x92, 0x41, 0x60, 0x32, 0x5e, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49,
	0x44, 0x28, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xaf, 0xb9, 0xe8, 0xaf, 0xa5, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe6, 0x88, 0x96, 0xe6, 0x8c, 0x81, 0xe6,
	0x9c, 0x89, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1,
	0x8c, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x29, 0x52, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe4, 0xb8, 0x8a, 0xe7, 0xba,
	0xbf, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x88,
	0x01, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x65, 0x92, 0x41, 0x53, 0x32, 0x4e, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x31, 0x2d, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0x3b, 0x20, 0x32, 0x2d, 0xe5, 0xbe, 0x85, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5,
	0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0x28, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe4, 0xb8, 0xad, 0x29,
	0x3b, 0x20, 0x33, 0x2d, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0xad, 0x3b, 0x20, 0x34,
	0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x3a, 0x01, 0x32, 0xfa, 0x42, 0x0c,
	0x2a, 0x0a, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x30, 0x04, 0x52, 0x0b, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe5, 0x91, 0x98, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x11, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x8b, 0x01, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x6c, 0x92, 0x41, 0x5c, 0x32, 0x57, 0xe5, 0x88, 0x9d, 0xe5, 0xa7,
	0x8b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x31, 0x2d, 0xe5, 0xbc, 0x80, 0xe5, 0x8f,
	0x91, 0xe8, 0x80, 0x85, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0x3b, 0x20, 0x32, 0x2d, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x3b, 0x20, 0x33, 0x2d, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86,
	0xe5, 0x90, 0x8e, 0xe5, 0x8f, 0xb0, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x0a, 0x2a, 0x08, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02,
	0x30, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80,
	0xe5, 0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3f, 0x92, 0x41, 0x31,
	0x32, 0x2c, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20,
	0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x20, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6,
	0x95, 0x88, 0x3b, 0x20, 0x32, 0x2d, 0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0x3b, 0x20, 0x3a, 0x01,
	0x31, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0x3a,
	0x01, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x0f, 0xe6, 0xaf,
	0x8f, 0xe9, 0xa1, 0xb5, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6, 0x95, 0xb0, 0x3a, 0x02, 0x32,
	0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd1, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x2f, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96,
	0xe5, 0x8f, 0xb7, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e,
	0x6f, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f,
	0xb7, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1b, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe7, 0x9f, 0xad, 0xe4, 0xbf, 0xa1, 0xe9, 0xaa,
	0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x7a, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x32, 0x58, 0xe9, 0xaa,
	0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x30, 0x2d,
	0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0x3b, 0x31, 0x2d, 0xe7, 0x99, 0xbb, 0xe9, 0x99, 0x86, 0x2f,
	0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0x3b, 0x32, 0x2d, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe6,
	0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x3b, 0x33, 0x2d, 0xe9, 0x87, 0x8d, 0xe7, 0xbd,
	0xae, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x3b, 0x34, 0x2d, 0xe5, 0xbf, 0x98, 0xe8, 0xae, 0xb0,
	0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25, 0xd2, 0x01, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f,
	0xd2, 0x01, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x2f, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96,
	0xe5, 0x8f, 0xb7, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e,
	0x6f, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e,
	0x6f, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x4a, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xb8, 0x8a, 0xe7, 0xba, 0xbf, 0xe7, 0x94, 0xb3, 0xe8,
	0xaf, 0xb7, 0xe6, 0x9d, 0x90, 0xe6, 0x96, 0x99, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x3a, 0x0e, 0x92,
	0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x22, 0xaf, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32,
	0x27, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe6, 0x88,
	0x90, 0xe5, 0x8a, 0x9f, 0x3b, 0x20, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xb3, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x3a, 0x20, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x3b, 0x20, 0xe5, 0x85, 0xb6, 0xe5,
	0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x03, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x70, 0x69, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0x87, 0xaa, 0xe5, 0xa2, 0x9e, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0d, 0x32,
	0x0b, 0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x12, 0x92, 0x41, 0x08, 0x32, 0x06, 0x41, 0x50, 0x49, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e,
	0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d, 0x92, 0x41, 0x21, 0x32, 0x1c, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b,
	0x20, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x3b, 0x20, 0x3a, 0x01, 0x31, 0xfa, 0x42,
	0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x69, 0x92, 0x41, 0x66, 0x0a, 0x64, 0x2a, 0x24, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88,
	0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x92, 0x8c, 0x41, 0x50, 0x49, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0x32, 0x24, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x92, 0x8c, 0x41, 0x50, 0x49,
	0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x84, 0xd2, 0x01, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0xd2, 0x01, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x22, 0xbf, 0x03, 0x0a, 0x06, 0x41,
	0x70, 0x70, 0x41, 0x70, 0x69, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0x87, 0xaa, 0xe5, 0xa2, 0x9e, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0x92, 0x41, 0x08, 0x32, 0x06, 0x41, 0x50, 0x49, 0x20,
	0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12,
	0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x73,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5b,
	0x92, 0x41, 0x49, 0x32, 0x44, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x20, 0x31, 0x2d, 0xe5, 0xb7, 0xb2, 0xe5, 0xbc, 0x80, 0xe5,
	0x90, 0xaf, 0x3b, 0x20, 0x32, 0x2d, 0xe5, 0xb7, 0xb2, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0x3b,
	0x20, 0x33, 0x2d, 0xe5, 0xbe, 0x85, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0x3b, 0x20, 0x34, 0x2d,
	0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x3a, 0x01, 0x33, 0xfa, 0x42, 0x0c, 0x2a,
	0x0a, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x30, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x3a, 0x57, 0x92, 0x41, 0x54, 0x0a, 0x52, 0x2a, 0x1e, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0xe5, 0x92, 0x8c, 0x41, 0x50, 0x49, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0x32, 0x1e, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0xe5, 0x92, 0x8c, 0x41, 0x50, 0x49, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xd2, 0x01, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x6f, 0xd2, 0x01, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x22, 0x8a, 0x09, 0x0a,
	0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x12, 0x35,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84,
	0x49, 0x44, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xa2, 0x9e, 0x49, 0x44, 0x29, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x11, 0x32, 0x0f,
	0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x13, 0x32,
	0x11, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84,
	0x49, 0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7,
	0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x41, 0x50, 0x49, 0x20, 0x49,
	0x44, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xa2, 0x9e, 0x49, 0x44, 0x29, 0x52, 0x05, 0x61, 0x70, 0x69,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x41,
	0x50, 0x49, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12, 0x33,
	0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x41, 0x50, 0x49, 0xe8, 0x8b,
	0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x41, 0x50,
	0x49, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12,
	0x34, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x32, 0x1b, 0x41, 0x50, 0x49, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0xe6, 0x88, 0x96,
	0xe5, 0x85, 0x83, 0xe7, 0xb4, 0xa0, 0xe7, 0x9a, 0x84, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x41, 0x50, 0x49,
	0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xe6, 0x97, 0xb6, 0xe6, 0x8e, 0x92, 0xe5, 0x88, 0x97, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd,
	0xae, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92,
	0x41, 0x34, 0x32, 0x2f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe5, 0x85, 0xac,
	0xe5, 0xbc, 0x80, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a, 0x84, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0x3a, 0x20, 0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe6, 0x98, 0xaf, 0x3b, 0x20, 0x31, 0x2d,
	0xe6, 0x98, 0xaf, 0x3a, 0x01, 0x32, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x02, 0x30, 0x01, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x68, 0x0a, 0x0a, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x49, 0x92,
	0x41, 0x3d, 0x32, 0x38, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81,
	0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8, 0x83, 0xbd, 0xe8,
	0xae, 0xbf, 0xe9, 0x97, 0xae, 0x3a, 0x20, 0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x9c, 0x80, 0xe8,
	0xa6, 0x81, 0x3b, 0x20, 0x31, 0x2d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3a, 0x01, 0x31, 0xfa,
	0x42, 0x06, 0x2a, 0x04, 0x30, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x70, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x49, 0x92, 0x41, 0x3d,
	0x32, 0x38, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8e,
	0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xae, 0xbf,
	0xe9, 0x97, 0xae, 0x3a, 0x20, 0x32, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81,
	0x3b, 0x20, 0x31, 0x2d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x06,
	0x2a, 0x04, 0x30, 0x02, 0x30, 0x01, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4e, 0x92, 0x41, 0x42, 0x32, 0x3d,
	0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x31, 0x2d,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0x8f, 0x9c, 0xe5,
	0x8d, 0x95, 0x3b, 0x20, 0x32, 0x2d, 0xe9, 0x9d, 0x9e, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5,
	0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0x3b, 0x20, 0x3a, 0x01, 0x32,
	0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x5b, 0x92, 0x41, 0x49, 0x32, 0x44, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x20, 0x31, 0x2d, 0xe5,
	0xb7, 0xb2, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x3b, 0x20, 0x32, 0x2d, 0xe5, 0xb7, 0xb2, 0xe5,
	0x85, 0xb3, 0xe9, 0x97, 0xad, 0x3b, 0x20, 0x33, 0x2d, 0xe5, 0xbe, 0x85, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0x3b, 0x20, 0x34, 0x2d, 0xe6, 0x9c, 0xaa, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x3a,
	0x01, 0x33, 0xfa, 0x42, 0x0c, 0x2a, 0x0a, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x30,
	0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x3b, 0x20,
	0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8,
	0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x56, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32,
	0x1e, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x8f, 0xaf,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x41, 0x50, 0x49, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x79, 0x0a,
	0x19, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x41,
	0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x10, 0x32, 0x0e, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x49,
	0x44, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x70, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x41, 0x50, 0x49, 0x20, 0x49, 0x44, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x22, 0x47, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x4f, 0x66, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e,
	0x6f, 0x22, 0x6e, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x41, 0x70,
	0x69, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x70,
	0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x41,
	0x50, 0x49, 0x20, 0x49, 0x44, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x61, 0x70, 0x69,
	0x73, 0x22, 0x94, 0x02, 0x0a, 0x1c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x70, 0x69, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7,
	0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x4e, 0x6f, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x12, 0x92, 0x41, 0x08, 0x32, 0x06, 0x41, 0x50, 0x49, 0x20, 0x49, 0x44,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x57,
	0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x34, 0x92, 0x41, 0x28, 0x32, 0x23, 0xe5, 0xae, 0xa1, 0xe6, 0xa0,
	0xb8, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x20, 0x31, 0x2d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf,
	0x87, 0x3b, 0x20, 0x34, 0x2d, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x3a, 0x01,
	0x31, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x01, 0x30, 0x04, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x32, 0x15, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe4, 0xb8, 0x8d, 0xe9, 0x80,
	0x9a, 0xe8, 0xbf, 0x87, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd1, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe4, 0xbf, 0xae, 0xe6, 0x94,
	0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x1f, 0x32, 0x1a, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x3a, 0x20, 0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x20, 0x31, 0x2d, 0xe6, 0x9c,
	0x89, 0xe6, 0x95, 0x88, 0x3a, 0x01, 0x31, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x06, 0xe9, 0xa1, 0xb5,
	0xe7, 0xa0, 0x81, 0x3a, 0x01, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x32, 0x0f, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6, 0x95,
	0xb0, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd9, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c,
	0x92, 0x41, 0x29, 0x32, 0x27, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x3a, 0x20,
	0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x3b, 0x20, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83,
	0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8,
	0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x41, 0x70, 0x69, 0x42, 0x23, 0x92,
	0x41, 0x20, 0x32, 0x1e, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84,
	0xe5, 0x8f, 0xaf, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x41, 0x50, 0x49, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x02, 0x0a, 0x13, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x39, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x20, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba,
	0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6, 0x8e, 0x88, 0xe6,
	0x9d, 0x83, 0x49, 0x44, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00,
	0x30, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x77, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x44, 0x92, 0x41, 0x35, 0x32, 0x33, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x80, 0xbc, 0x2c, 0x20, 0x30, 0x3d,
	0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x3b, 0x31, 0x3d, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x2c,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x31, 0xe6, 0x97, 0xb6, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x13, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x87, 0x02, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5,
	0x8a, 0x9f, 0x3b, 0x20, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xe7, 0x9a, 0x84, 0x63, 0x6f,
	0x64, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x41,
	0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6,
	0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xe7, 0x9a, 0x84, 0x63, 0x6f, 0x64,
	0x65, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xfd, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32,
	0x27, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe6, 0x88,
	0x90, 0xe5, 0x8a, 0x9f, 0x3b, 0x20, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0b,
	0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x2e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe6,
	0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x39,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x20, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20,
	0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe9, 0xa1, 0xb5, 0xe7,
	0xa0, 0x81, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6,
	0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x95, 0xb0, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5,
	0x80, 0xbc, 0x3a, 0x31, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xa7, 0x04, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x49, 0x44, 0x52, 0x0f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe4, 0xba, 0xba, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x8e,
	0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3b, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x57, 0x0a, 0x14,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32,
	0x1f, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x20, 0x30,
	0x2d, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x3b, 0x31, 0x2d, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8,
	0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x20,
	0x30, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x3b, 0x31, 0x2d, 0xe6, 0x9c, 0x89, 0xe6, 0x95,
	0x88, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x82, 0x03, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x3a, 0x20, 0x30, 0x2d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x3b,
	0x20, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xb1,
	0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x4f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x92, 0x41,
	0x08, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xac, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x80,
	0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x98, 0xbe, 0xe7, 0xa4,
	0xba, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x9c,
	0x26, 0x0a, 0x0b, 0x52, 0x42, 0x41, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8d,
	0x01, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x70, 0x62, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3e,
	0x92, 0x41, 0x18, 0x12, 0x16, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x2f, 0xe7, 0xbc, 0x96, 0xe8,
	0xbe, 0x91, 0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x80,
	0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x37, 0x92, 0x41, 0x11, 0x12, 0x0f, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x6f, 0x70,
	0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3b,
	0x92, 0x41, 0x17, 0x12, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80, 0xe6, 0x9c,
	0x89, 0x41, 0x50, 0x49, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x09, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x33, 0x92, 0x41, 0x12, 0x12, 0x10, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x2f, 0xe7, 0xbc,
	0x96, 0xe8, 0xbe, 0x91, 0x41, 0x50, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a,
	0x22, 0x13, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x41, 0x70, 0x69, 0x12, 0x70, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x69, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2c, 0x92, 0x41, 0x0b, 0x12, 0x09,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x41, 0x50, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a,
	0x01, 0x2a, 0x22, 0x13, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x69, 0x12, 0x7d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x30, 0x92, 0x41, 0x11, 0x12, 0x0f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0x41, 0x50, 0x49, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x12, 0x14, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69,
	0x42, 0x79, 0x55, 0x72, 0x69, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x42, 0x79, 0x55,
	0x72, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x17, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x55, 0x72,
	0x69, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x41, 0x50, 0x49, 0x12, 0x90, 0x01, 0x0a, 0x0e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x41, 0x92, 0x41, 0x1b, 0x12,
	0x19, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x2f, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x83, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x72, 0x62, 0x61, 0x63,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x3e, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x7b, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x12, 0x1c, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x36, 0x92, 0x41, 0x15, 0x12, 0x13, 0xe6, 0xb7, 0xbb, 0xe5,
	0x8a, 0xa0, 0x2f, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x12, 0x73, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x6f,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x2f, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f,
	0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x37, 0x92, 0x41,
	0x14, 0x12, 0x12, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe4,
	0xb8, 0x8a, 0xe7, 0xba, 0xbf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15,
	0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x7a, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x70,
	0x70, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x92, 0x41, 0x1a, 0x12, 0x18, 0xe5, 0xae, 0xa1, 0xe6,
	0xa0, 0xb8, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8a, 0xe7, 0xba, 0xbf, 0xe7, 0x94,
	0xb3, 0xe8, 0xaf, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f,
	0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x41, 0x70,
	0x70, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x41, 0x70, 0x70, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x92, 0x41, 0x15, 0x12,
	0x13, 0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0x2f, 0xe8, 0xa7, 0xa3, 0xe9, 0x94, 0x81, 0xe5, 0xba,
	0x94, 0xe7, 0x94, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f,
	0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x12, 0xb0, 0x01, 0x0a, 0x18, 0x42, 0x69, 0x6e, 0x64, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4d, 0x92, 0x41, 0x1d, 0x12,
	0x1b, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xae, 0xa1,
	0xe7, 0x90, 0x86, 0xe8, 0x80, 0x85, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xa6, 0x01, 0x0a, 0x16, 0x42, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x51, 0x92, 0x41, 0x23, 0x12, 0x21, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0x97, 0x8f, 0xe5, 0x93,
	0x81, 0xe5, 0x90, 0x88, 0xe7, 0xba, 0xa6, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a,
	0x22, 0x20, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x62, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x33, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x20, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x4e, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x22, 0x92, 0x41, 0x1f, 0x12, 0x1d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf,
	0x87, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0x8e, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x23, 0x2e,
	0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x39,
	0x92, 0x41, 0x14, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4b,
	0x65, 0x79, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x12, 0x9a, 0x02, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x4f, 0x66,
	0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70,
	0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0xa2, 0x01, 0x92, 0x41, 0x73, 0x12, 0x71, 0xe5, 0x8f, 0x96, 0xe5, 0x87, 0xba, 0xe5,
	0x8f, 0xaf, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xbb, 0x99, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe7, 0x9a, 0x84, 0x41, 0x70, 0x69, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x28, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0x41, 0x70, 0x69, 0xe5, 0x88, 0x86,
	0xe7, 0xbb, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x92, 0x8c, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb, 0x84, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb7,
	0xb2, 0xe7, 0xbb, 0x8f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe7, 0x9a, 0x84, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x12, 0x24, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x4f, 0x66, 0x41, 0x70,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xb3, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x73, 0x65, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x41, 0x70, 0x69, 0x54,
	0x6f, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x54, 0x92, 0x41, 0x26, 0x12, 0x24, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0x41, 0x70, 0x69, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0xe7, 0xbb, 0x99, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0xbb,
	0x84, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x72, 0x62, 0x61,
	0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x41,
	0x70, 0x69, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xf9, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70,
	0x69, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8b, 0x01, 0x92, 0x41, 0x61,
	0x12, 0x5f, 0xe5, 0x8f, 0x96, 0xe5, 0x87, 0xba, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x8f,
	0xaf, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xbc, 0x80, 0xe9, 0x80, 0x9a, 0xe7, 0x9a, 0x84,
	0x41, 0x70, 0x69, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x28, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb7, 0xb2, 0xe7,
	0xbb, 0x8f, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0x41, 0x50,
	0x49, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x9a, 0x84, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x70, 0x69, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x66, 0x41, 0x70, 0x70,
	0x12, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4f, 0x66, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x36, 0x92, 0x41, 0x23, 0x12, 0x21, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0xaf, 0xb9, 0x41, 0x50, 0x49, 0xe5, 0xaf, 0xb9, 0xe8, 0xae,
	0xbf, 0xe9, 0x97, 0xae, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a,
	0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x41, 0x70, 0x70,
	0x12, 0x24, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70,
	0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x41, 0x70, 0x69, 0x54, 0x6f,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x49, 0x92, 0x41, 0x20, 0x12, 0x1e, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x41, 0x70, 0x69,
	0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0xbb, 0x99, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b,
	0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x73, 0x65, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x12, 0xdc, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5c, 0x92, 0x41,
	0x2c, 0x12, 0x2a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7,
	0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe7, 0x9a, 0x84, 0x41, 0x70, 0x69, 0xe8, 0xae, 0xbf, 0xe9, 0x97,
	0xae, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67,
	0x65, 0x74, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xb3, 0x01, 0x0a, 0x19, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41,
	0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x4e, 0x92, 0x41, 0x1d, 0x12, 0x1b, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0x41, 0x70, 0x69, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xb3, 0xe8,
	0xaf, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x72, 0x62,
	0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x41, 0x70, 0x69, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x32, 0x92, 0x41, 0x14, 0x12,
	0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x76,
	0x0a, 0x12, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x64, 0x64, 0x69, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x64,
	0x64, 0x69, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x64, 0x64, 0x69, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x11, 0x92, 0x41, 0x0e, 0x12, 0x0c, 0xe7, 0xbd, 0x91, 0xe5, 0x85, 0xb3,
	0xe9, 0x89, 0xb4, 0xe6, 0x9d, 0x83, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x12, 0x23, 0x2e, 0x64, 0x61,
	0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x39, 0x92, 0x41, 0x14, 0x12,
	0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x72,
	0x62, 0x61, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x41, 0x70, 0x70, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3b, 0x92, 0x41, 0x14,
	0x12, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f,
	0x72, 0x62, 0x61, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x64,
	0x61, 0x6f, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x44, 0x92, 0x41, 0x20, 0x12, 0x1e, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x12, 0x19, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x12, 0x5a,
	0x10, 0x70, 0x62, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x3b, 0x72, 0x62, 0x61, 0x63, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_rbacpb_rbac_proto_rawDescOnce sync.Once
	file_pb_rbacpb_rbac_proto_rawDescData = file_pb_rbacpb_rbac_proto_rawDesc
)

func file_pb_rbacpb_rbac_proto_rawDescGZIP() []byte {
	file_pb_rbacpb_rbac_proto_rawDescOnce.Do(func() {
		file_pb_rbacpb_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_rbacpb_rbac_proto_rawDescData)
	})
	return file_pb_rbacpb_rbac_proto_rawDescData
}

var file_pb_rbacpb_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_pb_rbacpb_rbac_proto_goTypes = []interface{}{
	(*GatewayMiddilewareReq)(nil),           // 0: daop.pb.rbacpb.GatewayMiddilewareReq
	(*GatewayMiddilewareResp)(nil),          // 1: daop.pb.rbacpb.GatewayMiddilewareResp
	(*EmptyReq)(nil),                        // 2: daop.pb.rbacpb.EmptyReq
	(*BaseResp)(nil),                        // 3: daop.pb.rbacpb.BaseResp
	(*UpStatusReq)(nil),                     // 4: daop.pb.rbacpb.UpStatusReq
	(*AuditReq)(nil),                        // 5: daop.pb.rbacpb.AuditReq
	(*BindAdministratorAccountReq)(nil),     // 6: daop.pb.rbacpb.BindAdministratorAccountReq
	(*BindContractReq)(nil),                 // 7: daop.pb.rbacpb.BindContractReq
	(*GetAccessTokenReq)(nil),               // 8: daop.pb.rbacpb.GetAccessTokenReq
	(*AccessTokenData)(nil),                 // 9: daop.pb.rbacpb.AccessTokenData
	(*GetAccessTokenResp)(nil),              // 10: daop.pb.rbacpb.GetAccessTokenResp
	(*ApiGroup)(nil),                        // 11: daop.pb.rbacpb.ApiGroup
	(*HandleApiGroupReq)(nil),               // 12: daop.pb.rbacpb.HandleApiGroupReq
	(*GetApiGroupListReq)(nil),              // 13: daop.pb.rbacpb.GetApiGroupListReq
	(*GetApiGroupListResp)(nil),             // 14: daop.pb.rbacpb.GetApiGroupListResp
	(*Api)(nil),                             // 15: daop.pb.rbacpb.Api
	(*HandleApiReq)(nil),                    // 16: daop.pb.rbacpb.HandleApiReq
	(*GetApiListReq)(nil),                   // 17: daop.pb.rbacpb.GetApiListReq
	(*GetApiResp)(nil),                      // 18: daop.pb.rbacpb.GetApiResp
	(*GetApiListResp)(nil),                  // 19: daop.pb.rbacpb.GetApiListResp
	(*GetApiByUriReq)(nil),                  // 20: daop.pb.rbacpb.GetApiByUriReq
	(*CheckApiAccessOfAppReq)(nil),          // 21: daop.pb.rbacpb.CheckApiAccessOfAppReq
	(*AppGroup)(nil),                        // 22: daop.pb.rbacpb.AppGroup
	(*HandleAppGroupReq)(nil),               // 23: daop.pb.rbacpb.HandleAppGroupReq
	(*GetAppGroupListReq)(nil),              // 24: daop.pb.rbacpb.GetAppGroupListReq
	(*GetAppGroupListResp)(nil),             // 25: daop.pb.rbacpb.GetAppGroupListResp
	(*App)(nil),                             // 26: daop.pb.rbacpb.App
	(*HandleAppReq)(nil),                    // 27: daop.pb.rbacpb.HandleAppReq
	(*GetAppListReq)(nil),                   // 28: daop.pb.rbacpb.GetAppListReq
	(*GetAppKeyByAppNoReq)(nil),             // 29: daop.pb.rbacpb.GetAppKeyByAppNoReq
	(*GetAppByAppNoReq)(nil),                // 30: daop.pb.rbacpb.GetAppByAppNoReq
	(*ApplyOnlineReq)(nil),                  // 31: daop.pb.rbacpb.ApplyOnlineReq
	(*GetAppResp)(nil),                      // 32: daop.pb.rbacpb.GetAppResp
	(*GetAppListResp)(nil),                  // 33: daop.pb.rbacpb.GetAppListResp
	(*AppGroupApi)(nil),                     // 34: daop.pb.rbacpb.AppGroupApi
	(*AppApi)(nil),                          // 35: daop.pb.rbacpb.AppApi
	(*ApplicableApi)(nil),                   // 36: daop.pb.rbacpb.ApplicableApi
	(*GetApplicableApiListResp)(nil),        // 37: daop.pb.rbacpb.GetApplicableApiListResp
	(*GetApplicableApiOfAppGroupReq)(nil),   // 38: daop.pb.rbacpb.GetApplicableApiOfAppGroupReq
	(*AuthoriseApiToAppGroupReq)(nil),       // 39: daop.pb.rbacpb.AuthoriseApiToAppGroupReq
	(*GetApplicableApiOfAppReq)(nil),        // 40: daop.pb.rbacpb.GetApplicableApiOfAppReq
	(*AuthoriseApiToAppReq)(nil),            // 41: daop.pb.rbacpb.AuthoriseApiToAppReq
	(*AuditApiAccessApplicationReq)(nil),    // 42: daop.pb.rbacpb.AuditApiAccessApplicationReq
	(*GetApiAccessApplicationListReq)(nil),  // 43: daop.pb.rbacpb.GetApiAccessApplicationListReq
	(*GetApiAccessApplicationListResp)(nil), // 44: daop.pb.rbacpb.GetApiAccessApplicationListResp
	(*UserAuthorizeAppReq)(nil),             // 45: daop.pb.rbacpb.UserAuthorizeAppReq
	(*UserAuthorizeAppResp)(nil),            // 46: daop.pb.rbacpb.UserAuthorizeAppResp
	(*AppAuthorizedTokenReq)(nil),           // 47: daop.pb.rbacpb.AppAuthorizedTokenReq
	(*AppAuthorizedTokenResp)(nil),          // 48: daop.pb.rbacpb.AppAuthorizedTokenResp
	(*GetUserAuthorizationsReq)(nil),        // 49: daop.pb.rbacpb.GetUserAuthorizationsReq
	(*UserAuthorization)(nil),               // 50: daop.pb.rbacpb.UserAuthorization
	(*GetUserAuthorizationsResp)(nil),       // 51: daop.pb.rbacpb.GetUserAuthorizationsResp
	(*GatewayMiddilewareResp_Data)(nil),     // 52: daop.pb.rbacpb.GatewayMiddilewareResp.Data
	(*UserAuthorizeAppResp_Data)(nil),       // 53: daop.pb.rbacpb.UserAuthorizeAppResp.Data
	(*AppAuthorizedTokenResp_Data)(nil),     // 54: daop.pb.rbacpb.AppAuthorizedTokenResp.Data
	(*GetUserAuthorizationsResp_Data)(nil),  // 55: daop.pb.rbacpb.GetUserAuthorizationsResp.Data
	(*emptypb.Empty)(nil),                   // 56: google.protobuf.Empty
	(*structpb.Value)(nil),                  // 57: google.protobuf.Value
}
var file_pb_rbacpb_rbac_proto_depIdxs = []int32{
	52, // 0: daop.pb.rbacpb.GatewayMiddilewareResp.data:type_name -> daop.pb.rbacpb.GatewayMiddilewareResp.Data
	56, // 1: daop.pb.rbacpb.EmptyReq.r:type_name -> google.protobuf.Empty
	57, // 2: daop.pb.rbacpb.BaseResp.data:type_name -> google.protobuf.Value
	9,  // 3: daop.pb.rbacpb.GetAccessTokenResp.data:type_name -> daop.pb.rbacpb.AccessTokenData
	11, // 4: daop.pb.rbacpb.HandleApiGroupReq.group:type_name -> daop.pb.rbacpb.ApiGroup
	11, // 5: daop.pb.rbacpb.GetApiGroupListResp.data:type_name -> daop.pb.rbacpb.ApiGroup
	15, // 6: daop.pb.rbacpb.HandleApiReq.api:type_name -> daop.pb.rbacpb.Api
	15, // 7: daop.pb.rbacpb.GetApiResp.data:type_name -> daop.pb.rbacpb.Api
	15, // 8: daop.pb.rbacpb.GetApiListResp.data:type_name -> daop.pb.rbacpb.Api
	22, // 9: daop.pb.rbacpb.HandleAppGroupReq.group:type_name -> daop.pb.rbacpb.AppGroup
	22, // 10: daop.pb.rbacpb.GetAppGroupListResp.data:type_name -> daop.pb.rbacpb.AppGroup
	26, // 11: daop.pb.rbacpb.HandleAppReq.app:type_name -> daop.pb.rbacpb.App
	26, // 12: daop.pb.rbacpb.GetAppResp.data:type_name -> daop.pb.rbacpb.App
	26, // 13: daop.pb.rbacpb.GetAppListResp.data:type_name -> daop.pb.rbacpb.App
	36, // 14: daop.pb.rbacpb.GetApplicableApiListResp.data:type_name -> daop.pb.rbacpb.ApplicableApi
	35, // 15: daop.pb.rbacpb.GetApiAccessApplicationListResp.data:type_name -> daop.pb.rbacpb.AppApi
	53, // 16: daop.pb.rbacpb.UserAuthorizeAppResp.data:type_name -> daop.pb.rbacpb.UserAuthorizeAppResp.Data
	54, // 17: daop.pb.rbacpb.AppAuthorizedTokenResp.data:type_name -> daop.pb.rbacpb.AppAuthorizedTokenResp.Data
	55, // 18: daop.pb.rbacpb.GetUserAuthorizationsResp.data:type_name -> daop.pb.rbacpb.GetUserAuthorizationsResp.Data
	50, // 19: daop.pb.rbacpb.GetUserAuthorizationsResp.Data.list:type_name -> daop.pb.rbacpb.UserAuthorization
	12, // 20: daop.pb.rbacpb.RBACService.HandleApiGroup:input_type -> daop.pb.rbacpb.HandleApiGroupReq
	4,  // 21: daop.pb.rbacpb.RBACService.DeleteApiGroup:input_type -> daop.pb.rbacpb.UpStatusReq
	13, // 22: daop.pb.rbacpb.RBACService.GetApiGroupList:input_type -> daop.pb.rbacpb.GetApiGroupListReq
	16, // 23: daop.pb.rbacpb.RBACService.HandleApi:input_type -> daop.pb.rbacpb.HandleApiReq
	4,  // 24: daop.pb.rbacpb.RBACService.DeleteApi:input_type -> daop.pb.rbacpb.UpStatusReq
	17, // 25: daop.pb.rbacpb.RBACService.GetApiList:input_type -> daop.pb.rbacpb.GetApiListReq
	20, // 26: daop.pb.rbacpb.RBACService.GetApiByUri:input_type -> daop.pb.rbacpb.GetApiByUriReq
	23, // 27: daop.pb.rbacpb.RBACService.HandleAppGroup:input_type -> daop.pb.rbacpb.HandleAppGroupReq
	4,  // 28: daop.pb.rbacpb.RBACService.DeleteAppGroup:input_type -> daop.pb.rbacpb.UpStatusReq
	24, // 29: daop.pb.rbacpb.RBACService.GetAppGroupList:input_type -> daop.pb.rbacpb.GetAppGroupListReq
	27, // 30: daop.pb.rbacpb.RBACService.HandleApp:input_type -> daop.pb.rbacpb.HandleAppReq
	4,  // 31: daop.pb.rbacpb.RBACService.DeleteApp:input_type -> daop.pb.rbacpb.UpStatusReq
	31, // 32: daop.pb.rbacpb.RBACService.ApplyOnline:input_type -> daop.pb.rbacpb.ApplyOnlineReq
	5,  // 33: daop.pb.rbacpb.RBACService.AuditApp:input_type -> daop.pb.rbacpb.AuditReq
	4,  // 34: daop.pb.rbacpb.RBACService.LockUnlockApp:input_type -> daop.pb.rbacpb.UpStatusReq
	6,  // 35: daop.pb.rbacpb.RBACService.BindAdministratorAccount:input_type -> daop.pb.rbacpb.BindAdministratorAccountReq
	7,  // 36: daop.pb.rbacpb.RBACService.BindCollectionContract:input_type -> daop.pb.rbacpb.BindContractReq
	28, // 37: daop.pb.rbacpb.RBACService.GetAppList:input_type -> daop.pb.rbacpb.GetAppListReq
	30, // 38: daop.pb.rbacpb.RBACService.GetAppByAppNo:input_type -> daop.pb.rbacpb.GetAppByAppNoReq
	29, // 39: daop.pb.rbacpb.RBACService.GetAppKeyByAppNo:input_type -> daop.pb.rbacpb.GetAppKeyByAppNoReq
	38, // 40: daop.pb.rbacpb.RBACService.GetApplicableApiOfAppGroup:input_type -> daop.pb.rbacpb.GetApplicableApiOfAppGroupReq
	39, // 41: daop.pb.rbacpb.RBACService.AuthoriseApiToAppGroup:input_type -> daop.pb.rbacpb.AuthoriseApiToAppGroupReq
	40, // 42: daop.pb.rbacpb.RBACService.GetApplicableApiOfApp:input_type -> daop.pb.rbacpb.GetApplicableApiOfAppReq
	21, // 43: daop.pb.rbacpb.RBACService.CheckApiAccessOfApp:input_type -> daop.pb.rbacpb.CheckApiAccessOfAppReq
	41, // 44: daop.pb.rbacpb.RBACService.AuthoriseApiToApp:input_type -> daop.pb.rbacpb.AuthoriseApiToAppReq
	43, // 45: daop.pb.rbacpb.RBACService.GetApiAccessApplicationList:input_type -> daop.pb.rbacpb.GetApiAccessApplicationListReq
	42, // 46: daop.pb.rbacpb.RBACService.AuditApiAccessApplication:input_type -> daop.pb.rbacpb.AuditApiAccessApplicationReq
	8,  // 47: daop.pb.rbacpb.RBACService.GetAccessToken:input_type -> daop.pb.rbacpb.GetAccessTokenReq
	0,  // 48: daop.pb.rbacpb.RBACService.GatewayMiddileware:input_type -> daop.pb.rbacpb.GatewayMiddilewareReq
	45, // 49: daop.pb.rbacpb.RBACService.UserAuthorizeApp:input_type -> daop.pb.rbacpb.UserAuthorizeAppReq
	47, // 50: daop.pb.rbacpb.RBACService.AppAuthorizedToken:input_type -> daop.pb.rbacpb.AppAuthorizedTokenReq
	49, // 51: daop.pb.rbacpb.RBACService.GetUserAuthorizations:input_type -> daop.pb.rbacpb.GetUserAuthorizationsReq
	3,  // 52: daop.pb.rbacpb.RBACService.HandleApiGroup:output_type -> daop.pb.rbacpb.BaseResp
	3,  // 53: daop.pb.rbacpb.RBACService.DeleteApiGroup:output_type -> daop.pb.rbacpb.BaseResp
	14, // 54: daop.pb.rbacpb.RBACService.GetApiGroupList:output_type -> daop.pb.rbacpb.GetApiGroupListResp
	3,  // 55: daop.pb.rbacpb.RBACService.HandleApi:output_type -> daop.pb.rbacpb.BaseResp
	3,  // 56: daop.pb.rbacpb.RBACService.DeleteApi:output_type -> daop.pb.rbacpb.BaseResp
	19, // 57: daop.pb.rbacpb.RBACService.GetApiList:output_type -> daop.pb.rbacpb.GetApiListResp
	18, // 58: daop.pb.rbacpb.RBACService.GetApiByUri:output_type -> daop.pb.rbacpb.GetApiResp
	3,  // 59: daop.pb.rbacpb.RBACService.HandleAppGroup:output_type -> daop.pb.rbacpb.BaseResp
	3,  // 60: daop.pb.rbacpb.RBACService.DeleteAppGroup:output_type -> daop.pb.rbacpb.BaseResp
	25, // 61: daop.pb.rbacpb.RBACService.GetAppGroupList:output_type -> daop.pb.rbacpb.GetAppGroupListResp
	3,  // 62: daop.pb.rbacpb.RBACService.HandleApp:output_type -> daop.pb.rbacpb.BaseResp
	3,  // 63: daop.pb.rbacpb.RBACService.DeleteApp:output_type -> daop.pb.rbacpb.BaseResp
	3,  // 64: daop.pb.rbacpb.RBACService.ApplyOnline:output_type -> daop.pb.rbacpb.BaseResp
	3,  // 65: daop.pb.rbacpb.RBACService.AuditApp:output_type -> daop.pb.rbacpb.BaseResp
	3,  // 66: daop.pb.rbacpb.RBACService.LockUnlockApp:output_type -> daop.pb.rbacpb.BaseResp
	3,  // 67: daop.pb.rbacpb.RBACService.BindAdministratorAccount:output_type -> daop.pb.rbacpb.BaseResp
	3,  // 68: daop.pb.rbacpb.RBACService.BindCollectionContract:output_type -> daop.pb.rbacpb.BaseResp
	33, // 69: daop.pb.rbacpb.RBACService.GetAppList:output_type -> daop.pb.rbacpb.GetAppListResp
	32, // 70: daop.pb.rbacpb.RBACService.GetAppByAppNo:output_type -> daop.pb.rbacpb.GetAppResp
	32, // 71: daop.pb.rbacpb.RBACService.GetAppKeyByAppNo:output_type -> daop.pb.rbacpb.GetAppResp
	37, // 72: daop.pb.rbacpb.RBACService.GetApplicableApiOfAppGroup:output_type -> daop.pb.rbacpb.GetApplicableApiListResp
	3,  // 73: daop.pb.rbacpb.RBACService.AuthoriseApiToAppGroup:output_type -> daop.pb.rbacpb.BaseResp
	37, // 74: daop.pb.rbacpb.RBACService.GetApplicableApiOfApp:output_type -> daop.pb.rbacpb.GetApplicableApiListResp
	3,  // 75: daop.pb.rbacpb.RBACService.CheckApiAccessOfApp:output_type -> daop.pb.rbacpb.BaseResp
	3,  // 76: daop.pb.rbacpb.RBACService.AuthoriseApiToApp:output_type -> daop.pb.rbacpb.BaseResp
	44, // 77: daop.pb.rbacpb.RBACService.GetApiAccessApplicationList:output_type -> daop.pb.rbacpb.GetApiAccessApplicationListResp
	3,  // 78: daop.pb.rbacpb.RBACService.AuditApiAccessApplication:output_type -> daop.pb.rbacpb.BaseResp
	10, // 79: daop.pb.rbacpb.RBACService.GetAccessToken:output_type -> daop.pb.rbacpb.GetAccessTokenResp
	1,  // 80: daop.pb.rbacpb.RBACService.GatewayMiddileware:output_type -> daop.pb.rbacpb.GatewayMiddilewareResp
	3,  // 81: daop.pb.rbacpb.RBACService.UserAuthorizeApp:output_type -> daop.pb.rbacpb.BaseResp
	48, // 82: daop.pb.rbacpb.RBACService.AppAuthorizedToken:output_type -> daop.pb.rbacpb.AppAuthorizedTokenResp
	51, // 83: daop.pb.rbacpb.RBACService.GetUserAuthorizations:output_type -> daop.pb.rbacpb.GetUserAuthorizationsResp
	52, // [52:84] is the sub-list for method output_type
	20, // [20:52] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_pb_rbacpb_rbac_proto_init() }
func file_pb_rbacpb_rbac_proto_init() {
	if File_pb_rbacpb_rbac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_rbacpb_rbac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMiddilewareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMiddilewareResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindAdministratorAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleApiGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiGroupListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiGroupListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Api); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleApiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiByUriReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckApiAccessOfAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleAppGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGroupListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGroupListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppKeyByAppNoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppByAppNoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOnlineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppGroupApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicableApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicableApiListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicableApiOfAppGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthoriseApiToAppGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicableApiOfAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthoriseApiToAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditApiAccessApplicationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiAccessApplicationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiAccessApplicationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthorizeAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthorizeAppResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppAuthorizedTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppAuthorizedTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAuthorizationsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAuthorizationsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMiddilewareResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthorizeAppResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppAuthorizedTokenResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rbacpb_rbac_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAuthorizationsResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_rbacpb_rbac_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_rbacpb_rbac_proto_goTypes,
		DependencyIndexes: file_pb_rbacpb_rbac_proto_depIdxs,
		MessageInfos:      file_pb_rbacpb_rbac_proto_msgTypes,
	}.Build()
	File_pb_rbacpb_rbac_proto = out.File
	file_pb_rbacpb_rbac_proto_rawDesc = nil
	file_pb_rbacpb_rbac_proto_goTypes = nil
	file_pb_rbacpb_rbac_proto_depIdxs = nil
}
