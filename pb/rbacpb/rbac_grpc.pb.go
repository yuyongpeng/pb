// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/rbacpb/rbac.proto

package rbacpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RBACService_HandleApiGroup_FullMethodName              = "/daop.pb.rbacpb.RBACService/HandleApiGroup"
	RBACService_DeleteApiGroup_FullMethodName              = "/daop.pb.rbacpb.RBACService/DeleteApiGroup"
	RBACService_GetApiGroupList_FullMethodName             = "/daop.pb.rbacpb.RBACService/GetApiGroupList"
	RBACService_HandleApi_FullMethodName                   = "/daop.pb.rbacpb.RBACService/HandleApi"
	RBACService_DeleteApi_FullMethodName                   = "/daop.pb.rbacpb.RBACService/DeleteApi"
	RBACService_GetApiList_FullMethodName                  = "/daop.pb.rbacpb.RBACService/GetApiList"
	RBACService_GetApiByUri_FullMethodName                 = "/daop.pb.rbacpb.RBACService/GetApiByUri"
	RBACService_HandleAppGroup_FullMethodName              = "/daop.pb.rbacpb.RBACService/HandleAppGroup"
	RBACService_DeleteAppGroup_FullMethodName              = "/daop.pb.rbacpb.RBACService/DeleteAppGroup"
	RBACService_GetAppGroupList_FullMethodName             = "/daop.pb.rbacpb.RBACService/GetAppGroupList"
	RBACService_HandleApp_FullMethodName                   = "/daop.pb.rbacpb.RBACService/HandleApp"
	RBACService_DeleteApp_FullMethodName                   = "/daop.pb.rbacpb.RBACService/DeleteApp"
	RBACService_ApplyOnline_FullMethodName                 = "/daop.pb.rbacpb.RBACService/ApplyOnline"
	RBACService_AuditApp_FullMethodName                    = "/daop.pb.rbacpb.RBACService/AuditApp"
	RBACService_LockUnlockApp_FullMethodName               = "/daop.pb.rbacpb.RBACService/LockUnlockApp"
	RBACService_BindAdministratorAccount_FullMethodName    = "/daop.pb.rbacpb.RBACService/BindAdministratorAccount"
	RBACService_BindCollectionContract_FullMethodName      = "/daop.pb.rbacpb.RBACService/BindCollectionContract"
	RBACService_GetAppList_FullMethodName                  = "/daop.pb.rbacpb.RBACService/GetAppList"
	RBACService_GetAppByAppNo_FullMethodName               = "/daop.pb.rbacpb.RBACService/GetAppByAppNo"
	RBACService_GetAppKeyByAppNo_FullMethodName            = "/daop.pb.rbacpb.RBACService/GetAppKeyByAppNo"
	RBACService_GetApplicableApiOfAppGroup_FullMethodName  = "/daop.pb.rbacpb.RBACService/GetApplicableApiOfAppGroup"
	RBACService_AuthoriseApiToAppGroup_FullMethodName      = "/daop.pb.rbacpb.RBACService/AuthoriseApiToAppGroup"
	RBACService_GetApplicableApiOfApp_FullMethodName       = "/daop.pb.rbacpb.RBACService/GetApplicableApiOfApp"
	RBACService_CheckApiAccessOfApp_FullMethodName         = "/daop.pb.rbacpb.RBACService/CheckApiAccessOfApp"
	RBACService_AuthoriseApiToApp_FullMethodName           = "/daop.pb.rbacpb.RBACService/AuthoriseApiToApp"
	RBACService_GetApiAccessApplicationList_FullMethodName = "/daop.pb.rbacpb.RBACService/GetApiAccessApplicationList"
	RBACService_AuditApiAccessApplication_FullMethodName   = "/daop.pb.rbacpb.RBACService/AuditApiAccessApplication"
	RBACService_GetAccessToken_FullMethodName              = "/daop.pb.rbacpb.RBACService/GetAccessToken"
	RBACService_GatewayMiddileware_FullMethodName          = "/daop.pb.rbacpb.RBACService/GatewayMiddileware"
	RBACService_UserAuthorizeApp_FullMethodName            = "/daop.pb.rbacpb.RBACService/UserAuthorizeApp"
	RBACService_AppAuthorizedToken_FullMethodName          = "/daop.pb.rbacpb.RBACService/AppAuthorizedToken"
	RBACService_GetUserAuthorizations_FullMethodName       = "/daop.pb.rbacpb.RBACService/GetUserAuthorizations"
)

// RBACServiceClient is the client API for RBACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RBACServiceClient interface {
	// 添加/编辑API分组
	HandleApiGroup(ctx context.Context, in *HandleApiGroupReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 删除API分组
	DeleteApiGroup(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 获取API分组列表
	GetApiGroupList(ctx context.Context, in *GetApiGroupListReq, opts ...grpc.CallOption) (*GetApiGroupListResp, error)
	// 添加/编辑API
	HandleApi(ctx context.Context, in *HandleApiReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 删除API
	DeleteApi(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 获取API列表
	GetApiList(ctx context.Context, in *GetApiListReq, opts ...grpc.CallOption) (*GetApiListResp, error)
	// 通过Uri获取API
	GetApiByUri(ctx context.Context, in *GetApiByUriReq, opts ...grpc.CallOption) (*GetApiResp, error)
	// 添加/编辑应用分组
	HandleAppGroup(ctx context.Context, in *HandleAppGroupReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 删除应用分组
	DeleteAppGroup(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 获取应用分组列表
	GetAppGroupList(ctx context.Context, in *GetAppGroupListReq, opts ...grpc.CallOption) (*GetAppGroupListResp, error)
	// 添加/编辑应用
	HandleApp(ctx context.Context, in *HandleAppReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 删除应用
	DeleteApp(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 申请应用上线
	ApplyOnline(ctx context.Context, in *ApplyOnlineReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 审核应用上线申请
	AuditApp(ctx context.Context, in *AuditReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 锁定/解锁应用
	LockUnlockApp(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 绑定应用管理者账号
	BindAdministratorAccount(ctx context.Context, in *BindAdministratorAccountReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 绑定应用使用的藏品合约
	BindCollectionContract(ctx context.Context, in *BindContractReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 获取应用列表
	GetAppList(ctx context.Context, in *GetAppListReq, opts ...grpc.CallOption) (*GetAppListResp, error)
	// 通过AppNo获取应用信息
	GetAppByAppNo(ctx context.Context, in *GetAppByAppNoReq, opts ...grpc.CallOption) (*GetAppResp, error)
	// 获取应用密钥
	GetAppKeyByAppNo(ctx context.Context, in *GetAppKeyByAppNoReq, opts ...grpc.CallOption) (*GetAppResp, error)
	// 取出可授权给应用分组的Api列表(包括Api分组信息和应用分组是否已经获得授权的状态)
	GetApplicableApiOfAppGroup(ctx context.Context, in *GetApplicableApiOfAppGroupReq, opts ...grpc.CallOption) (*GetApplicableApiListResp, error)
	// 授权Api访问权限给应用分组
	AuthoriseApiToAppGroup(ctx context.Context, in *AuthoriseApiToAppGroupReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 取出应用可申请开通的Api列表(包括应用是否已经获得某个API授权的状态)
	GetApplicableApiOfApp(ctx context.Context, in *GetApplicableApiOfAppReq, opts ...grpc.CallOption) (*GetApplicableApiListResp, error)
	// 检查应用对API对访问权限
	CheckApiAccessOfApp(ctx context.Context, in *CheckApiAccessOfAppReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 授权Api访问权限给应用
	AuthoriseApiToApp(ctx context.Context, in *AuthoriseApiToAppReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 获取应用申请的Api访问授权列表
	GetApiAccessApplicationList(ctx context.Context, in *GetApiAccessApplicationListReq, opts ...grpc.CallOption) (*GetApiAccessApplicationListResp, error)
	// 审核应用Api授权申请
	AuditApiAccessApplication(ctx context.Context, in *AuditApiAccessApplicationReq, opts ...grpc.CallOption) (*BaseResp, error)
	// GetAccessToken 获取Access Token
	GetAccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...grpc.CallOption) (*GetAccessTokenResp, error)
	// 网关鉴权
	GatewayMiddileware(ctx context.Context, in *GatewayMiddilewareReq, opts ...grpc.CallOption) (*GatewayMiddilewareResp, error)
	// 用户授权操作
	UserAuthorizeApp(ctx context.Context, in *UserAuthorizeAppReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 用户授权操作
	AppAuthorizedToken(ctx context.Context, in *AppAuthorizedTokenReq, opts ...grpc.CallOption) (*AppAuthorizedTokenResp, error)
	// 获取用户授权信息列表
	GetUserAuthorizations(ctx context.Context, in *GetUserAuthorizationsReq, opts ...grpc.CallOption) (*GetUserAuthorizationsResp, error)
}

type rBACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACServiceClient(cc grpc.ClientConnInterface) RBACServiceClient {
	return &rBACServiceClient{cc}
}

func (c *rBACServiceClient) HandleApiGroup(ctx context.Context, in *HandleApiGroupReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_HandleApiGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteApiGroup(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_DeleteApiGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetApiGroupList(ctx context.Context, in *GetApiGroupListReq, opts ...grpc.CallOption) (*GetApiGroupListResp, error) {
	out := new(GetApiGroupListResp)
	err := c.cc.Invoke(ctx, RBACService_GetApiGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) HandleApi(ctx context.Context, in *HandleApiReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_HandleApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteApi(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_DeleteApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetApiList(ctx context.Context, in *GetApiListReq, opts ...grpc.CallOption) (*GetApiListResp, error) {
	out := new(GetApiListResp)
	err := c.cc.Invoke(ctx, RBACService_GetApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetApiByUri(ctx context.Context, in *GetApiByUriReq, opts ...grpc.CallOption) (*GetApiResp, error) {
	out := new(GetApiResp)
	err := c.cc.Invoke(ctx, RBACService_GetApiByUri_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) HandleAppGroup(ctx context.Context, in *HandleAppGroupReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_HandleAppGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteAppGroup(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_DeleteAppGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetAppGroupList(ctx context.Context, in *GetAppGroupListReq, opts ...grpc.CallOption) (*GetAppGroupListResp, error) {
	out := new(GetAppGroupListResp)
	err := c.cc.Invoke(ctx, RBACService_GetAppGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) HandleApp(ctx context.Context, in *HandleAppReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_HandleApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteApp(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ApplyOnline(ctx context.Context, in *ApplyOnlineReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_ApplyOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AuditApp(ctx context.Context, in *AuditReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_AuditApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) LockUnlockApp(ctx context.Context, in *UpStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_LockUnlockApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) BindAdministratorAccount(ctx context.Context, in *BindAdministratorAccountReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_BindAdministratorAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) BindCollectionContract(ctx context.Context, in *BindContractReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_BindCollectionContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetAppList(ctx context.Context, in *GetAppListReq, opts ...grpc.CallOption) (*GetAppListResp, error) {
	out := new(GetAppListResp)
	err := c.cc.Invoke(ctx, RBACService_GetAppList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetAppByAppNo(ctx context.Context, in *GetAppByAppNoReq, opts ...grpc.CallOption) (*GetAppResp, error) {
	out := new(GetAppResp)
	err := c.cc.Invoke(ctx, RBACService_GetAppByAppNo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetAppKeyByAppNo(ctx context.Context, in *GetAppKeyByAppNoReq, opts ...grpc.CallOption) (*GetAppResp, error) {
	out := new(GetAppResp)
	err := c.cc.Invoke(ctx, RBACService_GetAppKeyByAppNo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetApplicableApiOfAppGroup(ctx context.Context, in *GetApplicableApiOfAppGroupReq, opts ...grpc.CallOption) (*GetApplicableApiListResp, error) {
	out := new(GetApplicableApiListResp)
	err := c.cc.Invoke(ctx, RBACService_GetApplicableApiOfAppGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AuthoriseApiToAppGroup(ctx context.Context, in *AuthoriseApiToAppGroupReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_AuthoriseApiToAppGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetApplicableApiOfApp(ctx context.Context, in *GetApplicableApiOfAppReq, opts ...grpc.CallOption) (*GetApplicableApiListResp, error) {
	out := new(GetApplicableApiListResp)
	err := c.cc.Invoke(ctx, RBACService_GetApplicableApiOfApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CheckApiAccessOfApp(ctx context.Context, in *CheckApiAccessOfAppReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_CheckApiAccessOfApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AuthoriseApiToApp(ctx context.Context, in *AuthoriseApiToAppReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_AuthoriseApiToApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetApiAccessApplicationList(ctx context.Context, in *GetApiAccessApplicationListReq, opts ...grpc.CallOption) (*GetApiAccessApplicationListResp, error) {
	out := new(GetApiAccessApplicationListResp)
	err := c.cc.Invoke(ctx, RBACService_GetApiAccessApplicationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AuditApiAccessApplication(ctx context.Context, in *AuditApiAccessApplicationReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_AuditApiAccessApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetAccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...grpc.CallOption) (*GetAccessTokenResp, error) {
	out := new(GetAccessTokenResp)
	err := c.cc.Invoke(ctx, RBACService_GetAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GatewayMiddileware(ctx context.Context, in *GatewayMiddilewareReq, opts ...grpc.CallOption) (*GatewayMiddilewareResp, error) {
	out := new(GatewayMiddilewareResp)
	err := c.cc.Invoke(ctx, RBACService_GatewayMiddileware_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) UserAuthorizeApp(ctx context.Context, in *UserAuthorizeAppReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, RBACService_UserAuthorizeApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AppAuthorizedToken(ctx context.Context, in *AppAuthorizedTokenReq, opts ...grpc.CallOption) (*AppAuthorizedTokenResp, error) {
	out := new(AppAuthorizedTokenResp)
	err := c.cc.Invoke(ctx, RBACService_AppAuthorizedToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetUserAuthorizations(ctx context.Context, in *GetUserAuthorizationsReq, opts ...grpc.CallOption) (*GetUserAuthorizationsResp, error) {
	out := new(GetUserAuthorizationsResp)
	err := c.cc.Invoke(ctx, RBACService_GetUserAuthorizations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServiceServer is the server API for RBACService service.
// All implementations should embed UnimplementedRBACServiceServer
// for forward compatibility
type RBACServiceServer interface {
	// 添加/编辑API分组
	HandleApiGroup(context.Context, *HandleApiGroupReq) (*BaseResp, error)
	// 删除API分组
	DeleteApiGroup(context.Context, *UpStatusReq) (*BaseResp, error)
	// 获取API分组列表
	GetApiGroupList(context.Context, *GetApiGroupListReq) (*GetApiGroupListResp, error)
	// 添加/编辑API
	HandleApi(context.Context, *HandleApiReq) (*BaseResp, error)
	// 删除API
	DeleteApi(context.Context, *UpStatusReq) (*BaseResp, error)
	// 获取API列表
	GetApiList(context.Context, *GetApiListReq) (*GetApiListResp, error)
	// 通过Uri获取API
	GetApiByUri(context.Context, *GetApiByUriReq) (*GetApiResp, error)
	// 添加/编辑应用分组
	HandleAppGroup(context.Context, *HandleAppGroupReq) (*BaseResp, error)
	// 删除应用分组
	DeleteAppGroup(context.Context, *UpStatusReq) (*BaseResp, error)
	// 获取应用分组列表
	GetAppGroupList(context.Context, *GetAppGroupListReq) (*GetAppGroupListResp, error)
	// 添加/编辑应用
	HandleApp(context.Context, *HandleAppReq) (*BaseResp, error)
	// 删除应用
	DeleteApp(context.Context, *UpStatusReq) (*BaseResp, error)
	// 申请应用上线
	ApplyOnline(context.Context, *ApplyOnlineReq) (*BaseResp, error)
	// 审核应用上线申请
	AuditApp(context.Context, *AuditReq) (*BaseResp, error)
	// 锁定/解锁应用
	LockUnlockApp(context.Context, *UpStatusReq) (*BaseResp, error)
	// 绑定应用管理者账号
	BindAdministratorAccount(context.Context, *BindAdministratorAccountReq) (*BaseResp, error)
	// 绑定应用使用的藏品合约
	BindCollectionContract(context.Context, *BindContractReq) (*BaseResp, error)
	// 获取应用列表
	GetAppList(context.Context, *GetAppListReq) (*GetAppListResp, error)
	// 通过AppNo获取应用信息
	GetAppByAppNo(context.Context, *GetAppByAppNoReq) (*GetAppResp, error)
	// 获取应用密钥
	GetAppKeyByAppNo(context.Context, *GetAppKeyByAppNoReq) (*GetAppResp, error)
	// 取出可授权给应用分组的Api列表(包括Api分组信息和应用分组是否已经获得授权的状态)
	GetApplicableApiOfAppGroup(context.Context, *GetApplicableApiOfAppGroupReq) (*GetApplicableApiListResp, error)
	// 授权Api访问权限给应用分组
	AuthoriseApiToAppGroup(context.Context, *AuthoriseApiToAppGroupReq) (*BaseResp, error)
	// 取出应用可申请开通的Api列表(包括应用是否已经获得某个API授权的状态)
	GetApplicableApiOfApp(context.Context, *GetApplicableApiOfAppReq) (*GetApplicableApiListResp, error)
	// 检查应用对API对访问权限
	CheckApiAccessOfApp(context.Context, *CheckApiAccessOfAppReq) (*BaseResp, error)
	// 授权Api访问权限给应用
	AuthoriseApiToApp(context.Context, *AuthoriseApiToAppReq) (*BaseResp, error)
	// 获取应用申请的Api访问授权列表
	GetApiAccessApplicationList(context.Context, *GetApiAccessApplicationListReq) (*GetApiAccessApplicationListResp, error)
	// 审核应用Api授权申请
	AuditApiAccessApplication(context.Context, *AuditApiAccessApplicationReq) (*BaseResp, error)
	// GetAccessToken 获取Access Token
	GetAccessToken(context.Context, *GetAccessTokenReq) (*GetAccessTokenResp, error)
	// 网关鉴权
	GatewayMiddileware(context.Context, *GatewayMiddilewareReq) (*GatewayMiddilewareResp, error)
	// 用户授权操作
	UserAuthorizeApp(context.Context, *UserAuthorizeAppReq) (*BaseResp, error)
	// 用户授权操作
	AppAuthorizedToken(context.Context, *AppAuthorizedTokenReq) (*AppAuthorizedTokenResp, error)
	// 获取用户授权信息列表
	GetUserAuthorizations(context.Context, *GetUserAuthorizationsReq) (*GetUserAuthorizationsResp, error)
}

// UnimplementedRBACServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRBACServiceServer struct {
}

func (UnimplementedRBACServiceServer) HandleApiGroup(context.Context, *HandleApiGroupReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleApiGroup not implemented")
}
func (UnimplementedRBACServiceServer) DeleteApiGroup(context.Context, *UpStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiGroup not implemented")
}
func (UnimplementedRBACServiceServer) GetApiGroupList(context.Context, *GetApiGroupListReq) (*GetApiGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiGroupList not implemented")
}
func (UnimplementedRBACServiceServer) HandleApi(context.Context, *HandleApiReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleApi not implemented")
}
func (UnimplementedRBACServiceServer) DeleteApi(context.Context, *UpStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedRBACServiceServer) GetApiList(context.Context, *GetApiListReq) (*GetApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiList not implemented")
}
func (UnimplementedRBACServiceServer) GetApiByUri(context.Context, *GetApiByUriReq) (*GetApiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiByUri not implemented")
}
func (UnimplementedRBACServiceServer) HandleAppGroup(context.Context, *HandleAppGroupReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleAppGroup not implemented")
}
func (UnimplementedRBACServiceServer) DeleteAppGroup(context.Context, *UpStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppGroup not implemented")
}
func (UnimplementedRBACServiceServer) GetAppGroupList(context.Context, *GetAppGroupListReq) (*GetAppGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppGroupList not implemented")
}
func (UnimplementedRBACServiceServer) HandleApp(context.Context, *HandleAppReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleApp not implemented")
}
func (UnimplementedRBACServiceServer) DeleteApp(context.Context, *UpStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedRBACServiceServer) ApplyOnline(context.Context, *ApplyOnlineReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyOnline not implemented")
}
func (UnimplementedRBACServiceServer) AuditApp(context.Context, *AuditReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditApp not implemented")
}
func (UnimplementedRBACServiceServer) LockUnlockApp(context.Context, *UpStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockUnlockApp not implemented")
}
func (UnimplementedRBACServiceServer) BindAdministratorAccount(context.Context, *BindAdministratorAccountReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAdministratorAccount not implemented")
}
func (UnimplementedRBACServiceServer) BindCollectionContract(context.Context, *BindContractReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindCollectionContract not implemented")
}
func (UnimplementedRBACServiceServer) GetAppList(context.Context, *GetAppListReq) (*GetAppListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppList not implemented")
}
func (UnimplementedRBACServiceServer) GetAppByAppNo(context.Context, *GetAppByAppNoReq) (*GetAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByAppNo not implemented")
}
func (UnimplementedRBACServiceServer) GetAppKeyByAppNo(context.Context, *GetAppKeyByAppNoReq) (*GetAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppKeyByAppNo not implemented")
}
func (UnimplementedRBACServiceServer) GetApplicableApiOfAppGroup(context.Context, *GetApplicableApiOfAppGroupReq) (*GetApplicableApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicableApiOfAppGroup not implemented")
}
func (UnimplementedRBACServiceServer) AuthoriseApiToAppGroup(context.Context, *AuthoriseApiToAppGroupReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthoriseApiToAppGroup not implemented")
}
func (UnimplementedRBACServiceServer) GetApplicableApiOfApp(context.Context, *GetApplicableApiOfAppReq) (*GetApplicableApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicableApiOfApp not implemented")
}
func (UnimplementedRBACServiceServer) CheckApiAccessOfApp(context.Context, *CheckApiAccessOfAppReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckApiAccessOfApp not implemented")
}
func (UnimplementedRBACServiceServer) AuthoriseApiToApp(context.Context, *AuthoriseApiToAppReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthoriseApiToApp not implemented")
}
func (UnimplementedRBACServiceServer) GetApiAccessApplicationList(context.Context, *GetApiAccessApplicationListReq) (*GetApiAccessApplicationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiAccessApplicationList not implemented")
}
func (UnimplementedRBACServiceServer) AuditApiAccessApplication(context.Context, *AuditApiAccessApplicationReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditApiAccessApplication not implemented")
}
func (UnimplementedRBACServiceServer) GetAccessToken(context.Context, *GetAccessTokenReq) (*GetAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedRBACServiceServer) GatewayMiddileware(context.Context, *GatewayMiddilewareReq) (*GatewayMiddilewareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayMiddileware not implemented")
}
func (UnimplementedRBACServiceServer) UserAuthorizeApp(context.Context, *UserAuthorizeAppReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthorizeApp not implemented")
}
func (UnimplementedRBACServiceServer) AppAuthorizedToken(context.Context, *AppAuthorizedTokenReq) (*AppAuthorizedTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppAuthorizedToken not implemented")
}
func (UnimplementedRBACServiceServer) GetUserAuthorizations(context.Context, *GetUserAuthorizationsReq) (*GetUserAuthorizationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAuthorizations not implemented")
}

// UnsafeRBACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACServiceServer will
// result in compilation errors.
type UnsafeRBACServiceServer interface {
	mustEmbedUnimplementedRBACServiceServer()
}

func RegisterRBACServiceServer(s grpc.ServiceRegistrar, srv RBACServiceServer) {
	s.RegisterService(&RBACService_ServiceDesc, srv)
}

func _RBACService_HandleApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleApiGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).HandleApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_HandleApiGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).HandleApiGroup(ctx, req.(*HandleApiGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteApiGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteApiGroup(ctx, req.(*UpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetApiGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetApiGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetApiGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetApiGroupList(ctx, req.(*GetApiGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_HandleApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).HandleApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_HandleApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).HandleApi(ctx, req.(*HandleApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteApi(ctx, req.(*UpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetApiList(ctx, req.(*GetApiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetApiByUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiByUriReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetApiByUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetApiByUri_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetApiByUri(ctx, req.(*GetApiByUriReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_HandleAppGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleAppGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).HandleAppGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_HandleAppGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).HandleAppGroup(ctx, req.(*HandleAppGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteAppGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteAppGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteAppGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteAppGroup(ctx, req.(*UpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetAppGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetAppGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetAppGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetAppGroupList(ctx, req.(*GetAppGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_HandleApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).HandleApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_HandleApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).HandleApp(ctx, req.(*HandleAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteApp(ctx, req.(*UpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ApplyOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ApplyOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ApplyOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ApplyOnline(ctx, req.(*ApplyOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AuditApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AuditApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AuditApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AuditApp(ctx, req.(*AuditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_LockUnlockApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).LockUnlockApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_LockUnlockApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).LockUnlockApp(ctx, req.(*UpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_BindAdministratorAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindAdministratorAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).BindAdministratorAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_BindAdministratorAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).BindAdministratorAccount(ctx, req.(*BindAdministratorAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_BindCollectionContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).BindCollectionContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_BindCollectionContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).BindCollectionContract(ctx, req.(*BindContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetAppList(ctx, req.(*GetAppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetAppByAppNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByAppNoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetAppByAppNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetAppByAppNo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetAppByAppNo(ctx, req.(*GetAppByAppNoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetAppKeyByAppNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppKeyByAppNoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetAppKeyByAppNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetAppKeyByAppNo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetAppKeyByAppNo(ctx, req.(*GetAppKeyByAppNoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetApplicableApiOfAppGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicableApiOfAppGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetApplicableApiOfAppGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetApplicableApiOfAppGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetApplicableApiOfAppGroup(ctx, req.(*GetApplicableApiOfAppGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AuthoriseApiToAppGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthoriseApiToAppGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AuthoriseApiToAppGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AuthoriseApiToAppGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AuthoriseApiToAppGroup(ctx, req.(*AuthoriseApiToAppGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetApplicableApiOfApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicableApiOfAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetApplicableApiOfApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetApplicableApiOfApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetApplicableApiOfApp(ctx, req.(*GetApplicableApiOfAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CheckApiAccessOfApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckApiAccessOfAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckApiAccessOfApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckApiAccessOfApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckApiAccessOfApp(ctx, req.(*CheckApiAccessOfAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AuthoriseApiToApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthoriseApiToAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AuthoriseApiToApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AuthoriseApiToApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AuthoriseApiToApp(ctx, req.(*AuthoriseApiToAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetApiAccessApplicationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiAccessApplicationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetApiAccessApplicationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetApiAccessApplicationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetApiAccessApplicationList(ctx, req.(*GetApiAccessApplicationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AuditApiAccessApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditApiAccessApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AuditApiAccessApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AuditApiAccessApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AuditApiAccessApplication(ctx, req.(*AuditApiAccessApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetAccessToken(ctx, req.(*GetAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GatewayMiddileware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayMiddilewareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GatewayMiddileware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GatewayMiddileware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GatewayMiddileware(ctx, req.(*GatewayMiddilewareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_UserAuthorizeApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthorizeAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).UserAuthorizeApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_UserAuthorizeApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).UserAuthorizeApp(ctx, req.(*UserAuthorizeAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AppAuthorizedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAuthorizedTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AppAuthorizedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AppAuthorizedToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AppAuthorizedToken(ctx, req.(*AppAuthorizedTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetUserAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAuthorizationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetUserAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetUserAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetUserAuthorizations(ctx, req.(*GetUserAuthorizationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RBACService_ServiceDesc is the grpc.ServiceDesc for RBACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daop.pb.rbacpb.RBACService",
	HandlerType: (*RBACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleApiGroup",
			Handler:    _RBACService_HandleApiGroup_Handler,
		},
		{
			MethodName: "DeleteApiGroup",
			Handler:    _RBACService_DeleteApiGroup_Handler,
		},
		{
			MethodName: "GetApiGroupList",
			Handler:    _RBACService_GetApiGroupList_Handler,
		},
		{
			MethodName: "HandleApi",
			Handler:    _RBACService_HandleApi_Handler,
		},
		{
			MethodName: "DeleteApi",
			Handler:    _RBACService_DeleteApi_Handler,
		},
		{
			MethodName: "GetApiList",
			Handler:    _RBACService_GetApiList_Handler,
		},
		{
			MethodName: "GetApiByUri",
			Handler:    _RBACService_GetApiByUri_Handler,
		},
		{
			MethodName: "HandleAppGroup",
			Handler:    _RBACService_HandleAppGroup_Handler,
		},
		{
			MethodName: "DeleteAppGroup",
			Handler:    _RBACService_DeleteAppGroup_Handler,
		},
		{
			MethodName: "GetAppGroupList",
			Handler:    _RBACService_GetAppGroupList_Handler,
		},
		{
			MethodName: "HandleApp",
			Handler:    _RBACService_HandleApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _RBACService_DeleteApp_Handler,
		},
		{
			MethodName: "ApplyOnline",
			Handler:    _RBACService_ApplyOnline_Handler,
		},
		{
			MethodName: "AuditApp",
			Handler:    _RBACService_AuditApp_Handler,
		},
		{
			MethodName: "LockUnlockApp",
			Handler:    _RBACService_LockUnlockApp_Handler,
		},
		{
			MethodName: "BindAdministratorAccount",
			Handler:    _RBACService_BindAdministratorAccount_Handler,
		},
		{
			MethodName: "BindCollectionContract",
			Handler:    _RBACService_BindCollectionContract_Handler,
		},
		{
			MethodName: "GetAppList",
			Handler:    _RBACService_GetAppList_Handler,
		},
		{
			MethodName: "GetAppByAppNo",
			Handler:    _RBACService_GetAppByAppNo_Handler,
		},
		{
			MethodName: "GetAppKeyByAppNo",
			Handler:    _RBACService_GetAppKeyByAppNo_Handler,
		},
		{
			MethodName: "GetApplicableApiOfAppGroup",
			Handler:    _RBACService_GetApplicableApiOfAppGroup_Handler,
		},
		{
			MethodName: "AuthoriseApiToAppGroup",
			Handler:    _RBACService_AuthoriseApiToAppGroup_Handler,
		},
		{
			MethodName: "GetApplicableApiOfApp",
			Handler:    _RBACService_GetApplicableApiOfApp_Handler,
		},
		{
			MethodName: "CheckApiAccessOfApp",
			Handler:    _RBACService_CheckApiAccessOfApp_Handler,
		},
		{
			MethodName: "AuthoriseApiToApp",
			Handler:    _RBACService_AuthoriseApiToApp_Handler,
		},
		{
			MethodName: "GetApiAccessApplicationList",
			Handler:    _RBACService_GetApiAccessApplicationList_Handler,
		},
		{
			MethodName: "AuditApiAccessApplication",
			Handler:    _RBACService_AuditApiAccessApplication_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _RBACService_GetAccessToken_Handler,
		},
		{
			MethodName: "GatewayMiddileware",
			Handler:    _RBACService_GatewayMiddileware_Handler,
		},
		{
			MethodName: "UserAuthorizeApp",
			Handler:    _RBACService_UserAuthorizeApp_Handler,
		},
		{
			MethodName: "AppAuthorizedToken",
			Handler:    _RBACService_AppAuthorizedToken_Handler,
		},
		{
			MethodName: "GetUserAuthorizations",
			Handler:    _RBACService_GetUserAuthorizations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/rbacpb/rbac.proto",
}
