// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/rbacpb/rbac.proto

package rbacpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GatewayMiddilewareReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GatewayMiddilewareReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GatewayMiddilewareReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GatewayMiddilewareReqMultiError, or nil if none found.
func (m *GatewayMiddilewareReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GatewayMiddilewareReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for AppNo

	// no validation rules for AccessToken

	// no validation rules for UserToken

	// no validation rules for Version

	if len(errors) > 0 {
		return GatewayMiddilewareReqMultiError(errors)
	}

	return nil
}

// GatewayMiddilewareReqMultiError is an error wrapping multiple validation
// errors returned by GatewayMiddilewareReq.ValidateAll() if the designated
// constraints aren't met.
type GatewayMiddilewareReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GatewayMiddilewareReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GatewayMiddilewareReqMultiError) AllErrors() []error { return m }

// GatewayMiddilewareReqValidationError is the validation error returned by
// GatewayMiddilewareReq.Validate if the designated constraints aren't met.
type GatewayMiddilewareReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayMiddilewareReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayMiddilewareReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayMiddilewareReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayMiddilewareReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayMiddilewareReqValidationError) ErrorName() string {
	return "GatewayMiddilewareReqValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayMiddilewareReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayMiddilewareReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayMiddilewareReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayMiddilewareReqValidationError{}

// Validate checks the field values on GatewayMiddilewareResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GatewayMiddilewareResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GatewayMiddilewareResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GatewayMiddilewareRespMultiError, or nil if none found.
func (m *GatewayMiddilewareResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GatewayMiddilewareResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GatewayMiddilewareRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GatewayMiddilewareRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayMiddilewareRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GatewayMiddilewareRespMultiError(errors)
	}

	return nil
}

// GatewayMiddilewareRespMultiError is an error wrapping multiple validation
// errors returned by GatewayMiddilewareResp.ValidateAll() if the designated
// constraints aren't met.
type GatewayMiddilewareRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GatewayMiddilewareRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GatewayMiddilewareRespMultiError) AllErrors() []error { return m }

// GatewayMiddilewareRespValidationError is the validation error returned by
// GatewayMiddilewareResp.Validate if the designated constraints aren't met.
type GatewayMiddilewareRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayMiddilewareRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayMiddilewareRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayMiddilewareRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayMiddilewareRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayMiddilewareRespValidationError) ErrorName() string {
	return "GatewayMiddilewareRespValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayMiddilewareRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayMiddilewareResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayMiddilewareRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayMiddilewareRespValidationError{}

// Validate checks the field values on EmptyReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyReqMultiError, or nil
// if none found.
func (m *EmptyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetR()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EmptyReqValidationError{
					field:  "R",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EmptyReqValidationError{
					field:  "R",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetR()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmptyReqValidationError{
				field:  "R",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EmptyReqMultiError(errors)
	}

	return nil
}

// EmptyReqMultiError is an error wrapping multiple validation errors returned
// by EmptyReq.ValidateAll() if the designated constraints aren't met.
type EmptyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyReqMultiError) AllErrors() []error { return m }

// EmptyReqValidationError is the validation error returned by
// EmptyReq.Validate if the designated constraints aren't met.
type EmptyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyReqValidationError) ErrorName() string { return "EmptyReqValidationError" }

// Error satisfies the builtin error interface
func (e EmptyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyReqValidationError{}

// Validate checks the field values on BaseResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseRespMultiError, or nil
// if none found.
func (m *BaseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BaseRespMultiError(errors)
	}

	return nil
}

// BaseRespMultiError is an error wrapping multiple validation errors returned
// by BaseResp.ValidateAll() if the designated constraints aren't met.
type BaseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseRespMultiError) AllErrors() []error { return m }

// BaseRespValidationError is the validation error returned by
// BaseResp.Validate if the designated constraints aren't met.
type BaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseRespValidationError) ErrorName() string { return "BaseRespValidationError" }

// Error satisfies the builtin error interface
func (e BaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseRespValidationError{}

// Validate checks the field values on UpStatusReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpStatusReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpStatusReqMultiError, or
// nil if none found.
func (m *UpStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpStatusReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpStatusReqMultiError(errors)
	}

	return nil
}

// UpStatusReqMultiError is an error wrapping multiple validation errors
// returned by UpStatusReq.ValidateAll() if the designated constraints aren't met.
type UpStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpStatusReqMultiError) AllErrors() []error { return m }

// UpStatusReqValidationError is the validation error returned by
// UpStatusReq.Validate if the designated constraints aren't met.
type UpStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpStatusReqValidationError) ErrorName() string { return "UpStatusReqValidationError" }

// Error satisfies the builtin error interface
func (e UpStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpStatusReqValidationError{}

// Validate checks the field values on AuditReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditReqMultiError, or nil
// if none found.
func (m *AuditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AuditReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AuditReq_AuditStatus_InLookup[m.GetAuditStatus()]; !ok {
		err := AuditReqValidationError{
			field:  "AuditStatus",
			reason: "value must be in list [1 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RejectReason

	if len(errors) > 0 {
		return AuditReqMultiError(errors)
	}

	return nil
}

// AuditReqMultiError is an error wrapping multiple validation errors returned
// by AuditReq.ValidateAll() if the designated constraints aren't met.
type AuditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditReqMultiError) AllErrors() []error { return m }

// AuditReqValidationError is the validation error returned by
// AuditReq.Validate if the designated constraints aren't met.
type AuditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditReqValidationError) ErrorName() string { return "AuditReqValidationError" }

// Error satisfies the builtin error interface
func (e AuditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditReqValidationError{}

var _AuditReq_AuditStatus_InLookup = map[uint32]struct{}{
	1: {},
	4: {},
}

// Validate checks the field values on BindAdministratorAccountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BindAdministratorAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindAdministratorAccountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindAdministratorAccountReqMultiError, or nil if none found.
func (m *BindAdministratorAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BindAdministratorAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mobile

	// no validation rules for Email

	if len(errors) > 0 {
		return BindAdministratorAccountReqMultiError(errors)
	}

	return nil
}

// BindAdministratorAccountReqMultiError is an error wrapping multiple
// validation errors returned by BindAdministratorAccountReq.ValidateAll() if
// the designated constraints aren't met.
type BindAdministratorAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindAdministratorAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindAdministratorAccountReqMultiError) AllErrors() []error { return m }

// BindAdministratorAccountReqValidationError is the validation error returned
// by BindAdministratorAccountReq.Validate if the designated constraints
// aren't met.
type BindAdministratorAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindAdministratorAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindAdministratorAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindAdministratorAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindAdministratorAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindAdministratorAccountReqValidationError) ErrorName() string {
	return "BindAdministratorAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e BindAdministratorAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindAdministratorAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindAdministratorAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindAdministratorAccountReqValidationError{}

// Validate checks the field values on BindContractReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BindContractReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindContractReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindContractReqMultiError, or nil if none found.
func (m *BindContractReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BindContractReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := BindContractReqValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ContractAddress

	if len(errors) > 0 {
		return BindContractReqMultiError(errors)
	}

	return nil
}

// BindContractReqMultiError is an error wrapping multiple validation errors
// returned by BindContractReq.ValidateAll() if the designated constraints
// aren't met.
type BindContractReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindContractReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindContractReqMultiError) AllErrors() []error { return m }

// BindContractReqValidationError is the validation error returned by
// BindContractReq.Validate if the designated constraints aren't met.
type BindContractReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindContractReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindContractReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindContractReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindContractReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindContractReqValidationError) ErrorName() string { return "BindContractReqValidationError" }

// Error satisfies the builtin error interface
func (e BindContractReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindContractReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindContractReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindContractReqValidationError{}

// Validate checks the field values on GetAccessTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccessTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessTokenReqMultiError, or nil if none found.
func (m *GetAccessTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Alg

	if len(errors) > 0 {
		return GetAccessTokenReqMultiError(errors)
	}

	return nil
}

// GetAccessTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetAccessTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GetAccessTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenReqMultiError) AllErrors() []error { return m }

// GetAccessTokenReqValidationError is the validation error returned by
// GetAccessTokenReq.Validate if the designated constraints aren't met.
type GetAccessTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenReqValidationError) ErrorName() string {
	return "GetAccessTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenReqValidationError{}

// Validate checks the field values on AccessTokenData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccessTokenData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessTokenData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessTokenDataMultiError, or nil if none found.
func (m *AccessTokenData) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessTokenData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return AccessTokenDataMultiError(errors)
	}

	return nil
}

// AccessTokenDataMultiError is an error wrapping multiple validation errors
// returned by AccessTokenData.ValidateAll() if the designated constraints
// aren't met.
type AccessTokenDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessTokenDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessTokenDataMultiError) AllErrors() []error { return m }

// AccessTokenDataValidationError is the validation error returned by
// AccessTokenData.Validate if the designated constraints aren't met.
type AccessTokenDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessTokenDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessTokenDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessTokenDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessTokenDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessTokenDataValidationError) ErrorName() string { return "AccessTokenDataValidationError" }

// Error satisfies the builtin error interface
func (e AccessTokenDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessTokenData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessTokenDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessTokenDataValidationError{}

// Validate checks the field values on GetAccessTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessTokenRespMultiError, or nil if none found.
func (m *GetAccessTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccessTokenRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccessTokenRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccessTokenRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccessTokenRespMultiError(errors)
	}

	return nil
}

// GetAccessTokenRespMultiError is an error wrapping multiple validation errors
// returned by GetAccessTokenResp.ValidateAll() if the designated constraints
// aren't met.
type GetAccessTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenRespMultiError) AllErrors() []error { return m }

// GetAccessTokenRespValidationError is the validation error returned by
// GetAccessTokenResp.Validate if the designated constraints aren't met.
type GetAccessTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenRespValidationError) ErrorName() string {
	return "GetAccessTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenRespValidationError{}

// Validate checks the field values on ApiGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiGroupMultiError, or nil
// if none found.
func (m *ApiGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if utf8.RuneCountInString(m.GetGroupName()) < 1 {
		err := ApiGroupValidationError{
			field:  "GroupName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentId

	// no validation rules for ParentName

	// no validation rules for Remarks

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	if _, ok := _ApiGroup_Status_InLookup[m.GetStatus()]; !ok {
		err := ApiGroupValidationError{
			field:  "Status",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApiGroupMultiError(errors)
	}

	return nil
}

// ApiGroupMultiError is an error wrapping multiple validation errors returned
// by ApiGroup.ValidateAll() if the designated constraints aren't met.
type ApiGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiGroupMultiError) AllErrors() []error { return m }

// ApiGroupValidationError is the validation error returned by
// ApiGroup.Validate if the designated constraints aren't met.
type ApiGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiGroupValidationError) ErrorName() string { return "ApiGroupValidationError" }

// Error satisfies the builtin error interface
func (e ApiGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiGroupValidationError{}

var _ApiGroup_Status_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on HandleApiGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HandleApiGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleApiGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleApiGroupReqMultiError, or nil if none found.
func (m *HandleApiGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleApiGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HandleApiGroupReq_Action_InLookup[m.GetAction()]; !ok {
		err := HandleApiGroupReqValidationError{
			field:  "Action",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleApiGroupReqValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleApiGroupReqValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleApiGroupReqValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleApiGroupReqMultiError(errors)
	}

	return nil
}

// HandleApiGroupReqMultiError is an error wrapping multiple validation errors
// returned by HandleApiGroupReq.ValidateAll() if the designated constraints
// aren't met.
type HandleApiGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleApiGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleApiGroupReqMultiError) AllErrors() []error { return m }

// HandleApiGroupReqValidationError is the validation error returned by
// HandleApiGroupReq.Validate if the designated constraints aren't met.
type HandleApiGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleApiGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleApiGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleApiGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleApiGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleApiGroupReqValidationError) ErrorName() string {
	return "HandleApiGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e HandleApiGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleApiGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleApiGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleApiGroupReqValidationError{}

var _HandleApiGroupReq_Action_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

// Validate checks the field values on GetApiGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApiGroupListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApiGroupListReqMultiError, or nil if none found.
func (m *GetApiGroupListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiGroupListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetApiGroupListReqMultiError(errors)
	}

	return nil
}

// GetApiGroupListReqMultiError is an error wrapping multiple validation errors
// returned by GetApiGroupListReq.ValidateAll() if the designated constraints
// aren't met.
type GetApiGroupListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiGroupListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiGroupListReqMultiError) AllErrors() []error { return m }

// GetApiGroupListReqValidationError is the validation error returned by
// GetApiGroupListReq.Validate if the designated constraints aren't met.
type GetApiGroupListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiGroupListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiGroupListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiGroupListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiGroupListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiGroupListReqValidationError) ErrorName() string {
	return "GetApiGroupListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetApiGroupListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiGroupListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiGroupListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiGroupListReqValidationError{}

// Validate checks the field values on GetApiGroupListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApiGroupListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiGroupListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApiGroupListRespMultiError, or nil if none found.
func (m *GetApiGroupListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiGroupListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApiGroupListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApiGroupListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApiGroupListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApiGroupListRespMultiError(errors)
	}

	return nil
}

// GetApiGroupListRespMultiError is an error wrapping multiple validation
// errors returned by GetApiGroupListResp.ValidateAll() if the designated
// constraints aren't met.
type GetApiGroupListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiGroupListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiGroupListRespMultiError) AllErrors() []error { return m }

// GetApiGroupListRespValidationError is the validation error returned by
// GetApiGroupListResp.Validate if the designated constraints aren't met.
type GetApiGroupListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiGroupListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiGroupListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiGroupListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiGroupListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiGroupListRespValidationError) ErrorName() string {
	return "GetApiGroupListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetApiGroupListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiGroupListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiGroupListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiGroupListRespValidationError{}

// Validate checks the field values on Api with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Api) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Api with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ApiMultiError, or nil if none found.
func (m *Api) ValidateAll() error {
	return m.validate(true)
}

func (m *Api) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiId

	if m.GetApiGroupId() <= 0 {
		err := ApiValidationError{
			field:  "ApiGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiGroupName()) < 1 {
		err := ApiValidationError{
			field:  "ApiGroupName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetShowNameCn()) < 1 {
		err := ApiValidationError{
			field:  "ShowNameCn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ShowNameEn

	if utf8.RuneCountInString(m.GetRouterUri()) < 1 {
		err := ApiValidationError{
			field:  "RouterUri",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Icon

	// no validation rules for Ranking

	if _, ok := _Api_IsPublic_InLookup[m.GetIsPublic()]; !ok {
		err := ApiValidationError{
			field:  "IsPublic",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Api_NeedLogin_InLookup[m.GetNeedLogin()]; !ok {
		err := ApiValidationError{
			field:  "NeedLogin",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Api_NeedAuthorise_InLookup[m.GetNeedAuthorise()]; !ok {
		err := ApiValidationError{
			field:  "NeedAuthorise",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Api_InitState_InLookup[m.GetInitState()]; !ok {
		err := ApiValidationError{
			field:  "InitState",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remarks

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	if _, ok := _Api_Status_InLookup[m.GetStatus()]; !ok {
		err := ApiValidationError{
			field:  "Status",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApiMultiError(errors)
	}

	return nil
}

// ApiMultiError is an error wrapping multiple validation errors returned by
// Api.ValidateAll() if the designated constraints aren't met.
type ApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiMultiError) AllErrors() []error { return m }

// ApiValidationError is the validation error returned by Api.Validate if the
// designated constraints aren't met.
type ApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiValidationError) ErrorName() string { return "ApiValidationError" }

// Error satisfies the builtin error interface
func (e ApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiValidationError{}

var _Api_IsPublic_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

var _Api_NeedLogin_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

var _Api_NeedAuthorise_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

var _Api_InitState_InLookup = map[uint32]struct{}{
	1: {},
	2: {},
}

var _Api_Status_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on HandleApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HandleApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HandleApiReqMultiError, or
// nil if none found.
func (m *HandleApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HandleApiReq_Action_InLookup[m.GetAction()]; !ok {
		err := HandleApiReqValidationError{
			field:  "Action",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleApiReqValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleApiReqValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleApiReqValidationError{
				field:  "Api",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleApiReqMultiError(errors)
	}

	return nil
}

// HandleApiReqMultiError is an error wrapping multiple validation errors
// returned by HandleApiReq.ValidateAll() if the designated constraints aren't met.
type HandleApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleApiReqMultiError) AllErrors() []error { return m }

// HandleApiReqValidationError is the validation error returned by
// HandleApiReq.Validate if the designated constraints aren't met.
type HandleApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleApiReqValidationError) ErrorName() string { return "HandleApiReqValidationError" }

// Error satisfies the builtin error interface
func (e HandleApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleApiReqValidationError{}

var _HandleApiReq_Action_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

// Validate checks the field values on GetApiListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiListReqMultiError, or
// nil if none found.
func (m *GetApiListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiGroupId

	// no validation rules for RouterUri

	// no validation rules for IsPublic

	// no validation rules for NeedLogin

	// no validation rules for NeedAuthorise

	// no validation rules for InitState

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	// no validation rules for Status

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetApiListReqMultiError(errors)
	}

	return nil
}

// GetApiListReqMultiError is an error wrapping multiple validation errors
// returned by GetApiListReq.ValidateAll() if the designated constraints
// aren't met.
type GetApiListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiListReqMultiError) AllErrors() []error { return m }

// GetApiListReqValidationError is the validation error returned by
// GetApiListReq.Validate if the designated constraints aren't met.
type GetApiListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiListReqValidationError) ErrorName() string { return "GetApiListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetApiListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiListReqValidationError{}

// Validate checks the field values on GetApiResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiRespMultiError, or
// nil if none found.
func (m *GetApiResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApiRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApiRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApiRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApiRespMultiError(errors)
	}

	return nil
}

// GetApiRespMultiError is an error wrapping multiple validation errors
// returned by GetApiResp.ValidateAll() if the designated constraints aren't met.
type GetApiRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiRespMultiError) AllErrors() []error { return m }

// GetApiRespValidationError is the validation error returned by
// GetApiResp.Validate if the designated constraints aren't met.
type GetApiRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiRespValidationError) ErrorName() string { return "GetApiRespValidationError" }

// Error satisfies the builtin error interface
func (e GetApiRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiRespValidationError{}

// Validate checks the field values on GetApiListResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiListRespMultiError,
// or nil if none found.
func (m *GetApiListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApiListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApiListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApiListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApiListRespMultiError(errors)
	}

	return nil
}

// GetApiListRespMultiError is an error wrapping multiple validation errors
// returned by GetApiListResp.ValidateAll() if the designated constraints
// aren't met.
type GetApiListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiListRespMultiError) AllErrors() []error { return m }

// GetApiListRespValidationError is the validation error returned by
// GetApiListResp.Validate if the designated constraints aren't met.
type GetApiListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiListRespValidationError) ErrorName() string { return "GetApiListRespValidationError" }

// Error satisfies the builtin error interface
func (e GetApiListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiListRespValidationError{}

// Validate checks the field values on GetApiByUriReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiByUriReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiByUriReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiByUriReqMultiError,
// or nil if none found.
func (m *GetApiByUriReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiByUriReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUri()) < 1 {
		err := GetApiByUriReqValidationError{
			field:  "Uri",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApiByUriReqMultiError(errors)
	}

	return nil
}

// GetApiByUriReqMultiError is an error wrapping multiple validation errors
// returned by GetApiByUriReq.ValidateAll() if the designated constraints
// aren't met.
type GetApiByUriReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiByUriReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiByUriReqMultiError) AllErrors() []error { return m }

// GetApiByUriReqValidationError is the validation error returned by
// GetApiByUriReq.Validate if the designated constraints aren't met.
type GetApiByUriReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiByUriReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiByUriReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiByUriReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiByUriReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiByUriReqValidationError) ErrorName() string { return "GetApiByUriReqValidationError" }

// Error satisfies the builtin error interface
func (e GetApiByUriReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiByUriReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiByUriReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiByUriReqValidationError{}

// Validate checks the field values on CheckApiAccessOfAppReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckApiAccessOfAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckApiAccessOfAppReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckApiAccessOfAppReqMultiError, or nil if none found.
func (m *CheckApiAccessOfAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckApiAccessOfAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppGroupId

	// no validation rules for AppId

	// no validation rules for ApiId

	if len(errors) > 0 {
		return CheckApiAccessOfAppReqMultiError(errors)
	}

	return nil
}

// CheckApiAccessOfAppReqMultiError is an error wrapping multiple validation
// errors returned by CheckApiAccessOfAppReq.ValidateAll() if the designated
// constraints aren't met.
type CheckApiAccessOfAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckApiAccessOfAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckApiAccessOfAppReqMultiError) AllErrors() []error { return m }

// CheckApiAccessOfAppReqValidationError is the validation error returned by
// CheckApiAccessOfAppReq.Validate if the designated constraints aren't met.
type CheckApiAccessOfAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckApiAccessOfAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckApiAccessOfAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckApiAccessOfAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckApiAccessOfAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckApiAccessOfAppReqValidationError) ErrorName() string {
	return "CheckApiAccessOfAppReqValidationError"
}

// Error satisfies the builtin error interface
func (e CheckApiAccessOfAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckApiAccessOfAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckApiAccessOfAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckApiAccessOfAppReqValidationError{}

// Validate checks the field values on AppGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppGroupMultiError, or nil
// if none found.
func (m *AppGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *AppGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if utf8.RuneCountInString(m.GetGroupName()) < 1 {
		err := AppGroupValidationError{
			field:  "GroupName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsSelfSupport

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	if _, ok := _AppGroup_Status_InLookup[m.GetStatus()]; !ok {
		err := AppGroupValidationError{
			field:  "Status",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AppGroupMultiError(errors)
	}

	return nil
}

// AppGroupMultiError is an error wrapping multiple validation errors returned
// by AppGroup.ValidateAll() if the designated constraints aren't met.
type AppGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppGroupMultiError) AllErrors() []error { return m }

// AppGroupValidationError is the validation error returned by
// AppGroup.Validate if the designated constraints aren't met.
type AppGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppGroupValidationError) ErrorName() string { return "AppGroupValidationError" }

// Error satisfies the builtin error interface
func (e AppGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppGroupValidationError{}

var _AppGroup_Status_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on HandleAppGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HandleAppGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleAppGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleAppGroupReqMultiError, or nil if none found.
func (m *HandleAppGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleAppGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HandleAppGroupReq_Action_InLookup[m.GetAction()]; !ok {
		err := HandleAppGroupReqValidationError{
			field:  "Action",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleAppGroupReqValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleAppGroupReqValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleAppGroupReqValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleAppGroupReqMultiError(errors)
	}

	return nil
}

// HandleAppGroupReqMultiError is an error wrapping multiple validation errors
// returned by HandleAppGroupReq.ValidateAll() if the designated constraints
// aren't met.
type HandleAppGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleAppGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleAppGroupReqMultiError) AllErrors() []error { return m }

// HandleAppGroupReqValidationError is the validation error returned by
// HandleAppGroupReq.Validate if the designated constraints aren't met.
type HandleAppGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleAppGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleAppGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleAppGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleAppGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleAppGroupReqValidationError) ErrorName() string {
	return "HandleAppGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e HandleAppGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleAppGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleAppGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleAppGroupReqValidationError{}

var _HandleAppGroupReq_Action_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

// Validate checks the field values on GetAppGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppGroupListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppGroupListReqMultiError, or nil if none found.
func (m *GetAppGroupListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppGroupListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetAppGroupListReqMultiError(errors)
	}

	return nil
}

// GetAppGroupListReqMultiError is an error wrapping multiple validation errors
// returned by GetAppGroupListReq.ValidateAll() if the designated constraints
// aren't met.
type GetAppGroupListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppGroupListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppGroupListReqMultiError) AllErrors() []error { return m }

// GetAppGroupListReqValidationError is the validation error returned by
// GetAppGroupListReq.Validate if the designated constraints aren't met.
type GetAppGroupListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppGroupListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppGroupListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppGroupListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppGroupListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppGroupListReqValidationError) ErrorName() string {
	return "GetAppGroupListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppGroupListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppGroupListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppGroupListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppGroupListReqValidationError{}

// Validate checks the field values on GetAppGroupListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppGroupListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppGroupListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppGroupListRespMultiError, or nil if none found.
func (m *GetAppGroupListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppGroupListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppGroupListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppGroupListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppGroupListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppGroupListRespMultiError(errors)
	}

	return nil
}

// GetAppGroupListRespMultiError is an error wrapping multiple validation
// errors returned by GetAppGroupListResp.ValidateAll() if the designated
// constraints aren't met.
type GetAppGroupListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppGroupListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppGroupListRespMultiError) AllErrors() []error { return m }

// GetAppGroupListRespValidationError is the validation error returned by
// GetAppGroupListResp.Validate if the designated constraints aren't met.
type GetAppGroupListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppGroupListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppGroupListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppGroupListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppGroupListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppGroupListRespValidationError) ErrorName() string {
	return "GetAppGroupListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppGroupListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppGroupListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppGroupListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppGroupListRespValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	if m.GetAppGroupId() <= 0 {
		err := AppValidationError{
			field:  "AppGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppGroupName()) < 1 {
		err := AppValidationError{
			field:  "AppGroupName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppNo

	if utf8.RuneCountInString(m.GetAppName()) < 1 {
		err := AppValidationError{
			field:  "AppName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppLogo

	if _, ok := _App_AppType_InLookup[m.GetAppType()]; !ok {
		err := AppValidationError{
			field:  "AppType",
			reason: "value must be in list [0 1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppUrl

	// no validation rules for GatewayUrl

	// no validation rules for Oauth2Url

	if _, ok := _App_EncryptType_InLookup[m.GetEncryptType()]; !ok {
		err := AppValidationError{
			field:  "EncryptType",
			reason: "value must be in list [0 1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for JwtSecretKey

	// no validation rules for RsaPublicKey

	// no validation rules for AesCipher

	if _, ok := _App_ClientType_InLookup[m.GetClientType()]; !ok {
		err := AppValidationError{
			field:  "ClientType",
			reason: "value must be in list [0 1 2 3 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	// no validation rules for AccessIp

	// no validation rules for Remarks

	// no validation rules for CreatorAccountId

	// no validation rules for AdministratorAccountId

	// no validation rules for ContractAddress

	// no validation rules for ApplyTime

	// no validation rules for ApplicationMaterial

	if _, ok := _App_AuditStatus_InLookup[m.GetAuditStatus()]; !ok {
		err := AppValidationError{
			field:  "AuditStatus",
			reason: "value must be in list [0 1 2 3 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _App_IsOnline_InLookup[m.GetIsOnline()]; !ok {
		err := AppValidationError{
			field:  "IsOnline",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuditTime

	// no validation rules for OperatorAccountId

	// no validation rules for RejectReason

	if _, ok := _App_InitState_InLookup[m.GetInitState()]; !ok {
		err := AppValidationError{
			field:  "InitState",
			reason: "value must be in list [0 1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	if _, ok := _App_Status_InLookup[m.GetStatus()]; !ok {
		err := AppValidationError{
			field:  "Status",
			reason: "value must be in list [0 1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

var _App_AppType_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

var _App_EncryptType_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
}

var _App_ClientType_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
}

var _App_AuditStatus_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
}

var _App_IsOnline_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

var _App_InitState_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
}

var _App_Status_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
}

// Validate checks the field values on HandleAppReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HandleAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleAppReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HandleAppReqMultiError, or
// nil if none found.
func (m *HandleAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HandleAppReq_Action_InLookup[m.GetAction()]; !ok {
		err := HandleAppReqValidationError{
			field:  "Action",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleAppReqValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleAppReqValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleAppReqValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleAppReqMultiError(errors)
	}

	return nil
}

// HandleAppReqMultiError is an error wrapping multiple validation errors
// returned by HandleAppReq.ValidateAll() if the designated constraints aren't met.
type HandleAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleAppReqMultiError) AllErrors() []error { return m }

// HandleAppReqValidationError is the validation error returned by
// HandleAppReq.Validate if the designated constraints aren't met.
type HandleAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleAppReqValidationError) ErrorName() string { return "HandleAppReqValidationError" }

// Error satisfies the builtin error interface
func (e HandleAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleAppReqValidationError{}

var _HandleAppReq_Action_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

// Validate checks the field values on GetAppListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppListReqMultiError, or
// nil if none found.
func (m *GetAppListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppGroupId

	if _, ok := _GetAppListReq_AppType_InLookup[m.GetAppType()]; !ok {
		err := GetAppListReqValidationError{
			field:  "AppType",
			reason: "value must be in list [0 1 2 3 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetAppListReq_ClientType_InLookup[m.GetClientType()]; !ok {
		err := GetAppListReqValidationError{
			field:  "ClientType",
			reason: "value must be in list [0 1 2 3 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatorAccountId

	// no validation rules for AdministratorAccountId

	// no validation rules for ApplyTime

	if _, ok := _GetAppListReq_AuditStatus_InLookup[m.GetAuditStatus()]; !ok {
		err := GetAppListReqValidationError{
			field:  "AuditStatus",
			reason: "value must be in list [0 1 2 3 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuditTime

	// no validation rules for OperatorAccountId

	if _, ok := _GetAppListReq_InitState_InLookup[m.GetInitState()]; !ok {
		err := GetAppListReqValidationError{
			field:  "InitState",
			reason: "value must be in list [0 1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	if _, ok := _GetAppListReq_Status_InLookup[m.GetStatus()]; !ok {
		err := GetAppListReqValidationError{
			field:  "Status",
			reason: "value must be in list [0 1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetAppListReqMultiError(errors)
	}

	return nil
}

// GetAppListReqMultiError is an error wrapping multiple validation errors
// returned by GetAppListReq.ValidateAll() if the designated constraints
// aren't met.
type GetAppListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppListReqMultiError) AllErrors() []error { return m }

// GetAppListReqValidationError is the validation error returned by
// GetAppListReq.Validate if the designated constraints aren't met.
type GetAppListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppListReqValidationError) ErrorName() string { return "GetAppListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAppListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppListReqValidationError{}

var _GetAppListReq_AppType_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
}

var _GetAppListReq_ClientType_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
}

var _GetAppListReq_AuditStatus_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
}

var _GetAppListReq_InitState_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
}

var _GetAppListReq_Status_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
}

// Validate checks the field values on GetAppKeyByAppNoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppKeyByAppNoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppKeyByAppNoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppKeyByAppNoReqMultiError, or nil if none found.
func (m *GetAppKeyByAppNoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppKeyByAppNoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppNo()) < 1 {
		err := GetAppKeyByAppNoReqValidationError{
			field:  "AppNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMobile()) < 1 {
		err := GetAppKeyByAppNoReqValidationError{
			field:  "Mobile",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCode() <= 0 {
		err := GetAppKeyByAppNoReqValidationError{
			field:  "Code",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CodeType

	if len(errors) > 0 {
		return GetAppKeyByAppNoReqMultiError(errors)
	}

	return nil
}

// GetAppKeyByAppNoReqMultiError is an error wrapping multiple validation
// errors returned by GetAppKeyByAppNoReq.ValidateAll() if the designated
// constraints aren't met.
type GetAppKeyByAppNoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppKeyByAppNoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppKeyByAppNoReqMultiError) AllErrors() []error { return m }

// GetAppKeyByAppNoReqValidationError is the validation error returned by
// GetAppKeyByAppNoReq.Validate if the designated constraints aren't met.
type GetAppKeyByAppNoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppKeyByAppNoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppKeyByAppNoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppKeyByAppNoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppKeyByAppNoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppKeyByAppNoReqValidationError) ErrorName() string {
	return "GetAppKeyByAppNoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppKeyByAppNoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppKeyByAppNoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppKeyByAppNoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppKeyByAppNoReqValidationError{}

// Validate checks the field values on GetAppByAppNoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAppByAppNoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppByAppNoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppByAppNoReqMultiError, or nil if none found.
func (m *GetAppByAppNoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppByAppNoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppNo()) < 1 {
		err := GetAppByAppNoReqValidationError{
			field:  "AppNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAppByAppNoReqMultiError(errors)
	}

	return nil
}

// GetAppByAppNoReqMultiError is an error wrapping multiple validation errors
// returned by GetAppByAppNoReq.ValidateAll() if the designated constraints
// aren't met.
type GetAppByAppNoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppByAppNoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppByAppNoReqMultiError) AllErrors() []error { return m }

// GetAppByAppNoReqValidationError is the validation error returned by
// GetAppByAppNoReq.Validate if the designated constraints aren't met.
type GetAppByAppNoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppByAppNoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppByAppNoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppByAppNoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppByAppNoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppByAppNoReqValidationError) ErrorName() string { return "GetAppByAppNoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAppByAppNoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppByAppNoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppByAppNoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppByAppNoReqValidationError{}

// Validate checks the field values on ApplyOnlineReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApplyOnlineReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyOnlineReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplyOnlineReqMultiError,
// or nil if none found.
func (m *ApplyOnlineReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyOnlineReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := ApplyOnlineReqValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ApplicationMaterial

	if len(errors) > 0 {
		return ApplyOnlineReqMultiError(errors)
	}

	return nil
}

// ApplyOnlineReqMultiError is an error wrapping multiple validation errors
// returned by ApplyOnlineReq.ValidateAll() if the designated constraints
// aren't met.
type ApplyOnlineReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyOnlineReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyOnlineReqMultiError) AllErrors() []error { return m }

// ApplyOnlineReqValidationError is the validation error returned by
// ApplyOnlineReq.Validate if the designated constraints aren't met.
type ApplyOnlineReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyOnlineReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyOnlineReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyOnlineReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyOnlineReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyOnlineReqValidationError) ErrorName() string { return "ApplyOnlineReqValidationError" }

// Error satisfies the builtin error interface
func (e ApplyOnlineReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyOnlineReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyOnlineReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyOnlineReqValidationError{}

// Validate checks the field values on GetAppResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppRespMultiError, or
// nil if none found.
func (m *GetAppResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAppRespMultiError(errors)
	}

	return nil
}

// GetAppRespMultiError is an error wrapping multiple validation errors
// returned by GetAppResp.ValidateAll() if the designated constraints aren't met.
type GetAppRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppRespMultiError) AllErrors() []error { return m }

// GetAppRespValidationError is the validation error returned by
// GetAppResp.Validate if the designated constraints aren't met.
type GetAppRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppRespValidationError) ErrorName() string { return "GetAppRespValidationError" }

// Error satisfies the builtin error interface
func (e GetAppRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppRespValidationError{}

// Validate checks the field values on GetAppListResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppListRespMultiError,
// or nil if none found.
func (m *GetAppListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppListRespMultiError(errors)
	}

	return nil
}

// GetAppListRespMultiError is an error wrapping multiple validation errors
// returned by GetAppListResp.ValidateAll() if the designated constraints
// aren't met.
type GetAppListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppListRespMultiError) AllErrors() []error { return m }

// GetAppListRespValidationError is the validation error returned by
// GetAppListResp.Validate if the designated constraints aren't met.
type GetAppListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppListRespValidationError) ErrorName() string { return "GetAppListRespValidationError" }

// Error satisfies the builtin error interface
func (e GetAppListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppListRespValidationError{}

// Validate checks the field values on AppGroupApi with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppGroupApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppGroupApi with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppGroupApiMultiError, or
// nil if none found.
func (m *AppGroupApi) ValidateAll() error {
	return m.validate(true)
}

func (m *AppGroupApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetAppGroupId() <= 0 {
		err := AppGroupApiValidationError{
			field:  "AppGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetApiId() <= 0 {
		err := AppGroupApiValidationError{
			field:  "ApiId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	if _, ok := _AppGroupApi_Status_InLookup[m.GetStatus()]; !ok {
		err := AppGroupApiValidationError{
			field:  "Status",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AppGroupApiMultiError(errors)
	}

	return nil
}

// AppGroupApiMultiError is an error wrapping multiple validation errors
// returned by AppGroupApi.ValidateAll() if the designated constraints aren't met.
type AppGroupApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppGroupApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppGroupApiMultiError) AllErrors() []error { return m }

// AppGroupApiValidationError is the validation error returned by
// AppGroupApi.Validate if the designated constraints aren't met.
type AppGroupApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppGroupApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppGroupApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppGroupApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppGroupApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppGroupApiValidationError) ErrorName() string { return "AppGroupApiValidationError" }

// Error satisfies the builtin error interface
func (e AppGroupApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppGroupApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppGroupApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppGroupApiValidationError{}

var _AppGroupApi_Status_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on AppApi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppApi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppApiMultiError, or nil if none found.
func (m *AppApi) ValidateAll() error {
	return m.validate(true)
}

func (m *AppApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetAppNo()) < 1 {
		err := AppApiValidationError{
			field:  "AppNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetApiId() <= 0 {
		err := AppApiValidationError{
			field:  "ApiId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	if _, ok := _AppApi_Status_InLookup[m.GetStatus()]; !ok {
		err := AppApiValidationError{
			field:  "Status",
			reason: "value must be in list [0 1 2 3 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AppApiMultiError(errors)
	}

	return nil
}

// AppApiMultiError is an error wrapping multiple validation errors returned by
// AppApi.ValidateAll() if the designated constraints aren't met.
type AppApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppApiMultiError) AllErrors() []error { return m }

// AppApiValidationError is the validation error returned by AppApi.Validate if
// the designated constraints aren't met.
type AppApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppApiValidationError) ErrorName() string { return "AppApiValidationError" }

// Error satisfies the builtin error interface
func (e AppApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppApiValidationError{}

var _AppApi_Status_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
}

// Validate checks the field values on ApplicableApi with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApplicableApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicableApi with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplicableApiMultiError, or
// nil if none found.
func (m *ApplicableApi) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicableApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if utf8.RuneCountInString(m.GetGroupName()) < 1 {
		err := ApplicableApiValidationError{
			field:  "GroupName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGroupParentId() <= 0 {
		err := ApplicableApiValidationError{
			field:  "GroupParentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupParentName()) < 1 {
		err := ApplicableApiValidationError{
			field:  "GroupParentName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ApiId

	if utf8.RuneCountInString(m.GetShowNameCn()) < 1 {
		err := ApplicableApiValidationError{
			field:  "ShowNameCn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ShowNameEn

	if utf8.RuneCountInString(m.GetRouterUri()) < 1 {
		err := ApplicableApiValidationError{
			field:  "RouterUri",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Icon

	// no validation rules for Ranking

	if _, ok := _ApplicableApi_IsPublic_InLookup[m.GetIsPublic()]; !ok {
		err := ApplicableApiValidationError{
			field:  "IsPublic",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ApplicableApi_NeedLogin_InLookup[m.GetNeedLogin()]; !ok {
		err := ApplicableApiValidationError{
			field:  "NeedLogin",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ApplicableApi_NeedAuthorise_InLookup[m.GetNeedAuthorise()]; !ok {
		err := ApplicableApiValidationError{
			field:  "NeedAuthorise",
			reason: "value must be in list [2 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ApplicableApi_InitState_InLookup[m.GetInitState()]; !ok {
		err := ApplicableApiValidationError{
			field:  "InitState",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ApplicableApi_Status_InLookup[m.GetStatus()]; !ok {
		err := ApplicableApiValidationError{
			field:  "Status",
			reason: "value must be in list [0 1 2 3 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApplicableApiMultiError(errors)
	}

	return nil
}

// ApplicableApiMultiError is an error wrapping multiple validation errors
// returned by ApplicableApi.ValidateAll() if the designated constraints
// aren't met.
type ApplicableApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicableApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicableApiMultiError) AllErrors() []error { return m }

// ApplicableApiValidationError is the validation error returned by
// ApplicableApi.Validate if the designated constraints aren't met.
type ApplicableApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicableApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicableApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicableApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicableApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicableApiValidationError) ErrorName() string { return "ApplicableApiValidationError" }

// Error satisfies the builtin error interface
func (e ApplicableApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicableApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicableApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicableApiValidationError{}

var _ApplicableApi_IsPublic_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

var _ApplicableApi_NeedLogin_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

var _ApplicableApi_NeedAuthorise_InLookup = map[uint32]struct{}{
	2: {},
	1: {},
}

var _ApplicableApi_InitState_InLookup = map[uint32]struct{}{
	1: {},
	2: {},
}

var _ApplicableApi_Status_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
}

// Validate checks the field values on GetApplicableApiListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicableApiListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicableApiListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicableApiListRespMultiError, or nil if none found.
func (m *GetApplicableApiListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicableApiListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApplicableApiListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApplicableApiListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApplicableApiListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApplicableApiListRespMultiError(errors)
	}

	return nil
}

// GetApplicableApiListRespMultiError is an error wrapping multiple validation
// errors returned by GetApplicableApiListResp.ValidateAll() if the designated
// constraints aren't met.
type GetApplicableApiListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicableApiListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicableApiListRespMultiError) AllErrors() []error { return m }

// GetApplicableApiListRespValidationError is the validation error returned by
// GetApplicableApiListResp.Validate if the designated constraints aren't met.
type GetApplicableApiListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicableApiListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicableApiListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicableApiListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicableApiListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicableApiListRespValidationError) ErrorName() string {
	return "GetApplicableApiListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicableApiListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicableApiListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicableApiListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicableApiListRespValidationError{}

// Validate checks the field values on GetApplicableApiOfAppGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicableApiOfAppGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicableApiOfAppGroupReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetApplicableApiOfAppGroupReqMultiError, or nil if none found.
func (m *GetApplicableApiOfAppGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicableApiOfAppGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := GetApplicableApiOfAppGroupReqValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApplicableApiOfAppGroupReqMultiError(errors)
	}

	return nil
}

// GetApplicableApiOfAppGroupReqMultiError is an error wrapping multiple
// validation errors returned by GetApplicableApiOfAppGroupReq.ValidateAll()
// if the designated constraints aren't met.
type GetApplicableApiOfAppGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicableApiOfAppGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicableApiOfAppGroupReqMultiError) AllErrors() []error { return m }

// GetApplicableApiOfAppGroupReqValidationError is the validation error
// returned by GetApplicableApiOfAppGroupReq.Validate if the designated
// constraints aren't met.
type GetApplicableApiOfAppGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicableApiOfAppGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicableApiOfAppGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicableApiOfAppGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicableApiOfAppGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicableApiOfAppGroupReqValidationError) ErrorName() string {
	return "GetApplicableApiOfAppGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicableApiOfAppGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicableApiOfAppGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicableApiOfAppGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicableApiOfAppGroupReqValidationError{}

// Validate checks the field values on AuthoriseApiToAppGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthoriseApiToAppGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthoriseApiToAppGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthoriseApiToAppGroupReqMultiError, or nil if none found.
func (m *AuthoriseApiToAppGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthoriseApiToAppGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := AuthoriseApiToAppGroupReqValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthoriseApiToAppGroupReqMultiError(errors)
	}

	return nil
}

// AuthoriseApiToAppGroupReqMultiError is an error wrapping multiple validation
// errors returned by AuthoriseApiToAppGroupReq.ValidateAll() if the
// designated constraints aren't met.
type AuthoriseApiToAppGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthoriseApiToAppGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthoriseApiToAppGroupReqMultiError) AllErrors() []error { return m }

// AuthoriseApiToAppGroupReqValidationError is the validation error returned by
// AuthoriseApiToAppGroupReq.Validate if the designated constraints aren't met.
type AuthoriseApiToAppGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthoriseApiToAppGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthoriseApiToAppGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthoriseApiToAppGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthoriseApiToAppGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthoriseApiToAppGroupReqValidationError) ErrorName() string {
	return "AuthoriseApiToAppGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e AuthoriseApiToAppGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthoriseApiToAppGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthoriseApiToAppGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthoriseApiToAppGroupReqValidationError{}

// Validate checks the field values on GetApplicableApiOfAppReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicableApiOfAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicableApiOfAppReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicableApiOfAppReqMultiError, or nil if none found.
func (m *GetApplicableApiOfAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicableApiOfAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppNo()) < 1 {
		err := GetApplicableApiOfAppReqValidationError{
			field:  "AppNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApplicableApiOfAppReqMultiError(errors)
	}

	return nil
}

// GetApplicableApiOfAppReqMultiError is an error wrapping multiple validation
// errors returned by GetApplicableApiOfAppReq.ValidateAll() if the designated
// constraints aren't met.
type GetApplicableApiOfAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicableApiOfAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicableApiOfAppReqMultiError) AllErrors() []error { return m }

// GetApplicableApiOfAppReqValidationError is the validation error returned by
// GetApplicableApiOfAppReq.Validate if the designated constraints aren't met.
type GetApplicableApiOfAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicableApiOfAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicableApiOfAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicableApiOfAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicableApiOfAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicableApiOfAppReqValidationError) ErrorName() string {
	return "GetApplicableApiOfAppReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicableApiOfAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicableApiOfAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicableApiOfAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicableApiOfAppReqValidationError{}

// Validate checks the field values on AuthoriseApiToAppReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthoriseApiToAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthoriseApiToAppReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthoriseApiToAppReqMultiError, or nil if none found.
func (m *AuthoriseApiToAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthoriseApiToAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppNo()) < 1 {
		err := AuthoriseApiToAppReqValidationError{
			field:  "AppNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthoriseApiToAppReqMultiError(errors)
	}

	return nil
}

// AuthoriseApiToAppReqMultiError is an error wrapping multiple validation
// errors returned by AuthoriseApiToAppReq.ValidateAll() if the designated
// constraints aren't met.
type AuthoriseApiToAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthoriseApiToAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthoriseApiToAppReqMultiError) AllErrors() []error { return m }

// AuthoriseApiToAppReqValidationError is the validation error returned by
// AuthoriseApiToAppReq.Validate if the designated constraints aren't met.
type AuthoriseApiToAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthoriseApiToAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthoriseApiToAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthoriseApiToAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthoriseApiToAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthoriseApiToAppReqValidationError) ErrorName() string {
	return "AuthoriseApiToAppReqValidationError"
}

// Error satisfies the builtin error interface
func (e AuthoriseApiToAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthoriseApiToAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthoriseApiToAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthoriseApiToAppReqValidationError{}

// Validate checks the field values on AuditApiAccessApplicationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditApiAccessApplicationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditApiAccessApplicationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditApiAccessApplicationReqMultiError, or nil if none found.
func (m *AuditApiAccessApplicationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditApiAccessApplicationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppNo()) < 1 {
		err := AuditApiAccessApplicationReqValidationError{
			field:  "AppNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetApiId() <= 0 {
		err := AuditApiAccessApplicationReqValidationError{
			field:  "ApiId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AuditApiAccessApplicationReq_AuditStatus_InLookup[m.GetAuditStatus()]; !ok {
		err := AuditApiAccessApplicationReqValidationError{
			field:  "AuditStatus",
			reason: "value must be in list [1 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RejectReason

	if len(errors) > 0 {
		return AuditApiAccessApplicationReqMultiError(errors)
	}

	return nil
}

// AuditApiAccessApplicationReqMultiError is an error wrapping multiple
// validation errors returned by AuditApiAccessApplicationReq.ValidateAll() if
// the designated constraints aren't met.
type AuditApiAccessApplicationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditApiAccessApplicationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditApiAccessApplicationReqMultiError) AllErrors() []error { return m }

// AuditApiAccessApplicationReqValidationError is the validation error returned
// by AuditApiAccessApplicationReq.Validate if the designated constraints
// aren't met.
type AuditApiAccessApplicationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditApiAccessApplicationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditApiAccessApplicationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditApiAccessApplicationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditApiAccessApplicationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditApiAccessApplicationReqValidationError) ErrorName() string {
	return "AuditApiAccessApplicationReqValidationError"
}

// Error satisfies the builtin error interface
func (e AuditApiAccessApplicationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditApiAccessApplicationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditApiAccessApplicationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditApiAccessApplicationReqValidationError{}

var _AuditApiAccessApplicationReq_AuditStatus_InLookup = map[uint32]struct{}{
	1: {},
	4: {},
}

// Validate checks the field values on GetApiAccessApplicationListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApiAccessApplicationListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiAccessApplicationListReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetApiAccessApplicationListReqMultiError, or nil if none found.
func (m *GetApiAccessApplicationListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiAccessApplicationListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppNo

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	if _, ok := _GetApiAccessApplicationListReq_Status_InLookup[m.GetStatus()]; !ok {
		err := GetApiAccessApplicationListReqValidationError{
			field:  "Status",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetApiAccessApplicationListReqMultiError(errors)
	}

	return nil
}

// GetApiAccessApplicationListReqMultiError is an error wrapping multiple
// validation errors returned by GetApiAccessApplicationListReq.ValidateAll()
// if the designated constraints aren't met.
type GetApiAccessApplicationListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiAccessApplicationListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiAccessApplicationListReqMultiError) AllErrors() []error { return m }

// GetApiAccessApplicationListReqValidationError is the validation error
// returned by GetApiAccessApplicationListReq.Validate if the designated
// constraints aren't met.
type GetApiAccessApplicationListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiAccessApplicationListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiAccessApplicationListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiAccessApplicationListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiAccessApplicationListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiAccessApplicationListReqValidationError) ErrorName() string {
	return "GetApiAccessApplicationListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetApiAccessApplicationListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiAccessApplicationListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiAccessApplicationListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiAccessApplicationListReqValidationError{}

var _GetApiAccessApplicationListReq_Status_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on GetApiAccessApplicationListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApiAccessApplicationListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiAccessApplicationListResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetApiAccessApplicationListRespMultiError, or nil if none found.
func (m *GetApiAccessApplicationListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiAccessApplicationListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApiAccessApplicationListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApiAccessApplicationListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApiAccessApplicationListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApiAccessApplicationListRespMultiError(errors)
	}

	return nil
}

// GetApiAccessApplicationListRespMultiError is an error wrapping multiple
// validation errors returned by GetApiAccessApplicationListResp.ValidateAll()
// if the designated constraints aren't met.
type GetApiAccessApplicationListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiAccessApplicationListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiAccessApplicationListRespMultiError) AllErrors() []error { return m }

// GetApiAccessApplicationListRespValidationError is the validation error
// returned by GetApiAccessApplicationListResp.Validate if the designated
// constraints aren't met.
type GetApiAccessApplicationListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiAccessApplicationListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiAccessApplicationListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiAccessApplicationListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiAccessApplicationListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiAccessApplicationListRespValidationError) ErrorName() string {
	return "GetApiAccessApplicationListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetApiAccessApplicationListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiAccessApplicationListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiAccessApplicationListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiAccessApplicationListRespValidationError{}

// Validate checks the field values on UserAuthorizeAppReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserAuthorizeAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAuthorizeAppReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserAuthorizeAppReqMultiError, or nil if none found.
func (m *UserAuthorizeAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAuthorizeAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := UserAuthorizeAppReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuthorizationId

	if _, ok := _UserAuthorizeAppReq_Type_InLookup[m.GetType()]; !ok {
		err := UserAuthorizeAppReqValidationError{
			field:  "Type",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UserAuthorizeAppReq_AuthorizationStatus_InLookup[m.GetAuthorizationStatus()]; !ok {
		err := UserAuthorizeAppReqValidationError{
			field:  "AuthorizationStatus",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserAuthorizeAppReqMultiError(errors)
	}

	return nil
}

// UserAuthorizeAppReqMultiError is an error wrapping multiple validation
// errors returned by UserAuthorizeAppReq.ValidateAll() if the designated
// constraints aren't met.
type UserAuthorizeAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAuthorizeAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAuthorizeAppReqMultiError) AllErrors() []error { return m }

// UserAuthorizeAppReqValidationError is the validation error returned by
// UserAuthorizeAppReq.Validate if the designated constraints aren't met.
type UserAuthorizeAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAuthorizeAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAuthorizeAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAuthorizeAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAuthorizeAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAuthorizeAppReqValidationError) ErrorName() string {
	return "UserAuthorizeAppReqValidationError"
}

// Error satisfies the builtin error interface
func (e UserAuthorizeAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAuthorizeAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAuthorizeAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAuthorizeAppReqValidationError{}

var _UserAuthorizeAppReq_Type_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

var _UserAuthorizeAppReq_AuthorizationStatus_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on UserAuthorizeAppResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserAuthorizeAppResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAuthorizeAppResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserAuthorizeAppRespMultiError, or nil if none found.
func (m *UserAuthorizeAppResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAuthorizeAppResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAuthorizeAppRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAuthorizeAppRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAuthorizeAppRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserAuthorizeAppRespMultiError(errors)
	}

	return nil
}

// UserAuthorizeAppRespMultiError is an error wrapping multiple validation
// errors returned by UserAuthorizeAppResp.ValidateAll() if the designated
// constraints aren't met.
type UserAuthorizeAppRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAuthorizeAppRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAuthorizeAppRespMultiError) AllErrors() []error { return m }

// UserAuthorizeAppRespValidationError is the validation error returned by
// UserAuthorizeAppResp.Validate if the designated constraints aren't met.
type UserAuthorizeAppRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAuthorizeAppRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAuthorizeAppRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAuthorizeAppRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAuthorizeAppRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAuthorizeAppRespValidationError) ErrorName() string {
	return "UserAuthorizeAppRespValidationError"
}

// Error satisfies the builtin error interface
func (e UserAuthorizeAppRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAuthorizeAppResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAuthorizeAppRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAuthorizeAppRespValidationError{}

// Validate checks the field values on AppAuthorizedTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppAuthorizedTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppAuthorizedTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppAuthorizedTokenReqMultiError, or nil if none found.
func (m *AppAuthorizedTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AppAuthorizedTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := AppAuthorizedTokenReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AppAuthorizedTokenReqMultiError(errors)
	}

	return nil
}

// AppAuthorizedTokenReqMultiError is an error wrapping multiple validation
// errors returned by AppAuthorizedTokenReq.ValidateAll() if the designated
// constraints aren't met.
type AppAuthorizedTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppAuthorizedTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppAuthorizedTokenReqMultiError) AllErrors() []error { return m }

// AppAuthorizedTokenReqValidationError is the validation error returned by
// AppAuthorizedTokenReq.Validate if the designated constraints aren't met.
type AppAuthorizedTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppAuthorizedTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppAuthorizedTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppAuthorizedTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppAuthorizedTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppAuthorizedTokenReqValidationError) ErrorName() string {
	return "AppAuthorizedTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e AppAuthorizedTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppAuthorizedTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppAuthorizedTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppAuthorizedTokenReqValidationError{}

// Validate checks the field values on AppAuthorizedTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppAuthorizedTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppAuthorizedTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppAuthorizedTokenRespMultiError, or nil if none found.
func (m *AppAuthorizedTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AppAuthorizedTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppAuthorizedTokenRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppAuthorizedTokenRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppAuthorizedTokenRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppAuthorizedTokenRespMultiError(errors)
	}

	return nil
}

// AppAuthorizedTokenRespMultiError is an error wrapping multiple validation
// errors returned by AppAuthorizedTokenResp.ValidateAll() if the designated
// constraints aren't met.
type AppAuthorizedTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppAuthorizedTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppAuthorizedTokenRespMultiError) AllErrors() []error { return m }

// AppAuthorizedTokenRespValidationError is the validation error returned by
// AppAuthorizedTokenResp.Validate if the designated constraints aren't met.
type AppAuthorizedTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppAuthorizedTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppAuthorizedTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppAuthorizedTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppAuthorizedTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppAuthorizedTokenRespValidationError) ErrorName() string {
	return "AppAuthorizedTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e AppAuthorizedTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppAuthorizedTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppAuthorizedTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppAuthorizedTokenRespValidationError{}

// Validate checks the field values on GetUserAuthorizationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAuthorizationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAuthorizationsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAuthorizationsReqMultiError, or nil if none found.
func (m *GetUserAuthorizationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAuthorizationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserAuthorizationsReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageCurrent

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserAuthorizationsReqMultiError(errors)
	}

	return nil
}

// GetUserAuthorizationsReqMultiError is an error wrapping multiple validation
// errors returned by GetUserAuthorizationsReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserAuthorizationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAuthorizationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAuthorizationsReqMultiError) AllErrors() []error { return m }

// GetUserAuthorizationsReqValidationError is the validation error returned by
// GetUserAuthorizationsReq.Validate if the designated constraints aren't met.
type GetUserAuthorizationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAuthorizationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAuthorizationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAuthorizationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAuthorizationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAuthorizationsReqValidationError) ErrorName() string {
	return "GetUserAuthorizationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAuthorizationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAuthorizationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAuthorizationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAuthorizationsReqValidationError{}

// Validate checks the field values on UserAuthorization with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserAuthorization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAuthorization with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserAuthorizationMultiError, or nil if none found.
func (m *UserAuthorization) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAuthorization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorizationId

	// no validation rules for AccountId

	// no validation rules for UserId

	// no validation rules for Token

	// no validation rules for ExpiredAt

	// no validation rules for AuthorizationStatus

	// no validation rules for Status

	// no validation rules for ModifiedAt

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return UserAuthorizationMultiError(errors)
	}

	return nil
}

// UserAuthorizationMultiError is an error wrapping multiple validation errors
// returned by UserAuthorization.ValidateAll() if the designated constraints
// aren't met.
type UserAuthorizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAuthorizationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAuthorizationMultiError) AllErrors() []error { return m }

// UserAuthorizationValidationError is the validation error returned by
// UserAuthorization.Validate if the designated constraints aren't met.
type UserAuthorizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAuthorizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAuthorizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAuthorizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAuthorizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAuthorizationValidationError) ErrorName() string {
	return "UserAuthorizationValidationError"
}

// Error satisfies the builtin error interface
func (e UserAuthorizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAuthorization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAuthorizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAuthorizationValidationError{}

// Validate checks the field values on GetUserAuthorizationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAuthorizationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAuthorizationsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAuthorizationsRespMultiError, or nil if none found.
func (m *GetUserAuthorizationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAuthorizationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserAuthorizationsRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserAuthorizationsRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserAuthorizationsRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserAuthorizationsRespMultiError(errors)
	}

	return nil
}

// GetUserAuthorizationsRespMultiError is an error wrapping multiple validation
// errors returned by GetUserAuthorizationsResp.ValidateAll() if the
// designated constraints aren't met.
type GetUserAuthorizationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAuthorizationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAuthorizationsRespMultiError) AllErrors() []error { return m }

// GetUserAuthorizationsRespValidationError is the validation error returned by
// GetUserAuthorizationsResp.Validate if the designated constraints aren't met.
type GetUserAuthorizationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAuthorizationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAuthorizationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAuthorizationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAuthorizationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAuthorizationsRespValidationError) ErrorName() string {
	return "GetUserAuthorizationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAuthorizationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAuthorizationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAuthorizationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAuthorizationsRespValidationError{}

// Validate checks the field values on GatewayMiddilewareResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GatewayMiddilewareResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GatewayMiddilewareResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GatewayMiddilewareResp_DataMultiError, or nil if none found.
func (m *GatewayMiddilewareResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GatewayMiddilewareResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsPublic

	// no validation rules for NeedAuthorise

	// no validation rules for NeedUserAuthorise

	// no validation rules for NeedLogin

	// no validation rules for AccountId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GatewayMiddilewareResp_DataMultiError(errors)
	}

	return nil
}

// GatewayMiddilewareResp_DataMultiError is an error wrapping multiple
// validation errors returned by GatewayMiddilewareResp_Data.ValidateAll() if
// the designated constraints aren't met.
type GatewayMiddilewareResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GatewayMiddilewareResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GatewayMiddilewareResp_DataMultiError) AllErrors() []error { return m }

// GatewayMiddilewareResp_DataValidationError is the validation error returned
// by GatewayMiddilewareResp_Data.Validate if the designated constraints
// aren't met.
type GatewayMiddilewareResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayMiddilewareResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayMiddilewareResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayMiddilewareResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayMiddilewareResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayMiddilewareResp_DataValidationError) ErrorName() string {
	return "GatewayMiddilewareResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayMiddilewareResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayMiddilewareResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayMiddilewareResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayMiddilewareResp_DataValidationError{}

// Validate checks the field values on UserAuthorizeAppResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserAuthorizeAppResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAuthorizeAppResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserAuthorizeAppResp_DataMultiError, or nil if none found.
func (m *UserAuthorizeAppResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAuthorizeAppResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return UserAuthorizeAppResp_DataMultiError(errors)
	}

	return nil
}

// UserAuthorizeAppResp_DataMultiError is an error wrapping multiple validation
// errors returned by UserAuthorizeAppResp_Data.ValidateAll() if the
// designated constraints aren't met.
type UserAuthorizeAppResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAuthorizeAppResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAuthorizeAppResp_DataMultiError) AllErrors() []error { return m }

// UserAuthorizeAppResp_DataValidationError is the validation error returned by
// UserAuthorizeAppResp_Data.Validate if the designated constraints aren't met.
type UserAuthorizeAppResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAuthorizeAppResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAuthorizeAppResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAuthorizeAppResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAuthorizeAppResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAuthorizeAppResp_DataValidationError) ErrorName() string {
	return "UserAuthorizeAppResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UserAuthorizeAppResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAuthorizeAppResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAuthorizeAppResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAuthorizeAppResp_DataValidationError{}

// Validate checks the field values on AppAuthorizedTokenResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppAuthorizedTokenResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppAuthorizedTokenResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppAuthorizedTokenResp_DataMultiError, or nil if none found.
func (m *AppAuthorizedTokenResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AppAuthorizedTokenResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return AppAuthorizedTokenResp_DataMultiError(errors)
	}

	return nil
}

// AppAuthorizedTokenResp_DataMultiError is an error wrapping multiple
// validation errors returned by AppAuthorizedTokenResp_Data.ValidateAll() if
// the designated constraints aren't met.
type AppAuthorizedTokenResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppAuthorizedTokenResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppAuthorizedTokenResp_DataMultiError) AllErrors() []error { return m }

// AppAuthorizedTokenResp_DataValidationError is the validation error returned
// by AppAuthorizedTokenResp_Data.Validate if the designated constraints
// aren't met.
type AppAuthorizedTokenResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppAuthorizedTokenResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppAuthorizedTokenResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppAuthorizedTokenResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppAuthorizedTokenResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppAuthorizedTokenResp_DataValidationError) ErrorName() string {
	return "AppAuthorizedTokenResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AppAuthorizedTokenResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppAuthorizedTokenResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppAuthorizedTokenResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppAuthorizedTokenResp_DataValidationError{}

// Validate checks the field values on GetUserAuthorizationsResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAuthorizationsResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAuthorizationsResp_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserAuthorizationsResp_DataMultiError, or nil if none found.
func (m *GetUserAuthorizationsResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAuthorizationsResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserAuthorizationsResp_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserAuthorizationsResp_DataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserAuthorizationsResp_DataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserAuthorizationsResp_DataMultiError(errors)
	}

	return nil
}

// GetUserAuthorizationsResp_DataMultiError is an error wrapping multiple
// validation errors returned by GetUserAuthorizationsResp_Data.ValidateAll()
// if the designated constraints aren't met.
type GetUserAuthorizationsResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAuthorizationsResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAuthorizationsResp_DataMultiError) AllErrors() []error { return m }

// GetUserAuthorizationsResp_DataValidationError is the validation error
// returned by GetUserAuthorizationsResp_Data.Validate if the designated
// constraints aren't met.
type GetUserAuthorizationsResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAuthorizationsResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAuthorizationsResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAuthorizationsResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAuthorizationsResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAuthorizationsResp_DataValidationError) ErrorName() string {
	return "GetUserAuthorizationsResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAuthorizationsResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAuthorizationsResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAuthorizationsResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAuthorizationsResp_DataValidationError{}
