// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: merchantpb/merchant.proto

package merchantpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MerchantService_Method_FullMethodName         = "/daop.pb.merchantpb.MerchantService/Method"
	MerchantService_Recharge_FullMethodName       = "/daop.pb.merchantpb.MerchantService/Recharge"
	MerchantService_RechargeQuery_FullMethodName  = "/daop.pb.merchantpb.MerchantService/RechargeQuery"
	MerchantService_RechargeNotify_FullMethodName = "/daop.pb.merchantpb.MerchantService/RechargeNotify"
)

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantServiceClient interface {
	// Method Method方法
	Method(ctx context.Context, in *MethodIn, opts ...grpc.CallOption) (*MethodOut, error)
	// Recharge 商户充值
	Recharge(ctx context.Context, in *RechargeIn, opts ...grpc.CallOption) (*RechargeOut, error)
	// RechargeQuery 商户充值查询
	RechargeQuery(ctx context.Context, in *RechargeQueryIn, opts ...grpc.CallOption) (*RechargeQueryOut, error)
	// AppNotify 商户充值支付回调
	RechargeNotify(ctx context.Context, in *RechargeNotifyIn, opts ...grpc.CallOption) (*RechargeNotifyOut, error)
}

type merchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantServiceClient(cc grpc.ClientConnInterface) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) Method(ctx context.Context, in *MethodIn, opts ...grpc.CallOption) (*MethodOut, error) {
	out := new(MethodOut)
	err := c.cc.Invoke(ctx, MerchantService_Method_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) Recharge(ctx context.Context, in *RechargeIn, opts ...grpc.CallOption) (*RechargeOut, error) {
	out := new(RechargeOut)
	err := c.cc.Invoke(ctx, MerchantService_Recharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) RechargeQuery(ctx context.Context, in *RechargeQueryIn, opts ...grpc.CallOption) (*RechargeQueryOut, error) {
	out := new(RechargeQueryOut)
	err := c.cc.Invoke(ctx, MerchantService_RechargeQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) RechargeNotify(ctx context.Context, in *RechargeNotifyIn, opts ...grpc.CallOption) (*RechargeNotifyOut, error) {
	out := new(RechargeNotifyOut)
	err := c.cc.Invoke(ctx, MerchantService_RechargeNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
// All implementations should embed UnimplementedMerchantServiceServer
// for forward compatibility
type MerchantServiceServer interface {
	// Method Method方法
	Method(context.Context, *MethodIn) (*MethodOut, error)
	// Recharge 商户充值
	Recharge(context.Context, *RechargeIn) (*RechargeOut, error)
	// RechargeQuery 商户充值查询
	RechargeQuery(context.Context, *RechargeQueryIn) (*RechargeQueryOut, error)
	// AppNotify 商户充值支付回调
	RechargeNotify(context.Context, *RechargeNotifyIn) (*RechargeNotifyOut, error)
}

// UnimplementedMerchantServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMerchantServiceServer struct {
}

func (UnimplementedMerchantServiceServer) Method(context.Context, *MethodIn) (*MethodOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method not implemented")
}
func (UnimplementedMerchantServiceServer) Recharge(context.Context, *RechargeIn) (*RechargeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recharge not implemented")
}
func (UnimplementedMerchantServiceServer) RechargeQuery(context.Context, *RechargeQueryIn) (*RechargeQueryOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeQuery not implemented")
}
func (UnimplementedMerchantServiceServer) RechargeNotify(context.Context, *RechargeNotifyIn) (*RechargeNotifyOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeNotify not implemented")
}

// UnsafeMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServiceServer will
// result in compilation errors.
type UnsafeMerchantServiceServer interface {
	mustEmbedUnimplementedMerchantServiceServer()
}

func RegisterMerchantServiceServer(s grpc.ServiceRegistrar, srv MerchantServiceServer) {
	s.RegisterService(&MerchantService_ServiceDesc, srv)
}

func _MerchantService_Method_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Method(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_Method_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Method(ctx, req.(*MethodIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_Recharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Recharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_Recharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Recharge(ctx, req.(*RechargeIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_RechargeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeQueryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).RechargeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_RechargeQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).RechargeQuery(ctx, req.(*RechargeQueryIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_RechargeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeNotifyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).RechargeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_RechargeNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).RechargeNotify(ctx, req.(*RechargeNotifyIn))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantService_ServiceDesc is the grpc.ServiceDesc for MerchantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daop.pb.merchantpb.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Method",
			Handler:    _MerchantService_Method_Handler,
		},
		{
			MethodName: "Recharge",
			Handler:    _MerchantService_Recharge_Handler,
		},
		{
			MethodName: "RechargeQuery",
			Handler:    _MerchantService_RechargeQuery_Handler,
		},
		{
			MethodName: "RechargeNotify",
			Handler:    _MerchantService_RechargeNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchantpb/merchant.proto",
}
