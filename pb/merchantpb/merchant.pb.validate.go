// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: merchantpb/merchant.proto

package merchantpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MethodIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MethodIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MethodIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MethodInMultiError, or nil
// if none found.
func (m *MethodIn) ValidateAll() error {
	return m.validate(true)
}

func (m *MethodIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return MethodInMultiError(errors)
	}

	return nil
}

// MethodInMultiError is an error wrapping multiple validation errors returned
// by MethodIn.ValidateAll() if the designated constraints aren't met.
type MethodInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MethodInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MethodInMultiError) AllErrors() []error { return m }

// MethodInValidationError is the validation error returned by
// MethodIn.Validate if the designated constraints aren't met.
type MethodInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MethodInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MethodInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MethodInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MethodInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MethodInValidationError) ErrorName() string { return "MethodInValidationError" }

// Error satisfies the builtin error interface
func (e MethodInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMethodIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MethodInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MethodInValidationError{}

// Validate checks the field values on MethodOut with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MethodOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MethodOut with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MethodOutMultiError, or nil
// if none found.
func (m *MethodOut) ValidateAll() error {
	return m.validate(true)
}

func (m *MethodOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MethodOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MethodOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MethodOutValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MethodOutMultiError(errors)
	}

	return nil
}

// MethodOutMultiError is an error wrapping multiple validation errors returned
// by MethodOut.ValidateAll() if the designated constraints aren't met.
type MethodOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MethodOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MethodOutMultiError) AllErrors() []error { return m }

// MethodOutValidationError is the validation error returned by
// MethodOut.Validate if the designated constraints aren't met.
type MethodOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MethodOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MethodOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MethodOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MethodOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MethodOutValidationError) ErrorName() string { return "MethodOutValidationError" }

// Error satisfies the builtin error interface
func (e MethodOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMethodOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MethodOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MethodOutValidationError{}

// Validate checks the field values on RechargeIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RechargeIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RechargeInMultiError, or
// nil if none found.
func (m *RechargeIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSubject()) < 1 {
		err := RechargeInValidationError{
			field:  "Subject",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalAmount() <= 0 {
		err := RechargeInValidationError{
			field:  "TotalAmount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetReturnUrl()); err != nil {
		err = RechargeInValidationError{
			field:  "ReturnUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := RechargeInValidationError{
			field:  "ReturnUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Extra

	if len(errors) > 0 {
		return RechargeInMultiError(errors)
	}

	return nil
}

// RechargeInMultiError is an error wrapping multiple validation errors
// returned by RechargeIn.ValidateAll() if the designated constraints aren't met.
type RechargeInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeInMultiError) AllErrors() []error { return m }

// RechargeInValidationError is the validation error returned by
// RechargeIn.Validate if the designated constraints aren't met.
type RechargeInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeInValidationError) ErrorName() string { return "RechargeInValidationError" }

// Error satisfies the builtin error interface
func (e RechargeInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeInValidationError{}

// Validate checks the field values on RechargeOut with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RechargeOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeOut with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RechargeOutMultiError, or
// nil if none found.
func (m *RechargeOut) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RechargeOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RechargeOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RechargeOutValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RechargeOutMultiError(errors)
	}

	return nil
}

// RechargeOutMultiError is an error wrapping multiple validation errors
// returned by RechargeOut.ValidateAll() if the designated constraints aren't met.
type RechargeOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeOutMultiError) AllErrors() []error { return m }

// RechargeOutValidationError is the validation error returned by
// RechargeOut.Validate if the designated constraints aren't met.
type RechargeOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeOutValidationError) ErrorName() string { return "RechargeOutValidationError" }

// Error satisfies the builtin error interface
func (e RechargeOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeOutValidationError{}

// Validate checks the field values on RechargeQueryIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RechargeQueryIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeQueryIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RechargeQueryInMultiError, or nil if none found.
func (m *RechargeQueryIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeQueryIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOutTradeNo()) < 1 {
		err := RechargeQueryInValidationError{
			field:  "OutTradeNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RechargeQueryInMultiError(errors)
	}

	return nil
}

// RechargeQueryInMultiError is an error wrapping multiple validation errors
// returned by RechargeQueryIn.ValidateAll() if the designated constraints
// aren't met.
type RechargeQueryInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeQueryInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeQueryInMultiError) AllErrors() []error { return m }

// RechargeQueryInValidationError is the validation error returned by
// RechargeQueryIn.Validate if the designated constraints aren't met.
type RechargeQueryInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeQueryInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeQueryInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeQueryInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeQueryInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeQueryInValidationError) ErrorName() string { return "RechargeQueryInValidationError" }

// Error satisfies the builtin error interface
func (e RechargeQueryInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeQueryIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeQueryInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeQueryInValidationError{}

// Validate checks the field values on RechargeQueryOut with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RechargeQueryOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeQueryOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RechargeQueryOutMultiError, or nil if none found.
func (m *RechargeQueryOut) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeQueryOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RechargeQueryOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RechargeQueryOutValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RechargeQueryOutValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RechargeQueryOutMultiError(errors)
	}

	return nil
}

// RechargeQueryOutMultiError is an error wrapping multiple validation errors
// returned by RechargeQueryOut.ValidateAll() if the designated constraints
// aren't met.
type RechargeQueryOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeQueryOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeQueryOutMultiError) AllErrors() []error { return m }

// RechargeQueryOutValidationError is the validation error returned by
// RechargeQueryOut.Validate if the designated constraints aren't met.
type RechargeQueryOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeQueryOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeQueryOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeQueryOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeQueryOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeQueryOutValidationError) ErrorName() string { return "RechargeQueryOutValidationError" }

// Error satisfies the builtin error interface
func (e RechargeQueryOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeQueryOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeQueryOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeQueryOutValidationError{}

// Validate checks the field values on RechargeNotifyIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RechargeNotifyIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeNotifyIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RechargeNotifyInMultiError, or nil if none found.
func (m *RechargeNotifyIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeNotifyIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotifyType

	// no validation rules for Id

	// no validation rules for PayChannel

	// no validation rules for MerchantNo

	// no validation rules for Result

	// no validation rules for Msg

	// no validation rules for NotifiedAt

	// no validation rules for OutTradeNo

	// no validation rules for Amount

	// no validation rules for PaidAt

	// no validation rules for Extra

	if len(errors) > 0 {
		return RechargeNotifyInMultiError(errors)
	}

	return nil
}

// RechargeNotifyInMultiError is an error wrapping multiple validation errors
// returned by RechargeNotifyIn.ValidateAll() if the designated constraints
// aren't met.
type RechargeNotifyInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeNotifyInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeNotifyInMultiError) AllErrors() []error { return m }

// RechargeNotifyInValidationError is the validation error returned by
// RechargeNotifyIn.Validate if the designated constraints aren't met.
type RechargeNotifyInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeNotifyInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeNotifyInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeNotifyInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeNotifyInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeNotifyInValidationError) ErrorName() string { return "RechargeNotifyInValidationError" }

// Error satisfies the builtin error interface
func (e RechargeNotifyInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeNotifyIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeNotifyInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeNotifyInValidationError{}

// Validate checks the field values on RechargeNotifyOut with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RechargeNotifyOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeNotifyOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RechargeNotifyOutMultiError, or nil if none found.
func (m *RechargeNotifyOut) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeNotifyOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return RechargeNotifyOutMultiError(errors)
	}

	return nil
}

// RechargeNotifyOutMultiError is an error wrapping multiple validation errors
// returned by RechargeNotifyOut.ValidateAll() if the designated constraints
// aren't met.
type RechargeNotifyOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeNotifyOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeNotifyOutMultiError) AllErrors() []error { return m }

// RechargeNotifyOutValidationError is the validation error returned by
// RechargeNotifyOut.Validate if the designated constraints aren't met.
type RechargeNotifyOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeNotifyOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeNotifyOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeNotifyOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeNotifyOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeNotifyOutValidationError) ErrorName() string {
	return "RechargeNotifyOutValidationError"
}

// Error satisfies the builtin error interface
func (e RechargeNotifyOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeNotifyOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeNotifyOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeNotifyOutValidationError{}

// Validate checks the field values on MethodOut_Data with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MethodOut_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MethodOut_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MethodOut_DataMultiError,
// or nil if none found.
func (m *MethodOut_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *MethodOut_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return MethodOut_DataMultiError(errors)
	}

	return nil
}

// MethodOut_DataMultiError is an error wrapping multiple validation errors
// returned by MethodOut_Data.ValidateAll() if the designated constraints
// aren't met.
type MethodOut_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MethodOut_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MethodOut_DataMultiError) AllErrors() []error { return m }

// MethodOut_DataValidationError is the validation error returned by
// MethodOut_Data.Validate if the designated constraints aren't met.
type MethodOut_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MethodOut_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MethodOut_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MethodOut_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MethodOut_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MethodOut_DataValidationError) ErrorName() string { return "MethodOut_DataValidationError" }

// Error satisfies the builtin error interface
func (e MethodOut_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMethodOut_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MethodOut_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MethodOut_DataValidationError{}

// Validate checks the field values on RechargeOut_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RechargeOut_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RechargeOut_DataMultiError, or nil if none found.
func (m *RechargeOut_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeOut_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PayChannel

	// no validation rules for PayScene

	// no validation rules for MerchantNo

	// no validation rules for TradeNo

	// no validation rules for OutTradeNo

	// no validation rules for PcUrl

	if len(errors) > 0 {
		return RechargeOut_DataMultiError(errors)
	}

	return nil
}

// RechargeOut_DataMultiError is an error wrapping multiple validation errors
// returned by RechargeOut_Data.ValidateAll() if the designated constraints
// aren't met.
type RechargeOut_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeOut_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeOut_DataMultiError) AllErrors() []error { return m }

// RechargeOut_DataValidationError is the validation error returned by
// RechargeOut_Data.Validate if the designated constraints aren't met.
type RechargeOut_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeOut_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeOut_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeOut_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeOut_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeOut_DataValidationError) ErrorName() string { return "RechargeOut_DataValidationError" }

// Error satisfies the builtin error interface
func (e RechargeOut_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeOut_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeOut_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeOut_DataValidationError{}

// Validate checks the field values on RechargeQueryOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RechargeQueryOut_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RechargeQueryOut_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RechargeQueryOut_DataMultiError, or nil if none found.
func (m *RechargeQueryOut_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *RechargeQueryOut_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OutTradeNo

	// no validation rules for Status

	if len(errors) > 0 {
		return RechargeQueryOut_DataMultiError(errors)
	}

	return nil
}

// RechargeQueryOut_DataMultiError is an error wrapping multiple validation
// errors returned by RechargeQueryOut_Data.ValidateAll() if the designated
// constraints aren't met.
type RechargeQueryOut_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RechargeQueryOut_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RechargeQueryOut_DataMultiError) AllErrors() []error { return m }

// RechargeQueryOut_DataValidationError is the validation error returned by
// RechargeQueryOut_Data.Validate if the designated constraints aren't met.
type RechargeQueryOut_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RechargeQueryOut_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RechargeQueryOut_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RechargeQueryOut_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RechargeQueryOut_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RechargeQueryOut_DataValidationError) ErrorName() string {
	return "RechargeQueryOut_DataValidationError"
}

// Error satisfies the builtin error interface
func (e RechargeQueryOut_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRechargeQueryOut_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RechargeQueryOut_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RechargeQueryOut_DataValidationError{}
